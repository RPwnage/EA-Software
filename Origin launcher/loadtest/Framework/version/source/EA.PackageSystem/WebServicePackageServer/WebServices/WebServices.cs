// Originally based on NAnt - A .NET build tool
// Copyright (C) 2003-2018 Electronic Arts Inc.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// 
// As a special exception, the copyright holders of this software give you 
// permission to link the assemblies with independent modules to produce 
// new assemblies, regardless of the license terms of these independent 
// modules, and to copy and distribute the resulting assemblies under terms 
// of your choice, provided that you also meet, for each linked independent 
// module, the terms and conditions of the license of that module. An 
// independent module is a module which is not derived from or based 
// on these assemblies. If you modify this software, you may extend 
// this exception to your version of the software, but you are not 
// obligated to do so. If you do not wish to do so, delete this exception 
// statement from your version. 
// 
// Electronic Arts (Frostbite.Team.CM@ea.com)

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 

using System.Threading.Tasks;

namespace EA.PackageSystem.PackageCore.Services
{
	using System.Diagnostics;
	using System.ComponentModel;
	using System;
	using System.Xml.Serialization;
	using NAnt.Core.PackageCore;
	using NAnt.Core;
	using System.Linq;

#if NETFRAMEWORK
	using System.Web.Services;
	using System.Web.Services.Protocols;

	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "WebServiceSoap", Namespace = "http://EATechNet.MOSS.Packages.Services/")]
	public partial class WebServices : System.Web.Services.Protocols.SoapHttpClientProtocol, IWebServices
	{
		private System.Threading.SendOrPostCallback GetReleaseOperationCompleted;

		private System.Threading.SendOrPostCallback GetPackageReleasesOperationCompleted;

		private System.Threading.SendOrPostCallback GetAllReleasesOperationCompleted;

		private System.Threading.SendOrPostCallback PostPackageOperationCompleted;

		private readonly int PostPackageTimeoutMs = 8800000; // 120 minutes should be enough to upload most of the packages


		/// <remarks/>
		public WebServices()
		{
			string urlSetting = System.Configuration.ConfigurationManager.AppSettings["WebServicesURL"];
			this.Url = urlSetting ?? "https://packages.ea.com/webservice.asmx";

			string postTimeout = System.Configuration.ConfigurationManager.AppSettings["PostPackageTimeoutMs"];
			if (!string.IsNullOrEmpty(postTimeout))
			{
				try
				{
					PostPackageTimeoutMs = int.Parse(postTimeout);
				}
				catch
				{
					Console.WriteLine($"Failed to parse PostPackageTimeoutMs setting, falling back to default value of {PostPackageTimeoutMs}ms");
				}
			}
		}

		/// <remarks/>
		public event GetReleaseCompletedEventHandler GetReleaseCompleted;

		/// <remarks/>
		public event GetPackageReleasesCompletedEventHandler GetPackageReleasesCompleted;

		/// <remarks/>
		public event GetAllReleasesCompletedEventHandler GetAllReleasesCompleted;

		/// <remarks/>
		public event PostPackageCompletedEventHandler PostPackageCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://EATechNet.MOSS.Packages.Services/GetRelease", RequestNamespace = "http://EATechNet.MOSS.Packages.Services/", ResponseNamespace = "http://EATechNet.MOSS.Packages.Services/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public Release GetRelease(string name, string version)
		{
			object[] results = this.Invoke("GetRelease", new object[] {
					name,
					version});
			return ((Release)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetRelease(string name, string version, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetRelease", new object[] {
					name,
					version}, callback, asyncState);
		}

		/// <remarks/>
		public Release EndGetRelease(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((Release)(results[0]));
		}

		/// <remarks/>
		public void GetReleaseAsync(string name, string version)
		{
			this.GetReleaseAsync(name, version, null);
		}

		/// <remarks/>
		public void GetReleaseAsync(string name, string version, object userState)
		{
			if ((this.GetReleaseOperationCompleted == null))
			{
				this.GetReleaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReleaseOperationCompleted);
			}
			this.InvokeAsync("GetRelease", new object[] {
					name,
					version}, this.GetReleaseOperationCompleted, userState);
		}

		private void OnGetReleaseOperationCompleted(object arg)
		{
			if ((this.GetReleaseCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetReleaseCompleted(this, new GetReleaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://EATechNet.MOSS.Packages.Services/GetPackageReleases", RequestNamespace = "http://EATechNet.MOSS.Packages.Services/", ResponseNamespace = "http://EATechNet.MOSS.Packages.Services/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public Release[] GetPackageReleases(string name)
		{
			object[] results = this.Invoke("GetPackageReleases", new object[] {
					name});
			return ((Release[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetPackageReleases(string name, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetPackageReleases", new object[] {
					name}, callback, asyncState);
		}

		/// <remarks/>
		public Release[] EndGetPackageReleases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((Release[])(results[0]));
		}

		/// <remarks/>
		public void GetPackageReleasesAsync(string name)
		{
			this.GetPackageReleasesAsync(name, null);
		}

		/// <remarks/>
		public void GetPackageReleasesAsync(string name, object userState)
		{
			if ((this.GetPackageReleasesOperationCompleted == null))
			{
				this.GetPackageReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPackageReleasesOperationCompleted);
			}
			this.InvokeAsync("GetPackageReleases", new object[] {
					name}, this.GetPackageReleasesOperationCompleted, userState);
		}

		private void OnGetPackageReleasesOperationCompleted(object arg)
		{
			if ((this.GetPackageReleasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetPackageReleasesCompleted(this, new GetPackageReleasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://EATechNet.MOSS.Packages.Services/GetAllReleases", RequestNamespace = "http://EATechNet.MOSS.Packages.Services/", ResponseNamespace = "http://EATechNet.MOSS.Packages.Services/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public Release[] GetAllReleases()
		{
			object[] results = this.Invoke("GetAllReleases", new object[0]);
			return ((Release[])(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginGetAllReleases(System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("GetAllReleases", new object[0], callback, asyncState);
		}

		/// <remarks/>
		public Release[] EndGetAllReleases(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((Release[])(results[0]));
		}

		/// <remarks/>
		public void GetAllReleasesAsync()
		{
			this.GetAllReleasesAsync(null);
		}

		/// <remarks/>
		public void GetAllReleasesAsync(object userState)
		{
			if ((this.GetAllReleasesOperationCompleted == null))
			{
				this.GetAllReleasesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllReleasesOperationCompleted);
			}
			this.InvokeAsync("GetAllReleases", new object[0], this.GetAllReleasesOperationCompleted, userState);
		}

		private void OnGetAllReleasesOperationCompleted(object arg)
		{
			if ((this.GetAllReleasesCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.GetAllReleasesCompleted(this, new GetAllReleasesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://EATechNet.MOSS.Packages.Services/PostPackage", RequestNamespace = "http://EATechNet.MOSS.Packages.Services/", ResponseNamespace = "http://EATechNet.MOSS.Packages.Services/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public string PostPackage(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account)
		{
			this.Timeout = PostPackageTimeoutMs;
			object[] results = this.Invoke("PostPackage", new object[] {
					fileName,
					uncName,
					changes,
					statusId,
					statusComment,
					requiredReleases,
					account});
			return ((string)(results[0]));
		}

		/// <remarks/>
		public System.IAsyncResult BeginPostPackage(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account, System.AsyncCallback callback, object asyncState)
		{
			return this.BeginInvoke("PostPackage", new object[] {
					fileName,
					uncName,
					changes,
					statusId,
					statusComment,
					requiredReleases, 
					account}, callback, asyncState);
		}

		/// <remarks/>
		public string EndPostPackage(System.IAsyncResult asyncResult)
		{
			object[] results = this.EndInvoke(asyncResult);
			return ((string)(results[0]));
		}

		/// <remarks/>
		public void PostPackageAsync(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account)
		{
			this.PostPackageAsync(fileName, uncName, changes, statusId, statusComment, requiredReleases, account, null);
		}

		/// <remarks/>
		public void PostPackageAsync(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account, object userState)
		{
			if ((this.PostPackageOperationCompleted == null))
			{
				this.PostPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostPackageOperationCompleted);
			}
			this.InvokeAsync("PostPackage", new object[] {
					fileName,
					uncName,
					changes,
					statusId,
					statusComment,
					requiredReleases,
					account}, this.PostPackageOperationCompleted, userState);
		}

		private void OnPostPackageOperationCompleted(object arg)
		{
			if ((this.PostPackageCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.PostPackageCompleted(this, new PostPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}

		public Task<ReleaseBase[]> GetPackageReleasesV2(string name)
		{
			Task<ReleaseBase[]> getPackages = Task <ReleaseBase[]>.Factory.StartNew(() =>
			{
				return GetPackageReleases(name);
			});
			return getPackages;
		}

		public string PostPackageV2OrGetError(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account)
		{
			return PostPackage(fileName, uncName, changes, statusId, statusComment, requiredReleases, account);
		}

		public bool UsingNewPackageServer() => false;

		public Task<ReleaseBase> GetReleaseV2(string name, string version)
		{
			Task<ReleaseBase> getPackages = Task<ReleaseBase>.Factory.StartNew(() => GetRelease(name, version));
			return getPackages;
		}

		public Task<string> GetDownloadUrl(string name, string version)
		{
			string webUrl = "https://packages.worldwide.ea.com";
			try
			{
				string appConfigWebUrl = System.Configuration.ConfigurationManager.AppSettings["PkgDownloadUrlHost"];
				if (!appConfigWebUrl.IsNullOrEmpty())
				{
					webUrl = appConfigWebUrl;
				}
			}
			catch
			{
			}

			if (!webUrl.EndsWith("/"))
			{
				webUrl = webUrl + "/";
			}

			Task<string> getDownloadUrl = Task<string>.Factory.StartNew(() => $"{webUrl}packages/{name}/{name}-{version}.zip");
			return getDownloadUrl;
		}

		// No api supporting this command to create a new package - packages are created automatically if a release for a new package is made using PostPackage
		public bool CreateNewPackage(string packageName, string manifestContents)
		{
			throw new NotImplementedException();
		}

		public bool EditPackageStatus(string package, string release, string status)
		{
			throw new NotImplementedException();
		}
	}
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://EATechNet.MOSS.Packages.Services/")]
	public partial class Release : ReleaseBase
	{

		private int releaseIdField;


		private int frameworkVersionField;

		private string changesField;

		private int statusIdField;

		private string statusCommentField;

		private System.DateTime dateCreatedField;

		private string documentationUrlField;

		private string postNameField;

		private string postEmailField;

		private string summaryField;

		private string descriptionField;

		private string contactNameField;

		private string contactEmailField;

		private string licenseNameField;

		private int licenseSortOrderField;

		private string licenseCommentField;

		private int statusSortOrderField;

		private string releaseUrlField;

		private string packageUrlField;

		private string installUrlField;

		/// <remarks/>
		public int ReleaseId
		{
			get
			{
				return this.releaseIdField;
			}
			set
			{
				this.releaseIdField = value;
			}
		}
		
		/// <remarks/>
		public int FrameworkVersion
		{
			get
			{
				return this.frameworkVersionField;
			}
			set
			{
				this.frameworkVersionField = value;
			}
		}

		/// <remarks/>
		public string Changes
		{
			get
			{
				return this.changesField;
			}
			set
			{
				this.changesField = value;
			}
		}

		/// <remarks/>
		public int StatusId
		{
			get
			{
				return this.statusIdField;
			}
			set
			{
				this.statusIdField = value;
			}
		}

		/// <remarks/>
		public string StatusComment
		{
			get
			{
				return this.statusCommentField;
			}
			set
			{
				this.statusCommentField = value;
			}
		}

		/// <remarks/>
		public System.DateTime DateCreated
		{
			get
			{
				return this.dateCreatedField;
			}
			set
			{
				this.dateCreatedField = value;
			}
		}

		/// <remarks/>
		public string DocumentationUrl
		{
			get
			{
				return this.documentationUrlField;
			}
			set
			{
				this.documentationUrlField = value;
			}
		}

		/// <remarks/>
		public string PostName
		{
			get
			{
				return this.postNameField;
			}
			set
			{
				this.postNameField = value;
			}
		}

		/// <remarks/>
		public string PostEmail
		{
			get
			{
				return this.postEmailField;
			}
			set
			{
				this.postEmailField = value;
			}
		}

		/// <remarks/>
		public string Summary
		{
			get
			{
				return this.summaryField;
			}
			set
			{
				this.summaryField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		public string ContactName
		{
			get
			{
				return this.contactNameField;
			}
			set
			{
				this.contactNameField = value;
			}
		}

		/// <remarks/>
		public string ContactEmail
		{
			get
			{
				return this.contactEmailField;
			}
			set
			{
				this.contactEmailField = value;
			}
		}

		/// <remarks/>
		public string LicenseName
		{
			get
			{
				return this.licenseNameField;
			}
			set
			{
				this.licenseNameField = value;
			}
		}

		/// <remarks/>
		public int LicenseSortOrder
		{
			get
			{
				return this.licenseSortOrderField;
			}
			set
			{
				this.licenseSortOrderField = value;
			}
		}

		/// <remarks/>
		public string LicenseComment
		{
			get
			{
				return this.licenseCommentField;
			}
			set
			{
				this.licenseCommentField = value;
			}
		}

		/// <remarks/>
		public int StatusSortOrder
		{
			get
			{
				return this.statusSortOrderField;
			}
			set
			{
				this.statusSortOrderField = value;
			}
		}

		/// <remarks/>
		public string ReleaseUrl
		{
			get
			{
				return this.releaseUrlField;
			}
			set
			{
				this.releaseUrlField = value;
			}
		}

		/// <remarks/>
		public string PackageUrl
		{
			get
			{
				return this.packageUrlField;
			}
			set
			{
				this.packageUrlField = value;
			}
		}

		/// <remarks/>
		public string InstallUrl
		{
			get
			{
				return this.installUrlField;
			}
			set
			{
				this.installUrlField = value;
			}
		}
	}
	
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.SerializableAttribute()]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://EATechNet.MOSS.Packages.Services/")]
	public partial class Package
	{

		private string summaryField;

		private string nameField;

		private string descriptionField;

		private string contactNameField;

		private string contactEmailField;

		private int licenseIdField;

		private string licenseCommentField;

		private string homePageUrlField;

		private string packageUrlField;

		private System.DateTime dateCreatedField;

		private int licenseSortOrderField;

		private string licenseNameField;

		/// <remarks/>
		public string Summary
		{
			get
			{
				return this.summaryField;
			}
			set
			{
				this.summaryField = value;
			}
		}

		/// <remarks/>
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		public string ContactName
		{
			get
			{
				return this.contactNameField;
			}
			set
			{
				this.contactNameField = value;
			}
		}

		/// <remarks/>
		public string ContactEmail
		{
			get
			{
				return this.contactEmailField;
			}
			set
			{
				this.contactEmailField = value;
			}
		}

		/// <remarks/>
		public int LicenseId
		{
			get
			{
				return this.licenseIdField;
			}
			set
			{
				this.licenseIdField = value;
			}
		}

		/// <remarks/>
		public string LicenseComment
		{
			get
			{
				return this.licenseCommentField;
			}
			set
			{
				this.licenseCommentField = value;
			}
		}

		/// <remarks/>
		public string HomePageUrl
		{
			get
			{
				return this.homePageUrlField;
			}
			set
			{
				this.homePageUrlField = value;
			}
		}

		/// <remarks/>
		public string PackageUrl
		{
			get
			{
				return this.packageUrlField;
			}
			set
			{
				this.packageUrlField = value;
			}
		}

		/// <remarks/>
		public System.DateTime DateCreated
		{
			get
			{
				return this.dateCreatedField;
			}
			set
			{
				this.dateCreatedField = value;
			}
		}

		/// <remarks/>
		public int LicenseSortOrder
		{
			get
			{
				return this.licenseSortOrderField;
			}
			set
			{
				this.licenseSortOrderField = value;
			}
		}

		/// <remarks/>
		public string LicenseName
		{
			get
			{
				return this.licenseNameField;
			}
			set
			{
				this.licenseNameField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetReleaseCompletedEventHandler(object sender, GetReleaseCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetReleaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetReleaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Release Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Release)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetPackageCompletedEventHandler(object sender, GetPackageCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Package Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Package)(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetPackageReleasesCompletedEventHandler(object sender, GetPackageReleasesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetPackageReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetPackageReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Release[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Release[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetReleaseDependentsCompletedEventHandler(object sender, GetReleaseDependentsCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetReleaseDependentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetReleaseDependentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Release[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Release[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetAllPackagesCompletedEventHandler(object sender, GetAllPackagesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAllPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAllPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Package[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Package[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void GetAllReleasesCompletedEventHandler(object sender, GetAllReleasesCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class GetAllReleasesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal GetAllReleasesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public Release[] Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((Release[])(this.results[0]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	public delegate void PostPackageCompletedEventHandler(object sender, PostPackageCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class PostPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{

		private object[] results;

		internal PostPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState)
			:
				base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public string Result
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((string)(this.results[0]));
			}
		}
	}

#else

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://EATechNet.MOSS.Packages.Services/")]
	public partial class Package
	{

		private int packageIdField;

		private string summaryField;

		private string nameField;

		private string descriptionField;

		private string contactNameField;

		private string contactEmailField;

		private int licenseIdField;

		private string licenseCommentField;

		private string homePageUrlField;

		private string packageUrlField;

		private string tagsField;

		private System.DateTime dateCreatedField;

		private int licenseSortOrderField;

		private string licenseNameField;

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 0)]
		public int PackageId
		{
			get
			{
				return this.packageIdField;
			}
			set
			{
				this.packageIdField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 1)]
		public string Summary
		{
			get
			{
				return this.summaryField;
			}
			set
			{
				this.summaryField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 2)]
		public string Name
		{
			get
			{
				return this.nameField;
			}
			set
			{
				this.nameField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 3)]
		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 4)]
		public string ContactName
		{
			get
			{
				return this.contactNameField;
			}
			set
			{
				this.contactNameField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 5)]
		public string ContactEmail
		{
			get
			{
				return this.contactEmailField;
			}
			set
			{
				this.contactEmailField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 6)]
		public int LicenseId
		{
			get
			{
				return this.licenseIdField;
			}
			set
			{
				this.licenseIdField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 7)]
		public string LicenseComment
		{
			get
			{
				return this.licenseCommentField;
			}
			set
			{
				this.licenseCommentField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 8)]
		public string HomePageUrl
		{
			get
			{
				return this.homePageUrlField;
			}
			set
			{
				this.homePageUrlField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 9)]
		public string PackageUrl
		{
			get
			{
				return this.packageUrlField;
			}
			set
			{
				this.packageUrlField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 10)]
		public string Tags
		{
			get
			{
				return this.tagsField;
			}
			set
			{
				this.tagsField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 11)]
		public System.DateTime DateCreated
		{
			get
			{
				return this.dateCreatedField;
			}
			set
			{
				this.dateCreatedField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 12)]
		public int LicenseSortOrder
		{
			get
			{
				return this.licenseSortOrderField;
			}
			set
			{
				this.licenseSortOrderField = value;
			}
		}

		/// <remarks/>
		[System.Xml.Serialization.XmlElementAttribute(Order = 13)]
		public string LicenseName
		{
			get
			{
				return this.licenseNameField;
			}
			set
			{
				this.licenseNameField = value;
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://EATechNet.MOSS.Packages.Services/")]
	public partial class Release : ReleaseBase
	{

		private int releaseIdField;

		private int frameworkVersionField;

		private string changesField;

		private int statusIdField;

		private bool statusIdFieldSpecified;

		private string statusCommentField;

		private System.DateTime dateCreatedField;

		private string documentationUrlField;

		private string postNameField;

		private string postEmailField;

		private string summaryField;

		private string descriptionField;

		private string contactNameField;

		private string contactEmailField;

		private string licenseNameField;

		private int licenseSortOrderField;

		private string licenseCommentField;

		private int statusSortOrderField;

		private string releaseUrlField;

		private string packageUrlField;

		private string installUrlField;

		public int ReleaseId
		{
			get
			{
				return this.releaseIdField;
			}
			set
			{
				this.releaseIdField = value;
			}
		}

		public int FrameworkVersion
		{
			get
			{
				return this.frameworkVersionField;
			}
			set
			{
				this.frameworkVersionField = value;
			}
		}

		public string Changes
		{
			get
			{
				return this.changesField;
			}
			set
			{
				this.changesField = value;
			}
		}

		public int StatusId
		{
			get
			{
				return this.statusIdField;
			}
			set
			{
				this.statusIdField = value;
			}
		}

		public bool StatusIdSpecified
		{
			get
			{
				return this.statusIdFieldSpecified;
			}
			set
			{
				this.statusIdFieldSpecified = value;
			}
		}

		public string StatusComment
		{
			get
			{
				return this.statusCommentField;
			}
			set
			{
				this.statusCommentField = value;
			}
		}

		public System.DateTime DateCreated
		{
			get
			{
				return this.dateCreatedField;
			}
			set
			{
				this.dateCreatedField = value;
			}
		}

		public string DocumentationUrl
		{
			get
			{
				return this.documentationUrlField;
			}
			set
			{
				this.documentationUrlField = value;
			}
		}

		public string PostName
		{
			get
			{
				return this.postNameField;
			}
			set
			{
				this.postNameField = value;
			}
		}

		public string PostEmail
		{
			get
			{
				return this.postEmailField;
			}
			set
			{
				this.postEmailField = value;
			}
		}

		public new string Name
		{
			get
			{
				return base.Name;
			}
			set
			{
				base.Name = value;
			}
		}

		public string Summary
		{
			get
			{
				return this.summaryField;
			}
			set
			{
				this.summaryField = value;
			}
		}

		public string Description
		{
			get
			{
				return this.descriptionField;
			}
			set
			{
				this.descriptionField = value;
			}
		}

		public string ContactName
		{
			get
			{
				return this.contactNameField;
			}
			set
			{
				this.contactNameField = value;
			}
		}

		public string ContactEmail
		{
			get
			{
				return this.contactEmailField;
			}
			set
			{
				this.contactEmailField = value;
			}
		}

		public string LicenseName
		{
			get
			{
				return this.licenseNameField;
			}
			set
			{
				this.licenseNameField = value;
			}
		}

		public int LicenseSortOrder
		{
			get
			{
				return this.licenseSortOrderField;
			}
			set
			{
				this.licenseSortOrderField = value;
			}
		}

		public string LicenseComment
		{
			get
			{
				return this.licenseCommentField;
			}
			set
			{
				this.licenseCommentField = value;
			}
		}


		public int StatusSortOrder
		{
			get
			{
				return this.statusSortOrderField;
			}
			set
			{
				this.statusSortOrderField = value;
			}
		}

		public string ReleaseUrl
		{
			get
			{
				return this.releaseUrlField;
			}
			set
			{
				this.releaseUrlField = value;
			}
		}

		public string PackageUrl
		{
			get
			{
				return this.packageUrlField;
			}
			set
			{
				this.packageUrlField = value;
			}
		}

		public string InstallUrl
		{
			get
			{
				return this.installUrlField;
			}
			set
			{
				this.installUrlField = value;
			}
		}
	}


	public partial class WebServices : IWebServices
	{
		ServicesWCF.WebServiceSoapClient client;

		private readonly int PostPackageTimeoutMs = 8800000; // 120 minutes should be enough to upload most of the packages

		internal System.ServiceModel.Description.ClientCredentials Credentials => client.ClientCredentials;

		public WebServices(string url)
		{
			string urlSetting = System.Configuration.ConfigurationManager.AppSettings["WebServicesURL"];
			urlSetting = url.IsNullOrEmpty() ? (urlSetting ?? "https://packages.ea.com/webservice.asmx") : url;

			client = new ServicesWCF.WebServiceSoapClient(ServicesWCF.WebServiceSoapClient.EndpointConfiguration.WebServiceSoap, urlSetting);

			string postTimeout = System.Configuration.ConfigurationManager.AppSettings["PostPackageTimeoutMs"];
			if (!string.IsNullOrEmpty(postTimeout))
			{
				try
				{
					PostPackageTimeoutMs = int.Parse(postTimeout);
				}
				catch
				{
					Console.WriteLine($"Failed to parse PostPackageTimeoutMs setting, falling back to default value of {PostPackageTimeoutMs}ms");
				}
			}
		}

		public bool CreateNewPackage(string packageName, string manifestContents)
		{
			throw new NotImplementedException();
		}

		public void Dispose()
		{
		}

		public Task<string> GetDownloadUrl(string name, string version)
		{
			string webUrl = "https://packages.worldwide.ea.com";
			try
			{
				string appConfigWebUrl = System.Configuration.ConfigurationManager.AppSettings["PkgDownloadUrlHost"];
				if (!appConfigWebUrl.IsNullOrEmpty())
				{
					webUrl = appConfigWebUrl;
				}
			}
			catch
			{
			}

			if (!webUrl.EndsWith("/"))
			{
				webUrl = webUrl + "/";
			}

			Task<string> getDownloadUrl = Task<string>.Factory.StartNew(() => $"{webUrl}packages/{name}/{name}-{version}.zip");
			return getDownloadUrl;
		}

		public Task<ReleaseBase[]> GetPackageReleasesV2(string name)
		{
			return client.GetPackageReleasesAsync(name).ContinueWith((t) => t.Result.Cast<ReleaseBase>().ToArray());
		}

		public string PostPackageV2OrGetError(string fileName, string uncName, string changes, int statusId, string statusComment, string requiredReleases, string account)
		{
			var t = client.PostPackageAsync(fileName, uncName, changes, statusId, statusComment, requiredReleases, account);
			if (t.Wait(PostPackageTimeoutMs))
			{
				return t.Result;
			}
			throw new System.TimeoutException();
		}

		public bool UsingNewPackageServer() => false;

		public Task<ReleaseBase> GetReleaseV2(string name, string version)
		{
			return client.GetReleaseAsync(name, version).ContinueWith((t) => t.Result as ReleaseBase);
		}
	}
#endif

}
