[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

[headername="clubs/tdf/clubs_base.h"]
#include "clubs/gen/clubs_base.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

/////////////////////////////////////////////////////////////////////////////////////////

namespace Shooter
{

typedef string(32) AttributeName;
typedef string(256) AttributeValue;

[description="The name/value pair object used for generic attribute lists."]
typedef map<AttributeName,AttributeValue,ignorecase> AttributeMap;

typedef string(32) StatName;
typedef map<StatName,float,ignorecase> StatsMap;

[
    tdfid = "hash",
    description = "Entity report data specific to the Shooter::Report TDF",
    details = "This contains stats submitted by the game server to game reporting."
]
class EntityReport
{
    [tag="stat", description="Stats for an entity."]
    StatsMap stats;
};

typedef map<GameManager::PlayerId, EntityReport> PlayerReportMap;

[
    tdfid = "hash",
    description = "Group report data specific to the Shooter::Report TDF",
    details = "This contains group stats submitted by the game server to game reporting."
]
class GroupReport
{
    [tag="atrb", description="Attributes for an entity."]
    StatsMap stats;

    [tag="plyr", description="Player contributions."]
    PlayerReportMap playerReports;
};

[
    tdfid = "hash",
    description = "Shooter specific report type",
    details = "This report contains all stats & subreports submitted by the game server to game reporting."
]
class Report
{
    [tag="game", description="Game stats"]
    AttributeMap gameAttributes;

    [tag="plyr", description="Player reports"]
    PlayerReportMap playerReports;

    [tag="clbs", description="Club reports"]
    map<Clubs::ClubId, GroupReport> groupReports;

    [tag="srvr", description="Server reports"]
    map<int32_t, GroupReport> serverReports;
    //eac-end
    
    [tag="natn", description="Nation reports"]
    map<int32_t, GroupReport> nationReports;
};

class OfflineReport
{
    [tag="plyr", description="Player reports"]
    PlayerReportMap playerReports;
    
    //eac-begin:wlin
    [tag="natn", description="Nation reports"]
    map<int32_t, GroupReport> nationReports;
    //eac-end     
};

typedef map<int32_t, int32_t> ValueScopeMap;
typedef map<StatName, ValueScopeMap> StatValueScopeMap;
class StatsMapConfig
{
    [tag="svmp", description="Map of StatName to value scope"]
    StatValueScopeMap mStatValueScope;
};


} // namespace Shooter

/////////////////////////////////////////////////////////////////////////////////////////

} // namespace GameReporting
} // namespace Blaze
