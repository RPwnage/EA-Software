/*!
\defgroup _mod_initialization Blaze SDK Initialization, Server Connection and Login
\ingroup _mod_structure

A more detailed implementation guide will be provided later, outlining the correct initialization of the %Blaze SDK and process for connecting to the %Blaze server.

The BlazeHub provides initialization for the %Blaze SDK and is the starting point for accessing all features. The BlazeHub provides access to all APIs and to a ComponentManager (which provides access to all Components) via accessor methods which take a userIndex as a parameter. This allows for %Blaze to support multiple accounts authenticated at one time.

BlazeHub also provides features to facilitate use of the SDK. These include timers, cancellation of functor callbacks and a single BlazeHub::Idle method to provide the SDK with a timeslice for execute and an event pump.

DirtySock must be initialized before BlazeHub is initialized and must be idled independently of BlazeHub.

The %Blaze ConnectionManager provides facilities for connecting to and disconnecting from the %Blaze server. In addition, ConnectionManager will integrate with the Xbox Guide and the Sony NP utilities to properly initialize the networking and authenticate the customer with the first party platform. Unlike the LoginManager, APIs, and the ComponentManager, there is only a single ConnectionManager for all users who may be using %Blaze on the same console.

The %Blaze LoginManager provides account creation and login functionality very similar to that of the Connection class in the Plasma SDK. Game developers familiar with Plasma will find the %API and control flow nearly identical, with the exception that "connection" and "login" have been separated into two separate classes in %Blaze, with a single ConnectionManager instance handling low-level networking, and one LoginManager instance per user. Developers will use BlazeStateEventHandler and LoginManagerListener implementations for asynchronous notification, and will not be exposed to the underlying %Blaze RPC mechanism. To reduce memory consumption, the LoginManager is designed to be used only during the actual account creation and login processes, with any subsequent asynchronous notifications (due to kick/ban, duplicate login, errors, etc.) reported back to the game via the BlazeHub state-change notification system.

\image html LoginFlow.gif "Login Flow"

\note \n
If the terms of service have changed, the LoginManagerListener will receive onDisplayTos() rather than onDisplayPersonas. In that case, call acceptTos() or rejectTos() to continue. (If the TOS is rejected, return the user to the login prompt as if they’d hit the "back" button in the UI.)

If the user has already logged in successfully, then persisted login info will be available from the LoginManager in encrypted form. To login the user automatically, developers can call startSilentLoginProcess() instead of startLoginProcess(). This will bypass the usual UI flow, but UI may still be required if the terms of service have changed or if an error occurs.

\image html AccountCreationFlow.gif "Account Creation Flow"

\note \n
Make sure to listen for disconnect status changes from the BlazeHub.

*/
