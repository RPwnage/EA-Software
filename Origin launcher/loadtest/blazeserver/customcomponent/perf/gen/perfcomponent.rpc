// Defines the RPCs and async notifications used in the perf component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="perf/tdf/perftypes.h" ]
#include "perf/gen/perftypes.tdf"

namespace Blaze  
{
namespace Perf
{
[
  id = custom/5001,
  description = "A component used for performance tuning.",
  details = "This component acts as a proxy server between perf client and perf metric backend.  It will not be configured to run by default."
]
component Perf
{                              
    errors
    {
        // Should define more concrete errors.
        [ description = "A perf issue has occurred." ]
        PERF_ISSUE_UNKNOWN = 1;
		[ description = "The perf component has been disabled." ]
		PERF_FEATURE_DISABLED = 2;
    }

    slave
    {                           
        methods
        {
            // Heartbeat/module heartbeat/detection results.
            [
                id = 1,
                errors = {
					PERF_ISSUE_UNKNOWN,
					PERF_FEATURE_DISABLED
				},
                description = "This command will forward client ping to backend."
            ]
            void ping(PingRequest);

            // Enable or disable (clientJoinGame/clientLeaveGame in backend's term).
            [
                id = 2,
                errors = {
					PERF_ISSUE_UNKNOWN,
					PERF_FEATURE_DISABLED
				},
                description = "This command will enable/disable perf tuning."
            ]
            void perfTune(PerfTuneRequest);
            
        } // methods

        // slave -> client notifications
        notifications
        {
            // Heartbeat response from backend.
            [
                id = 401,
                description = "Notify client with ping response."
            ]
            NotifyPingResponse(NotifyPingResponse);

            // Notify client that enable succeeded.
            [
                id = 402,
                description = "Notify client when perf tuning begins."
            ]
            NotifyPerfTune(NotifyPerfTuneResponse);
        }

    } // slave

    master
    {        
        methods
        {
        } // methods
    } // master
}
}
}
