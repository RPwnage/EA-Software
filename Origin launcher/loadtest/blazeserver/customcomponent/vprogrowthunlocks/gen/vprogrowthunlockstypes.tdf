// Defines the TDF classes used in the vprogrowthunlocks component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

namespace Blaze
{
namespace VProGrowthUnlocks
{
[
    description = "The request object for a poke command.",
    details = "This class a bare minimal set of parameters."
]

class SkillPointReward
{
	[tag="matc", description="match count"]
	uint32_t mMatchCount;

	[tag="sprw", description="skill point reward"]
	uint32_t mSPReward;
};

class MatchRatingXPReward
{
	[tag="mart", description="match count"]
	uint32_t mRating;

	[tag="xprw", description="experience point reward"]
	uint32_t mXPReward;
};

class AttributeXPReward
{
	[tag="attr", description="player attribute match count"]
	uint32_t mAttribute;

	[tag="xprw", description="experience point reward"]
	uint32_t mXPReward;
};

class MatchEventReward
{
	[tag="evid", description="attribute"]
	uint32_t mEventId;

	[tag="axrl", description="List of attribute xp reward"]
	list<AttributeXPReward> mRewardList;
};

typedef int32_t UnlockableId;
typedef list<UnlockableId> UnlockableIdList;

const UnlockableId UNASSIGNED_UNLOCKABLE_ID = -1;

const uint32_t VPRO_LOADOUT_UNLOCKS_COUNT = 3;
const uint32_t VPRO_LOADOUT_PERK_SLOT_COUNT = 3;

class VProLoadOut
{
	[tag="urid", description="blaze Id of the search user"]
	uint64_t mUserId;

	[tag="loid", description="set Id of the unlocks set"]
	uint32_t mLoadOutId;

	[tag="lona", description="set name of the unlocks set"]
	string(32) mLoadOutName;

	[tag="spgr", description="total amount of skill points granted"]
	uint32_t mSPGranted;

	[tag="spco", description="total amount of skill points consumed at the moment"]
	uint32_t mSPConsumed;

	[tag="unl1", description="unlocks 1"]
	uint64_t mUnlocks1;

	[tag="unl2", description="unlocks 2"]
	uint64_t mUnlocks2;

	[tag="unl3", description="unlocks 3"]
	uint64_t mUnlocks3;

	[tag="vhei", description="vpro height"]
	uint32_t mVProHeight;

	[tag="vwei", description="vpro weight"]
	uint32_t mVProWeight;

	[tag="vpos", description="vpro position"]
	uint32_t mVProPosition;

	[tag="vfot", description="vpro foot"]
	uint32_t mVProFoot;

	[tag="xpea", description="xp earned"]
	uint32_t mXPEarned;

	[tag="perk", description="perks assigned to each perk slot"]
	UnlockableIdList mPerksAssignment;
};

class VProObjectiveConfig
{
	[tag="obid", description="objective id"]
	uint32_t mObjectiveId;

	[tag="obti", description="objective title"]
	string(32) mObjectiveTitle;

	[tag="obds", description="objective description"]
	string(32) mObjectiveDesc;

	[tag="asid", description="objective asset id"]
	uint32_t mAssetId;

	[tag="ogrp", description="group of objective in the category"]
	uint32_t mGroup;

	[tag="orow", description="row of the objective placement"]
	uint32_t mRow;

	[tag="ocol", description="column of the objective placement"]
	uint32_t mColumn;

	[tag="srvl", description="required stat value"]
	uint32_t mStatReqVal;

	[tag="rwty", description="objective reward type"]
	uint32_t mRewardType;
	
	[tag="rwvl", description="objective reward value"]
	uint32_t mRewardVal;
};
typedef list<VProObjectiveConfig> VProObjectiveConfigList;

class VProObjectiveCategoryConfig
{
	[tag="ocid", description="objective category id"]
	uint32_t mObjectiveCategoryId;

	[tag="octi", description="objective category title"]
	string(32) mObjectiveCategoryTitle;

	[tag="ocds", description="objective category description"]
	string(32) mObjectiveCategoryDesc;

	[tag="rwav", description="total reward available for this objective category"]
	uint32_t mRewardAvailable;

	[tag="obcl", description="list of objective configs"]
	VProObjectiveConfigList mObjectiveConfigs;
};
typedef list<VProObjectiveCategoryConfig> VProObjectiveCategoryConfigList;

class VProObjectiveProgress
{
	[tag="obid", description="objective id"]
	uint32_t mObjectiveId;

	[tag="ocid", description="objective category id"]
	uint32_t mObjectiveCategoryId;

	[tag="srvl", description="required stat value"]
	uint32_t mStatReqVal;

	[tag="savl", description="actual stat value"]
	uint32_t mStatActVal;

	[tag="comp", description="completion flag"] 
	bool mCompleted;

	[tag="perc", description="completion percentage"] 
	uint32_t mPercentage;
};
typedef list<VProObjectiveProgress> VProObjectiveProgressList;

class VProObjectiveProgressGroup
{
	[tag="usid", description="user id"]
	uint64_t mUserId;

	[tag="obil", description="list of objective progress"]
	VProObjectiveProgressList mObjectiveProgresses;
};
typedef list<VProObjectiveProgressGroup> VProObjectiveProgressGroupList;

typedef map<uint32_t, uint32_t> SkillPointRewardsMap;
typedef map<uint32_t, uint32_t> MatchRatingXPRewardsMap;
typedef map<uint32_t, uint32_t> MatchEventsMap;
typedef map<uint32_t, uint32_t> AttributeTypesMap;
typedef map<uint32_t, uint32_t> AttributeXPsMap;
typedef map<uint32_t, uint32_t> PlayerLevelsMap;
typedef list<VProLoadOut> VProLoadOutList;
typedef list<uint64_t> UserIdList;
typedef map<string(64), uint32_t, ignorecase> StatsDescIndexMap;
typedef map<string(64), uint32_t, ignorecase> StatsUpdatesMap;

typedef list<uint32_t> ObjectiveIdList;
typedef list<uint32_t> CategoryIdList;
typedef list<uint32_t> AttributeTypeList;

const uint32_t NUM_ATTRIBUTE_TYPE = 3;

class MatchEventXPReward
{
	[tag="evid", description="event id"]
	uint32_t mEventId;

	[tag="xprw", description="xp reward"]
	uint32_t mXPReward;

	[tag="mepm", description="max events count"]
	uint32_t mMaxEventsCount;

    [tag="text", description="match event hal id"] 
    string(64) mStringId;
};

typedef map<uint32_t, MatchEventXPReward> MatchEventXPRewardsMap;

class PlayerGrowthConfig
{
	[tag="mexp", description="match event xp rewards"]
	MatchEventXPRewardsMap mMatchEventXPRewards;

	[tag="plmp", description="player levels"]
	PlayerLevelsMap mPlayerLevelsMap;

	[tag="sprw", description="skill point rewards"]
	SkillPointRewardsMap mSkillPointRewardsMap;
};

const uint32_t TRAIT_MAX_EFFECT_COUNT = 3;

enum TraitTypeEnum
{
    [description="trait"] 
	TRAIT_TYPE_TRAIT = 0,

    [description="boost"] 
	TRAIT_TYPE_BOOST,

    [description="special"] 
	TRAIT_TYPE_SPECIAL,

    [description="archetype"] 
	TRAIT_TYPE_ARCHETYPE,

    [description="trait type count"] 
	TRAIT_TYPE_COUNT,
};


typedef map<uint32_t, uint32_t> TraitEffectsMap;

class Trait
{
	[tag="trid", description="trait id"]
	UnlockableId mId;

	[tag="type", description="trait type"]
	TraitTypeEnum mType;

	[tag="ctgr", description="trait category"]
	uint32_t mCategory;

	[tag="cost", description="trait cost in skill points"]
	uint32_t mCost;

	[tag="efct", description="trait effects"]
	TraitEffectsMap mEffects;

	[tag="name", description="trait name hal id"]
	string(64) mName;

	[tag="desc", description="trait description hal id"]
	string(64) mDesc;

	[tag="depn", description="trait dependencies (parents)"]
	UnlockableIdList mDependencies;

	[tag="chld", description="trait children"]
	UnlockableIdList mChildren;

	[tag="tree", description="trait tree"]
	uint32_t mTree;

	[tag="tcol", description="trait column"]
	uint32_t mColumn;

	[tag="trow", description="trait row"]
	uint32_t mRow;

	[tag="conn", description="trait connector type"]
	uint32_t mConnector;

	[tag="icon", description="trait icon id"]
	uint32_t mIconId;
};

typedef map<UnlockableId, Trait> SkillTree;

class PerkSlot
{
	[tag="pkid", description="perk slot id"]
	UnlockableId mId;

	[tag="ullv", description="player level to unlock this perk slot"]
	uint32_t mUnlockLevel;
};

typedef map<UnlockableId, PerkSlot> PerkSlotsMap;

class Perk
{
	[tag="pkid", description="perk id"]
	UnlockableId mId;

	[tag="ullv", description="player level to unlock this perk"]
	uint32_t mUnlockLevel;

	[tag="gpid", description="game play perk ids"]
	UnlockableIdList mGameplayPerkIds;

	[tag="name", description="perk name hal id"]
	string(64) mName;

	[tag="desc", description="perk description hal id"]
	string(64) mDesc;

	[tag="catg", description="perk category"]
	uint32_t mCategory;

	[tag="pstn", description="perk position on the screen"]
	uint32_t mPosition;

	[tag="icon", description="perk icon id"]
	uint32_t mIconId;
};

typedef map<UnlockableId, Perk> PerksMap;
typedef map<uint32_t, string(32)> PerkCategoriesMap;

class FetchLoadOutsRequest
{
	[tag="uidl", description="blaze Id list for the load out owners"]
	UserIdList mUserIdList;
};

class FetchLoadOutsResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="lolt", description="load out list of the entity"]
	VProLoadOutList mLoadOutList;
};

class FetchObjectiveProgressRequest
{
	[tag="uidl", description="blaze Id list for the objective owners"]
	UserIdList mUserIdList;
};

class FetchObjectiveProgressResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="oglt", description="objective progress group list"]
	VProObjectiveProgressGroupList mObjectiveProgressGroups;
};

class FetchPlayerGrowthConfigResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="plgr", description="player growth config"]
	PlayerGrowthConfig mPlayerGrowthConfig;
};

class FetchSkillTreeConfigResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="sktr", description="skill tree"]
	SkillTree mSkillTree;
};

class FetchPerksConfigResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="slot", description="perk slots"]
	PerkSlotsMap mPerkSlots;
	
	[tag="perk", description="perks"]
	PerksMap mPerks;

	[tag="catg", description="perk categories"]
	PerkCategoriesMap mPerkCategories;
};

class FetchObjectiveConfigResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="occl", description="objective category config list"]
	VProObjectiveCategoryConfigList mObjectiveCategories;

	[tag="pgrw", description="progression rewards map"]
	SkillPointRewardsMap mProgressionRewards;
};

class ResetLoadOutsRequest
{
	[tag="urid", description="blaze Id of the load out owner"]
	uint64_t mUserId;

	[tag="loid", description="blaze Id of the reset user"]
	int32_t mLoadOutId;
};

class ResetLoadOutsResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;
};

class UpdateLoadOutsPeripheralsRequest
{
	[tag="urid", description="blaze Id of the load out owner"]
	uint64_t mUserId;

	[tag="lolt", description="load out list to be updated"]
	VProLoadOutList mLoadOutList;
};

class UpdateLoadOutsPeripheralsResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;
};

class UpdateLoadOutUnlocksRequest
{
	[tag="urid", description="blaze Id of the load out owner"]
	uint64_t mUserId;

	[tag="load", description="load out unlocks to be updated"]
	VProLoadOut mLoadOut;		
};

class UpdateLoadOutUnlocksResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;
};

class GrantVProSkillPointsPostMatchRequest
{
	[tag="urid", description="blaze Id of the reset user"]
	uint64_t mUserId;

	[tag="gmsp", description="grant match count skill point"]
	bool mGrantMatchCountSP;		

	[tag="gosp", description="grant objective skill point"]
	bool mGrantObjectiveSP;		
};

class DebugGrantVProSkillPointsRequest
{
	[tag="urid", description="blaze Id of the reset user"]
	uint64_t mUserId;

	[tag="skpt", description="amount of skill to be granted"]
	uint32_t mSkillPoint;		
};

class DebugCompleteVProObjectivesRequest
{
	[tag="urid", description="blaze Id of the user"]
	uint64_t mUserId;

	[tag="obid", description="objective ids"]
	ObjectiveIdList mObjectiveIds;

	[tag="caid", description="category ids"]
	CategoryIdList mCategoryIds;		
};

class DebugGrantVProXpRequest
{
	[tag="urid", description="blaze Id of the user"]
	uint64_t mUserId;

	[tag="xpxp", description="xp to grant"]
	uint32_t mXp;
};

class GetXPRewardsFromMatchRequest
{
	[tag="urid", description="blaze Id of the user"]
	uint64_t mUserId;

	[tag="mtrt", description="matching rating of the match"]
	uint32_t mMatchingRating;

	[tag="atma", description="map that tracks the number of match event occurance"]
	AttributeTypesMap mAttributeTypesMap;

	[tag="mema", description="map that tracks the number of match event occurance"]
	MatchEventsMap mMatchEventsMap;		
};

class GetXPRewardsFromMatchResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;

	[tag="atxm", description="attribute xp map"]
	AttributeXPsMap mAttributeXPMap;
};

class UpdatePlayerGrowthRequest
{
	[tag="urid", description="blaze Id of the user"]
	uint64_t mUserId;

	[tag="mema", description="map that tracks the number of match event occurance"]
	MatchEventsMap mMatchEventsMap;		
};

class UpdatePlayerGrowthResponse
{
	[tag="rest", description="result of the operation"] 
	bool mSuccess;
};

class Nested
{
    [tag="num", description="A number value greater than 0."]
    int32_t mNum;
    
    [tag="text", description="Text to send up to the server."] 
    string(256) mText;
    
    [tag="nmpa"] map<string(32),string(32), ignorecase> mStringMap;
};

class VProGrowthUnlocksRequest
{
    [tag="num", description="A number value greater than 0."]
    int32_t mNum;
    
    [tag="text", description="Text to send up to the server."] 
    string(256) mText;
    
    [tag="smap"] map<string(32),string(32), ignorecase> mStringMap;

    [tag="nmap"] map<string(32),Nested, ignorecase> mNestedMap;
};

class VProGrowthUnlocksResponse
{
    enum VProGrowthUnlocksResponseEnum
    {
        [description="Unknown response."] 
        VPROGROWTHUNLOCKS_ENUM_UNKNOWN = 0,
        
        [description="Succeeded!"] 
        VPROGROWTHUNLOCKS_ENUM_SUCCESS,
        
        [description="Failed"] 
        VPROGROWTHUNLOCKS_ENUM_FAILED
    };

    [tag="map"] map<int32_t,VProGrowthUnlocksRequest> mMyMap;
    
    typedef list<int32_t> IntList;
    [tag="list"] IntList mMyList;

    [tag="enum", description="Enum response type."] 
    VProGrowthUnlocksResponseEnum mRegularEnum;
    
    [tag="msg"] 
    string(256) mMessage;
};

class VProGrowthUnlocksError
{
    [tag="msg"] 
    string(256) mMessage;
};

} // VProGrowthUnlocks
} // Blaze

