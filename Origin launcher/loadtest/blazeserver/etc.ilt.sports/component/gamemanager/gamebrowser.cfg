// (c) Electronic Arts. All Rights Reserved.
// gamebrowser config file

// We do not put the class name here because gamemanager.cfg and search.cfg needs to include this data as 'gamemanager.gamebrowser = {', and  'search.gamebrowser = {', 
//gamebrowser = {

    // gamebrowser's idle period in milliseconds.  Defines how frequently the gameBrowser is run (how quickly lists are updated)
    defaultIdlePeriod = "50ms"
    
    // The number of games included in each GameBrowserList async update notification.  These async updates
    // are sent down from the slave running GameBrowser to clients each GameBrowser idle (idle rate defined by defaultIdlePeriod).
    // Depending on what game information you select in your listConfig (defined below), the amount of data 
    // included in each game notification may vary.  
    maxGamesPerListUpdateNotification = 50
    
    // The maximum number of games to be returned for GameBrowserListSnapshotSync. The client can not request more games than 
    // this  value; if they do, an error will be return.
    maxGameListSyncSize = 50 
    
    // The maximum number of list update notifications we will send down for each individual list during a single idle.
    // Combined with maxGamesPerListUpdateNotification, determines how many games one list will recieve in one idle.
    // Given our default values of 50 games per notification, and 10 updates per idle, a single list would receive
    // 500 games in one idle over 10 seperate notifications.
    // This number should remain small, as when multiplied out over the total number of lists that may exist,
    // the amount of data going outbound of the blaze server can become very large, and bog down the server.
    maxListUpdateNotificationsPerIdle = 10
    
    // This is an override value used to clamp list requests that have invalid sizes baked into the client.
    //  Any list that exceeds this max capacity will be clamped to the max.  If maxSortedListCapacityServerOverride is
    //  commented out, we don't clamp the client's list capacity requests.
    //maxSortedListCapacityServerOverride = 10000
    
    // Caps the max invisible games buffered server side for performance tuning, additional games are ignored
    maxReserveSortedListCapacity = 100
    
    // User Set Lists are special types of game browser lists which give updates
    // for all games associated to a specific set of users.  This config value
    // can be used to limit the total number of games that are kept track of.
    // The default is 200 games kept in the list.
    userSetListCapacity = 200
    
    // contains a set of uniquely named GameBrowserList Configurations
    //    each config determines which game/player settings are downloaded by a client.
    //    NOTE: ListConfigNames are case-insensitive.
    //
    //   game/player attributes fields can have the following formats
    //     1) download all by using the DOWNLOAD_ALL_ATTRIBUTES keyword
    //         Ex: downloadGameAttributes = DOWNLOAD_ALL_ATTRIBUTES
    //     2) download a subset of attributes by listing the attrib names to download
    //        Ex: downloadGameAttributes = [foo, bar, baz]
    //     3) prevent any attributes from being downloaded (empty list of attrib names)
    //        Ex: downloadGameAttributes = []
    //
    //   Player roster types include:
    //     1) Download no players on the roster by using GAMEBROWSER_ROSTER_NONE
    //     2) Download active (non-queued, non-reserved) players on the roster using GAMEBROWSER_ROSTER_ACTIVE
    //     3) Download all players on the roster using GAMEBROWSER_ROSTER_ALL
    listConfig = { 
    
        // default: download all game attributes, but omit the player roster and game persisted id
        default = {
            sortType = "SORTED_LIST"
            downloadAllGameAttributes = true
            downloadAllPlayerAttributes = true
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_NONE"
            downloadPersistedGameId = false
        }
        
        // defaultUnsorted: download all game attributes, but omit the player roster and game persisted id
        defaultUnsorted = {
            sortType = "UNSORTED_LIST"
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_NONE"
            downloadPersistedGameId = false
        }
        
        fpsUnsorted = {
            sortType = "UNSORTED_LIST"
            gameStateWhitelist = ["INACTIVE_VIRTUAL", "PRE_GAME", "IN_GAME"]
            downloadAllGameAttributes = false
            downloadGameAttributes = ["level", "mode"]
            downloadAllPlayerAttributes = false
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ACTIVE"
            downloadPersistedGameId = true
            maxListCapacityOverride = 500
            downloadGameTypes = ["GAME_TYPE_GAMESESSION"]
        }
        
        // example custom config: download game attribs "foo" and "bar"; download the player roster and game persisted id but no player attribs.
        myCustomConfig = {
            sortType = "SORTED_LIST"
            downloadAllGameAttributes = false
            downloadGameAttributes = ["foo", "bar"]
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ACTIVE"
            downloadPersistedGameId = true
        }

        // example config: download only game groups with all game attributes, but omit the player roster and game persisted id
        //GameGroupList = {
        //    sortType = "SORTED_LIST"
        //    downloadAllGameAttributes = true
        //    downloadAllPlayerAttributes = true
        //    downloadPlayerRosterType = "GAMEBROWSER_ROSTER_NONE"
        //    downloadPersistedGameId = false
        //    downloadGameTypes = ["GAME_TYPE_GROUP"]
        //}
    }




    // DO NOT REMOVE: Internal Lists used by BlazeServer and GOS Tools
    internalListConfig = {
            
        // DO NOT REMOVE: used by GOS Tools for server monitoring.
        csFullGameList = {
            sortType = "UNSORTED_LIST"
            gameStateWhitelist = ["NEW_STATE", "INITIALIZING", "INACTIVE_VIRTUAL", "PRE_GAME", "IN_GAME", "POST_GAME", "MIGRATING", "DESTRUCTING", "RESETABLE", "CONNECTION_VERIFICATION", "GAME_GROUP_INITIALIZED", "UNRESPONSIVE"]
            ignoreGameJoinMethod = true 
            downloadGameAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ALL"
            downloadPersistedGameId = false
            downloadPlayerAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadGameTypes = ["GAME_TYPE_GAMESESSION", "GAME_TYPE_GROUP"]
        }

        // DO NOT REMOVE: used internally to gather dedicated server list.
        dedicatedServer = {
            sortType = "SORTED_LIST"
            downloadOnlyGameId = true
            ignoreGameJoinMethod = true
            gameStateWhitelist = ["RESETABLE"]
            downloadGameTypes = ["GAME_TYPE_GAMESESSION"]
            maxListCapacityOverride = 100
            gameBrowserSearchContext = "MATCHMAKING_CONTEXT_FIND_DEDICATED_SERVER"
        }
 
        UsersetGameList = {
            downloadAllGameAttributes = true
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ACTIVE"
            downloadPersistedGameId = false
        }

        // example config used by Ignition sample for listing disconnected games.
        ReservList = {
            sortType = "SORTED_LIST"
            gameStateWhitelist = ["NEW_STATE", "INITIALIZING", "INACTIVE_VIRTUAL", "PRE_GAME", "IN_GAME", "POST_GAME", "MIGRATING", "DESTRUCTING", "RESETABLE", "CONNECTION_VERIFICATION", "GAME_GROUP_INITIALIZED"]
            ignoreGameJoinMethod = true 
            downloadGameAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ALL"
            downloadPersistedGameId = false
            downloadPlayerAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadGameTypes = ["GAME_TYPE_GAMESESSION", "GAME_TYPE_GROUP"]
        }

        packerGameList = {
            sortType = "SORTED_LIST"
            gameStateWhitelist = ["NEW_STATE", "INITIALIZING", "INACTIVE_VIRTUAL", "PRE_GAME", "IN_GAME", "POST_GAME", "MIGRATING", "DESTRUCTING", "RESETABLE", "CONNECTION_VERIFICATION", "GAME_GROUP_INITIALIZED", "UNRESPONSIVE"]
            ignoreGameJoinMethod = true 
            downloadGameAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadPlayerRosterType = "GAMEBROWSER_ROSTER_ALL"
            downloadPersistedGameId = false
            downloadPlayerAttributes = "DOWNLOAD_ALL_ATTRIBUTES"
            downloadGameTypes = ["GAME_TYPE_GAMESESSION"]
        }
    }
//}
