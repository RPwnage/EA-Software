namespace Blaze
{
[description="String used to hold upnp router info (module, manufature), the length is same as the defination in DS API."]
typedef string(127) UpnpDeviceInfo;

[description="Upnp status"]
enum UpnpStatus
{
    [description="Upnp status unknown."]
    UPNP_UNKNOWN,

    [description="Upnp found, but not fully working."]
    UPNP_FOUND,

    [description="Upnp is enabled (found and port mapping added)."]
    UPNP_ENABLED
};

[description="Upnp Blaze status flags."]
bitfield BlazeUpnpFlags
{
    [description="NAT type promoted from Moderate to Open due to UPnP success result."]
    NatPromoted     : 1;
    [description="WAN IP address does not match IP address seen by Blaze server."]
    DoubleNat       : 1;
    [description="External port derived by QoS was overridden by UPnP external port."]
    PortOverride    : 1;
};

[trackChanges = true, description="Contains UPnP data such as status flags, device info, etc."]
class ClientMetrics
{
    [tag="ulrc", description="Upnp last result code."]
    int32_t mLastRsltCode;

    [tag="uflg", description="Upnp status flags."]
    uint16_t mFlags;

    [tag="ubfl", description="Upnp Blaze status flags."]
    BlazeUpnpFlags mBlazeFlags;

    [tag="unat", description="Upnp metrics report NAT type."]
    uint16_t mNatType;

    [tag="usta", description="Upnp status."]
    UpnpStatus mStatus;

    [tag="udev", description="Upnp device info."]
    UpnpDeviceInfo mDeviceInfo;
};

[trackChanges = true, description="Contains metrics gathered by the console."] 
class ClientUserMetrics
{
    // STT "Speech to Text" metrics
    [tag="seco"] uint32_t mSttEventCount;
    [tag="sdms"] uint32_t mSttDurationMsSent;
    [tag="scco"] uint32_t mSttCharCountRecv;
    [tag="seru"] uint32_t mSttEmptyResultCount;
    [tag="serc"] uint32_t mSttErrorCount;
    [tag="srtt"] uint32_t mSttDelay;

    // TTS "Text to Speech" metrics
    [tag="teco"] uint32_t mTtsEventCount;
    [tag="tcco"] uint32_t mTtsCharCountSent;
    [tag="tdms"] uint32_t mTtsDurationMsRecv;
    [tag="teru"] uint32_t mTtsEmptyResultCount;
    [tag="terc"] uint32_t mTtsErrorCount;
    [tag="trtt"] uint32_t mTtsDelay;
};

}
