
#include <stdio.h>
#ifdef _WIN32
#include <io.h>
#else
#include <unistd.h>
#endif
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include <direct.h>

#define iswhitespace(c) (((c) == ' ') || ((c) == '\t'))

#ifdef _WIN32
#define FSC '\\'
#else
#define FSC '/'
#endif

static char gDeps[8192][256];
static int gNumDeps = 0;
static char* gIncludePaths[64];
static int gNumIncludePaths = 0;

static void convertpath(char* path)
{
    for(; *path != '\0'; path++)
    {
        if ((*path == '/') || (*path == '\\'))
            *path = FSC;
    }
}

static bool havedep(const char* fname)
{
    for(int i = 0; i < gNumDeps; i++)
    {
        if (strcmp(fname, gDeps[i]) == 0)
            return true;
    }
    return false;
}

static bool parse(const char* srcBasename)
{
    bool rc = true;
    const char* INCLUDE_LINE = "Note: including file:";
    size_t INCLUDE_LINE_LEN = strlen(INCLUDE_LINE);

    char cwd[1024];
    _getcwd(cwd, sizeof(cwd));

    // Determine the VisualStudio install directory so system headers can be excluded from the
    // dependency list
    const char* vsInstallDir = getenv("VSINSTALLDIR");
    if (vsInstallDir == nullptr)
        vsInstallDir = "C:\\Program Files\\Microsoft VisualStudio 8";
    size_t vsInstallDirLen = strlen(vsInstallDir);

    // Determine the Windows SDK install directory so system headers can be excluded from the
    // dependency list
    const char* wsdkInstallDir = getenv("WINDOWSSDKDIR");
    if (wsdkInstallDir == nullptr || strstr(wsdkInstallDir, "\\\\") != nullptr)
        wsdkInstallDir = "C:\\Program Files\\Microsoft SDKs\\Windows\\v6.0A";
    size_t wsdkInstallDirLen = strlen(wsdkInstallDir);

    char line[8192];

    while (fgets(line, sizeof(line), stdin) != nullptr)
    {
        if ((srcBasename != nullptr) && (_strnicmp(line, srcBasename, strlen(srcBasename)) == 0))
        {
            // Suppress VC's output of the source filename
            continue;
        }

        if (strncmp(line, INCLUDE_LINE, INCLUDE_LINE_LEN) == 0)
        {
            // Skip over leading whitespace
            char* incl = line + INCLUDE_LINE_LEN;
            while (*incl == ' ')
                ++incl;

            // Exclude any files that are included from the VS install directory
            if (_strnicmp(incl, vsInstallDir, vsInstallDirLen) == 0)
                continue;

            // Exclude any files that are included from the Windows SDK install directory
            if (_strnicmp(incl, wsdkInstallDir, wsdkInstallDirLen) == 0)
                continue;

            // Strip off any trailing characters from the filename
            size_t inclLen = strlen(incl);
            for(size_t idx = inclLen; idx >= 0; idx--)
            {
                if (incl[idx] >= ' ')
                    break;
                incl[idx] = '\0';
            }

            // Strip of the source root if present
            if (_strnicmp(incl, cwd, strlen(cwd)) == 0)
                incl += strlen(cwd) + 1;
            else
            {
                // This include file isn't from the source root.  Convert any drive letters to
                // cygwin appropriate format (eg. C: -> /cygdrive/c)
                if (incl[1] == ':')
                {
                    char driveLetter = (char)tolower(incl[0]);
                    char filename[1024];
                    sprintf(filename, "/cygdrive/%c%s", driveLetter, incl + 2);
                    strcpy(incl, filename);
                }
            }

            // Add file to dependency list
            convertpath(incl);
            if (!havedep(incl))
            {
                strcpy(gDeps[gNumDeps], incl);
                ++gNumDeps;
            }
        }
        else
        {
            // Any other output is generated by compiler warnings or errors.  Print the output
            // and ensure that mkdep returns an error exit code.
            printf("%s", line);
            rc = false;
        }
    }
    return rc;
}

int main(int argc, char** argv)
{
    if (argc != 3)
    {
        fprintf(stderr, "Usage: %s srcfile objfile\n", argv[0]);
        exit(1);
    }

    const char* src = argv[1];
    const char* obj = argv[2];
    char dep[256];
    strcpy(dep, obj);
    char* d = strrchr(dep, '.');
    if (d == nullptr)
        strcat(dep, ".d");
    else
        strcpy(d, ".d");

    // Determine the basename of the input file
    const char* b = strrchr(src, '/');
    if (b != nullptr)
        ++b;
    else
    {
        b = strrchr(src, '\\');
        if (b != nullptr)
            ++b;
        else
            b = src;
    }

    if (!parse(b))
        exit(1);

    FILE* fp = fopen(dep, "w");
    if (fp == nullptr)
    {
        fprintf(stderr, "Could not open dependency file for writing '%s'\n", dep);
        exit(1);
    }

    fprintf(fp, "%s: %s", obj, src);
    for(int i = 0; i < gNumDeps; i++)
    {
        for(char* s = gDeps[i]; *s != '\0'; s++)
        {
            if ((*s == '/') || (*s == '\\'))
                *s = '/';
        }
        if (strcmp(gDeps[i], src) != 0)
            fprintf(fp, " \\\n\t%s", gDeps[i]);
    }
    fprintf(fp, "\n");
    fclose(fp);
    return 0;
}


