group rpcclienterrortypeheader : errorcommon;

masterComponent(fileNode, component) ::= <<>>
slaveComponent(fileNode, component) ::= <<>>

rootComponent(fileNode, node) ::= <<
<centralFileHeader()>
<openIncludeGuard()>

/***** Include files *****************************************************************************/

#include "BlazeSDK/blazesdk.h"

/*** Defines/Macros/Constants/Typedefs ************************************************************/

namespace Blaze
{

typedef int32_t BlazeError;

typedef int32_t HttpStatusCode;
const HttpStatusCode DEFAULT_HTTP_STATUS_CODE = 400;

#define BLAZE_SYSTEM_ERROR_FLAG                 0x4000
#define BLAZE_CLIENT_ERROR_FLAG                 0x8000
#define BLAZE_ERROR_CODE_MASK                   0x3FFF
#define BLAZE_COMPONENT_CUSTOM_ERROR_BASE       0x3F00

#define BLAZE_CLIENT_SYSTEM_ERROR(code)         (static_cast\<Blaze::BlazeError\>((code | BLAZE_CLIENT_ERROR_FLAG) \<\< 16))
#define BLAZE_CLIENT_API_ERROR(code, api)       (static_cast\<Blaze::BlazeError\>(((code | BLAZE_CLIENT_ERROR_FLAG) \<\< 16) | api))
#define BLAZE_SYSTEM_ERROR(code)                (static_cast\<Blaze::BlazeError\>((code | BLAZE_SYSTEM_ERROR_FLAG) \<\< 16))
#define BLAZE_COMPONENT_ERROR(component, code)  (static_cast\<Blaze::BlazeError\>((code \<\< 16) | component))
#define BLAZE_COMPONENT_CUSTOM_ERROR(component, code) (BLAZE_COMPONENT_ERROR(component, (BLAZE_COMPONENT_CUSTOM_ERROR_BASE + code)))

#define BLAZE_CODE_FROM_ERROR(err)              (static_cast\<uint16_t\>(err \>\> 16))
#define BLAZE_COMPONENT_FROM_ERROR(err)         (static_cast\<uint16_t\>(err & 0xFFFF))
#define BLAZE_ERROR_IS_SYSTEM_ERROR(err)        (((err \>\> 16) & BLAZE_SYSTEM_ERROR_FLAG) != 0)
#define BLAZE_CODE_IS_SYSTEM_ERROR(err)         ((err & BLAZE_SYSTEM_ERROR_FLAG) != 0)
#define BLAZE_ERROR_IS_CLIENT_ERROR(err)        (((err \>\> 16) & BLAZE_CLIENT_ERROR_FLAG) != 0)
#define BLAZE_CODE_IS_CLIENT_ERROR(err)         ((err & BLAZE_CLIENT_ERROR_FLAG) != 0)

#define BLAZE_ERROR_FROM_CODE(component, code)  (static_cast\<Blaze::BlazeError\>( \\
                                                                             (code != 0) ? (BLAZE_CODE_IS_SYSTEM_ERROR(code) \\
                                                                                            ? BLAZE_SYSTEM_ERROR(code) \\
                                                                                            : BLAZE_COMPONENT_ERROR(component, code)) \\
                                                                                         : 0 \\
                                                                          ) \\
                                                )
} // Blaze

<closeIncludeGuard()>
<standardFileFooter()>

>>
