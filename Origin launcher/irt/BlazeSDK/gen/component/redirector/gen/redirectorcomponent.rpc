// Redirector Component interface

[
  client_include = false,
  headername="redirector/tdf/redirectortypes_server.h" 
]
#include "redirector/gen/redirectortypes_server.tdf"

[ headername="redirector/tdf/redirectortypes.h" ]
#include "redirector/gen/redirectortypes.tdf"

[ 
  client_include = false,
  headername="redirector/tdf/redirector_server.h" 
]
#include "redirector/gen/redirector_server.tdf"

namespace Blaze
{
namespace Redirector
{

[
  id = core/5,
  description = "Load balance requests between slave instances.",
  details = "The redirector accepts connections from blaze server instances which then report their status to it.  It then redirects incoming client requests to the appropriate blaze server slave instance based on load.",
  configurationType = RedirectorConfig,
  proxyOnly = true,
  http = {
      payloadEncoderSubType = "NORMAL"
  }
]
component Redirector
{
    errors
    {
        [ description = "No Blaze cluster found matching the requested service name (getServerInstance/getServerInstanceHttp calls only)" ]
        REDIRECTOR_SERVER_NOT_FOUND = 1;

        [ description = "All endpoints matching the requested service name and connection profile have reached their connection limit (or are draining)" ]
        REDIRECTOR_NO_SERVER_CAPACITY = 2;

        [ description = "No endpoints found matching the requested service name and connection profile" ]
        REDIRECTOR_NO_MATCHING_INSTANCE = 3;

        [ description = "(updateServerInfo/publishServerInstanceInfo calls only) A Blaze instance with the same instance id is already registered (under a different registration id) for the specified service name" ]
        REDIRECTOR_SERVER_NAME_ALREADY_IN_USE = 4;

        [ description = "The client is incompatible with the Blaze cluster matching the requested service name (the client version is in the cluster's configured list of incompatible client versions)" ]
        REDIRECTOR_CLIENT_NOT_COMPATIBLE = 5;

        [ description = "The client version is not recognized by the Blaze cluster matching the requested service name (the client version is not in the cluster's configured lists of compatible or incompatible client versions, and the cluster's list of compatible client versions is non-empty)" ]
        REDIRECTOR_CLIENT_UNKNOWN = 6;

        [ description = "The requested connection profile is not in the redirector's configured list of profiles" ]
        REDIRECTOR_UNKNOWN_CONNECTION_PROFILE = 7;

        [ description = "The requested service name has been sunset" ]
        REDIRECTOR_SERVER_SUNSET = 8;

        [ description = "The REDIRECTOR_SERVER_DOWN error code is no longer in use" ]
        REDIRECTOR_SERVER_DOWN = 9;

        [ description = "The REDIRECTOR_INVALID_PARAMETER error code is no longer in use" ]
        REDIRECTOR_INVALID_PARAMETER = 10;

        [ description = "No Blaze cluster found matching the requested service name (scheduleServerDowntime calls only)" ]
        REDIRECTOR_UNKNOWN_SERVICE_NAME = 11;

        [ description = "(scheduleServerDowntime calls only) The downtime being scheduled has already begun" ]
        REDIRECTOR_PAST_EVENT = 12;

        [ description = "(cancelServerDowntime calls only) No scheduled downtime found matching the requested id" ]
        REDIRECTOR_UNKNOWN_SCHEDULE_ID = 13;

        [ description = "(findCACertificates calls only) Request specified a DirtyCert version without providing a service name" ]
        REDIRECTOR_MISSING_SERVICE_NAME = 14;
    }


    slave
    {        
        
        methods
        {
               [
                 id = 1,
                 description = "Return an available server instance.",
                 details = "Receives request from the client, retreives the section requested and sends it to the client.",
                 generate_command_class = false,
                 requires_authentication = false,
                 errors = {
                       REDIRECTOR_SERVER_NOT_FOUND,
                       REDIRECTOR_NO_SERVER_CAPACITY,
                       REDIRECTOR_NO_MATCHING_INSTANCE,
                       REDIRECTOR_CLIENT_NOT_COMPATIBLE,
                       REDIRECTOR_CLIENT_UNKNOWN,
                       REDIRECTOR_UNKNOWN_CONNECTION_PROFILE,
                       REDIRECTOR_SERVER_SUNSET,
                       REDIRECTOR_SERVER_DOWN
                   },
                 errortype = ServerInstanceError 
               ]
               ServerInstanceInfo getServerInstance(ServerInstanceRequest);
               
               [
                 id = 7,
                 description = "Return a map of instance names to server addresses for a specified endpoint name, service name and address type.", 
                 details = "Returns a map of instance names to server addresses of <address type> for the specified endpoint for the server that has registered with this redirector with the given service name.",
                 generate_command_class = false,
                 requires_authentication = false,
                 internal = true,
                 client_export = false, 
                 errors = {
                    REDIRECTOR_INVALID_PARAMETER
                    }
               ]
               ServerAddressMapResponse getServerAddressMap(ServerAddressMapRequest);               
               
               [
                 id = 9,
                 description = "Retrieve CA Certificates from the redirector",
                 details = "Retrieve CA Certificates from the redirector",
                 generate_command_class = false,
                 requires_authentication = false
               ]
               CACertificateResponse getCACertificates(CACertificateRequest);

               [
                 id = 10,
                 description = "Find matching CA Certificates",
                 details = "Find matching CA Certificates",
                 generate_command_class = false,
                 requires_authentication = false,
                 errors = {
                     REDIRECTOR_MISSING_SERVICE_NAME
                 }
               ]
               CACertificateResponse findCACertificates(X509MatchCriteria);

               [
                 id = 11,
                 description = "Publish server instance info",
                 details = "Publish server instance info",
                 requires_authentication = false,
                 client_export = false,
                 internal = true,
                 errortype = PublishServerInstanceInfoErrorResponse,
                 errors = {
                    REDIRECTOR_SERVER_NAME_ALREADY_IN_USE
                    }
               ]
               UpdateServerInstanceInfoResponse publishServerInstanceInfo(PublishServerInstanceInfoRequest);

               [
                 id = 12,
                 description = "Update server instance info",
                 details = "Update server instance info",
                 requires_authentication = false,
                 client_export = false,
                 internal = true,
                 errors = {
                    REDIRECTOR_NO_MATCHING_INSTANCE
                    }
               ]
               UpdateServerInstanceInfoResponse updateServerInstanceInfo(UpdateServerInstanceInfoRequest);
                              
               [
                id = 14,
                description = "Get address info of peer servers within the same cluster",
                details = "Returns the address info of peer servers within a given cluster",
                generate_command_class = false,
                requires_authentication = false,
                internal = true,
                client_export = false
               ]
               PeerServerAddressInfo getPeerServerAddress(GetPeerServerAddressRequest);    

               [
                 id = 15,
                 description = "Return metrics for CA loading functionality.",
                 details = "This RPC will return the number of attempts made to the redirector to obtain a CA for a given host/port organized by service name.  it will include both successful and failed attempts.",
                 requires_authentication = false,
                 client_export = false,
                 internal = true,
                 generate_command_class = false
               ]
               CAResolverMetrics getCAResolverMetrics();    

               [
                 id = 16,
                 description = "Purge registrations matching request",
                 details = "Purge registrations matching request",
                 passthrough = purgeServerRegistrationMaster,
                 internal = true,
                 requires_authentication = false,
                 client_export = false
               ]
               void purgeServerRegistration(PurgeServerRegistrationRequest);

               [
                 id = 17,
                 description = "Return an available server instance.",
                 details = "Receives request from the client, retreives the section requested and sends it to the client.",
                 generate_command_class = false,
                 requires_authentication = false,
                 errors = {
                       REDIRECTOR_SERVER_NOT_FOUND,
                       REDIRECTOR_NO_SERVER_CAPACITY,
                       REDIRECTOR_NO_MATCHING_INSTANCE,
                       REDIRECTOR_CLIENT_NOT_COMPATIBLE,
                       REDIRECTOR_CLIENT_UNKNOWN,
                       REDIRECTOR_UNKNOWN_CONNECTION_PROFILE,
                       REDIRECTOR_SERVER_SUNSET,
                       REDIRECTOR_SERVER_DOWN
                   },
                 errortype = ServerInstanceError,
                 http = {
                    resource = "redirector/getServerInstance",
                    method = "POST"
                }
               ]
               ServerInstanceInfo getServerInstanceHttp(ServerInstanceRequest);
        }        
    }

    [isSharded=true]
    master
    {
        methods
        {
               [
                 id = 1,
                 description = "Update server info for a given blaze server.",
                 details = "Called periodically by a blaze server master to update the redirector with its current status.",
                 requires_authentication = false,
                 internal = true,
                 errors = {
                       REDIRECTOR_SERVER_NAME_ALREADY_IN_USE
                   },
                 errortype = UpdateServerInfoErrorResponse 
               ]
               void updateServerInfo(UpdateServerInfoRequest);

               [
                 id = 2,
                 description = "Purges registrations for service cluster matching the request parameters",
                 details = "This RPC will purge registraions for service cluster matching the request parameters.  If service cluster is active, it should cleanly re-register upon its next update cycle with the redirector",
                 requires_authentication = false,
                 internal = true,
                 generate_command_class = false,
                 ignoreShardingKey = true
               ]
               void purgeServerRegistrationMaster(PurgeServerRegistrationRequest);    

        }

        notifications
        {
                        
            [
              id = 1,
              description = "Purge registrations matching request",
              details = "Purge registrations matching request" 
            ]
            NotifyPurgeServerRegistration(NotifyPurgeRegistration);
        }

        events
        {
            [ id = 1000, description = "A Blaze service was added." ]  
            ServiceAddedEvent(ServerInfoData);  
   

            [ id = 1001, description = "A Blaze service was removed." ]  
            ServiceRemovedEvent(ServiceRemoveInfo);  
   

            [ id = 1002, description = "A Blaze AuxMaster, AuxSlave or Instance was added." ]  
            InstanceAddedEvent(SlaveInfo);  
   

            [ id = 1004, description = "A Blaze AuxMaster, AuxSlave or Instance was removed." ]  
            InstanceRemovedEvent(InstanceRemoveInfo);  
        } //events
    }        
}
}
}
