[ headername="achievements/tdf/achievements.h" ]
#include "achievements/gen/achievements.tdf"

[ 
    client_include=false,
    headername="achievements/tdf/achievements_server.h" 
]
#include "achievements/gen/achievements_server.tdf"

namespace Blaze
{
namespace Achievements
{

[
  id = core/33,
  description = "Implementation of achievements interfaces.",
  details = "Provides functionality to access achievements stored in achievement service.",
  configurationType = AchievementsConfig
]
component Achievements
{
    errors
    {
        [description = "Error with user input"]
        ACHIEVEMENTS_ERR_INVALID_PARAMETER = 1;
        [description = "Invalid user credentials"]
        ACHIEVEMENTS_ERR_INVALID_CREDENTIALS = 2;
        [description = "User is not authorized to make this request"]
        ACHIEVEMENTS_ERR_NOT_AUTHORIZED = 3;
        [description = "The requested action is not allowed based on the current state"]
        ACHIEVEMENTS_ERR_NOT_ALLOWED = 4;
    }
    slave
    {
        methods
        {
            [
                id = 1,
                errors = {
                    ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                    ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                    ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                    ACHIEVEMENTS_ERR_NOT_ALLOWED
                },
                requiresUserSession = false,
                requires_authentication = true,
                http = {
                    method = "GET",
                    resource = "achievements/{user.type}/{user.id}/{productId}/{limit}",
                    custom_request_headers = {
                        "X-AuthToken" = "auxAuth.authToken",
                        "Authorization" = "auxAuth.trustedAuthToken",
                        "X-Forwarded-UserId" = "auxAuth.user.id",
                        "X-Forwarded-UserType" = "auxAuth.user.type"
                    },
                    url_params = {
                        "lang" = "language",
                        "metadata" = "includeMetadata",
                        "filtered" = "filtered"
                    },
                    status_code_errors = {
                        400 = ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                        401 = ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                        403 = ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                        409 = ACHIEVEMENTS_ERR_NOT_ALLOWED
                    },
                    responsePayloadMember = "achievements",
                    encodeEnumsAsStrings = true
                }
            ]
            GetAchievementsResponse getAchievements(GetAchievementsRequest);

            [
                id = 3,
                errors = {
                    ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                    ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                    ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                    ACHIEVEMENTS_ERR_NOT_ALLOWED
                },
                requiresUserSession = false,
                requires_authentication = true,
                http = {
                    method = "POST",
                    resource = "achievements/{user.type}/{user.id}/{productId}/{achieveId}/progress",
                    basic_auth = "auxAuth.userPassword",
                    url_params = {
                        "lang" = "language",
                        "metadata" = "includeMetadata"
                    },
                    custom_request_headers = {
                        "X-AuthToken" = "auxAuth.authToken",
                        "Authorization" = "auxAuth.trustedAuthToken",
                        "X-Forwarded-UserId" = "auxAuth.user.id",
                        "X-Forwarded-UserType" = "auxAuth.user.type",
                        "X-Signature" = "auxAuth.signature",
                        "X-Timestamp" = "auxAuth.timestamp"
                    },
                    status_code_errors = {
                        400 = ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                        401 = ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                        403 = ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                        409 = ACHIEVEMENTS_ERR_NOT_ALLOWED
                    },
                    requestPayloadMember = "progress",
                    encodeEnumsAsStrings = true
                }
            ]
            AchievementData grantAchievement(GrantAchievementRequest);

            [
                id = 6,
                errors = {
                    ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                    ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                    ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                    ACHIEVEMENTS_ERR_NOT_ALLOWED
                },
                requiresUserSession = false,
                requires_authentication = true,
                http = {
                    method = "POST",
                    resource = "achievements/events/{user.type}/{user.id}/{productId}",
                    basic_auth = "auxAuth.userPassword",
                    custom_request_headers = {
                        "X-AuthToken" = "auxAuth.authToken",
                        "Authorization" = "auxAuth.trustedAuthToken",
                        "X-Forwarded-UserId" = "auxAuth.user.id",
                        "X-Forwarded-UserType" = "auxAuth.user.type",
                        "X-Signature" = "auxAuth.signature",
                        "X-Timestamp" = "auxAuth.timestamp",
                        "X-Api-Version" = "auxAuth.apiVersion"
                    },
                    status_code_errors = {
                        400 = ACHIEVEMENTS_ERR_INVALID_PARAMETER,
                        401 = ACHIEVEMENTS_ERR_INVALID_CREDENTIALS,
                        403 = ACHIEVEMENTS_ERR_NOT_AUTHORIZED,
                        409 = ACHIEVEMENTS_ERR_NOT_ALLOWED
                    },
                    requestPayloadMember = "payload",
                    responsePayloadMember = "achievements",
                    encodeEnumsAsStrings = true
                }
            ]
            GetAchievementsResponse postEvents(PostEventsRequest);
            
        } // methods
    } // slave

} //component achievements
} //namespace achievements
} //namespace Blaze


