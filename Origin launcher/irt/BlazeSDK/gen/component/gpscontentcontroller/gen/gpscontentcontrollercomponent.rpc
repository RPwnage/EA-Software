

[ headername="gpscontentcontroller/tdf/gpscontentcontrollertypes.h" ]
#include "gpscontentcontroller/gen/gpscontentcontrollertypes.tdf"

[ 
  client_include = false,
  headername="gpscontentcontroller/tdf/gpscontentcontroller_server.h" 
]
#include "gpscontentcontroller/gen/gpscontentcontroller_server.tdf"

namespace Blaze
{
namespace GpsContentController
{
[
  id = core/27,
  description = "A component that implements General Petitioning System specification in Blaze.",
  details = "This component is specialisation of Petitioning Content interface in Blaze framework for GPS.",
  configurationType = GpsContentControllerConfig
]
component GpsContentController
{
    permissions
    {
        PERMISSION_GPS_ADMINISTRATOR = 1;
    }

    errors
    {
        [ description = "Specified content was not found" ]
        GPSCONTENTCONTROLLER_ERR_CONTENT_NOT_FOUND = 1;
    }

    slave
    {
        methods
        {
            [
              id = 1,
              description = "This command will file petition to GPS server",
              details = "This command will file petition to GPS server",
              errors = {
                    GPSCONTENTCONTROLLER_ERR_CONTENT_NOT_FOUND
              },
              http = {
                  resource = "/event/petition",
                  method = "POST"
              }
            ]
            FilePetitionResponse filePetition(FilePetitionRequest);

            [
              id = 2,
              description = "This command will fatch content",
              details = "This command is restricted to admin user only. It will fetch textual representation of content.",
              errors = {
                    GPSCONTENTCONTROLLER_ERR_CONTENT_NOT_FOUND
                } 
            ]
            FetchContentResponse fetchContent(FetchContentRequest);

            [
              id = 3,
              description = "This command will show or hide content",
              details = "This command is restricted to admin user only. It will show or hide content.",
              errors = {
                    GPSCONTENTCONTROLLER_ERR_CONTENT_NOT_FOUND
                } 
            ]
            void showContent(ShowContentRequest);

        } // methods
    } // slave
}
}
}


