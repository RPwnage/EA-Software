<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project xmlns="schemas/ea/framework3.xsd">

	<property name="stadia.support-shared-pch" value="false"/>

	<dependent name="StadiaSDK"/>

<!--portable optionsets--> 
   <optionset name="sdk.portable-gen-data">
    <option name="GGP_SDK_PATH" value="package.StadiaSDK.sdkdir"/>
  </optionset>

  <property name="default-lib-prefix"     value="lib" />
  <property name="default-lib-suffix"     value=".a" />
  <property name="default-dll-suffix"     value=".so"/>
  <property name="default-exe-suffix"     value=""/>

  <property name="exe-suffix"     value="${exe-suffix.${config-system}??${exe-suffix??${default-exe-suffix}}}"/>
  <property name="lib-prefix"     value="${lib-prefix.${config-system}??${lib-prefix??${default-lib-prefix}}}"/>
  <property name="lib-suffix"     value="${lib-suffix.${config-system}??${lib-suffix??${default-lib-suffix}}}"/>
  <property name="dll-suffix"     value="${dll-suffix.${config-system}??${dll-suffix??${default-dll-suffix}}}"/>

  <!-- <build> task properties -->
  <property name="build.pathstyle"      value="Unix"/>
  <!-- Compile in parallel on multiple CPUs         -->
  <property name="cc.parallelcompiler"    value="true"/>
  <property name="as.parallelcompiler"    value="true"/>

  <!-- config optionsets -->

  <optionset name="config-options-library">
    <option name="liboutputname" value="%outputdir%/${lib-prefix}%outputname%${lib-suffix}" />
  </optionset>

  <optionset name="config-options-program">
    <option name="linkoutputname" 			value="%outputdir%/%outputname%${exe-suffix}" />
	<option name="linkoutputpdbname"		value="%outputdir%/%outputname%${exe-suffix}.debug" /> <!-- this is currently not overridable, it simply tells nant where Stadia VSI will create this -->
  </optionset>

  <optionset name="config-options-dynamiclibrary" >
    <option name="generatedll"              value="on" />
    <option name="buildset.name"            value="DynamicLibrary" />
    <option name="buildset.tasks"           value="asm cc link" />
    <option name="buildset.cc.defines"      value="EA_DLL"/>
    <option name="linkoutputname"           value="%outputdir%/%outputname%${dll-suffix}" />
	<option name="linkoutputpdbname"		value="%outputdir%/%outputname%${dll-suffix}.debug" /> <!-- this is currently not overridable, it simply tells nant where Stadia VSI will create this -->
    <option name="impliboutputname"         value="%outputlibdir%/${lib-prefix}%outputname%${lib-suffix}" />
  </optionset>
  
  <optionset name="config-options-csharplibrary">
    <option name="buildset.name"            value="CSharpLibrary" />
    <option name="buildset.tasks"           value="csc" />
    <option name="buildset.csc.target"      value="library" />
    <option name="linkoutputname"           value="%outputdir%/%outputname%.dll" />
    <option name="delayedinit"              value="unixconfig-init-csharpcommon" />
  </optionset>

  <optionset name="config-options-csharpprogram">
    <option name="buildset.name"            value="CSharpProgram" />
    <option name="buildset.tasks"           value="csc" />
    <option name="buildset.csc.target"      value="exe" />
    <option name="linkoutputname"           value="%outputdir%/%outputname%.exe" />
    <option name="delayedinit"              value="unixconfig-init-csharpcommon" />
  </optionset>

  <target name="unixconfig-init-csharpcommon" hidden="true">
    <property name="build.resgen.program" value="${package.mono.tools.resgen}"/>
  </target>

  <property name="visualstudio.platform.name" value="GGP"/>
  <property name="eaconfig.visual-studio.linker-dependency-element-name" value="LibraryDependencies"/>
  <property name="visualstudio.platform.name" value="GGP"/>
  <property name="package.VisualStudio.platformtoolset" value="Ggp_Clang"/>
  <property name="platform.name.stadia" value="GGP"/>  
  
  <!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
  <!-- +-+-               Asset Deployment                                                        -+-+- -->
  <!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->

  <target name="copy-asset-files.stadia" style="use" description="Deploy files to the package" hidden="true">
    <property name="package.asset-configbuilddir" value="@{GetModuleOutputDir('bin', '${package.name}')}/assets" />
    <property name="${groupname}.CopyAssetsWithoutSync" value="${${groupname}.CopyAssetsWithoutSync??true}"/>
    <call target="copy-asset-files"/>
  </target>

  <optionset name="config-options-program" append="true">
    <option name="deployassets" value="false"/>
  </optionset>

	<property name="cc.std.stadia.default" value="${cc.std.stadia.default??c++17}"/>

	<optionset name="config-build-layout-entrypoint-common">
		<option name="executable" value="%output%"/>
	</optionset>

	<property name="platform.sdklibs.regular">
	</property>

	<property name="platform.sdklibs.debug">
		${platform.sdklibs.regular}
	</property>
	
	
	<property name="package.stadiasdk.link.options" value=""/> <!-- unnecessary property, but RenderCore2 assumes it's existence -->

	<property name="cc.includedirs.stadia.quotes" value="false"/>

	<include file="stadia-clang-buildtools.xml"/>

	<optionset name="config-options-common">
		<option name="exportdynamic" value="on"/>
		<option name="preprocess"/>
		<option name="postprocess">
			${option.value}
			stadia-common-postprocess
		</option>
	</optionset>
</project>
