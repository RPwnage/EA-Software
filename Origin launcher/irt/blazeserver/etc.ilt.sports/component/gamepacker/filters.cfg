
//gamemanager.scenariosConfig = {
    //filters = {
        "participantCapacityFilter" = {
            description = "basic filter game.participantCapacity."
            gameProperty = "game.participantCapacity" 
               requirement = {
                IntEqualityFilter = {
                    value     = { attrName="PARTICIPANT_CAPACITY", default=8 }
                    operation = "EQUAL" 
                }
            }
        }    
/*
        "createTemplateFilter" = {
            description = "basic filter on caller createTemplateName."
            gameProperty = "game.createTemplateName"
            requirement = {
                equalityFilter = {
                    operation = "EQUAL"
                    value =  { fromProperty = "caller.createTemplateName" }
                }
            }
        }

        "protocolVersionFilter" = {
            description = "basic filter on caller gameProtocolVersionString."
            gameProperty = "game.gameProtocolVersionString"
            requirement = {
                equalityFilter = {
                    operation = "EQUAL"
                    value =  { fromProperty = "caller.gameProtocolVersionString" }
                }
            }
        }
        
        "stateOpenToMatchmakingFilter" = {
            description = "basic filter on game state being joinable via matchmaking."
            gameProperty = "game.stateOpenToMatchmaking"
            requirement = {
                equalityFilter = {
                    operation = "EQUAL"
                    value =  { fromValue = "true" }
                }
            }
        }


        // These filters are just here as examples of the types of filters needed to accomplish correct game join matchmaking logic that respects both OpenForMatchmaking and JoinInProgressSupported game.settings as well as game.state of PRE_GAME and IN_GAME.

        // example usage of bitwise filter to operate on a numeric (non-bitfield) property (e.g: ENUM)
        "gameStateBitwiseFilter" = {
            description = "basic bitwise filter on game state"
            gameProperty = "game.state"
            requirement = {
                bitwiseFilter = {
                    operation = "SET_BITS_MATCH"
                    testBits = { fromValue = "0" }
                    bitMask = { fromValue = "1" }
                }
            }
        }

        "gameStatePregameFilter" = {
            description = "basic filter game state"
            gameProperty = "game.state"
            requirement = {
                setFilter = {
                    operation = "INCLUDE"
                    values = { 
                        fromValues = [
                            "INITIALIZING"
                            ,"PRE_GAME"
                        ]
                    }
                }
            }
        }

        "gameStatePreOrInGameFilter" = {
            description = "basic filter game state"
            gameProperty = "game.state"
            requirement = {
                setFilter = {
                    operation = "INCLUDE"
                    values = {
                        fromValues = [
                            "INITIALIZING"
                            ,"PRE_GAME"
                            ,"IN_GAME"
                        ]
                    }
                }
            }
        }

        // this filter should be combined with gamestate filter that accepts IN_GAME
        "gameOpenToMmAndJipFilter" = {
            description = "test game settings flags are open to matchmaking and join in progress"
            gameProperty = "game.settings"
            requirement = {
                bitwiseFilter = {
                    operation = "SET_BITS_MATCH"
                    testBits = { fromValue = "258" } // 100000010 setJoinInProgressSupported() { mBits |= 0x100 (256); } setOpenToMatchmaking() { mBits |= 0x2 (2); }
                    bitMask = { fromValue = "258" } // 100000010
                }
            }
        }

        // this filter should be combined with gamestate filter that accepts PRE_GAME only
        "gameOpenToMmFilter" = {
            description = "test game settings flags are open to matchmaking"
            gameProperty = "game.settings"
            requirement = {
                bitwiseFilter = {
                    operation = "SET_BITS_MATCH"
                    testBits = { fromValue = "2" } // 000000010 setOpenToMatchmaking() { mBits |= 0x2 (2); }
                    bitMask = { fromValue = "2" } // 000000010
                }
            }
        }

*/
        
    //}
//}
