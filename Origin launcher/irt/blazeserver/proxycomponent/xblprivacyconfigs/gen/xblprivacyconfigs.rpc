[ headername="xblprivacyconfigs/tdf/xblprivacyconfigs.h" ]
#include "xblprivacyconfigs/gen/xblprivacyconfigs.tdf"


namespace Blaze
{
namespace XBLPrivacy
{

[
    id = core/1021,
    description = "Proxy component used to define xbl privacy (block list) fetching",
    details = "xbl privacy",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]
component XBLPrivacyConfigs
{
    errors
    {
        [ description = "authentication error, possibly due to invalid/expired token" ]
        XBLPRIVACY_AUTHENTICATION_REQUIRED = 1; //http 401

        [ description = "The user has exceeded the rate limit for calls to the external privacy service" ]
        XBLPRIVACY_RATE_LIMIT_EXCEEDED = 2; //http 429
    }

    slave
    {
        methods
        {
            [
                id = 1,
                description = "Get the avoid people list for a single user",
                details = "Gets the avoid people list for the supplied user",
                requires_authentication = false,
                client_export = false,
                errors = {
                    XBLPRIVACY_AUTHENTICATION_REQUIRED,
                    XBLPRIVACY_RATE_LIMIT_EXCEEDED
                },
                http = {
                    resource = "/users/xuid({xuid})/people/avoid",
                    method = "GET",
                    custom_request_headers = {
                        "Authorization"          = "getBlockedListRequestHeader.authToken"
                    },
                    status_code_errors = {
                        401 = XBLPRIVACY_AUTHENTICATION_REQUIRED,
                        429 = XBLPRIVACY_RATE_LIMIT_EXCEEDED
                    },
                    contentType = "application/json",
                    addEncodedPayload = false
                }
            ]
            GetBlockedListResponse getBlockedList(GetBlockedListRequest);

            [
                id = 2,
                description = "Check the permissions for a batch of users, as requested by a single user",
                details = "Checks the permissions of a batch list, for the requesting user",
                requires_authentication = false,
                client_export = false,
                errors = {
                    XBLPRIVACY_AUTHENTICATION_REQUIRED,
                    XBLPRIVACY_RATE_LIMIT_EXCEEDED
                },
                http = {
                    resource = "/users/xuid({xuid})/permission/validate",
                    method = "POST",
                    custom_request_headers = {
                        "X-RequestedServiceVersion" = "permissionCheckBatchRequestHeader.serviceVersion",
                        "Authorization"          = "permissionCheckBatchRequestHeader.authToken"
                    },
                    status_code_errors = {
                        401 = XBLPRIVACY_AUTHENTICATION_REQUIRED,
                        429 = XBLPRIVACY_RATE_LIMIT_EXCEEDED
                    },
                    requestPayloadMember = "permissionCheckBatchRequestBody",
                    contentType = "application/json"
                }
            ]
            PermissionCheckBatchResponse permissionCheckBatch(PermissionCheckBatchRequest);

        }
    }
}


}
}
