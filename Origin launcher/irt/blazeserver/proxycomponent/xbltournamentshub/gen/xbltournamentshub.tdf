/*! ************************************************************************************************/
/*!
    \file xbltournamentshub.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[ headername="xblserviceconfigs/tdf/xblsessiondirectorycommontypes.h" ]
#include "xblserviceconfigs/gen/xblsessiondirectorycommontypes.tdf"

namespace Blaze
{

namespace XBLServices
{

[description="The display name of the team. Has a maximum length of 64."]
typedef string(64) TournamentTeamName;

[description="Common request header for updating Arena tournaments", trackChanges = true]
class TournamentsHubRequestHeader
{
    [tag="cvrn", description="contract version for tournament hubs service.", default="3"]
    string(MAX_XBLCONTRACTVERSION_CHAR_LEN) mContractVersion;

    [tag="atkn", description="authentication token."]
    string(-1) mAuthToken;

    [tag="ttid", description="To have our Xbox Live server to server calls move MPS members to active state automatically, MS requires setting the title id in this header used in join MPS calls."]
    TitleId mOnBehalfOfTitle;
    
    [tag="acpt", description="Accept header.", default="application/JSON"]
    string(-1) mAccept;
    
    [tag="alan", description="Accept-language header.", default="en-US"]
    string(-1) mAcceptLanguage;
};

[trackChanges = true]
class TournamentsHubErrorResponse
{
    [tag="srce", description="error source"]
    string(-1) mSource;
    [tag="desc", description="error description"]
    string(-1) mDescription;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Common Tournament Team Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

[description="Member of an Arena Team. Required fields: id"]
class ArenaMemberDetails
{
    [tag="id", description="The ID of the member. This is an unsigned long (in base 10) representing the XUID of the member. Must be unique within a team and not be registered within another team for this tournament."]
    string(-1) mId;
};

typedef list<ArenaMemberDetails> ArenaMemberDetailsList;

[description="Team info fetched from XBL. Required fields: id, name, registrationDate, standing, members. For Blaze, other than the name and id, other fields are mainly for extra logging and debugging currently.", trackChanges = true]
class ArenaTournamentTeamInfo
{
    // TeamRequest fields common to both create/update requests and get responses:

    [tag="tmid", description="The ID of the team. It is case insensitive and has a maximum length of 80. Valid characters are alphanumeric, '.', '-' and '_'. It is an opaque string specified by the tournament organizer."]
    string(-1) mId;
    
    [tag="name", description="The display name of the team. Has a maximum length of 64."]
    TournamentTeamName mName;

    [tag="stat", description="The state of the team. The team's state is updated within TournamentsHub when the Tournament Organizer would like clients to be aware of it. The state is 'Registered' by default. Possible values: Registered, Waitlisted, Standby, CheckedIn, Playing, Completed"]
    string(-1) mState;

    [tag="mbrs", description="The members for this team. Must not exceed the maxTeamSize or be smaller than the minTeamSize."]
    ArenaMemberDetailsList mMembers;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Get Tournament Team Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class GetArenaTeamForUserRequest
{
    [tag="toid", description="XDP configured Tournament Organizer Id"]
    TournamentOrganizer mOrganizerId;

    [tag="trid", description="Tournament Id"]
    TournamentId mTournamentId;
    
    [tag="xuid", description="xuid of the member to fetch for"]
    string(Blaze::MAX_EXTERNAL_ID_CHAR_LEN) mMemberId;

    [tag="head", description="header"]
    TournamentsHubRequestHeader mHeader;
};

[trackChanges = true]
class GetArenaTeamForUserResponse
{
    [tag="valu", description="returned teams"]
    list<ArenaTournamentTeamInfo> mValue;
};


[description="Helper info about an Arena Team Multiplayer Session", trackChanges = true]
class ArenaTeamParams
{
    [tag="unam"] XBLServices::MultiplayerSessionTeamName mUniqueName;
    [tag="name"] MultiplayerSessionTeamName mDisplayName;
    [tag="mbrs"] ArenaMemberDetailsList mMembers;
};
typedef list<ArenaTeamParams> ArenaTeamParamsList;

}
}
