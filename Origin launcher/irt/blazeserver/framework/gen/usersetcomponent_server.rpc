[ headername="framework/tdf/userdefines.h" ]
#include "framework/gen/userdefines.tdf"

[
  client_include = false,
  headername="framework/tdf/usersettypes_server.h"
]
#include "framework/gen/usersettypes_server.tdf"

[ client_include = false ]
#include "framework/userset/userset.h"

namespace Blaze
{

[
  id = framework/10,
  configurationType = UserSetConfig 
]
component UserSet
{
    errors
    {
    }

    [ clientname = "UserSet" ]
    slave
    {
        methods
        {
            [
                id = 1,
                description = "get session ids",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false               
            ]
            UserSetSessionIdsResponse getSessionIds(UserSetRequest);

            [
                id = 2,
                description = "get user blaze ids",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false               

            ]
            UserSetUserBlazeIdsResponse getUserBlazeIds(UserSetRequest);

            [
                id = 3,
                description = "count sessions",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false               

            ]
            CountResponse countSessions(UserSetRequest);

            [
                id = 4,
                description = "count users",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false   
            ]
            CountResponse countUsers(UserSetRequest);

            [
                id = 5,
                description = "get user ids",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false               

            ]
            UserSetUserIdsResponse getUserIds(UserSetRequest);


            [
                id = 6,
                description = "get routing info",
                errors = {
                },
                client_export = false,
                internal = true,
                requires_authentication = false,
                setCurrentUserSession = false               

            ]
            RoutingOptionsResponse getProviderRoutingOptions(UserSetRequest);
        }

        notifications
        {
        }

        events
        {
        }
    }
}

}