# Documentation - https://docs.docker.com/compose/compose-file/
# (make sure to read the documentation of the version number specified below - currently 3.8)
# We try and use the known versions of following containers currently to keep things stable.

version: "3.8"
services:

  redis-cluster:
    # https://github.com/Grokzen/docker-redis-cluster / https://registry.hub.docker.com/r/grokzen/redis-cluster
    image: grokzen/redis-cluster:5.0.0
    # Running the entire Redis Cluster within a single container via this custom container image
    # since it is the simplest way to setup a cluster using Docker Compose.
    ports:
      # Masters 1-3: 30000-30002 / Slaves 1-3: 30003-30005
      - 30000-30005:30000-30005
    stdin_open: true
    tty: true
    healthcheck:
      test: redis-cli -p 30000 PING
    environment:
      INITIAL_PORT: 30000
      MASTERS: 3
      SLAVES_PER_MASTER: 0

  gen-blaze-redis-config:
    image: bash:latest
    restart: "no"
    volumes:
      - ./../../init:/init
    command: [sh,-c,"echo 'main = { nodes = [ \"localhost:30000\", \"localhost:30001\", \"localhost:30002\" ] }' > /init/redis.cfg"]

  blaze:
    image: blaze-build:1.8
    network_mode: "host"
    volumes:
      - ./../..:/blazeserver
      - ./../../init/logs:/logs
      - ./wait-for-it.sh:/tmp/wait-for-it.sh
    working_dir: /blazeserver/etc
    # CAP_SYS_PTRACE is required by google coredumper
    cap_add:
      - SYS_PTRACE
    entrypoint:
      - /tmp/wait-for-it.sh
      - localhost:30000
      - --delay=1
      - --
      - /blazeserver/build/blazeserver/15.1.1.10.1/unix64-clang-debug/bin/blazeserver
      - --dbdestructive
      - -DBASE_PORT=11000
      - --logdir
      - /logs
      - --logname
      - blazeserver
      - env/local.boot
    depends_on:
      - redis-cluster
      - gen-blaze-redis-config
    environment:
      USER: ${USER}
      HOME: ${HOME}
      LD_LIBRARY_PATH: "/blazeserver/build/blazeserver/15.1.1.10.1/unix64-clang-debug/container_lib"
