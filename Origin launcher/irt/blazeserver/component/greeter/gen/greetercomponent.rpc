[ headername="greeter/tdf/greeter.h" ]
#include "greeter/gen/greeter.tdf"

[ 
client_include = false,
headername="greeter/tdf/greeter_server.h" 
]
#include "greeter/gen/greeter_server.tdf"

namespace studio
{
namespace title
{
namespace greeter
{
namespace v1alpha
{

[
  id = core/334,
  description = "Implementation of greeter interfaces.",
  details = "Provides functionality to access greeter.",
  configurationType = GreeterConfig,
  strictConfigParsing = true,
  grpcOnly = true
]
component Greeter
{
    errors
    {
        [ description = "The request is invalid." ]
        GREETER_ERR_INVALID_REQUEST = 1;
    }

    slave
    {           
        methods
        {
            [
              id = 1,
              errors = {GREETER_ERR_INVALID_REQUEST}, 
              description = "An rpc that greets user.",
              obfuscate_platform_info = true,
              errortype = GreetErrorResponse
            ]
            GreetResponse greet(GreetRequest);

            [
                id = 2,
                errors = {GREETER_ERR_INVALID_REQUEST},
                errortype = GreetErrorResponse,
                obfuscate_platform_info = true,
                description = "ServerStreaming gRPC example: This command will stream the requested number of greetings to the client over a ServerStreaming gRPC channel."
            ]
            stream GreetResponse greetServerStreaming(GreetRequest);

            [
                id = 3,
                errors = {GREETER_ERR_INVALID_REQUEST},
                errortype = GreetErrorResponse,
                obfuscate_platform_info = true,
                description = "ClientStreaming gRPC example: This command will accept at most 100 requests from a client over a ClientStreaming gRPC channel before returning a response with a message indicating the number of requests processed."
            ]
            GreetResponse greetClientStreaming(stream GreetRequest);

            [
                id = 4,
                errors = {GREETER_ERR_INVALID_REQUEST},
                errortype = GreetErrorResponse,
                obfuscate_platform_info = true,
                description = "BidirectionalStreaming gRPC example: If the GreetRequest::Num field is >= 0, the server will stream (GreetRequest::Num) responses to the client.  If the GreetRequest::Num field is < 0, the server will wait to receive abs(GreetRequest::Num) requests from the client before sending one response."
            ]
            stream GreetResponse greetBidirectionalStreaming(stream GreetRequest);

        } // methods
    } // slave

} //component greeter

} // namespace v1alpha
} // namespace greeter
} // namespace title
} // namespace studio


