[headername="clubs/tdf/clubs_base.h"]
#include "clubs_base.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace Clubs
{

class RecordSettings
{
    [tag="rcid", description="Record Id."]
    uint32_t mRecordId;

    [tag="rcna", description="Record name."]
    string(64) mRecordName;
};

class ClubsComponentSettings
{
    [tag="clds", description="Club division size."]
    uint16_t mClubDivisionSize;

    [tag="awst", description="Award settings."]
    list<AwardSettings> mAwardSettings;

    [tag="rest", description="Record settings."]
    list<RecordSettings> mRecordSettings;

    [tag="mxev", description="Max count of events per club."]
    uint16_t mMaxEvents;

    [tag="puhr", description="Hour of the day that the purge for inactive clubs should occur"]
    uint16_t mPurgeHour;

    [tag="sovr", description="End of season timestamp"]
    int32_t mSeasonRolloverTime;
    
    [tag="strt", description="Start of season timestamp"]
    int32_t mSeasonStartTime;    

    [tag="mxrv", description="Max count of rivals per club."]
    uint16_t mMaxRivalsPerClub;

    [tag="dmns", description="Club domain list."]
    ClubDomainList mDomainList;
};

class ClubNews
{
    [tag="nwcc", description="[DEPRECATED: Use UserCoreIdentification instead] Id of user who created the content."]
    BlazeId mContentCreator;
    [tag="pers", description="[DEPRECATED: Use UserCoreIdentification instead] Persona name of user who created the content."]
    string(MAX_PERSONA_LENGTH) mPersona;
    [tag="nwty", description="News type."]
    NewsType mType;

    [tag="ntxt", description="News text."]
    string(256) mText;

    [tag="nsis", description="String Id describing the news."]
    string(64) mStringId;

    [tag="nprl", description="Parameter list."]
    string(256) mParamList;

    [tag="clid", description="Club Id related to the news."]
    ClubId mAssociateClubId;

    [tag="tmst", description="Timestamp of news"]
    uint32_t mTimestamp;

    [tag="user", description="The core info of user who created the content."]
    CoreIdentification mUser;  
};

class ClubLocalizedNews
{
    [tag="nwcc", description="[DEPRECATED: Use UserCoreIdentification instead] Id of user who created the content."]
    BlazeId mContentCreator;
    [tag="pers", description="[DEPRECATED: Use UserCoreIdentification instead] Persona name of user who created the content."]
    string(MAX_PERSONA_LENGTH) mPersona;
    [tag="nwty", description="News type."]
    NewsType mType;

    [tag="ntxt", description="News text."]
    string(256) mText;

    [tag="clid", description="Club Id related to the news."]
    ClubId mAssociateClubId;

    [tag="nwfl", description="News flags."]
    ClubNewsFlags mFlags;

    [tag="nwid", description="News Id"]
    ObjectId mNewsId;
    
    [tag="tmst", description="Timestamp of news"]
    uint32_t mTimestamp;

    [tag="user", description="The core info of user who created the content."]
    CoreIdentification mUser; 
};

typedef list<ClubLocalizedNews> ClubLocalizedNewsList;
typedef map<ClubId, ClubLocalizedNewsList> ClubLocalizedNewsListMap;

[trackChanges = true]
class CustClubSettings
{
    [tag="cop1", description="Custom option 1"]
    uint32_t mCustOpt1;
    [tag="cop2", description="Custom option 2"]
    uint32_t mCustOpt2;
    [tag="cop3", description="Custom option 3"]
    uint32_t mCustOpt3;
    [tag="cop4", description="Custom option 4"]
    uint32_t mCustOpt4;
    [tag="cop5", description="Custom option 5"]
    uint32_t mCustOpt5;
};

[trackChanges = true]
class ClubSettings
{
    [tag="lang", description="The club's official language."]
    Language mLanguage;
    
    [tag="tmid", description="Club's team Id."]
    TeamId mTeamId;

    [tag="luby", description="Last updated by the blaze Id."]
    BlazeId mLastUpdatedBy;
	
	[tag="name", description="Club's name."]
    ClubName mClubName;

    [tag="nuqn", description="Non-unique club name."]
    ClubNonUniqueName mNonUniqueName;

    [tag="claf", description="Club acceptance flags."]
    ClubAcceptanceFlags mAcceptanceFlags;

    [tag="casf", description="Club's Art settings flags."]
    ClubArtSettingsFlags mClubArtSettingsFlags;

    [tag="hspw", description="Flag to specify whether Club has password, works only when retrieving club settings."]
    bool mHasPassword;

    [tag="pswd", description="Club's password, case insensitive, only can be retrieved or changed by GMs or higher."]
    ClubPassword mPassword;

    [tag="loid", description="Club's Logo Id."]
    LogoId mLogoId;

    [tag="bnid", description="Club's Banner Id."]
    BannerId mBannerId;

    [tag="arpt", description="Club's Banner Id."]
    ArtPackageType mArtPackageType;
    
    [tag="slvl", description="Club's Season Play Level."]
    SeasonLevel mSeasonLevel;

    [tag="plvl", description="Club's Previous Season Play Level."]
    SeasonLevel mPreviousSeasonLevel;

    [tag="lupd", description="Timestamp of last update to previous season level."]
    int32_t mLastSeasonLevelUpdate;
    
    [tag="clcs", description="Club's custom settings flags."]
    CustClubSettings mCustClubSettings;

    [tag="clrg", description="Club's region."]
    ClubRegion mRegion;

    [tag="clds", description="Description for the club."]
    ClubDesc mDescription;

    [tag="cldu", description="Metadata associated with the club."]
    MetadataUnion mMetaDataUnion;

    [tag="mdu2", description="Metadata2 associated with the club."]
    MetadataUnion mMetaData2Union;

    [tag="clmd", description="DEPRECATED (kept for backwards compatibility only - use MetaDataUnion instead). Metadata associated with the club, as a string."]
    MetadataString mMetaData;

    [tag="cld2", description="DEPRECATED (kept for backwards compatibility only - use MetaDataUnion2 instead). Metadata2 associated with the club, as a string."]
    MetadataString mMetaData2;

    [tag="jona", description="Type of requestors this club would like to accept joins automatically from."]
    RequestorAcceptance mJoinAcceptance; 

    [tag="spca", description="Type of requestors this club would like to accept to skip password check on."]
    RequestorAcceptance mSkipPasswordCheckAcceptance; 

    [tag="ptna", description="Type of requestors this club would like to accept petitions from."]
    RequestorAcceptance mPetitionAcceptance; 

    [tag="isnp", description="Flag to denote if the club name has been flagged as profane."]
    bool mIsNameProfane; 
};

class ClubInfo
{
    [tag="cimc", description="Member count."]
    uint32_t mMemberCount;

    [tag="gmcn", description="Count of club's Game Masters."]
    uint32_t mGmCount;

    [tag="awcn", description="Count of awords won."]
    uint32_t mAwardCount;

    [tag="lsop", description="ID of last opponent this club played against."]
    ClubId mLastOppo;

    [tag="opnm", description="Last opponent club name."]
    ClubName mLastOppoName;

    [tag="lsgr", description="The result of the last match club's team played."]
    string(32) mLastGameResult;

    [tag="lgtm", description="Last game finsh time."]
    uint32_t mLastGameTime;

    [tag="msco", description="Member online status counts."]
    MemberOnlineStatusCountsMap mMemberOnlineStatusCounts;

    [tag="crti", description="Time and date the club was created."]
    uint32_t mCreationTime;

    [tag="lati", description="Last time the club was active."]
    uint32_t mLastActiveTime;

    [tag="rvcn", description="Count of club's Rivals."]
    uint32_t mRivalCount;
};

[tdfid="hash"]
class Club
{
    [tag="clid", description="Club's Id."]
    ClubId mClubId;

    [tag="name", description="Club's name."]
    ClubName mName;

    [tag="dmid", description="Club's domain id."]
    ClubDomainId mClubDomainId;

    [tag="clst", description="Club's settings such as name, description, art etc."]
    ClubSettings mClubSettings;

    [tag="clin", description="Club's info such as count of online memebers, number of awards won etc."]
    ClubInfo mClubInfo;
    
    [tag="cltg", description="Club's tags."]
    ClubTagList mTagList;  
};

[description="Clubs Order for clubs search result."]
enum ClubsOrder
{
    [description="Do not order."]
    CLUBS_NO_ORDER = 0,
    
    [description="Order by club name."]
    CLUBS_ORDER_BY_NAME = 1,
    
    [description="Order by club creation time."]
    CLUBS_ORDER_BY_CREATIONTIME = 2,
    
    [description="Order by count of club members."]  
    CLUBS_ORDER_BY_MEMBERCOUNT  = 3 

};

enum OrderMode 
{  
    [tag="asco", description="Ascending order."]  
    ASC_ORDER = 0,  

    [tag="desco", description="Descending order."]  
    DESC_ORDER = 1,  
};  

typedef list<Club> ClubList;

class GetClubsRequest
{
    [tag="clid", description="List of Ids of clubs for which to fetch details."]
    ClubIdList mClubIdList;

    [tag="clti", description="Whether or not to include tags with the club details."]
    bool mIncludeClubTags;

    [tag="mxrc", default=UINT32_MAX, description="Maximum count of results to return."]
    uint32_t mMaxResultCount;     

    [tag="ofrc", default=0, description="Offset into results array to begin response array with."]
    uint32_t mOffset;     

    [tag="codr", description="Clubs Order for clubs search result."]  
    ClubsOrder mClubsOrder;     

    [tag="odmd", description="Order mode for ascending/descending."] 
    OrderMode mOrderMode;

    [tag="skct", default=false, description="Skip calc db rows."]
    bool mSkipCalcDbRows;
};

class ClubMember
{
    [tag="user", description="The Blaze user information of this member."]
    CoreIdentification mUser; 

    [tag="cmtp", description="Membership status for the member."]
    MembershipStatus mMembershipStatus;

    [tag="mstm", description="User became member of this club since this time."]
    uint32_t mMembershipSinceTime;

    [tag="mbos", description="Member's online status."]
    MemberOnlineStatus mOnlineStatus;
    
    [tag="meta", description="Member's meta data."]
    MemberMetaData mMetaData;
};

class ClubMembership
{
    [tag="clid", description="Club's Id."]
    ClubId mClubId;

    [tag="dmid", description="Club's domain Id."]
    ClubDomainId mClubDomainId;

    [tag="name", description="Club's name."]
    ClubName mClubName;

    [tag="mber", description="Club member details."]
    ClubMember mClubMember;
};

class ClubRival
{
    [tag="clid", description="Rival Club Id."]
    ClubId mRivalClubId;

    [tag="cop1", description="Rival custom option 1."]
    uint64_t mCustOpt1;

    [tag="cop2", description="Rival custom option 2."]
    uint64_t mCustOpt2;

    [tag="cop3", description="Rival custom option 3."]
    uint64_t mCustOpt3;

    [tag="meta", description="Metadata associated with the rivalry."]
    RivalMetadata mMetaData;

    [tag="crti", description="Time and date the rivalry was created."]
    uint32_t mCreationTime;

    [tag="lati", description="Last time the rivalry was updated."]
    uint32_t mLastUpdateTime;
};

typedef list<ClubRival> ClubRivalList;

class UpdateMemberOnlineStatusRequest
{
    [tag="stat", description="New status"]
    MemberOnlineStatus mNewStatus;
    
    [tag="clid", default=INVALID_CLUB_ID, description="Club Id if status is club specific, INVALID_CLUB_ID if not"]
    ClubId mClubId;
};

typedef list<ClubMember> ClubMemberList;
typedef list<ClubMembership> ClubMembershipList;

class ClubMemberships
{
    [tag="cmsl", description="List of club memberships."]
    ClubMembershipList mClubMembershipList;
};

typedef map<BlazeId, ClubMemberships> ClubMembershipMap;

class ClubMetadata
{
    [tag="blid", description="Blaze Id."]
    BlazeId mBlazeId;
	
    [tag="clid", default=INVALID_CLUB_ID, description="Club Id."]
    ClubId mClubId;	

    [tag="mdu2", description="Metadata associated with the club."]
    MetadataUnion mMetaDataUnion;
};

typedef map<BlazeId, ClubMetadata> ClubMetadataMap;

class ClubMessage
{
    [tag="inid", description="Unique Id for the message."]
    uint32_t mMessageId;

    [tag="invt", description="Type of message."]
    MessageType mMessageType;

    [tag="clid", description="Id of club which is tied to this message."]
    ClubId mClubId;

    [tag="clnm", description="Name of the club which is tied to this message."]
    ClubName mClubName;

    [tag="time", description="Timestamp of when this message was sent"]
    uint32_t mTimeSent;
    
    [tag="sedr", description="The user info of the sender."]
    CoreIdentification mSender;  

    [tag="recr", description="The user info of the receiver."]
    CoreIdentification mReceiver;  
};

typedef list<ClubMessage> ClubMessageList;
typedef map<ClubId, ClubMessageList> ClubMessageListMap;

class ClubAward
{
    [tag="awid", description="Unique award Id."]
    ClubAwardId mAwardId;

    [tag="awiu", description="URL where client can find image of the award."]
    string(512) mAwardImgURL;

    [tag="imcs", description="Checksum of the award image file."]
    int32_t mAwardImgCheckSum;

    [tag="cawi", description="Count of the award winnings."]
    uint32_t mCount;

    [tag="ludt", description="Last time the award record was updated."]
    uint32_t mLastUpdateTime;
};

typedef list<ClubAward> ClubAwardList;

class ClubRecord
{
    [tag="rcid", description="Unique record Id."]
    ClubRecordId mRecordId;

    [tag="rcnm", description="Record name."]
    string(32) mRecordName;

    [tag="rcdc", description="Record description."]
    string(128) mRecordDescription;

    [tag="stat", description="Record holding statistic that was recorded."]
    string(32) mRecordStat;
    
    [tag="styp", description="Record holding statistic type."]
    RecordStatType mRecordStatType;

    [tag="ludt", description="Last time this record was updated."]
    uint32_t mLastUpdateTime;

    [tag="user", description="The Blaze core user information."]
    CoreIdentification mUser;
};

typedef list<ClubRecord> ClubRecordList;
typedef list<ClubRecordId> ClubRecordIdList;

class ClubGameSummary
{
    [tag="opid", description="Unique Id of the opponent club."]
    ClubId mOppoClubId;

    [tag="nwin", description="Number of wins."]
    uint32_t mWin;

    [tag="nlos", description="Number of losses."]
    uint32_t mLoss;

    [tag="ntie", description="Number of ties."]
    uint32_t mTie;

    [tag="nlup", description="Last time this record was updated."]
    uint32_t mLastUpdateTime;
};


typedef map<ClubDomainId, uint32_t> ClubCensusDomainMap;

class ClubsComponentInfo
{
    [tag="clcn", description="Total count of all clubs."]
    uint32_t mClubsCount;
    
    [tag="cldm", description="The count of clubs by domain."]
    ClubCensusDomainMap mClubsByDomain;
    
    [tag="mbcn", description="Total count of all members."]
    uint32_t mMembersCount;
    
    [tag="mbdm", description="The count of members by domain."]
    ClubCensusDomainMap mMembersByDomain;
};

class SendInvitationRequest
{
    [tag="clid", description="Id of club to send invite from."]
    ClubId mClubId;

    [tag="blid", description="Invitee Id."]
    BlazeId mBlazeId;
};

class RemoveMemberRequest
{
    [tag="clid", description="Id of club to remove member from."]
    ClubId mClubId;
     
    [tag="blid", description="Id of member to remove."]
    BlazeId mBlazeId;
};

class PromoteToGMRequest
{
    [tag="clid", description="Id of club to promote member from."]
    ClubId mClubId;
     
    [tag="blid", description="Id of member to promote to GM."]
    BlazeId mBlazeId;
};

class DemoteToMemberRequest
{
    [tag="clid", description="Id of club to demote GM from."]
    ClubId mClubId;
     
    [tag="blid", description="Id of GM to demote to member."]
    BlazeId mBlazeId;
};

enum MemberOrder
{
    [tag="nod", description="Do not order."]
    MEMBER_NO_ORDER = 0,
   
    [tag="jtod", description="Order by member's joining time."]
    MEMBER_ORDER_BY_JOIN_TIME = 1,
};

enum MemberTypeFilter
{ 
    ALL_MEMBERS        = 0, 
    GM_MEMBERS         = 1, 
    NON_GM_MEMBERS     = 2 
}; 



class GetMembersRequest
{
    [tag="clid", description="Club Id for which to get members."]
    ClubId mClubId;

    [tag="mxrc", default=UINT32_MAX, description="Maximum count of results to return."]
    uint32_t mMaxResultCount;

    [tag="ofrc", default=0, description="Offset into results array to begin response array with."]
    uint32_t mOffset;
    
    [tag="ordt", description="order type for sorting members."]
    MemberOrder mOrderType;
   
    [tag= "ordm", description="Order Mode for ascending/descending."]
    OrderMode mOrderMode;   

    [tag="film", description="filter for GM and non-GM members."]
    MemberTypeFilter mMemberType;

    [tag="skct", default=false, description="Skip calc db rows."]
    bool mSkipCalcDbRows;    

    [tag="perp", description="partial gamertag."]   
    string(128) mPersonaNamePattern;    
};

class CreateClubRequest
{
    [tag="dmid", description="Club domain id."]
    ClubDomainId mClubDomainId;

    [tag="cnam", description="Club name."]
    ClubName mName;

    [tag="cset", description="Club settings."]
    ClubSettings mClubSettings;
    
    [tag="cltg", description="Club tags."]
    ClubTagList mTagList;  
};

class UpdateClubSettingsRequest
{
    [tag="clid", description="Club Id for which to update settings."]
    ClubId mClubId;

    [tag="clst", description="Club settings to set"]
    ClubSettings mClubSettings;
    
    [tag="cltg", description="Club tags to set"]
    ClubTagList mTagList;
};

enum SearchRequestorAcceptance 
{ 
    CLUB_ACCEPTS_UNSPECIFIED, 
    CLUB_ACCEPTS_ALL,
    CLUB_ACCEPTS_NONE 
}; 

class FindClubsRequest
{
    [tag="adid", default=true, description="Whether to search in only one domain or all. If true, the ClubDomainId field is ignored."]
    bool mAnyDomain;

    [tag="dmid", description="Club Domain Id. This search parameter is used if the AnyDomain flag is false."]
    ClubDomainId mClubDomainId;

    [tag="cnam", description="Club name."]
    ClubName mName;

    [tag="lang", description="The club's official language."]
    Language mLanguage;

    [tag="atid", default=true, description="Don't search for Club's team Id. If true, the TeamId field is ignored."]
    bool mAnyTeamId;

    [tag="tmid", description="Club's team Id. This search parameter is used if the AnyTeamId flag is false."]
    TeamId mTeamId;

    [tag="nuqn", description="Club non-unique name."]
    ClubNonUniqueName mNonUniqueName;

    [tag="acms", description="Acceptance flags mask, set the bit to 1 for the corresponding bits in mAcceptanceFlags you want to use in search."]
    ClubAcceptanceFlags mAcceptanceMask;
    
    [tag="acef", description="Acceptance flags to search by or 0 for don't care."]
    ClubAcceptanceFlags mAcceptanceFlags;
    
    [tag="seal", description="Season Level to search by or 0 for don't care."]
    SeasonLevel mSeasonLevel;
    
    [tag="creg", description="Club Region to search by or 0 for don't care."]
    ClubRegion mRegion;
    
    [tag="mimc", description="Minimum count of members in a club, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    uint32_t mMinMemberCount;

    [tag="mamc", description="Maximum count of members in a club, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    uint32_t mMaxMemberCount;

    [tag="cfli", description="Ids of clubs to return if other conditions are satisfied."]
    ClubIdList mClubFilterList;

    [tag="ufli", description="Ids of users who's club should be returned if other conditions are satisfied, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    BlazeIdList mMemberFilterList;

    [tag="mmsc", description="Minimum members online counts."]
    MemberOnlineStatusCountsMap mMinMemberOnlineStatusCounts;

    [tag="lgtm", description="Searching for clubs that finished playing their last game mLastGameTimeOffset seconds ago, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    uint32_t mLastGameTimeOffset;

    [tag="skmd", description="Do not populate metadata."]
    uint8_t mSkipMetadata;
    
    [tag="clto", description="Operation code defining how to use the tags."]
    TagSearchOperation mTagSearchOperation;

    [tag="cltg", description="Club tags. If empty, then tag filtering will be ignored--regardless of the actual operation setting. Club tags are not considered for searches including a minimum member online status count or for searches specifying a member online status filter and non-zero sum."]
    ClubTagList mTagList;
    
    [tag="clti", description="Whether or not to include tags in the details of found clubs."]
    bool mIncludeClubTags;

    [tag="pswd", description="Whether or not to include password protected clubs in result."]
    PasswordOption mPasswordOption;

    [tag="mxrc", description="Maximum count of results to return."]
    uint32_t mMaxResultCount;

    [tag="ofrc", description="Offset into results array to begin response array with, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    uint32_t mOffset;
    
    [tag="codr", description="Clubs Order for clubs search result, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    ClubsOrder mClubsOrder;
    
    [tag="odmd", description="Order mode for ascending/descending, won't work with mMinMemberOnlineStatusCounts or for searches specifying a member online status filter and non-zero sum."]
    OrderMode mOrderMode;

    [tag="skct", default=false, description="Skip calc db rows."]
    bool mSkipCalcDbRows;
    
    [tag="peac", default=CLUB_ACCEPTS_UNSPECIFIED, description="Controls whether or not to include only clubs that have the petition acceptance flag set to CLUB_ACCEPT_ALL, meaning that any user can petition."]
    SearchRequestorAcceptance mPetitionAcceptance; 
    
    [tag="joac", default=CLUB_ACCEPTS_UNSPECIFIED, description="Controls whether or not to include only clubs that have the join acceptance flag set to CLUB_ACCEPT_ALL, meaning that any user can join the club."]
    SearchRequestorAcceptance mJoinAcceptance;
};
   
class FindClubs2Request
{
    [tag="rqst", description="Request parameters for finding clubs."]
    FindClubsRequest params;
 
    [tag="mosl", description="A list of member online status to filter."]
    MemberOnlineStatusList mMemberOnlineStatusFilter;  

    [tag="mosc", description="Minimum sum of members online status counts."]  
    uint32_t mMemberOnlineStatusSum;
};

class FindClubsResponse
{
    [tag="clst", description="List of clubs that match criteria."]
    ClubList mClubList;
    
    [tag="ctct", description="Total count of the clubs queried without limit or offset, won't work if mMinMemberOnlineStatusCounts in request is not empty."]
    uint32_t mTotalCount;
};

class FindClubsAsyncResponse
{
    [tag="sqid"] uint32_t mSequenceID;
    [tag="cont"] uint32_t mCount;
    
    [tag="ctct", description="Total count of the clubs queried without limit or offset, won't work if mMinMemberOnlineStatusCounts in request is not empty."]
    uint32_t mTotalCount;
};

class FindClubsAsyncResult
{
    [tag="sqid"] uint32_t mSequenceID;
    [tag="club"] Club mClub;
};

class GetInvitationsRequest
{
    [tag="clid", description="Id of club to get invites for."]
    ClubId mClubId;

    [tag="invt", description="Type of invitations to retrieve."]
    InvitationsType mInvitationsType;
    
    [tag="nsot", description="How to sort the invitations in response."]
    TimeSortType mSortType;    
};

class ProcessInvitationRequest
{
    [tag="inid", description="Unique identifier of invitation."]
    uint32_t mInvitationId;
};

class PostNewsRequest
{
    [tag="clid", description="Club Id to post news for."]
    ClubId mClubId;
    
    [tag="nwli", description="Club news to post."]
    ClubNews mClubNews;
};

[
    description = "[DEPRECATED] get news for single club id."
]
class GetNewsRequest
{
    [tag="clid", description="Id of club to get news for."]
    ClubId mClubId;

    [tag="tfil", description="List of types of news to filter."]
    NewsTypeList mTypeFilters;

    [tag="nsot", description="How to sort the news in response."]
    TimeSortType mSortType;

    [tag="mcnt", description="Maximum count of news in response."]
    uint32_t mMaxResultCount;

    [tag="ofst", description="Offset into news list to start response with."]
    uint32_t mOffSet;
};

class SetNewsItemHiddenRequest
{
    [tag="clid", description="Id of club news belongs to."]
    ClubId mClubId;

    [tag="blid", description="Id of member who published the news"]
    ObjectId mNewsId;
    
    [tag="ishd", description="Hide news if true, show if false"]
    bool mIsHidden;
};

class SetMetadataRequest
{
    [tag="clid", description="Id of club to set metadata for."]
    ClubId mClubId;

    [tag="mtdu", description="Actual metadata to set."]
    MetadataUnion mMetaDataUnion;

    [tag="metd", description="DEPRECATED (kept for backwards compatibility only - use MetaDataUnion instead). Actual metadata to set."]
    MetadataString mMetaData;
};

class GetNewsResponse
{
    [tag="nwli", description="News list."]
    ClubLocalizedNewsList mLocalizedNewsList;
    
    [tag="tlpg", description="Total pages"]  
    uint16_t mTotalPages;  
};

class CreateClubResponse
{
    [tag="clid", description="Id of new club."]
    ClubId mClubId;
};

class GetDivisionResponse
{
    [tag="divn", description="Club's division."]
    uint32_t mDivision;

    [tag="srnk", description="Starting rank."]
    uint32_t mStartingRank;
};

class GetClubsResponse
{
    [tag="clst", description="List of clubs."]
    ClubList mClubList;
    
    [tag="ctct", description="Total count of the clubs queried without limit or offset."] 
    uint32_t mTotalCount;  
};


class GetMembersResponse
{
    [tag="cmls", description="Club member list."]
    ClubMemberList mClubMemberList;

    [tag="tcon", description="Member list total number"]  
    uint32_t mTotalCount; 
};

class GetMembersAsyncResponse
{
    [tag="sqid"] uint32_t mSequenceID;
    [tag="cont"] uint32_t mCount;

    [tag="tcon", description="Member list total number"]  
    uint32_t mTotalCount; 
};

class GetMembersAsyncResult
{
    [tag="sqid"] uint32_t mSequenceID;
    [tag="mmbr"] ClubMember mClubMember;
};

class GetInvitationsResponse
{
    [tag="cist", description="List of invitations."]
    ClubMessageList mClubInvList;
};

class MemberOnlineStatusClass
{
    [tag="most", description="Member online status."]
    MemberOnlineStatus mMemberOnlineStatus;

    [tag="msst", description="Membership status."]
    MembershipStatus mMembershipStatus;
};

class GetClubMembershipForUsersRequest
{
    [tag="idlt", description="List of Blaze Ids to use to look up membership info"]
    BlazeIdList mBlazeIdList;
};

class GetClubMembershipForUsersResponse
{
    [tag="mmap", description="Map of Blaze Ids to their ClubMemberships"]
    ClubMembershipMap mMembershipMap;    
};

class GetClubMetadataForUsersRequest
{
    [tag="idlt", description="List of Blaze Ids to use to look up club metadata"]
    BlazeIdList mBlazeIdList;
};

class GetClubMetadataForUsersResponse
{
    [tag="mmap", description="Map of Blaze Ids to their Club Metadata"]
    ClubMetadataMap mMetadataMap;    
};

[
    description = "[DEPRECATED] send petition to club."
]
class SendPetitionRequest
{
    [tag="clid", description="Id of club to send petition to."]
    ClubId mClubId;
    
    [tag="pswd", default="", description="Club password."]
    ClubPassword mPassword;
};

[
    description = "[DEPRECATED] get petitions for single club id."
]
class GetPetitionsRequest
{
    [tag="clid", description="Id of club to get petitions for."]
    ClubId mClubId;

    [tag="invt", description="Type of petitions to retrieve."]
    PetitionsType mPetitionsType;
    
    [tag="nsot", description="How to sort the petitions in response."]
    TimeSortType mSortType;    
};

class GetPetitionsResponse
{
    [tag="cist", description="List of petitions."]
    ClubMessageList mClubPetitionsList; 
};

class ProcessPetitionRequest
{
    [tag="inid", description="Unique identifier of petition."]
    uint32_t mPetitionId;
};

[
    description = "[DEPRECATED] join club."
]
class JoinClubRequest
{
    [tag="clid", description="Id of club to join."]
    ClubId mClubId;
    
    [tag="pswd", default="", description="Club password."]
    ClubPassword mPassword;
};

class JoinOrPetitionClubRequest
{
    [tag="clid", description="Id of club to join or petition."]
    ClubId mClubId;
    
    [tag="pswd", default="", description="Club password."]
    ClubPassword mPassword;

    [tag="pijf", default=false, description="Whether to petition this club if join fails."]
    bool mPetitionIfJoinFails;
};

class JoinOrPetitionClubResponse 
{ 
    [tag="cjps", description="Status of join or petition action."] 
    ClubJoinOrPetitionStatus mClubJoinOrPetitionStatus; 
};

class GetClubRecordbookRequest
{
    [tag="clid", description="Id of club to get record books for."]
    ClubId mClubId;
};

class GetClubRecordbookResponse
{
    [tag="clrl", description="List of club records."]
    ClubRecordList mClubRecordList;
};

class ResetClubRecordsRequest
{
    [tag="clid", description="Id of club to rest records for."]
    ClubId mClubId;
    
    [tag="rcid", description="List of Ids of records to rest."]
    ClubRecordIdList mRecordIdList;
};


class GetClubAwardsRequest
{
    [tag="clid", description="Id of club to get awards for."]
    ClubId mClubId;
};

class GetClubAwardsResponse
{
    [tag="awrl", description="List of club awards."]
    ClubAwardList mClubAwardList;
};

class SeasonTime
{
    [tag="strt", description="Season start time"]
    int32_t mSeasonStartTime;

    [tag="sovr", description="Season rollover time"]
    int32_t mSeasonRolloverTime;
};

class SeasonRolloverState
{
    [tag="sste", description="Season rollover state"]
    SeasonState mSeasonRolloverState;
};

class UpdateMemberMetadataRequest
{
    [tag="clid", description="Club this member belongs to"]
    ClubId mClubId;

    [tag="meta", description="member meta data"]
    MemberMetaData mMetaData;
};

class ListRivalsRequest
{
    [tag="clid", description="Club to fetch rivals for"]
    ClubId mClubId;
};

class ListRivalsResponse
{
    [tag="rivl", description="Rivals for this Club"]
    ClubRivalList mClubRivalList;
};

class ClubTickerMessage
{
    [tag="titx", description="Ticker message"]
    ClubTickerMessageText mText;
    
    [tag="timd", description="Ticker message metadata"]
    ClubTickerMetadata mMetadata;
    
    [tag="tstm", description="Ticker message timestamp"]
    uint32_t mTimestamp;
};

typedef list<ClubTickerMessage> ClubTickerMessageList;

[
    description = "[DEPRECATED] get club ticker messages for single club id."
]
class GetClubTickerMessagesRequest
{
    [tag="clid", description="Club to fetch message history for"]
    ClubId mClubId;
    
    [tag="tstm", description="Timestamp of the oldest message"]
    uint32_t mOldestTimestamp;

};

class GetClubTickerMessagesResponse
{
    [tag="msli", description="Message list"]
    ClubTickerMessageList mMsgList;
};

class SetClubTickerMessagesSubscriptionRequest
{
    [tag="clid", description="Club to subscribe to"]
    ClubId mClubId;

    [tag="issu", description="Set or reset subscription"]
    bool mIsSubscribed;
};

class PublishClubTickerMessageRequest
{
    [tag="clid", description="Club to fetch message history for"]
    ClubId mClubId;

    [tag="inui", description="Private message for this user"]
    BlazeId mIncludeBlazeId;
    
    [tag="exui", description="Exclude this user"]
    BlazeId mExcludeBlazeId;

    [tag="prms", description="Message parameters"]
    string(256) mParams;
    
    [tag="ctms", description="Club ticker message to publish"]
    ClubTickerMessage mMessage;
};

class ChangeClubStringsRequest
{
    [tag="clid", description="Id of club to change name"]
    ClubId mClubId;
    
    [tag="cnam", description="New club name, optional"]
    ClubName mName;

    [tag="nuqn", description="New club non-unique name, optional"]
    ClubNonUniqueName mNonUniqueName;

    [tag="cdsc", description="New club description, optional"]
    ClubDesc mDescription;
};

[
    description = "[DEPRECATED] get news for single club id."
]
class CountMessagesRequest
{
    [tag="clid", description="Id of club to get count of messages for"]
    ClubId mClubId;
    
    [tag="msty", description="Message type"]
    MessageType mMessageType;
};

class CountMessagesResponse
{
    [tag="cunt", description="Count"]
    uint32_t mCount;
};

// Club bans

typedef uint32_t BanStatus;
enum BanStatusValues
{
    CLUBS_NO_BAN        = 0,
    CLUBS_BAN_BY_GM     = 1,
    CLUBS_BAN_BY_ADMIN  = 2
};

typedef map<BlazeId, BanStatus> BlazeIdToBanStatusMap;
typedef map<ClubId, BanStatus> ClubIdToBanStatusMap;

// Get list of bans for this club
class GetClubBansRequest
{
    [tag="clid", description="ID of club whose users/ex-users to get ban status for"]
    ClubId mClubId;
};

class GetClubBansResponse
{
    [tag="bans", description="Map of Blaze IDs to ban status these users have within requested club"]
    BlazeIdToBanStatusMap mBlazeIdToBanStatusMap;
};

// Get list of bans for this user
class GetUserBansRequest
{
    [tag="uid", description="ID of user whom to get ban status for"]
    BlazeId mBlazeId;
};

class GetUserBansResponse
{
    [tag="bans", description="Map of club IDs to ban status requested user has within these clubs"]
    ClubIdToBanStatusMap mClubIdToBanStatusMap;
};

// Ban or unban a member from a specified club (the exact action is determined by the RPC used)
class BanUnbanMemberRequest
{
    [tag="uid", description="Id of user whom to ban/unban"]
    BlazeId mBlazeId;

    [tag="clid", description="Id of club from which to ban/unban user"]
    ClubId mClubId;
};

class GetClubsComponentInfoResponse
{
    [tag="clin", description="Clubs component info"]
    ClubsComponentInfo mClubsComponentInfo;
};

class DisbandClubRequest
{
    [tag="clid", description="The clubID of the club which will be disbanded."]  
    ClubId mClubId;  
};  

////////////////////////////////////////////////////////////////////////////////
// Clubs Census data TDFs
//
[description="Enumeration of census data provided by clubs, which will be used on server to encode data into a generic map and parse data on client api."]
enum ClubsCensusEnum
{
  CLUBS_MEMBERS_DOMAIN,
  CLUBS_ONLINE_MEMBERS_DOMAIN,
  CLUBS_DOMAIN,
  CLUBS_ONLINE_DOMAIN,
  CLUBS_MEMBERS,
  CLUBS_ONLINE_MEMBERS,
  CLUBS,
  CLUBS_ONLINE
};


[description = "The data collection about clubs on the server sent to client periodically.",
 tdfid = "hash"]
class ClubsCensusData
{
    [tag="mbd", description="Total number of clubs memberships by domain."]
    ClubCensusDomainMap mNumOfClubMembersByDomain;
    
    [tag="omd", description="DEPRECATED (unused)"]
    ClubCensusDomainMap mNumOfOnlineClubMembersByDomain;
    
    [tag="cbd", description="Total number of clubs by domain."]
    ClubCensusDomainMap mNumOfClubsByDomain;
    
    [tag="ocd", description="DEPRECATED (unused)"]
    ClubCensusDomainMap mNumOfOnlineClubsByDomain;
    
    [tag="tcm", description="Total number of clubs memberships."]
    uint32_t mNumOfClubMembers;
    
    [tag="ocm", description="Total number of online clubs members."]
    uint32_t mNumOfOnlineClubMembers;
    
    [tag="tnc", description="Total number of clubs."]
    uint32_t mNumOfClubs;
    
    [tag="toc", description="Total number of online clubs."]
    uint32_t mNumOfOnlineClubs;
    
};

class TransferOwnershipRequest  
{  
    [tag="clid", description="Id of club to transfer ownership."]  
    ClubId mClubId;  
        
    [tag="blid", description="Id of member to get ownership."]  
    BlazeId mBlazeId;     

    [tag="oosn", description="The status to be applied to the current owner."]  
    MembershipStatus mExOwnersNewStatus;  
};  

class GetNewsForClubsRequest
{
    [tag="cidl", description="Id list of clubs to get news for."]
    ClubIdList mClubIdList;

    [tag="tfil", description="List of types of news to filter."]
    NewsTypeList mTypeFilters;

    [tag="nsot", description="How to sort the news in response."]
    TimeSortType mSortType;

    [tag="mcnt", description="Maximum count of news in response."]
    uint32_t mMaxResultCount;

    [tag="ofst", description="Offset into news list to start response with."]
    uint32_t mOffSet;
};

class GetNewsForClubsResponse
{
    [tag="nlmp", description="Map of news associated with ClubId."]
    ClubLocalizedNewsListMap mLocalizedNewsListMap;
    
    [tag="tlpg", description="Total pages of all the given clubs."]  
    uint16_t mTotalPages;  
};

class GetPetitionsForClubsRequest
{
    [tag="cidl", description="Id list of clubs to get petitions for."]
    ClubIdList mClubIdList;

    [tag="invt", description="Type of petitions to retrieve."]
    PetitionsType mPetitionsType;
    
    [tag="nsot", description="How to sort the petitions in response."]
    TimeSortType mSortType;    
};

class GetPetitionsForClubsResponse
{
    [tag="lpmp", description="Map of petitions associated with ClubId."]
    ClubMessageListMap mClubPetitionListMap; 
};

typedef map<ClubId, ClubTickerMessageList> ClubTickerMessageListMap;

class GetClubTickerMessagesForClubsRequest
{
    [tag="cidl", description="Id list of clubs to get ticker messages for."]
    ClubIdList mClubIdList;
    
    [tag="tstm", description="Timestamp of the oldest message"]
    uint32_t mOldestTimestamp;

};

class GetClubTickerMessagesForClubsResponse
{
    [tag="moml", description="Map of ClubId to list of ticker messages."]
    ClubTickerMessageListMap mMsgListMap;
};

class CountMessagesForClubsRequest
{
    [tag="cidl", description="Id list of clubs to get petitions for."]
    ClubIdList mClubIdList;
    
    [tag="msty", description="Message type"]
    MessageType mMessageType;
};

typedef map<ClubId, uint32_t> ClubMessageCountMap;
class CountMessagesForClubsResponse
{
    [tag="mcmp", description="map of ClubId to message count."]
    ClubMessageCountMap mCountMap;
};

class LogEventRequest
{
    [tag="cbid", description="Club Id."]
    ClubId mClubId;

    [tag="leky", description="The log event string key."]
    ClubLogEventKeyType mEventKeyType;

    [tag="lepv", description="The log event parameters."]
    ClubLogEventParams mEventParams;
};

class GetMemberOnlineStatusRequest
{
    [tag="cbid", description="Club Id."]
    ClubId mClubId;
    
    [tag="usid", description="Blaze Ids."]
    BlazeIdList mBlazeIds;
};

class GetMemberOnlineStatusResponse
{
    [tag="mosm", description="User-id to member-online-status map."]
    MemberOnlineStatusMapForClub mStatus;
};

class GetMemberStatusInClubRequest
{
    [tag="urid", description="Blaze Ids."]
    BlazeIdList mBlazeIds;

    [tag="cbid", description="Club Id."]
    ClubId mClubId;
};

class GetMemberStatusInClubResponse
{
    [tag="msss", description="User-id to membership-status map."]
    MembershipStatusMap mStatus;
};

class WipeStatsRequest
{
    [tag="clid", description="Id of club which owns the stats"] ClubId mClubId;
    [tag="wips", description="Set of stats to wipe from clubs configuration file defining which stats to wipe."] string(64) mWipeSet;
};

class UpdateClubLastActiveTimeRequest
{
    [tag="clid", description="Id of club to update the last active time"] ClubId mClubId;
};

class UpdateOnlineStatusRequest
{
    [tag="clid", description="Id of the club status to be updated"]
    ClubId mClubId;
    
    [tag="blid", description="Id of the user to update status on"]
    BlazeId mBlazeId;
    
    [tag="stat", description="The online status update"]
    MemberOnlineStatus mOnlineStatus;
    
    [tag="reas", description="The reason for the update"]
    UpdateReason mReason;
};

class UpdateProfaneClubNameRequest
{
    [tag="upid", description="Id of club whose name needs updating"]
    ClubId mClubId;
};

class GetClubNameRequest
{
    [tag="gcid", description="Id of club whose name is requested"]
    ClubId mClubId;
};

class GetClubNameResponse
{
    [tag="gcri", description="ClubName of the requested club"]
    ClubName mName;
};


class UpdateProfaneStadiumNameRequest
{
	[tag="upai", description="Id of club whose stadium name needs updating"]
	uint64_t mClubId;
};

class UpdateProfaneStadiumNameResponse
{
	[tag="upnm", description="Status message after performing the stadium name change"]
	string(256) mStatusMessage;
};

class GetStadiumNameRequest
{
	[tag="gain", description="Id of club whose AI Player names have been requested"]
	uint64_t mClubId;
};

class GetStadiumNameResponse
{
	[tag="stdn", description="Stadium name of the requested club"]
	string(64) stadiumName;
};

}
}
