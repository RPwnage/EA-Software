[headername="arson/tournamentorganizer/proxycomponent/tdf/arsonxblsessiondirectory_arena.h"]
#include "arson/gen/tournamentorganizer/proxycomponent/arsonxblsessiondirectory_arena.tdf"

namespace Blaze
{
namespace ArsonXBLServices
{

[
    id = core/1028,
    description = "Proxy component used to define xbl session directory api. Note that client, actually means using server authentication",
    details = "xbl session directory",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]

component ArsonXblSessionDirectoryArena
{
    errors
    {
        [ description = "Exernal session authentication error, possibly due to invalid/expired token" ]
        ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED = 1;
        [ description = "The specified scid, or session template was invalid, or the service config may not configured for sessions." ]
        ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND = 2; //http 404
        [ description = "Requested service config or operation cannot be accessed. May be due to caller's account not having access to sandbox, a certificate error, client title id not having access to scid, invalid attempt to access a private session by non-member, etc." ]
        ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN = 3; //http 403
        [ description = "Invalid or malformed request parameters. Invalid parameters may be caused by mismatched contract version to external session parameters sent by blaze version's code, or a badly configured session template." ]
        ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST = 4; //http 400
        [ description = "The request's parameters conflict with other parameters or existing constants or settings already on the session." ]
        ARSON_XBLSESSIONDIRECTORYARENA_CONFLICTING_REQUEST = 5; //http 409
        [ description = "An exernal session with the specified scid, session template, name, already exists for the create attempt." ]
        ARSON_XBLSESSIONDIRECTORYARENA_EXTERNALSESSION_ALREADY_EXISTS = 6;
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE = 7; //http 503
        [ description = "The external session service call failed due to possible bad gateway." ]
        ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY = 8; //http 502
        [ description = "The external session service had an unspecified internal error. Check with Microsoft for potential issues." ]
        ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR = 9; //http 500
        [ description = "The external session was not found (for get), or got removed (for join/leave)." ]
        ARSON_XBLSESSIONDIRECTORYARENA_NO_CONTENT = 10; //http 204
    }

    slave
    {
        methods
        {
            
            [
                id = 6,
                description = "Update the arena match multiplayer session.",
                details = "Update the arena match multiplayer session. This method uses XBL Business Partner Certs for authentication, and does not require user claims.",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::MultiplayerSessionErrorResponse,
                errors = { ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST, ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED, ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN, ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE, ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST,
                        401 = ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            ArenaMultiplayerSessionResponse putUpdateArenaGame(PutUpdateArenaGameRequest);
        
            [
                id = 7,
                description = "Update the arena match multiplayer session, using a specific user.",
                details = "Update the arena match multiplayer session. This method uses user claims. Used for submitting results.",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::MultiplayerSessionErrorResponse,
                errors = { ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST, ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED, ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN, ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE, ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST,
                        401 = ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            ArenaMultiplayerSessionResponse putUpdateArenaGameForUser(PutUpdateArenaGameRequest);

            [
                id = 8,
                description = "Get a multiplayer a session",
                details = "Get info on a multiplayer session. This method decodes full Arena Game data to the response.",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::MultiplayerSessionErrorResponse,
                errors = { ARSON_XBLSESSIONDIRECTORYARENA_NO_CONTENT, ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST, ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED, ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN, ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE, ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY, ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        204 = ARSON_XBLSESSIONDIRECTORYARENA_NO_CONTENT,
                        400 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_REQUEST,
                        401 = ARSON_XBLSESSIONDIRECTORYARENA_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLSESSIONDIRECTORYARENA_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLSESSIONDIRECTORYARENA_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLSESSIONDIRECTORYARENA_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLSESSIONDIRECTORYARENA_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            ArenaMultiplayerSessionResponse getMultiplayerSession(XBLServices::GetMultiplayerSessionRequest);
            
        }
    }
}

}
}//Blaze
