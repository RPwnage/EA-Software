[headername="arson/tournamentorganizer/proxycomponent/tdf/arsonxblorganizertournamentshub.h"]
#include "arson/gen/tournamentorganizer/proxycomponent/arsonxblorganizertournamentshub.tdf"

[headername="xblserviceconfigs/tdf/xblserviceconfigs.h"]
#include "xblserviceconfigs/gen/xblserviceconfigs.tdf"

[headername="xbltournamentshub/tdf/xbltournamentshub.h"]
#include "xbltournamentshub/gen/xbltournamentshub.tdf"

namespace Blaze
{
namespace ArsonXBLServices
{

[
    id = core/1029,
    description = "xbl arena organizer service proxy",
    details = "Proxy component used to define xbl arena organizer service",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]
component ArsonXBLOrganizerTournamentsHub
{
    errors
    {
        [ description = "Exernal session authentication error, possibly due to invalid/expired token" ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED = 1;
        [ description = "The specified scid, or session template was invalid, or the service config may not configured for sessions." ]
        ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND = 2; //http 404
        [ description = "Requested service config or operation cannot be accessed. May be due to caller's account not having access to sandbox or having 'multiplayer' privilege disabled, a certificate error, server or client using a title id that's incorrect or not having access to scid, invalid attempt to access a private session by non-member, or attempt to directly join others as non-reserved." ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN = 3; //http 403
        [ description = "Invalid or malformed request parameters. Invalid parameters may be caused by mismatched contract versions, an attempt to join an external session which is already at its max cap, or a badly configured session template (invalidly enabling managed initializations requirements etc)." ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST = 4; //http 400
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE = 7; //http 503
        [ description = "The external session service call failed due to possible bad gateway." ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY = 8; //http 502
        [ description = "The external session service had an unspecified internal error. Check with Microsoft for potential issues." ]
        ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR = 9; //http 500
    }

    slave
    {
        methods
        {
            [
                id = 1,
                description = "Create or Update Arena Tournament.",
                details = "Create or Update Arena Tournament",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            Arson::ArsonExternalTournamentInfo createOrUpdateArenaTournament(CreateArenaTournamentRequest);

            [
                id = 11,
                description = "Get Arena Tournament.",
                details = "Get Arena Tournament",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            Arson::ArsonExternalTournamentInfo getArenaTournament(GetArenaTournamentRequest);

            [
                id = 12,
                description = "Create or Update Arena Tournament Team.",
                details = "Create or Update Arena Tournament Team.",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}/teams/{teamId}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            ArsonArenaTournamentTeamInfo createArenaTournamentTeam(CreateArenaTournamentTeamRequest);

            [
                id = 13,
                description = "Get Arena Tournament Team.",
                details = "Get Arena Tournament Team.",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}/teams/{teamId}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            ArsonArenaTournamentTeamInfo getArenaTournamentTeam(ArsonGetArenaTeamRequest);

            [
                id = 14,
                description = "Delete team",
                details = "Delete team",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}/teams/{teamId}",
                    method = "DELETE",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            void deleteArenaTournamentTeam(ArsonGetArenaTeamRequest);
            
            [
                id = 15,
                description = "Get the Arena Tournament Teams for a user.",
                details = "Get the Arena Tournament Teams for specified xuid",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments/{organizerId}/{tournamentId}/teams?memberId={memberId}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    }
                }
            ]
            ArsonGetArenaTeamsForUserResponse getArenaTournamentTeamsForUser(ArsonGetArenaTeamForUserRequest);
            
            [
                id = 16,
                description = "Get the Arena Tournaments for the title.",
                details = "Get the Arena Tournaments for the title",
                requires_authentication = false,
                client_export = false,
                errortype = XBLServices::TournamentsHubErrorResponse,
                errors = { ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST, ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED, ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN, ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,  ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY, ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "tournaments?titleId={titleId}{organizerIdQueryString}{stateQueryString}{memberFilterQueryString}{clubIdQueryString}&orderBy=playingStart&sortOrder=asc&maxItems=50{continuationTokenQueryString}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "Accept"                 = "header.accept",
                        "Accept-Language"        = "header.acceptLanguage",
                        "Authorization"          = "header.authToken",
                        "X-Xbl-OnBehalfOf-Title" = "header.onBehalfOfTitle"
                    },
                    status_code_errors = {
                        400 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_REQUEST,
                        401 = ARSON_XBLORGANIZERTOURNAMENTSHUB_AUTHENTICATION_REQUIRED,
                        403 = ARSON_XBLORGANIZERTOURNAMENTSHUB_ACCESS_FORBIDDEN,
                        404 = ARSON_XBLTOURNAMENTSHUB_RESOURCE_NOT_FOUND,
                        503 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_UNAVAILABLE,
                        500 = ARSON_XBLORGANIZERTOURNAMENTSHUB_SERVICE_INTERNAL_ERROR,
                        502 = ARSON_XBLORGANIZERTOURNAMENTSHUB_BAD_GATEWAY
                    }
                }
            ]
            ArsonGetArenaTournamentsResponse getArenaTournaments(ArsonGetArenaTournamentsRequest);
        }
    }
}


}
}
