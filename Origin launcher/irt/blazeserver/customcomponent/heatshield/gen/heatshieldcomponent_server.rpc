// Defines the RPCs and async notifications used in the shield component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="heatshield/tdf/heatshieldtypes.h" ]
#include "heatshield/gen/heatshieldtypes.tdf"

[
	client_include = false,
	headername="heatshield/tdf/heatshieldtypes_server.h"
]
#include "heatshield/gen/heatshieldtypes_server.tdf"


namespace Blaze
{
namespace HeatShield
{
[
	id = custom/5000,
	description = "A component used for shield.",
	details = "This component acts as a proxy server between shield client and shield backend.  It will not be configured to run by default.",
	configurationType = HeatShieldConfig
]
component HeatShield
{
	errors
	{
		[ description = "An unknown Heat Shield error has occurred." ]
		HEAT_SHIELD_ERR_UNKNOWN = 1;

		[ description = "Heat Shield rate limited this call." ]
		HEAT_SHIELD_ERR_RATE_LIMIT = 2;

		[ description = "Heat Shield is disabled." ]
		HEAT_SHIELD_DISABLED = 3;

		[ description = "Rate limit PIN event has already fired."]
		HEAT_SHIELD_RATE_LIMIT_PIN_FIRED = 4;

		[ description = "No active shield session found in redis."]
		HEAT_SHIELD_SESSION_NOT_FOUND = 5;
		
		[ description = "Shield is not allowed to run during online game mode"]
		HEAT_SHIELD_ONLINE_MODE_DISABLED = 6;
	}

	permissions
	{
		HEAT_SHIELD_PERMISSION_HEARTBEAT = 1;
		HEAT_SHIELD_PERMISSION_CLIENT_EXISTENCE = 1;
	}

	slave
	{
		methods
		{
			[
				id = 1,
				errors = {
					HEAT_SHIELD_ERR_UNKNOWN,
					HEAT_SHIELD_ERR_RATE_LIMIT,
					HEAT_SHIELD_DISABLED
				},
				description = "This command will forward client heartbeat to backend.",
				internal = true,
				client_export = false
			]
			HeatShieldResponse heartbeat(HeartbeatRequest);

			[
				id = 2,
				errors = {
					HEAT_SHIELD_ERR_UNKNOWN,
					HEAT_SHIELD_DISABLED,
					HEAT_SHIELD_ONLINE_MODE_DISABLED
				},
				description = "This command will forward client join to backend.",
				internal = true,
				client_export = false
			]
			HeatShieldResponse clientJoin(ClientJoinRequest);

			[
				id = 3,
				errors = {
					HEAT_SHIELD_ERR_UNKNOWN,
					HEAT_SHIELD_DISABLED,
					HEAT_SHIELD_ONLINE_MODE_DISABLED
				},
				description = "This command will forward client leave to backend.",
				internal = true,
				client_export = false
			]
			HeatShieldResponse clientLeave(ClientLeaveRequest);

			[
				id = 4,
				errors = {
					HEAT_SHIELD_ERR_UNKNOWN,
					HEAT_SHIELD_DISABLED
				},
				description = "This command will trigger a heartbeat timeout check on the backend.",
				internal = true,
				client_export = false
			]
			HeatShieldResponse clientChallenge(ClientChallengeRequest);

			[
				id = 5,
				errors = {
					HEAT_SHIELD_ERR_UNKNOWN,
					HEAT_SHIELD_DISABLED
				},
				description = "This command will call a clientChallenge event for matchmaking.",
				internal = true,
				client_export = false
			]
			HeatShieldResponse clientChallengeMatchmaking(ClientChallengeMatchmakingRequest);

		} // methods

	} // slave

}
}
}
