// Defines the RPCs and async notifications used in the sponsoredevents component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="sponsoredevents/tdf/sponsoredeventstypes.h" ]
#include "sponsoredevents/gen/sponsoredeventstypes.tdf"

namespace Blaze
{
namespace SponsoredEvents
{
[
  id = custom/28,
  description = "Sponsored events component refactored from osdk",
  details = "Sponsored events operations",
  configurationType = SponsoredEventsConfig
]
component SponsoredEvents
{
	errors
	{
		[ description = "An unknown error occurred." ]
		SPONSORED_EVENTS_ERR_GENERAL		= 1;
		[ description = "A database error has occurred." ]
		SPONSORED_EVENTS_ERR_DB				= 2;
		[ description = "Parameters are invalid." ]
		SPONSORED_EVENTS_ERR_INVALID_PARAMS	= 3;
		[ description = "No Update performed." ]
		SPONSORED_EVENTS_ERR_NO_UPDATE		= 4;
	}
	
    permissions
	{
		PERMISSION_FIFA_SPONSORED_EVENT_ADMIN = 1;
	}

	slave
	{
		methods
		{						
			[
				id = 1,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB,
					SPONSORED_EVENTS_ERR_INVALID_PARAMS
				},
				description = "This command will check if a user is registered for a sponsored event",
				requires_authentication = false
			]
			CheckUserRegistrationResponse checkUserRegistration(CheckUserRegistrationRequest);
			
			[
				id = 2,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB,
					SPONSORED_EVENTS_ERR_INVALID_PARAMS
				},
				description = "This command will register a user for a sponsored event",
				requires_authentication = true
			]
			RegisterUserResponse registerUser(RegisterUserRequest);
											
			[
				id = 3,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB
				},
				description = "This command will get the URL for sponsored events",
				requires_authentication = false
			]
			URLResponse getEventsURL();
			
			[
				id = 4,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB,
					SPONSORED_EVENTS_ERR_NO_UPDATE
				},
				description = "This command will ban a player from a sponsored event",
				requires_authentication = true
			]
			BanUserResponse banUser(BanUserRequest);

            [
              id = 5,
              errors = {
                    SPONSORED_EVENTS_ERR_GENERAL,
                    SPONSORED_EVENTS_ERR_DB,
                    SPONSORED_EVENTS_ERR_NO_UPDATE
                },
              description = "This command will remove event and/or user stats.",
              details = "Stats for single user or stats for whole event are wiped based on input parameters.",
              requires_authentication = true 
            ]
            WipeUserStatsResponse wipeUserStats(WipeUserStatsRequest);
 
            [
              id = 6,
              errors = {
                    SPONSORED_EVENTS_ERR_GENERAL,
                    SPONSORED_EVENTS_ERR_DB,
                    SPONSORED_EVENTS_ERR_NO_UPDATE
                },
              description = "This command will update the flags.",
              details = " ",
              requires_authentication = true 
            ]
            UpdateUserFlagsResponse updateUserFlags(UpdateUserFlagsRequest);

			[
				id = 7,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB
				},
				description = "Return number of registered users.",
				details = " ",
				requires_authentication = false 
            ]
            NumUsersResponse numUsers(NumUsersRequest);
            
            [
				id = 8,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB,
					SPONSORED_EVENTS_ERR_NO_UPDATE
				},
				description = "This command will remove a record from table of user info.",
				details = " ",
				requires_authentication = true 
            ]
            RemoveUserResponse removeUser(RemoveUserRequest);
            
            [
				id = 9,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB,
					SPONSORED_EVENTS_ERR_NO_UPDATE
				},
				description = "update the event data.",
				details = " ",
				requires_authentication = false 
            ]
            UpdateEventDataResponse updateEventData(UpdateEventDataRequest);
            
			[
				id = 10,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB
				},
				description = "Returns data to access db used by component.",
				details = "",
				requires_authentication = true 
			]
			DbCredentialsResponse getDbCredentials();
			
			[
				id = 11,
				errors = {
					SPONSORED_EVENTS_ERR_GENERAL,
					SPONSORED_EVENTS_ERR_DB
				},
				description = "This command will return all the users with a given event ID.",
				details = " ",
				requires_authentication = false 
			]
			ReturnUsersResponse returnUsers(ReturnUsersRequest);			
            
		} // methods
	} // slave
}
}
}