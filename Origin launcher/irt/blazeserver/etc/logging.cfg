// This block defines the default logging for a blaze server instance
logging = {
    // Define the default logging level for all loggers
#ifndef DEFAULT_LOGGING
    #if ENV == "cert"
        #define DEFAULT_LOGGING "TRACE"
    #else
        #define DEFAULT_LOGGING "INFO"
    #endif
#endif
    level = "#DEFAULT_LOGGING#"

    dbNamesByPlatform = {
        "#PLATFORM#" = "#LOGGING_DB_ALIAS#"
    }

    // Controls whether the main server log is written to a file, stdout, or both.
    // NOTE: If the --logname cmd-line arg is not specified, then all file logging will be disabled, including
    //       the main server log, binary logs, user audit logs, and the pin event logs.  Therefore, all logging
    //       will be disable if you set the log output mode to "file" and do not provide a value for the --logname argument.
    //
    //       The --logoutput cmd-line arg can be used to specify an initial value for this setting that will be in
    //       effect until this config file is processed.  This setting will always override what was specified on the cmd-line.
    //
    //       Debuggers will always receive main server log output.
    //
    // Possible values
    //   "both"  : Enables the functionality described under both "stdout" and "file" below.
    //   "file"  : Directs the main server log to be written to a file on disk.
    //   "stdout": Directs the main server log *only* to stdout.  All other logging such as binary logs,
    //               user audit logs, and pin event logs will still be written to a file on disk.
    #ifndef LOG_OUTPUT
        #define LOG_OUTPUT "file"
    #endif
    output = "#LOG_OUTPUT#"

    // The approximate maximum size of a log file before it is rotated
    rotationFileSize = 100000000

    // Individual log levels for logger categories can be set in this map.  All logs at that level or higher will be outputted.
    // Log levels (from least to highest priority) are: "SPAM", "TRACE", "INFO", "WARN", "ERR", "FATAL"
    //
    // For example, to turn stats component logging to INFO and gamemanager to TRACE, add
    // the following:
    //     stats = "INFO"
    //     gamemanager = "TRACE"
    // A list of available categories can be obtained by running the blazeserver executable
    // with the --list-log-categories option.
    categories = {
		shield="TRACE"
        blazecontroller="INFO"
        connection="TRACE"
        //replication="TRACE"
        //system="TRACE"
        //fire="TRACE"
        //blazecontroller="TRACE"
        //pinevent="TRACE"
        //xmshd="TRACE"
        grpc_core="WARN" //grpc_core is very spammy at INFO level so we set it to WARN by default.	
        //gamemanager="TRACE"
        //matchmaker="TRACE"
        authentication="TRACE"
        //config="TRACE"
        //database="TRACE"
        //gamereporting="TRACE"
	http="TRACE"
	//httpxml="SPAM"
        identity="TRACE"
        //psnmatches="TRACE"
	    //rest="TRACE"
	//stats="TRACE"
	//system="TRACE"
	//taskscheduler="TRACE"
        //user="TRACE"
        //usersessions="TRACE"
        //util="TRACE"
        contentreporter="INFO"
    }
    
    // Adds the file & line number to the log line. 
    includeLocation = true
    // Converts the file names and line number into a hash: [FNV1(File):Line].  Ex. [084f4520:0051]
    encodeLocation = true

    // Control what level of trace logging is enabled for common log types (For example, rpc) across all the categories in the system (not limited to the ones specified in the map earlier)
    //   none     = No trace logging
    //   all      = Enabled for all categories
    //   category = Only enabled for categories that have explicit levels set in the "categories"
    //              map defined below.
    // For example, If you set the rpc to "none", the rpc traces are not logged for any of the categories in the system. 
    // If you set the rpc to "all", the rpc traces are logged for all the categories in the system.
    // If you set it to "category", the rpc traces are logged for all the categories specifies in the map above.
    //  
    trace = {
#if ENV == "cert"
        db = "all"
        http = "all"
        rpc = "all"
        replication = "none"
#else
        db = "category"
        http = "category"
        rpc = "category"
        replication = "none"
#endif              
    }

    

    // A list of all the logging categories and their rotation period for which event / binary event log will be produced.  
    // If this list is not defined then all categories of event / binary event will be logged.  The rotation period can also
    // optionally be defined (0s or default to rotate once every midnight GMT). For example, to enable event logging only for 
    // usersessions, gamereporting and gamemanager and have their event logs to be rotated every 20 minutes, specify:
    //
    events = [ 
          { category="usersessions", rotationPeriod="1h" }
          { category="gamereporting", rotationPeriod="1h" }
          { category="gamemanager", rotationPeriod="1h" }
          { category="pinevent", rotationPeriod="1h" }
          { category="shield", rotationPeriod="1h" } 
    ]

    binaryEvents = [ 
          { category="blazecontroller", rotationPeriod="1h" }
          { category="usersessions", rotationPeriod="1h" }
          { category="gamereporting", rotationPeriod="1h" }
          { category="gamemanager", rotationPeriod="1h" }
          { category="gamemanagermetrics", rotationPeriod="1h" }
          { category="shield", rotationPeriod="1h" }
    ]

    // The following section defines special logging behaviours to specific log entries.  It is
    // meant as a debugging and operational tool.
    //
    // A maximum of 16 behaviours can be configured simultaneously.
    //
    // The behaviours which can be applied to specific log entries are:
    //
    // suppress:
    //     Suppress the output of a specific log line.  This would typically be used
    //     in production when there is a spammy log entry which is generating only noise
    //     in the log files (eg. something erroneously logged as ERR when it is in fact
    //     not an error which needs actioning on).
    //     
    //     When an entry has been suppressed, the first occurrence will always be logged and
    //     a message will also be logged indicating that subsequent entries will be suppressed.
    //     The "suppressionThreshold" configuration value determines how frequently the log
    //     entry should be suppressed.  If, for example, it is set to 10, then every 10th entry
    //     will be logged and the rest suppressed.
    //
    // pin:
    //     This allows you to enable the logging of a specific log entry regardless of the
    //     logging level configured on the server or the level that the log entry is coded
    //     to use.  This can be useful when extra information is needed to help track down
    //     a production problem but it is too costly to enable, for example, full trace
    //     logging for a component just to get one specific entry.
    //
    //     PRO TIP: You can combine the suppress and pin settings if there is a particularly
    //     spammy log entry that you want to enable to gather some info but don't want to fill
    //     the logs up with them.  You'd pin the entry to force it to be logged and then rate
    //     limit it using the suppress option.
    //
    // generateCore:
    //     This allows you to trigger programmatic genreation of a core file when a specific log
    //     entry is hit.  This can be useful for debugging production issues where more
    //     details are needed at specific execution points in the code.  Core generation will
    //     not affect operation of the server in any way.  This option can also be combined with
    //     the pinning option to enable core generation on log entries that are not otherwise
    //     logged at the configured logging level.
    //
    //     If this option is enabled, the total number of cores generated by this log entry can
    //     be controlled using the "maxCores" setting.  It is important to set this to an
    //     appropriate value to avoid potentially filling the disk with core files or causing
    //     overall performance issues on the server.  It defaults to 4.
    // 
    //
    // Log entries are identified by the filename and line number location in the code.
    // You can simply look at the source code and determine the file and line.  The preferred way
    // to specify the filename location is using a pathname relative to the top level source
    // directory.  For log entries that span multiple lines in code, the line number to use is
    // typically the final line of the log entry code.
    //
    // An alternate mechanism to specify the filename is using an absolute path.  Set
    // includeLocation=true and then run the server up and find the log entry you are interested
    // in.  includeLocation=true will log the filename and line number with every entry logged.
    // NOTE: If you use this approach, you need to ensure that the executable you are using to get
    // the log line matches the executable used on the server you are configuring because
    // otherwise the absolute filename may not match due to the code being built from different
    // locations.
    //
    // NOTE: A config reload of the logging feature will reset the limit counters for suppressions
    //  and core files.  
    //
    // Example configuration:
    //
    // behaviours = [
    //     { filename="framework/controller/controller.cpp", lineNum=1148, suppress=true, suppressionThreshold=4 }
    //     { filename="component/gamemanager/gamemanagerslaveimpl.cpp", lineNum=184, pin=true, generateCore=true, maxCores=2 }
    // ]
    //

    // Grpc lib logging philosophy is pretty different from Blaze logging. Both Blaze and Grpc support logging levels (albeit with a different granularity). However, in Blaze all logging goes via a
    // 'logging category'. In Grpc, there are two different types of logging.
        // 'Category less' - The logs have different levels but no category is assigned to the log. So for example, connection layer or api layer can simply log something using a given level. This logging 
        // is controlled by grpc_core category in our logging.cfg. 
            
        // 'Category/tracer` - In addition to the 'category-less' logging, Grpc also allows a sub-set of the tracers (categories) to be turned on. The tracers can also be at different logging levels and the level
        // is controlled by grpc_core category as well.
        // However, the tracers are very verbose (even at INFO level). A discussion with Grpc team (https://groups.google.com/forum/#!topic/grpc-io/9v44JY6pXw8 ) calls out the tracers to be unusable
        // for prod environment. So by default, we turn them on in "dev" and "test" only. However, if needed in prod, they are supported and fully reconfigurable.

    // Possible tracers are documented at https://github.com/grpc/grpc/blob/master/doc/environment_variables.md . The most useful ones are turned on below. For turning on everything, if needed, use "all".
    // Enable all
        // grpcCoreTracers = ["all"]
    // Enable most useful
    #if (ENV == "dev" || ENV == "test")
        grpcCoreTracers = ["api", "call_error", "connectivity_state", "op_failure", "queue_pluck", "queue_timeout", "server_channel", "timer"];
    #endif
}
