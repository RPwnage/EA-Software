// ====================================================
// User Manager settings
// ====================================================

usersessions = {
    checkConnectivitySettings = {
        timeToWait = "4s"
        interval = "10s"
    }

#if PLATFORM == "common"
    dbNamesByPlatform = {
        common = "#USERSESSIONS_DB_ALIAS#"
        pc = "#USERSESSIONS_DB_ALIAS#_pc"
        xone = "#USERSESSIONS_DB_ALIAS#_xone"
        ps4 = "#USERSESSIONS_DB_ALIAS#_ps4"
        nx = "#USERSESSIONS_DB_ALIAS#_nx"
        ios = "#USERSESSIONS_DB_ALIAS#_ios"
        android = "#USERSESSIONS_DB_ALIAS#_android"
        ps5 = "#USERSESSIONS_DB_ALIAS#_ps5"
        xbsx = "#USERSESSIONS_DB_ALIAS#_xbsx"
        steam = "#USERSESSIONS_DB_ALIAS#_steam"
        stadia = "#USERSESSIONS_DB_ALIAS#_stadia"
    }
#else
    dbNamesByPlatform = {
        "#PLATFORM#" = "#USERSESSIONS_DB_ALIAS#"
    }
#endif

    // Timeout for usersessions cleanup after a connection dies
    sessionCleanupTimeout = "4m"
    
    // cretae a new sticky route for aux slave user sessions as soon as the current sticky route is lost
    userRemapOnAuxSlaveRemovalTimeout = "0s"

    maxClientUEDAttributes = 6

    // Defines client-supplied UED values (whitelist) that can be referenced by Blaze components such as Matchmaker and GameManager.
    // The name cannot contain underscores '_', and will be used as is (no "stats_*" prefix appended to the start).
    // Values for default, min, and max are all int64_t.
    // NOTE: The default UED values will always be set when the user first logs in.
    //   The max number of (non-whitelisted) client UED values that can be added is controlled by the cfg value maxClientUEDAttributes. (default = 4)
    //userSessionClientUEDConfigList = [ { id = 1, name = "boostedSkill", default = 500, min = 0, max = 1000 },
    //                                    { id = 2, name = "favoriteNumber", default = 0, min = 0, max = 256 },
    //                                    { id = 3, name = "totalStats", default = 128, min = 0, max = 1024 } ]
    userSessionClientUEDConfigList = [   { id = 1, name = "coopCaptain", default = 0, min = 0, max = 9223372036854775807 },
                                         { id = 2, name = "futSkillRating", default = 1200, min = 0, max = 3000 },
                                         { id = 3, name = "futRivalsSkill", default = 1200, min = 0, max = 2000000000 },
                                         { id = 4, name = "futHouseRuleWinRatio", default = 50, min = 0, max = 100 },
                                         { id = 5, name = "ssfMMRSkill", default = 1400, min = 0, max = 3000 },
                                         { id = 6, name = "futChampionsWinForm", default = 0, min = -50, max = 50 }]
   
    // Restrictions on which platforms can interact.  (Affects Game joins, User lookups, etc.)
    // If no restrictions are given for a platform, then it's assumed to be open to all non-restricted platforms.
    // Restrictions must be bi-directional.  Fully restricted platforms either list themselves, or use an empty list [].
#ifndef BLAZESAMPLE_UNRESTRICTED_XPLAY
    platformRestrictions = {
        "xone" = ["xone"]      // To enable unrestricted crossplay, just remove this whole restrictions block.
    #if (PSN_EXTERNAL_SESSION_XGEN_ENABLED == "true")
        "ps4"  = ["ps4", "ps5"] // PS4 and PS5 crossgen example
        "ps5"  = ["ps5", "ps4"] // PS4 and PS5 crossgen example
    #else
        "ps4"  = ["ps4"]
        "ps5"  = ["ps5"]
    #endif
    #if (XPLAY_HOST_PC == "1" && XPLAY_HOST_STEAM == "1")
        "pc"   = ["pc", "steam"]
        "steam" = ["steam", "pc"]
    #else
        "pc"   = ["pc"]
        "steam" = ["steam"]
    #endif
        "xbsx" = ["xbsx"]
        "stadia" = ["stadia"]
        // Additional platforms listed here:
    }
#endif

    // groupings of platforms that are allowed to interact even if the users are opted-out of crossplay are defined here.
    // by default, the various pc storefronts are combined into a non-crossplay platform set to ensure that players on PC can
    // play together regardless of which storefront was used to make a purchase.
    // It is a configuration error for any platform to appear in more than one non-crossplay platform set
    nonCrossplayPlatformSets = {

    #if (XPLAY_HOST_PC == "1" && XPLAY_HOST_STEAM == "1")
        "pcplatforms" = ["pc", "steam"] // pc/steam is present by default to allow steam and origin users to play together even if crossplay is disabled, as this is currently a requirement.
    #endif
    #if (PSN_EXTERNAL_SESSION_XGEN_ENABLED == "true")
        "psplatforms" = ["ps4", "ps5"]  // PS4 and PS5 crossgen example
    #endif
    }

    // Controls if single login check is done per account, OR is done per account and per platform.
    // When set to true, only one login is permitted per Nucleus account across all platforms in a shared platform deployment.
    // When set to false, only one login is permitted per Nucleus account on each platform.
    // The setting has no effect for single platform integrators (i.e., not using a shared platform deployment).

    // OPS - singleLoginCheckPerAccount SHOULD BE SET TO FALSE FOR MOST SHARED CLUSTER TITLES.
    // NEW BEHAVIOR FOR TRAMA.1:
    // REGARDLESS OF CONFIG, CONSOLE USERS ON THE SAME PLATFORM ASSOCIATED WITH THE SAME NUCLEUS ACCOUNT WILL NOT BE ABLE TO PLAY ONLINE SIMULTANEOUSLY.
    // IF IT IS SET TO TRUE ON A SHARED PLATFORM DEPLOYMENT,
    // PERSONAS ACROSS PLATFORMS ASSOCIATED WITH THE SAME NUCLEUS ACCOUNT WILL BE BLOCKED FROM SIMULTANEOUS ONLINE PLAY.
    singleLoginCheckPerAccount = false

    // This setting affects how non-primary accounts are handled in Blaze.  
    // When set to true, non-primary accounts will not be tracked (by account id or OriginPersona id) on the blaze server or client. 
    // Only set this to false if you require supporting secondary accounts and have upgraded to a client version Trama.4 or later.
    onlyShowPrimaryPersonaAccounts = true;

    // If enabled, Db errors in components like Stats, Clubs, or Mail will not prevent user login, and the default UED values will be used (if available).
    allowLoginOnUEDLookupError = false

    //Size of the user cache - only this many offline users will be kept in memory at time
    userCacheMax = 32768

    // Enable the usersessionextended data to
    // have ip based location info such as latitude and longitude
    // we can consider doing this in override file (false is by default)
    useGeoipData = "#UED_GEO_IP#"

    reputation = {
// CROSSPLAY_TODO: this is testing against PLATFORM because the
// underlying reputation implementation will try to hit XBL services for every usersesssion, regardless of the logged in platform.
// This disables 1st party reputation on any Blaze cluster that isn't hosting ONLY xone users.
#if PLATFORM == "xone" || PLATFORM == "xbsx"
        useExternalReputation = true  // reverted Reputation required for xone.

        // If a reputation look up times out, the user is treated as having good rep.
        // The MS certification environment is slower than other environments, so be more lenient here to avoid TCR concerns.
        #if (ENV == "cert")
           reputationLookupTimeout = "10s"
        #endif

        externalReputationIdentifier = "OverallReputationIsBad"
        evaluatedReputationUEDName = "userReputation"
        poorReputationCheckExpression = "reputationValue" // treats Xbox One reputation value as a boolean, where evaluation to true is considered poor reputation
        // Reputation GDNP service config identifier - MS provided for ALL reputation lookups
        scid = "#XONE_REPUTATION_XONE_SCID#"
#endif
    // on other platforms, use default reputation settings, which effectively disable the reputation service
    }
   

   
    PINSettings = {

        // PIN Application Id is only necessary in load test and production; when running in the Cloud ESS will not be populated with a default id.
        // Thus, Blaze when running in the cloud should only be instructed to look in ESS when running in those two envs.
        // However, at present we only have a prod value to check against, there is a future task for Blaze in the Cloud to refactor the configs to be
        // aware of the mesh environment, and at that point the check below should be updated to be load test-aware.
        #if (NUCLEUS_ENV == "prod" || NUCLEUS_ENV == "lt")
          vaultPath = { path = "#VAULT_PATH_PIN#" }
        #endif

        applicationId = "#PIN_APPLICATION_ID#"
        eaGameId = "#PIN_EA_GAME_ID#"

        environment = "#ENV#"

        titlePINInfo = {
            "pc"      = { titleId = "#PC_PROJECTID#", titleIdType = "projectid" }
            "ps4"     = { titleId = "#PS4_PROJECTID#", titleIdType = "projectid" }
            "xone"    = { titleId = "#XONE_PROJECTID#", titleIdType = "projectid" }
            "nx"      = { titleId = "#NX_PROJECTID#", titleIdType = "projectid" }
            "ios"     = { titleId = "#IOS_PROJECTID#", titleIdType = "projectid" }
            "android" = { titleId = "#ANDROID_PROJECTID#", titleIdType = "projectid" }
            "ps5"     = { titleId = "#PS5_PROJECTID#", titleIdType = "projectid" }
            "xbsx"    = { titleId = "#XBSX_PROJECTID#", titleIdType = "projectid" }
            "steam"    = { titleId = "#STEAM_PROJECTID#", titleIdType = "projectid" }
            "stadia"    = { titleId = "#STADIA_PROJECTID#", titleIdType = "projectid" }
        }

        PINTaxonomyVersion = "#PIN_TAXONOMY_VERSION#"

        // customize releaseType based on the correct value for each product name,
        // ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
        productNamesPINInfo = {

            #COMMON_BLAZE_PRODUCT_NAME_DEFAULT# = {
                releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
            }

            #PC_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "review" 
				// FIFA SPECIFIC CODE END
            }

            #XONE_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "review" 
				// FIFA SPECIFIC CODE END
            }

            #PS4_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "review" 
				// FIFA SPECIFIC CODE END
            }

            #NX_BLAZE_PRODUCT_NAME_DEFAULT# = {
                releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
            }

            #IOS_BLAZE_PRODUCT_NAME_DEFAULT# = {
                releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
            }

            #ANDROID_BLAZE_PRODUCT_NAME_DEFAULT# = {
                releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
            }

            #PS5_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "review" 
				// FIFA SPECIFIC CODE END
			}
			
            #XBSX_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "review" 
				// FIFA SPECIFIC CODE END
            }

            #STEAM_BLAZE_PRODUCT_NAME_DEFAULT# = {
                releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
            }

            #STADIA_BLAZE_PRODUCT_NAME_DEFAULT# = {
                //releaseType = "#PIN_RELEASE_TYPE_DEFAULT#"
				// customize releaseType based on the correct value for each service name, 
				// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
				// default is "prod" as this service name is typically used for the normal retail title
				// FIFA SPECIFIC CODE START
				releaseType = "#ENV#" 
				// FIFA SPECIFIC CODE END
            }

			// FIFA SPECIFIC CODE START
			#if (PLATFORM == "common" || PLATFORM == "ps4" || PLATFORM == "ps5" || PLATFORM == "xone" || PLATFORM == "xbsx" || PLATFORM == "stadia")
				#BLAZE_SERVICE_NAME_EAACCESS# = {
					// customize releaseType based on the correct value for each service name,
					// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
					releaseType = "trial_ea_access"
				}
			#endif

			#if (PLATFORM == "common" || PLATFORM == "pc")
				#BLAZE_SERVICE_NAME_ORIGINACCESS# = {
					// customize releaseType based on the correct value for each service name,
					// ie: beta, demo, trial_ea_access, see PIN Taxonomy documentation for full list
					releaseType = "trial_origin_access"
				}
			#endif	
			// FIFA SPECIFIC CODE END
        }

        // Maximum number of requests per second that a single Blaze instance will send to the River PIN endpoint.
        maxRequestsPerSecond = 200

#if (ENV == "dev" || ENV == "test")
        // PIN events are normally written to a pinevent log file on disk (a.k.a persistent storage).  That log
        // file is later read back in by Blaze to send the events to the River PIN API on a best efforts basis.
        // This functionality guarrantees PIN data will not be lost if the River service experiences an outage
        // or major slow down.  However, in development and test, it is often more desirable to have PIN events
        // sent immediately.  Disabling persistent storage bypasses the functionality described above, causing the
        // PIN events to be sent immediately.  The trade-off is that PIN data can be lost.  The default is true.
        enablePersistentStorage = false
#endif
    }
    
    // Arena: this value is needed so that we can use our production tools and have connections from the Aren5a RS4 app.
	maxConcurrentHttpSessions = 500 

    #include "framework/authorization.cfg"

    #include "framework/qossettings.cfg"
}
