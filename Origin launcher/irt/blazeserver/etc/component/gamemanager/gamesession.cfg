// Copyright Electronic Arts Inc.  All Rights Reserved.
//
// for more information about this config file, see Blaze documentation on Confluence. 
//
// settings that affect all Games (GAME_TYPE_GAMESESSION/GAME_TYPE_GROUP) on the blazeServer

gamesession = {
    
    // This is the attribute name used for generating per-mode metrics. 
    // GameSessions must include this attribute or they will recieve GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING. (Only resetable dedicated servers missing an attribute with this name will have it automatically added and set to value "".)
    // The mode attribute name should be consistent across a title to work properly, as the attribute values are used for generating GameManager metrics.
    // The metrics system will use "unknown_game_mode" as the mode value for purposes of reporting metrics when the mode's attribute value is the empty string.
    gameModeAttributeName = "Gamemode_Name"     // FIFA SPECIFIC CODE

    // This is the (optional) attribute name used for populating PIN match join/info events. Titles that wish to have the mode type data in their PIN events need to set this parameter
    // and ensure that their title creates games with this attribute name
    PINGameModeTypeAttributeName = "mode_type"

    // This is the (optional) attribute name used for populating PIN match join/info events. Titles that wish to have the game type data in their PIN events need to set this parameter
    // and ensure that their title creates games with this attribute name
    PINGameTypeAttributeName = "game_type"
    
    // This is the (optional) attribute name used for populating PIN match join/info events. Titles that wish to have the map data in their PIN events need to set this parameter
    // and ensure that their title creates games with this attribute name
    PINGameMapAttributeName = "map"
    
    // joinTimeout: The max time the blazeServer allows for a player to fully connect to a game's
    //  peer network mesh
    //  If this timer expires, the blazeServer kicks the player out of the game they are attempting to join.
    joinTimeout = "60s"

    // hostMigrationTimeout: The host migration timeout. The default value is same as player join timeout.
    // This is because the player has to make all the necessary connections to the new host just like he would have made it when the game was initially setup.
    // If a player cannot re-establish his connection to the game's peer network mesh before this timeout expires, he's removed from the game
    hostMigrationTimeout = "60s"

    // playerReservationTimeout: The max time the blazeServer allows for a player to be RESERVED in a game
    //  before claiming the player reservation
    //  If this timer expires, the blazeServer kicks the player out of the game they are RESERVED in.
    playerReservationTimeout = "300s"       // FIFA SPECIFIC CODE

    //  disconnectReservationTimeout: The max time the blazeServer allows for a player to be RESERVED in a game
    //  before claiming the disconnect reservation
    //  If this timer expires, the blazeServer kicks the player out of the game they are RESERVED in.
    disconnectReservationTimeout = "60s"

    // If false, disconnect reservations will not be created for spectator players and queued players.
    // Spectator/queued players who join a match probably don't need reservations created when they leave the match.
    enableSpectatorDisconnectReservations = false
    enableQueuedDisconnectReservations = false

    // assignTopologyHostForNetworklessGameSessions if false, topology hosts are not assigned for GameGroups and game sessions with the NETWORK_DISABLED topology.
    // This allows for createGameMatchmaking for (or directly creating) NETWORK_DISABLED game sessions while seeking a resrvation, as well as allowing NETWORK_DISABLED games
    // and GameGroups to persist when the entire roster is in the RESERVED state.
    assignTopologyHostForNetworklessGameSessions = true
    assignPlatformHostForDedicatedServerGames = false

    // queueCapacityMax: The max possible player queue size a game session can have (uint16_t)
    //   When a player creats a game, the blazeServer clamps the game's requested queue capacity to this value.
    // Note: zero effectively disables the player queue; UINT16_MAX is as close to an unbounded queue as we get
    queueCapacityMax = 4
		
    // gameSessionQueueMethod:
    // Blaze supports two types of game session queue management, 'GAME_QUEUE_BLAZE_MANAGED' and 'GAME_QUEUE_ADMIN_MANAGED'.
    // Blaze managed queues are managed by the blaze server.  It performs a FIFO action always adding the first player 
    // into any slot that becomes avaiable. The Blaze server will 'pump' the queue when:
    //   * The capacity of the game increases
    //   * After a replay has finished
    //   * After host migration has finished
    //   * A player is removed.
    // Admin managed queues are managed through RPC's to the game session's first admin player.  
    gameSessionQueueMethod = "GAME_QUEUE_BLAZE_MANAGED"
    
    // banListMax: The max size each game session's banned player list can grow to (uint16_t)
    // Note: zero effectively disables the ban list; UINT16_MAX is as close to an unbounded ban list as we get
    banListMax = 100
    
    // The delay in issuing the CCS requests so that we have a chance to request connectivity in bulk. 
    ccsRequestIssueDelay = "1000ms"
    // Delay when destroying a Game before freeing connections.  Avoids edgecase CCS errors when users disconnect immediately prior to destroying the Game. 
    ccsFreeRequestDelay = "1000ms"

    // The duration for which we are leasing the hosted server. The lease automatically renews as long as the game is alive and needs it. 
    // Do not make this value too short otherwise it will impact performance. Do not make this value too high otherwise it will waste resources.
    // Internally clamped to be at least 1 minute.  
    ccsLeaseTime = "15m"

    // This determines how the ccs pool's ping site is chosen.  
    // AVERAGE_FOR_ALL_PLAYERS - Averages all player's pings to a given site, chooses the site with the lowest average ping.                          (Recommended. Best overall site.)
    // BEST_FOR_SLOWEST_PLAYER - Uses the highest ping any player has to a given site, chooses the site with the lowest ping for the slowest player.  (Recommended. Helps slowest player)
    // BEST_FOR_FASTEST_PLAYER - Uses the lowest ping any player has to a given site, chooses the site with the lowest ping for the fastest player.   (Not recommended.  Helps fastest player)
    // STANDARD_DEVIATION      - Calculates the standard deviation (distance from mean) for each ping site, chooses the site with the lowest deviation.  (Not recommended.  May pick low deviation sites with high ping)
    ccsPingSiteSelectionMethod = "AVERAGE_FOR_ALL_PLAYERS" 

    // evaluateGameProtocolVersionString: If set to true, matchmaking will produce NO_MATCH and game joins will fail on 
    // mismatched game protocol versions.
    // If set to false, these checks are ignored throughout GameManager, including matchmaking and game browsing.
    evaluateGameProtocolVersionString = true
    
    //allowMismatchedPingSiteForVirtualizedGames: If set to true, when selecting a host for injection to a virtualized game,
    // if no hosts are available in the game's specified ping site, we'll randomly select a host for the game, meaning the host will be in the wrong datacenter.
    // Set to false if you want to require a specific datacenter for any given virtual game's host.
    allowMismatchedPingSiteForVirtualizedGames = false      // FIFA SPECIFIC CODE
    
    // trustedDedicatedServerReports: Ignored if game network topology is not CLIENT_SERVER_DEDICATED.   If the game is 
    // a dedicated server, specifying true indicates that only the dedicated server can send a game report for players in 
    // the game.  Because there is only one game report in this use-case, other players can not submit their own game reports.
    // A value of false would mean that players and not the dedicated server are responsible for submitting reports.   Behind
    // the scenes, a value of true indicates the report is sent directly to the slave for processing.   A value of false means
    // reports are still sent to the master for collation prior to processing on the slave.  Again, non dedicated server games
    // ignore this flag (reports are always sent to the master for collation/validation first.)
    trustedDedicatedServerReports = false

    // the pending kick timeout (in milliseconds) is the amount of time we wait while determining if a player lost a peer
    // connection or a connection to the blazeServer itself (or both).  If this timeout expires, the player is kicked from
    //  the game.
    //  If omitted, blaze defaults to 15 seconds.
    pendingKickTimeout = "15s"

    // Before kicking a player, we first check that the host of the game is still connected. If the host is not connected, 
    // then we'll initiate host migration, and stop from kicking the other player. 
    //  If omitted, blaze defaults to 5 seconds. (This value should be low, and less than pendingKickTimeout)
    hostPendingKickTimeout = "5s"
     
    // whether clear the banned list on resetting a dedicated server. The default value is true
    clearBannedListWithReset = true
     
    // if true, games that are closed to matchmaking and game browsing will be omitted from the RETE tree.
    hideClosedGamesFromRETE = false
     
    // Controls which users get notifications for queue changes. Options: HOST_AND_QUEUED, INGAME_AND_QUEUED
    queueChangeNotifications = "HOST_AND_QUEUED"

    // Internally, when a player is removed from a game, any players he was still establishing a connection with will
    // continue to store his id until an updateMeshConnection request is received for the connection. This is necessary
    // to support connectivity metrics. If an expected updateMeshConnection request is not received, cleanup will be 
    // performed after this timeout and metrics will not be collected for the affected connection.
    updateMeshConnectionTimeout = "40s"

    // If true the network address of players is not shared with other players in Game Groups or CSD Games (without VoIP or with Dedicated Server VoIP). 
    enableNetworkAddressProtection = true

    externalSessions = {
        // "pc" = {}    // Origin does not currently have any S2S way of managing Game Sessions. 
        "xbsx" = {
            // service config identifier
            scid = "#XONE_SCID#"

            // Title id specified for external sessions (For Xbox can be decimal or '0x'-prefixed hexadecimal).
            externalSessionTitle = "#XONE_TITLEID#"

            // List of session template names of external session supported.
            sessionTemplateNames = [ #XONE_SESSION_TEMPLATE_NAME_LIST# ]
            contractVersion = "#XONE_EXTERNAL_SESSION_CONTRACT_VERSION#"

            // String added to your GDNP sessions' names. Specify a string here that can uniquely identify the environment
            // (e.g. prod, dev, test) to ensure unique names across all blaze server system instances and environments.
            externalSessionNamePrefix = "#ENV#"

            // externalSessionHandlesContractVersion: The contract version for the external sessions handles service. Required for internal use by Blaze Server to call Xbox Live services to update game presence in the shell UX using MS's 2015 Multiplayer APIs.
            externalSessionHandlesContractVersion = "#XONE_EXTERNAL_ACTIVITY_HANDLES_CONTRACT_VERSION#"

            // Users can be in one or more Blaze game groups as well as a game session, at the same time. However the first party shell UX may only advertise one of
            // these as the primary joinable session for the user. primaryExternalSessionTypeForUx lists the GameType's Blaze automatically handles advertising as the primary:
            //  * If only GAME_TYPE_GAMESESSION is in the list, Blaze makes the latest game session the user joined be the one advertised.
            //  * If only GAME_TYPE_GROUP is in the list, Blaze makes the latest game group the user joined be the one advertised.
            //  * If both GAME_TYPE_GAMESESSION and GAME_TYPE_GROUP are in the list, their order determines priority. E.g. if GAME_TYPE_GAMESESSION is first, the latest game session
            //    is advertised, unless the user isn't in a game session in which case the latest game group is advertised.
            //  * Alternatively if your title wishes to have title code, and not Blaze, fully control the updating of which game group/session (if any) is advertised in the UX set primaryExternalSessionTypeForUx
            //    to empty list (the default). This disables Blaze handling the advertisement. The title client code can then call first party API directly to specify the game session/group to be advertised.
            primaryExternalSessionTypeForUx = [ #XONE_PRIMARY_EXTERNAL_SESSION_TYPE_LIST# ]

            // externalSessionInviteProtocol: The invite protocol for external sessions. Xbox invites generate a toast in the invitee's first party UX only if this is set to 'game'.
            externalSessionInviteProtocol = "#XONE_EXTERNAL_SESSION_INVITE_PROTOCOL#"

            // Blaze automatically disables the first party shell UX's join buttons for the games it deems full for the UX. externalSessionFullnessIncludesQueue allows titles to
            // specify whether game's queue space is accounted for in determining this fullness. If true (the default) it will. If false only the game's non-queue space is accounted for.
            externalSessionFullnessIncludesQueue = true

            // Blaze automatically disables the first party shell UX's join buttons for the games it deems full for the UX. externalSessionFullnessRole allows specifying a role, such that if
            // externalSessionFullnessIncludesRole is true, any game having the role full is deemed full for the UX (even if not generally full). This setting is ignored if externalSessionFullnessIncludesRole is false.
            externalSessionFullnessIncludesRole = false
            externalSessionFullnessRole = ""

            // externalUserProfilesContractVersion: The contract version for the external user profile service (if available).
            //  If the external user profile service is available and externalUserProfilesContractVersion is specified, for users
            //  that have never logged into the title's blaze server, reserved into games, GameManager will attempt populating
            //  their player objects' names using the service rather than leaving their names empty. To disable having Blaze
            //  use the external profile service, and use the empty names, set externalUserProfilesContractVersion to empty string.
            externalUserProfilesContractVersion = "#XONE_EXTERNAL_USER_PROFILE_CONTRACT_VERSION#"

          #if defined(MOCK_EXTERNAL_SERVICE_URL_XONE)
            useMock = true
          #endif
        }
        "xone" = {
            // xone and xbox series x potentially have separate MPSD settings
            scid = "#XONE_SCID#"
            externalSessionTitle = "#XONE_TITLEID#"
            sessionTemplateNames = [ #XONE_SESSION_TEMPLATE_NAME_LIST# ]
            contractVersion = "#XONE_EXTERNAL_SESSION_CONTRACT_VERSION#"
            externalSessionNamePrefix = "#ENV#"
            externalSessionHandlesContractVersion = "#XONE_EXTERNAL_ACTIVITY_HANDLES_CONTRACT_VERSION#"
            primaryExternalSessionTypeForUx = [ #XONE_PRIMARY_EXTERNAL_SESSION_TYPE_LIST# ]
            externalSessionInviteProtocol = "#XONE_EXTERNAL_SESSION_INVITE_PROTOCOL#"
            externalSessionFullnessIncludesQueue = true
            externalSessionFullnessIncludesRole = false
            externalSessionFullnessRole = ""
            externalUserProfilesContractVersion = "#XONE_EXTERNAL_USER_PROFILE_CONTRACT_VERSION#"
          #if defined(MOCK_EXTERNAL_SERVICE_URL_XONE)
            useMock = true
          #endif
        }
        "ps4" = {
            // Whether to enable 1st party sessions to work crossgen with ps5. If true, Blaze automatically uses Sony's Cross
            // Gen PlayerSessions APIs instead of ps4's Session/Invitation APIs to manage title's 1st party sessions on ps4.
            crossgen = "#PSN_EXTERNAL_SESSION_XGEN_ENABLED#"

            // Service label for title's external sessions service. For PS4, this is the title's assigned Blaze Server side session/invitation service label number for S2S. Reference Blaze PS4 docs for details.
            externalSessionServiceLabel = #PS4_EXTERNAL_SESSION_SERVICE_LABEL#

            primaryExternalSessionTypeForUx = [ #PS4_PRIMARY_EXTERNAL_SESSION_TYPE_LIST# ]

            externalSessionFullnessIncludesQueue = true
            externalSessionFullnessIncludesRole = false
            externalSessionFullnessRole = ""

            // Specify the default image displayed for external sessions advertised in the PS4 shell UX, by setting externalSessionImageDefault to the image's JPEG file path.
            // The path is a relative to the Blaze Server etc working directory. For instance if the file is at <blaze root>/etc/ps4/sample.jpg, "../etc/ps4/sample.jpg".
            externalSessionImageDefault = "#PS4_EXTERNAL_SESSION_IMAGE_DEFAULT#"

          #if defined(MOCK_EXTERNAL_SERVICE_URL_PS4)
            useMock = true
          #endif
        }
        "ps5" = {
            // To enable ps5 1st party sessions to work crossgen with ps4, set this true also:
            crossgen = "#PSN_EXTERNAL_SESSION_XGEN_ENABLED#"

            // Service label for title's external sessions service. For PS5, this is the title's assigned Blaze Server side sessionManager service label number for S2S. Reference Blaze PS5 docs for details.
            externalSessionServiceLabel = #PS5_EXTERNAL_SESSION_SERVICE_LABEL#
            psnMatchesServiceLabel = #PS5_MATCHES_SERVICE_LABEL#

            primaryExternalSessionTypeForUx = [ #PS5_PRIMARY_EXTERNAL_SESSION_TYPE_LIST# ]

          #if defined(MOCK_EXTERNAL_SERVICE_URL_PS5)
            useMock = true
          #endif
        }
    }

    // Maps Blaze TeamIds to string team names, for display in UX etc.
    teamNameByTeamIdMap = { #TEAMNAME_BY_TEAMID_MAP# }

    // lockGamesForPreferredJoinsTimeout: The timeout value for how long games remain locked for preferred joins.
    //  This setting allows active players in the game a first chance at directly joining into open slots their external friends/group members etc,
    //  when a player is removed or the game or its queue's size expanded. To do this, when the new open slots become available,
    //  blaze blocks finding or joining a game by matchmaking or game browsing, for up to lockGamesForPreferredJoinsTimeout seconds. 
    //  If all active players have called joinGameByUserList or preferredJoinOptOut in response to the lock or the game becomes full,
    //  the lock is removed. Locking games for preferred joins is disabled if lockGamesForPreferredJoinsTimeout is 0s (the default).
    //
    //  Note: The lockGamesForPreferredJoinsTimeout was primarily useful for Xbox One's old Party based system and XR-066 requirement, where users would be sitting in the Party waiting to get into games while others are in it. (For details see https://docs.​developer.ea.​com/display/​blaze/Caps+​Multiplayer+​Session+​Directory+​and+Party#​Caps​Multiplayer​Session​Directoryand​Party-Game​ManagerJoin​GameByUser​List).
    //  The old XR-066 was: "Microsoft XR-066: Joining Parties : Microsoft required that your title add new members of the Party to its registered game session, at the earliest appropriate time for the title."
    //  For instance if the Party's registered Blaze game session has or gets room and new Party members are able/allowed to join, they should be added (via joinGameBy​UserList or other methods) to the game when possible.
    //  Today XR-066 has been removed by MS, and with the new 2015 Multiplayer (Blaze 15.x+), titles aren't going to be using Party's. This feature can still be applied to 'lobby groups' as MS described in their documentation (implemented via game groups). By default though Lobby Groups don't need to use the lock for preferred joins.
// FIFA SPECIFIC CODE START
#if PLATFORM == "xone"
    lockGamesForPreferredJoinsTimeout = "5s"
#else
    lockGamesForPreferredJoinsTimeout = "0s"
#endif
// FIFA SPECIFIC CODE END

    // This setting indicates the interval at which QoS telemetry for perr-to-peer connections
    // will be sent to the server.  This telemetry is used to produce metrics which can then be queried
    // with calls to the getStatus RPC.
    qosTelemetryInterval = "20s"

    // joinBusyGameStates, joinWaitTimeOnBusy : If a client makes a join game call, which would otherwise fail due the game
    // being in one of the joinBusyGameStates's closed-to-joins GameState's, or, due to its lockedAsBusy GameSetting being set,
    // GameManager will have their join attempts internally suspended by GameManager for up to joinWaitTimeOnBusy milliseconds,
    // before they actually get executed. joinWaitTimeOnBusy's default if unspecified is 3000 ms.
    //joinBusyGameStates = ["POST_GAME"]
    //joinWaitTimeOnBusy  = "3000ms"

    // Mapping of CCS mode to be used in each game mode. If a game mode is not specified in the list below, the "defaultCCSMode" mapping is used from the map below. 
    // For modes other than "defaultCCSMode", an optional ccsPool can be specified to override the default pool, e.g., ccsPool="eadpcloud-global".
    // This pool must be the same CCS API version as defined in gamemanager.cfg
    gameModeToCCSModeMap = { 
    // FIFA SPECIFIC CODE START
        "defaultCCSMode" = { description = "CCS mode to be used for all games(sessions/groups) by default.", ccsMode="CCS_MODE_PEERONLY" } 
        "h2h_season_match" = { description = "CCS mode to be used by the game mode h2h_season_match", ccsMode="CCS_MODE_HOSTEDFALLBACK" }       
        "h2h_cup_match" = { description = "CCS mode to be used by the game mode h2h_cup_match", ccsMode="CCS_MODE_HOSTEDFALLBACK" }
        "fut_online_draft" = { description = "CCS mode to be used by the game mode fut_online_draft", ccsMode="CCS_MODE_HOSTEDFALLBACK" }
        "fut_online_season" = { description = "CCS mode to be used by the game mode fut_online_season", ccsMode="CCS_MODE_HOSTEDFALLBACK" }
        "fut_online_h2h" = { description = "CCS mode to be used by the game mode fut_online_h2h", ccsMode="CCS_MODE_HOSTEDFALLBACK" }
	    "fut_online_houserules" = { description = "CCS mode to be used by the game mode fut_online_houserules", ccsMode="CCS_MODE_HOSTEDFALLBACK" }
    // FIFA SPECIFIC CODE END
    }

    // gameUpdateEvents are sent whenever a game is updated or the player roster changes.
    // These events increase the servers' load, and should only be enabled if required by the title.
    enableGameUpdateEvents = false

    // Game Permission System:

    // The Global Permissions are used for all games that do not have a permission system set.
    defaultGamePermissionSystem = {

        // Automatic Admin Selection means that the topology host (and the first game's creator/host) will automatically be set as an Admin.
        // It also enables functionality where a new Admin is chosen automatically if the old ones leave. (New admin is the oldest player in-game.)
        // New permissions can use the 'host' section to replace this functionality.   (Recommended - Do not enable in custom permissions.)
        enableAutomaticAdminSelection = true        

        host = []       // Actions allowed for the Topology Host  (Note: The topology host is not always an Admin.)

        admin = [ "ALL_ADMIN_ACTIONS" ]         // Actions allowed for players in the Admin list.
        participant = [ "ALL_PLAYER_ACTIONS" ]  // Actions allowed for all players (including Queued/Reserved)
        spectator   = [ "ALL_PLAYER_ACTIONS" ]  // Actions allowed for spectators
    }

    gamePermissionSystemConfig = {
        "normalGame" = {                            // No Auto Admins - If this is a dedicated server game, only the DS box will be the host.
            host        = [ "ALL_ADMIN_ACTIONS" ]
            admin       = [ "ALL_ADMIN_ACTIONS" ]
            participant = [ "ALL_PLAYER_ACTIONS" ]
            spectator   = [ "ALL_PLAYER_ACTIONS" ]
        }

        // Restrict the actions the host and players can take:
        // This assumes the game is a dedicated server game, where only the dedicated server host is allowed to start and end the game.
        // Game admins may be optional. See create game templates and Blaze docs.
        "tournamentGame" = {		
            enableAutomaticAdminSelection = true        // FIFA SPECIFIC CODE
            host        = [ "INIT_GAME",
                            "START_GAME",
                            "END_GAME",
                            "SET_OTHER_PLAYER_ATTRIBUTES", //needed if dedicated server updates players' attributes
                            "UPDATE_GAME_ATTRIBUTES", //needed if dedicated server updates game's attributes
                          //"REPLAY_GAME", //needed if using Blaze replayGame (e.g. 'best of x' modes)
                          //"SWAP_PLAYERS_SKIP_SPECTATOR_ENTRY_CHECK ",  //needed if the server swaps players' teams (i.e. afer a round ends)
                            "RETURN_DEDICATED_SERVER_TO_POOL" ]

            admin       = [ "ALL_ADMIN_ACTIONS" ]

            // Players are not allowed to change team nor slot type (spectate)
            participant = [ "SET_PLAYER_ATTRIBUTES", 
                            "SET_PLAYER_ROLE", 
                            "UPDATE_GAME_ATTRIBUTES",       // FIFA SPECIFIC CODE
                            "LEAVE_GAME",
                            "LEAVE_GAME_BY_GROUP"]
            spectator   = [ "SET_PLAYER_ATTRIBUTES", //needed to store the spectator's camera type in its attributes
                            "LEAVE_GAME" ] //spectators should be able to leave the game
        }
    }
}

