[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

[headername="gamereporting/fifa/tdf/ssfmatchendresult.h"]
#include "gamereporting/fifa/gen/ssfmatchendresult.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{
namespace SSFMinigamesReportBase
{
///////////////////////////////////////////////////////////////////////////////
//  SSF Minigames Game Report
///////////////////////////////////////////////////////////////////////////////
[
    tdfid = "hash",
    description = "SSF minigames game report TDF representing game data",
    details = "SSF minigames game report TDF"
]

typedef uint8_t ParticipantID;
class ParticipantReport
{
    [tag="rslt", description="User's end match result"]
    Blaze::GameReporting::SSFSeasonsReportBase::SsfMatchEndResult mEndResult;

    [tag="pers", description="Persona ID"] 
    uint64_t mPersonaID;

    [tag="scor", description="Score"]
    int16_t mScore;
};
typedef map<ParticipantID, ParticipantReport> ParticipantReportMap;

class GameReport
{   
    [tag="pmap", description="Participant reports"]
    ParticipantReportMap mParticipantReports;
};

//////////////////////////////////////////////////////////////////////////////
//  SSF Minigames Player Report
///////////////////////////////////////////////////////////////////////////////
[
    tdfid = "hash",
    description = "SSF minigames player report TDF representing player data",
    details = "SSF minigames player report TDF"
]

enum EndSubReason
{
    END_CONSTRAINED,
    END_IDLE,
    END_NONE,
    END_QUIT
};

class PlayerReport
{
    [tag="iscp", description="Is captain"]
    bool mIsCapt;

    [tag="shom", description="Is home or away"]
    bool mIsHome;

    [tag="tpid", description="Tournament participant ID"]
    ParticipantID mParticipantID;

    [tag="asid", description="Avatar slot ID"] 
    int8_t mSlotID;
};

///////////////////////////////////////////////////////////////////////////////
//  SSF Minigames Notification
///////////////////////////////////////////////////////////////////////////////
const uint32_t HASH_MAX_LENGTH = 128;
class NotificationCustomGameData
{
    [tag="grid", description="Game reporting ID"]
    GameManager::GameReportingId mGameReportingID;   
	
    [tag="nend", description="Match end reason"]
    uint32_t mMatchEndReason;

    [tag="ntim", description="Game time, in seconds"]
    uint16_t mSecondsPlayed;

    [tag="nrep", description="Participant reports"]
    ParticipantReportMap mParticipantReports;
};
} // namespace SSFMinigamesReportBase
} // namespace GameReporting
} // namespace Blaze
