[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

///////////////////////////////////////////////////////////////////////////////
//  OSDK common game report
//
//  Submitted report TDFs. 
namespace OSDKGameReportBase
{

const uint32_t GAME_TYPE_MAX_NAME_LENGTH = 33;
const uint32_t PLAYER_MAX_NAME_LENGTH = 256;
const uint32_t OSDK_VERSION_MAX_NAME_LENGTH = 12;
const uint32_t ATTRIBUTE_KEY_LENGTH_MAX = 33;

typedef uint64_t ArenaChallengeId;
const ArenaChallengeId INVALID_ARENA_CHALLENGE_ID = 0;

typedef string(ATTRIBUTE_KEY_LENGTH_MAX) IntegerAttributeKey;
typedef int64_t IntegerAttributeValue;
typedef map<IntegerAttributeKey, IntegerAttributeValue> IntegerAttributeMap;

[
    tdfid = "hash",
    description = "OSDK Generic PrivatePlayerReport TDF for private player data.",
    details = "OSDK private player report TDF",
    trackChanges = true
]
class OSDKPrivatePlayerReport
{
    ///////////////////////////////////////////////////////////////////////////////
    // Player private attribute map
    ///////////////////////////////////////////////////////////////////////////////
    [tag="ppam", description="Player private attribute map"]
        Collections::AttributeMap privateAttributeMap;

    ///////////////////////////////////////////////////////////////////////////////
    // Player private integer attribute map
    ///////////////////////////////////////////////////////////////////////////////
    [tag="piam", description="Player private integer attribute map"]
        IntegerAttributeMap privateIntAttributeMap;
};

[
    tdfid = "hash",
    description = "OSDK Generic PlayerReport TDF that takes a variable TDF representing player data.",
    details = "OSDK player report TDF"
]
class OSDKPlayerReport
{
    [tag="name", description="Player name"]
        string(PLAYER_MAX_NAME_LENGTH) name;

    [tag="grlt", description="Player game result, correspond to OSDK StatGameResultE"]
        uint32_t gameResult;

    [tag="csco", description="Player client score or points for count before score adjustment"]
        uint32_t clientScore;

    [tag="scor", description="Player score or points for count"]
        uint32_t score;

    [tag="team", description="Player team"]
        uint32_t team;
        
    [tag="home", description="Player home or away"]
        bool     home;

    [tag="wins", description="Player wins"]
        uint32_t wins;

    [tag="loss", description="Player losses"]
        uint32_t losses;

    [tag="ties", description="Player ties"]
        uint32_t ties;

    [tag="relt", description="Player result"]
        uint32_t userResult;

    [tag="fhrn", description="Player finish reason"]
        uint32_t finishReason;

    [tag="skil", description="Player skill level"]
        uint32_t skill;

    [tag="skpt", description="Player skill points"]
        uint32_t skillPoints;

    [tag="ptag", description="Player points against"]
        uint32_t pointsAgainst;

    [tag="opct", description="Player opponent count"]
        uint32_t opponentCount;

    [tag="wdnf", description="Player winner by dnf"]
        uint32_t winnerByDnf;

    [tag="cdnf", description="Player given custom dnf"]
        uint32_t customDnf;

    [tag="pnid", description="Player nucleus ID"]
        uint64_t nucleusId;

    [tag="peid", description="Player external ID"]
        uint64_t externalId;

    [tag="ppna", description="Player persona"]
        string(MAX_PERSONA_LENGTH) persona;

    [tag="ctry", description="Player country keyscope"]
        uint16_t accountCountry;

    [tag="oppr", description="Player private report attribute map"]
        OSDKPrivatePlayerReport privatePlayerReport;

    ///////////////////////////////////////////////////////////////////////////////
    // Game custom player report
    ///////////////////////////////////////////////////////////////////////////////
    [tag="cprt", description="Variable game player TDF report. Consult report TDF documentation for more information."]
        variable customPlayerReport;
};

[
    tdfid = "hash",
    description = "OSDK Generic Game Report TDF that takes a variable TDF representing game data.",
    details = "OSDK game report TDF"
]
class OSDKGameReport
{
    [tag="stus", description="Finished Status, correspond to OSDK StatGameFinishedStatusE"]
        uint32_t finishedStatus;

    [tag="rank", description="Rank"]
        bool rank;

    [tag="isim", description="Simulate Game"]
        bool simulate;

    [tag="type", description="Game Type "]
        string(GAME_TYPE_MAX_NAME_LENGTH) gameType;

    [tag="gtim", description="Game Time"]
        uint32_t gameTime;

    [tag="grid", description="Game Reporting ID"]
        uint64_t gameReportId;

    [tag="ctid", description="Room Category ID"]
        uint32_t categoryId;

    [tag="roid", description="Room ID"]
        uint32_t roomId;

    [tag="lgid", description="League ID"]
        uint32_t leagueId;

    [tag="arid", description="Arena Challenge ID", 
        details="This is used by the EA Sports Arena feature to identify challenges. This id is externally generated."]
        ArenaChallengeId arenaChallengeId;

    ///////////////////////////////////////////////////////////////////////////////
    // Game custom game report
    ///////////////////////////////////////////////////////////////////////////////
    [tag="cgrt", description="Variable game TDF report. Consult report TDF documentation for more information."]
        variable customGameReport;
};

[
    tdfid = "hash",
    description = "OSDK Generic Game Report TDF that takes a variable TDF representing game report data.",
    details = "OSDK report TDF"
]
class OSDKReport
{
    typedef map<GameManager::PlayerId, OSDKPlayerReport> OSDKPlayerReportsMap;

    [tag="plyr", description="Player Reports"]
        OSDKPlayerReportsMap playerReports;

    [tag="gamr", description="Game Report"]
        OSDKGameReport gameReport;

    [tag="tamr", description="Variable game TDF report for club report. Consult report TDF documentation for more information."]
        variable teamReports;   // Map to OSDKClubReport TDF

    [tag="ifpr", description="Variable game TDF report for in-field player report. Consult report TDF documentation for more information."]
        variable fieldPlayerReports;

    ///////////////////////////////////////////////////////////////////////////////
    // Game custom report
    ///////////////////////////////////////////////////////////////////////////////
    [tag="cgrt", description="Variable game TDF report. Consult report TDF documentation for more information."]
        variable customReport;

    [tag="egrt", description="Variable server TDF report. Consult report TDF documentation for more information."]
        variable enhancedReport;
};

[
    tdfid = "hash",
    description = "OSDK Generic Report Notification TDF that takes a variable TDF representing game custom data.",
    details = "OSDK custom data report notification TDF"
]
class OSDKNotifyReport
{
    ///////////////////////////////////////////////////////////////////////////////
    // Game custom report
    ///////////////////////////////////////////////////////////////////////////////
    [tag="cdrn", description="Variable game TDF report for custom data report notification."]
        variable customDataReport;
};

} // namespace OSDKGameReportBase
} // namespace GameReporting
} // namespace Blaze
