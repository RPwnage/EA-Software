[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

[headername="clubs/tdf/clubs_base.h"]
#include "clubs/gen/clubs_base.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

///////////////////////////////////////////////////////////////////////////////
//  GameHistoryBasic style reports
//
//      Submitted report TDFs. 
namespace GameHistoryBasic
{

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Generic PlayerReport TDF that takes a variable TDF representing player data.",
    details = "This contains player and any other relevent data submitted by clients to game reporting."
]
class PlayerReport
{    
    [tag="kill", description="player kills"]
        uint16_t kills;
    
    [tag="deth", description="player deaths"]
        uint16_t deaths;
    
    [tag="talv", description="longest time alive"]
        uint32_t longestTimeAlive;
    
    [tag="mony", description="money lost"]
        uint32_t money;  

    [tag="winr", description="winner"]
        bool winner;

    [tag="losr", description="loser"]
        bool loser;
    
    [tag="wdnf", description="Winner by DNF"]
        bool winnerByDNF;              

    [tag="lspt", description="Lobby skill points"]
        int32_t lobbySkillPoints;

    [tag="gspt", description="Glicko skill points"]
        int32_t glickoSkillPoints;

    [tag="glrd", description="Glicko rd"]
        int32_t glickoRd;
        
    [tag="rank", description="Rank"]
        int32_t rank;

    [tag="pcls", description="Player Class"]
        int32_t playerClass;
};


[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Full GameReport including custom processor and derived data (i.e. from games or clubs)",
    details = "This contains the full game report, including client player reports and server-based data (data not submitted directly by clients.)"
]
class GameAttributes
{
    //  game attributes/stats
    [tag="map", description="game attribute to retrieve map name from"]
        int32_t mapId;
    [tag="mode", description="game attribute to retrieve mode from"]
        string(256) mode;
};


[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "The basis for a 2.x style game report.",
    details = "This contains the full game report, including client player reports and server-based data (data not submitted directly by clients.)"
]
class Report
{
    [tag="plyr", description="Player Reports"]
    map<GameManager::PlayerId, PlayerReport> playerReports;     
    
    [tag="game", description="Game Attributes"]
    GameAttributes gameAttrs;
    
    [tag="cust", description="Custom reports.  Use this to define addition report information for the report TDF, like club maps, or other constructs specific to the game type."]
    variable mCustomReports;    
};    

} // namespace GameHistoryBasic

} // namespace GameReporting
} // namespace Blaze
