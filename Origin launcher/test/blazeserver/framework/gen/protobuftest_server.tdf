namespace Blaze
{

namespace Protobuf
{

namespace Test
{
enum OutOfClassEnum
{
   OUT_OF_CLASS_ENUM_VAL_0 = 0,
   OUT_OF_CLASS_ENUM_VAL_1 = 1,
   OUT_OF_CLASS_ENUM_VAL_2 = 2,
   OUT_OF_CLASS_ENUM_VAL_3 = 3
};

bitfield ABitField 
{
    BIT_0;
    BIT_1_2 : 2;
    BIT_3;
};

// const values
const uint8_t UINT8_T_CONST = 1;
const uint16_t UINT16_T_CONST = 1;
const uint32_t UINT32_T_CONST = 1;
const uint64_t UINT64_T_CONST = 1;
const int8_t INT8_T_CONST = 1;
const int16_t INT16_T_CONST = 1;
const int32_t INT32_T_CONST = 1;
const int64_t INT64_T_CONST = 1;
const float FLOAT_CONST = 1.0f;

typedef int32_t MapIntKey;
typedef string(32) MapStringKey;
typedef OutOfClassEnum MapEnumKey;
typedef blob MapBlobKey;

[trackChanges=true]
class AllPrimitivesClass
{   

    [tag="tagj", default=true]
    bool mBool;

    [tag="taga"]
    uint8_t mUInt8;
    
    [tag="tagb"]
    uint16_t mUInt16;
    
    [tag="tagc"]
    uint32_t mUInt32;
    
    [tag="tagd"]
    uint64_t mUInt64;
    
    [tag="tage"]
    int8_t mInt8;
    
    [tag="tagf"]
    int16_t mInt16;
    
    [tag="tagg", default=42]
    int32_t mInt32;
    
    [tag="tagh"]
    int64_t mInt64;

    [tag="flt", default=1.010101]
    float mFloat;

    [tag="tagi", default="kitty"]
    string(32) mString;

    [tag="oenu"]
    OutOfClassEnum mOutOfClassEnum;

    enum InClassEnum
    {
      IN_OF_CLASS_ENUM_VAL_0 = 0,
      IN_OF_CLASS_ENUM_VAL_1 = 1,
      IN_OF_CLASS_ENUM_VAL_2 = 2,
      IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="ienu"]
    InClassEnum mInClassEnum;    
};

[trackChanges=true]
union AllPrimitivesUnion
{   
    
    [tag="tagj"]
    bool mBool;

    [tag="taga"]
    uint8_t mUInt8;
    
    [tag="tagb"]
    uint16_t mUInt16;
    
    [tag="tagc"]
    uint32_t mUInt32;
    
    [tag="tagd"]
    uint64_t mUInt64;
    
    [tag="tage"]
    int8_t mInt8;
    
    [tag="tagf"]
    int16_t mInt16;
    
    [tag="tagg"]
    int32_t mInt32;
    
    [tag="tagh"]
    int64_t mInt64;

    [tag="flt"]
    float mFloat;

    [tag="tagi"]
    string(32) mString;

    //[tag="blob"]
    //blob mBlob;

    [tag="oenu"]
    OutOfClassEnum mOutOfClassEnum;
   
};

[trackCanges=true]
union AllComplexUnion
{
    [tag="clas"]
    AllPrimitivesClass mClass;

    [tag="unio"]
    AllPrimitivesUnion mUnion;

    [tag="bitf"]
    ABitField mBitField;

    [tag="blob"]
    blob mBlob;

    [tag="objt"]
    ObjectType mObjectType;

    [tag="obji"]
    ObjectId mObjectId;
       
    [tag="time"]
    TimeValue mTime;

    [tag="var"]
    variable mVariable;

    [tag="gen"]
    generic mGeneric;

};

[trackChanges=true]
class AllComplexClass
{
    [tag="clas"]
    AllPrimitivesClass mClass;

    [tag="unio"]
    AllPrimitivesUnion mUnion;

    [tag="bitf"]
    ABitField mBitField;

    [tag="blob"]
    blob mBlob;

    [tag="objt"]
    ObjectType mObjectType;

    [tag="obji"]
    ObjectId mObjectId;
       
    [tag="time"]
    TimeValue mTime;

    [tag="var"]
    variable mVariable;

    [tag="gen"]
    generic mGeneric;
};

[trackChanges=true]
class AllListsPrimitivesClass
{   
    [tag="tagj"]
    list<bool> mBool;

    [tag="taga"]
    list<uint8_t> mUInt8;
    
    [tag="tagb"]
    list<uint16_t> mUInt16;
    
    [tag="tagc"]
    list<uint32_t> mUInt32;
    
    [tag="tagd"]
    list<uint64_t> mUInt64;
    
    [tag="tage"]
    list<int8_t> mInt8;
    
    [tag="tagf"]
    list<int16_t> mInt16;
    
    [tag="tagg"]
    list<int32_t> mInt32;
    
    [tag="tagh"]
    list<int64_t> mInt64;

    [tag="flt"]
    list<float> mFloat;

    [tag="tagi"]
    list<string(32)> mString;

    [tag="oenu"]
    list<OutOfClassEnum> mOutOfClassEnum;

    enum InClassEnum
    {
       IN_OF_CLASS_ENUM_VAL_0 = 0,
       IN_OF_CLASS_ENUM_VAL_1 = 1,
       IN_OF_CLASS_ENUM_VAL_2 = 2,
       IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="ienu"]
    list<InClassEnum> mInClassEnum;    
};

typedef list<list<bool>> BoolListList;
typedef list<list<int16_t>> ShortIntListList;
typedef list<list<int32_t>> IntListList;
typedef list<list<string(32)>> StringListList;
typedef list<list<OutOfClassEnum>> EnumListList;
typedef list<list<AllPrimitivesClass>> ClassListList;

typedef list<map<int16_t,int8_t>> ListMapShortIntShortShortInt;
typedef list<map<int32_t,int32_t>> ListMapIntInt;
typedef list<map<int32_t,AllPrimitivesClass>> ListMapIntClass;

typedef map<int32_t, list<int32_t>> MapIntListInt;
typedef map<int32_t, list<OutOfClassEnum>> MapIntListEnum;
typedef map<int32_t, list<string(32)>> MapIntListString;
typedef map<int32_t, list<AllPrimitivesClass>> MapIntListClass;

typedef map<int32_t, map<int32_t, int32_t>> MapIntMapIntInt;
typedef map<int32_t, map<string(32), string(32)>> MapIntMapStringString;
typedef map<int32_t, map<string(32), AllPrimitivesClass>> MapIntMapStringClass;
typedef map<int32_t, map<OutOfClassEnum, string(32)>> MapIntMapEnumString;

[trackChanges=true]
class AllListsComplexClass
{
    [tag="clas"]
    list<AllPrimitivesClass> mClass;

    [tag="unio"]
    list<AllPrimitivesUnion> mUnion;

    [tag="unic"]
    list<AllComplexUnion> mUnionComplex;

    [tag="bitf"]
    list<ABitField> mBitField; 

    [tag="blob"]
    list<blob> mBlob;

    [tag="objt"]
    list<ObjectType> mObjectType;

    [tag="obji"]
    list<ObjectId> mObjectId;
       
    [tag="time"]
    list<TimeValue> mTime;

    [tag="var"]
    list<variable> mVariable;

    [tag="gen"]
    list<generic> mGeneric;
   
    [tag="lisb"]
    BoolListList mListBool;

    [tag="lisi"]
    IntListList mListInt;

    [tag="sill"]
    ShortIntListList mListShortInt;

    [tag="lise"]
    EnumListList mListEnum;

    [tag="liss"]
    StringListList mListString;
    
    [tag="lisc"]
    ClassListList mListClass;
    
    [tag="lmii"]
    ListMapIntInt mListMapIntInt;
    
    [tag="lmss"]
    ListMapShortIntShortShortInt mListMapShortIntShortShortInt;

    [tag="lmic"]
    ListMapIntClass mListMapIntClass; 

    //[tag="mip"]
    //IntBoolMapList mMapIntBool;

    //[tag="msp"]
    //StringBoolMapList mMapStringBool;
    
    //[tag="eip"]
    //EnumBoolMapList mMapEnumBool;

    //[tag="bsp"]
    //BlobBoolMapList mMapBlobBool;

    //[tag="mic"]
    //IntClassMapList mMapIntClass;

    //[tag="msc"]
    //StringClassMapList mMapStringClass;

    //[tag="eic"]
    //EnumClassMapList mMapEnumClass;

    //[tag="bsc"]
    //BlobClassMapList mMapBlobClass;
};

// For some odd reason, the EATDF antlr stuff crashes with some enum value maps. This can be traced to the creation of this stream so it has nothing to do with the work in this stream.
// So below, we comment out some of those maps. 
// Oddly enough, if the same tdf file is placed in the BlazeSDK, it does not see that crash. 
[trackChanges=true]
class AllMapsPrimitivesClass
{   
    [tag="ib"]
    map<MapIntKey, bool> mIntBool;

    [tag="sb"]
    map<MapStringKey, bool> mStringBool;

    [tag="eb"]
    map<MapEnumKey, bool> mEnumBool;

    [tag="iui8"]
    map<MapIntKey, uint8_t> mIntUInt8;
    
    [tag="sui8"]
    map<MapStringKey, uint8_t> mStringUInt8;  

    [tag="eui8"]
    map<MapEnumKey, uint8_t> mEnumUInt8;
    
    [tag="iui6"]
    map<MapIntKey, uint16_t> mIntUInt16;
    
    [tag="sui6"]
    map<MapStringKey, uint16_t> mStringUInt16;    

    [tag="eui6"]
    map<MapEnumKey, uint16_t> mEnumUInt16;
    
    [tag="iui3"]
    map<MapIntKey, uint32_t> mIntUInt32;
    
    [tag="sui3"]
    map<MapStringKey, uint32_t> mStringUInt32;    

    [tag="eui3"]
    map<MapEnumKey, uint32_t> mEnumUInt32;
    
    [tag="iui4"]
    map<MapIntKey, uint64_t> mIntUInt64;
    
    [tag="sui4"]
    map<MapStringKey, uint64_t> mStringUInt64;    

    [tag="eui4"]
    map<MapEnumKey, uint64_t> mEnumUInt64;
    
    [tag="iii8"]
    map<MapIntKey, int8_t> mIntInt8;
    
    [tag="sii8"]
    map<MapStringKey, int8_t> mStringInt8;    

    [tag="eii8"]
    map<MapEnumKey, int8_t> mEnumInt8;
    
    [tag="iii6"]
    map<MapIntKey, int16_t> mIntInt16;
    
    [tag="sii6"]
    map<MapStringKey, int16_t> mStringInt16;    

    [tag="eii6"]
    map<MapEnumKey, int16_t> mEnumInt16;
    
    [tag="iii3"]
    map<MapIntKey, int32_t> mIntInt32;
    
    [tag="sii3"]
    map<MapStringKey, int32_t> mStringInt32;    

    [tag="eii3"]
    map<MapEnumKey, int32_t> mEnumInt32;
    
    [tag="bii3"]
    map<MapStringKey, int32_t> mBlobInt32; 

    [tag="iii4"]
    map<MapIntKey, int64_t> mIntInt64;
    
    [tag="sii4"]
    map<MapStringKey, int64_t> mStringInt64;    

    [tag="eii4"]
    map<MapEnumKey, int64_t> mEnumInt64;
    
    [tag="bii4"]
    map<MapStringKey, int64_t> mBlobInt64;  

    [tag="if"]
    map<MapIntKey, float> mIntFloat;

    [tag="sf"]
    map<MapStringKey, float> mStringFloat;

    [tag="ef"]
    map<MapEnumKey, float> mEnumFloat;

    [tag="is"]
    map<MapIntKey, string(32)> mIntString;

    [tag="ss"]
    map<MapStringKey, string(32)> mStringString;
    
    [tag="es"]
    map<MapEnumKey, string(32)> mEnumString; 

    //[tag="ioen"]
    //map<MapIntKey, OutOfClassEnum> mIntOutOfClassEnum;

    [tag="soen"]
    map<MapStringKey, OutOfClassEnum> mStringOutOfClassEnum;

    //[tag="eoen"]
    //map<MapEnumKey, OutOfClassEnum> mEnumOutOfClassEnum;

    enum InClassEnum
    {
      IN_OF_CLASS_ENUM_VAL_0 = 0,
      IN_OF_CLASS_ENUM_VAL_1 = 1,
      IN_OF_CLASS_ENUM_VAL_2 = 2,
      IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    //[tag="iien"]
    //map<MapIntKey, InClassEnum> mIntInClassEnum;

    [tag="sien"]
    map<MapStringKey, InClassEnum> mStringInClassEnum;
    
    //[tag="eien"]
    //map<MapEnumKey, InClassEnum> mEnumInClassEnum;

    //[tag="bien"]
    //map<MapStringKey, InClassEnum> mBlobInClassEnum;
};

[trackChanges=true]
class AllMapsComplexClass
{
    [tag="icls"]
    map<MapIntKey, AllPrimitivesClass> mIntClass;

    [tag="scls"]
    map<MapStringKey, AllPrimitivesClass> mStringClass;

    [tag="ecls"]
    map<MapEnumKey, AllPrimitivesClass> mEnumClass;

    [tag="iuni"]
    map<MapIntKey, AllPrimitivesUnion> mIntUnion;

    [tag="suni"]
    map<MapStringKey, AllPrimitivesUnion> mStringUnion;

    [tag="euni"]
    map<MapEnumKey, AllPrimitivesUnion> mEnumUnion;

    [tag="ibit"]
    map<MapIntKey, ABitField> mIntBitField;

    [tag="sbit"]
    map<MapStringKey, ABitField> mStringBitField;

    [tag="ebit"]
    map<MapEnumKey, ABitField> mEnumBitField;

    [tag="iblb"]
    map<MapIntKey, blob> mIntBlob;

    [tag="sblb"]
    map<MapStringKey, blob> mStringBlob;

    [tag="eblb"]
    map<MapEnumKey, blob> mEnumBlob;

    //[tag="iobt"]
    //map<MapIntKey, ObjectType> mIntObjectType;

    [tag="sobt"]
    map<MapStringKey, ObjectType> mStringObjectType;

    //[tag="eobt"]
    //map<MapEnumKey, ObjectType> mEnumObjectType;

    //[tag="iobi"]
    //map<MapIntKey, ObjectId> mIntObjectId;

    [tag="sobi"]
    map<MapStringKey, ObjectId> mStringObjectId;

    //[tag="eobi"]
    //map<MapEnumKey, ObjectId> mEnumObjectId;

    [tag="itim"]
    map<MapIntKey, TimeValue> mIntTimeValue;

    [tag="stim"]
    map<MapStringKey, TimeValue> mStringTimeValue;

    [tag="etim"]
    map<MapEnumKey, TimeValue> mEnumTimeValue;

    [tag="ivar"]
    map<MapIntKey, variable> mIntVariable;

    [tag="sbar"]
    map<MapStringKey, variable> mStringVariable;
    
    [tag="evar"]
    map<MapEnumKey, variable> mEnumVariable;

    [tag="igen"]
    map<MapIntKey, generic> mIntGeneric;

    [tag="sgen"]
    map<MapStringKey, generic> mStringGeneric;
    
    [tag="egen"]
    map<MapEnumKey, generic> mEnumGeneric;

    [tag="mili"]
    MapIntListInt mMapIntListInt;

    [tag="mile"]
    MapIntListEnum mMapIntListEnum;

    [tag="mils"]
    MapIntListString mMapIntListString;

    [tag="milc"]
    MapIntListClass mMapIntListClass;

    [tag="imii"]
    MapIntMapIntInt mMapIntMapIntInt;

    [tag="imss"]
    MapIntMapStringString mMapIntMapStringString;

    [tag="imsc"]
    MapIntMapStringClass mMapIntMapStringClass;

    [tag="imee"]
    MapIntMapEnumString mMapIntMapEnumString;

    //[tag="imlb"]
    //IntBoolListMap mIntBoolListMap;

    //[tag="smlb"]
    //StringBoolListMap mStringBoolListMap;

    //[tag="emlb"]
    //EnumBoolListMap mEnumBoolListMap;

    //[tag="bmlb"]
    //BlobBoolListMap mBlobBoolListMap;

    //[tag="imlc"]
    //IntClassListMap mIntClassListMap;

    //[tag="smlc"]
    //StringClassListMap mStringClassListMap;

    //[tag="emlc"]
    //EnumClassListMap mEnumClassListMap;

    //[tag="bmlc"]
    //BlobClassListMap mBlobClassListMap;

    //[tag="immb"]
    //IntIntBoolMapMap mIntIntBoolMapMap;

    //[tag="smmb"]
    //StringIntBoolMapMap mStringIntBoolMapMap;

    //[tag="emmb"]
    //EnumIntBoolMapMap mEnumIntBoolMapMap;

    //[tag="bmmb"]
    //BlobIntBoolMapMap mBlobIntBoolMapMap;

    //[tag="immc"]
    //IntIntClassMapMap mIntIntClassMapMap;

    //[tag="smmc"]
    //StringIntClassMapMap mStringIntClassMapMap;
    
    //[tag="emmc"]
    //EnumIntClassMapMap mEnumIntClassMapMap;

    //[tag="bmmc"]
    //BlobIntClassMapMap mBlobIntClassMapMap;
};

class OuterClass
{   
    [tag="taga"]
    uint8_t mUInt8;
    
    class InnerClass
    {
        [tag="taga"]
        uint8_t mUInt8;

        class InnerInnerClass
        {
            [tag="taga"]
            uint8_t mUInt8;
        };

        [tag="tagb"]
        InnerInnerClass mInnerInnerClass;
    };

    [tag="tagb"]
    InnerClass mInner;
};

class PerfNestedClass
{
    [tag="tagd"]
    uint32_t mUInt32;

    [tag="tagk"]
    string(32) mString;
};

// Used for performance testing
class PerfTest1
{   
    [tag="taga"]
    bool mBool;

    [tag="tagb"]
    uint8_t mUInt8;
    
    [tag="tagc"]
    uint16_t mUInt16;
    
    [tag="tagd"]
    uint32_t mUInt32;
    
    [tag="tage"]
    uint64_t mUInt64;
    
    [tag="tagf"]
    int8_t mInt8;
    
    [tag="tagg"]
    int16_t mInt16;
    
    [tag="tagh"]
    int32_t mInt32;
    
    [tag="tagi"]
    int64_t mInt64;

    [tag="tagj"]
    float mFloat;

    [tag="tagk"]
    string(32) mString;

    [tag="tagl"]
    OutOfClassEnum mOutOfClassEnum;

    enum InClassEnum
    {
      IN_OF_CLASS_ENUM_VAL_0 = 0,
      IN_OF_CLASS_ENUM_VAL_1 = 1,
      IN_OF_CLASS_ENUM_VAL_2 = 2,
      IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="tagm"]
    InClassEnum mInClassEnum;    

    [tag="tagn"]
    AllPrimitivesUnion mUnion;

    [tag="tago"]
    ABitField mBitField;

    [tag="tagp"]
    blob mBlob;

    [tag="tagq"]
    list<int32_t> mInt32List;

    [tag="tagr"]
    list<PerfNestedClass> mClassList;
    
    [tag="tags"]
    map<MapIntKey, int32_t> mInt32Int32Map;

    [tag="tagt"]
    map<MapIntKey, PerfNestedClass> mInt32ClassMap;

    [tag="tagu"]
    PerfNestedClass mNestedClass;
};


[trackChanges=true]
class AllPrimitivesClassExtra
{   
    [tag="tagj"] bool mBool;
    [tag="bagj"] bool mBool_B;
    [tag="taga"] uint8_t mUInt8;
    [tag="baga"] uint8_t mUInt8_B;
    [tag="tagb"] uint16_t mUInt16;
    [tag="bagb"] uint16_t mUInt16_B;
    [tag="tagc"] uint32_t mUInt32;
    [tag="bagc"] uint32_t mUInt32_B;
    [tag="tagd"] uint64_t mUInt64;
    [tag="bagd"] uint64_t mUInt64_B;
    [tag="tage"] int8_t mInt8;
    [tag="bage"] int8_t mInt8_B;
    [tag="tagf"] int16_t mInt16;
    [tag="bagf"] int16_t mInt16_B;
    [tag="tagg"] int32_t mInt32;
    [tag="bagg"] int32_t mInt32_B;
    [tag="tagh"] int64_t mInt64;
    [tag="bagh"] int64_t mInt64_B;
    [tag="flt"] float mFloat;
    [tag="blt"] float mFloat_B;
    [tag="tagi"] string(32) mString;
    [tag="bagi"] string(32) mString_B;
    [tag="oenu"] OutOfClassEnum mOutOfClassEnum;
    [tag="bene"] OutOfClassEnum mOutOfClassEnum_B;
};

[trackChanges=true]
class AllPrimitivesClassExtraTypeChange
{   
    [tag="tagj"] bool mBool;
    [tag="baga"] bool mBool_B;
    [tag="taga"] uint8_t mUInt8;
    [tag="bagb"] uint8_t mUInt8_B;
    [tag="tagb"] uint16_t mUInt16;
    [tag="bagc"] uint16_t mUInt16_B;
    [tag="tagc"] uint32_t mUInt32;
    [tag="bagd"] uint32_t mUInt32_B;
    [tag="tagd"] uint64_t mUInt64;
    [tag="bage"] uint64_t mUInt64_B;
    [tag="tage"] int8_t mInt8;
    [tag="bagf"] int8_t mInt8_B;
    [tag="tagf"] int16_t mInt16;
    [tag="bagg"] int16_t mInt16_B;
    [tag="tagg"] int32_t mInt32;
    [tag="bagh"] int32_t mInt32_B;
    [tag="tagh"] int64_t mInt64;
    [tag="bagi"] int64_t mInt64_B;
    [tag="flt"] float mFloat;
    [tag="bene"] float mFloat_B;
    [tag="tagi"] string(32) mString;
    [tag="bagj"] string(32) mString_B;
    [tag="oenu"] OutOfClassEnum mOutOfClassEnum;
    [tag="blt"] OutOfClassEnum mOutOfClassEnum_B;
};

[trackChanges=true]
class AllComplexClassExtra
{
    [tag="clas"] AllPrimitivesClass mClass;
    [tag="blas"] AllPrimitivesClass mClass_B;
    [tag="unio"] AllPrimitivesUnion mUnion;
    [tag="bnio"] AllPrimitivesUnion mUnion_B;
    [tag="bitf"] ABitField mBitField;
    [tag="bbtf"] ABitField mBitField_B;
    [tag="blob"] blob mBlob;
    [tag="bbob"] blob mBlob_B;
    [tag="objt"] ObjectType mObjectType;
    [tag="bbjt"] ObjectType mObjectType_B;
    [tag="obji"] ObjectId mObjectId;
    [tag="bbji"] ObjectId mObjectId_B;
    [tag="time"] TimeValue mTime;
    [tag="bime"] TimeValue mTime_B;
    [tag="var"] variable mVariable;
    [tag="bar"] variable mVariable_B;
    [tag="gen"] generic mGeneric;
    [tag="ben"] generic mGeneric_B;
};

[trackChanges=true]
class AllComplexClassExtraTypeChange
{
    [tag="clas"] AllPrimitivesClass mClass;
    [tag="bbtf"] AllPrimitivesClass mClass_B;
    [tag="unio"] AllPrimitivesUnion mUnion;
    [tag="bbob"] AllPrimitivesUnion mUnion_B;
    [tag="bitf"] ABitField mBitField;
    [tag="bbjt"] ABitField mBitField_B;
    [tag="blob"] blob mBlob;
    [tag="bbji"] blob mBlob_B;
    [tag="objt"] ObjectType mObjectType;
    [tag="bime"] ObjectType mObjectType_B;
    [tag="obji"] ObjectId mObjectId;
    [tag="bar"] ObjectId mObjectId_B;
    [tag="time"] TimeValue mTime;
    [tag="ben"] TimeValue mTime_B;
    [tag="var"] variable mVariable;
    [tag="blas"] variable mVariable_B;
    [tag="gen"] generic mGeneric;
    [tag="bnio"] generic mGeneric_B;
};

} // Test

} // Protobuf

} // Blaze
