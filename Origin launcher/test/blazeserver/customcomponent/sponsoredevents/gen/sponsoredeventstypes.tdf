// Defines the TDF classes used in the sponsoredevents component.
// TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see https://developer.ea.com/display/blaze/JSON+Syntax+with++TDF

[headername="framework/tdf/entity.h"]
#include "framework/gen/entity.tdf"

namespace Blaze
{
namespace SponsoredEvents
{
	typedef uint32_t EventID;
	typedef EntityId UserId;

	class CheckUserRegistrationRequest
	{
		[tag="uid", description="User ID"]
		UserId mUserID;
		
		[tag="eid", description="Event ID"]
		EventID mEventID;
	};
	
	class CheckUserRegistrationResponse
	{
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
		
		[tag="brg", description="Is user registered"]
		int8_t mIsRegistered;							//can return registered/unregistered/banned
		
		[tag="evd", description="Event Data"]
		string(64) mEventData;
	};
	
	class RegisterUserRequest
	{
		[tag="uid", description="User ID"]
		UserId mUserID;
		
		[tag="eid", description="Event ID"]
		EventID mEventID;
		
		[tag="evd", description="Event Data"]
		string(64) mEventData;

		[tag="titl", description="game title"]
		string(32) mGameTitle;

		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;

		[tag="ctry", description="the country of the player"]
		string(16) mCountry;

		[tag="sndi", description="receive/Send information from EA/to EA"]
		int8_t		mSendInformation;
	};
	
	class RegisterUserResponse
	{
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
	};
		
	class URLResponse
	{
		[tag="url", description="The URL"]
		string(256) mURL;
	};
	
	class BanUserRequest
	{
		[tag="uid", description="User ID."]
		UserId mUserID;
		
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
		
		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;
		
		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;
		
		[tag="ban", description="If the user has been banned."] 
		int8_t mIsBanned;
		
		[tag="whob", description="Who bans the user."] 
		string(32) mWhoBan;

		[tag="whyb", description="Why bans the user."] 
		string(256) mWhyBan;
	};
	
	class WipeUserStatsRequest
	{
		[tag="evid", description="Id of event"]
		int32_t mEventID;

		[tag="usid", description="Id of user"]
		BlazeId mUserID;
	};
	
	class WipeUserStatsResponse
	{
		[tag="sces", description="if the action was successfull or not"]
		bool mSuccess;
	};

	class UpdateUserFlagsRequest
	{
		[tag="uid", description="User ID."]
		UserId mUserID;
		
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
		
		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;
		
		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;
		
		[tag="flgs", description="Flags."] 
		uint32_t mFlags;
	};
	
	class RemoveUserRequest
	{
		[tag="uid", description="User ID."]
		UserId mUserID;

		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;

		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;

		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;
	};

	class BanUserResponse
	{
		[tag="ban", description="Result of ban/unban."]
		int8_t mIsBanned;
	};
	
	class UpdateUserFlagsResponse
	{
		[tag="resl", description="Result of update flags."]
		int8_t mIsUpdated;
	};	
	
	// class types for return num of registered users
	class NumUsersRequest
	{
		[tag="evid", default=-1, description="ID of sponsored event."]
		int32_t mEventID;
	};

	class NumUsersResponse
	{
		[tag="num", description="Number of registered users."]
		int32_t mNumUsers;
	};	
	
	class RemoveUserResponse
	{
		[tag="dek", description="Result of deleting."]
		int8_t mIsDeleted;
	};
	
	class UpdateEventDataRequest
	{
		[tag="uid", description="User ID."]
		UserId mUserID;
		
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
		
		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;
		
		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;
		
		[tag="note", description="event data."] 
		string(1024) mEventData;
	};

	class UpdateEventDataResponse
	{
		[tag="resl", description="Result of update."]
		int8_t mIsUpdated;
	};
			
	class DbCredentialsResponse
	{
		[tag="host", description="db host"] 
		string(128) mDbHost;
		
		[tag="port", description="db port"] 
		uint32_t mDbPort;
		
		[tag="schm", description="db schema"] 
		string(64) mDbSchema;
		
		[tag="name", description="db instance name"]
		string(64) mDbInstanceName;
	};

	// class types for return users for a given event
	class ReturnUsersRequest
	{
		[tag="uid", description="User ID."]
		UserId mUserID;

		[tag="evid", default=-1, description="ID of sponsored event."]
		int32_t mEventID;

		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;

		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;

		[tag="offs", description="Offset of the return records."]
		int32_t mOffset;

		[tag="nrow", description="Num of rows returned one time."]
		int32_t mRowCount;
	};

	// class types for osdksponsoredevents addrow
	class SponsoredEventsUser
	{
		[tag="uid", description="User ID."]
		UserId mUserID;
		
		[tag="evid", description="ID of sponsored event."]
		int32_t mEventID;
		
		[tag="titl", description="Game Title."] 
		string(32) mGameTitle;
		
		[tag="pfrm", description="Game Platform."] 
		string(10) mGamePlatform;
		
		[tag="flgs", description="Flags."] 
		uint32_t mFlags;
		
		[tag="ban", description="If the user has been banned."] 
		int8_t mIsBanned;
		
		[tag="co", description="Country of residence."  ] 
		string(16) mCountry;
		
		[tag="dob", description="Date of Birth." ] 
		string(32) mDOB;
		
		[tag="whob", description="Who bans the user."] 
		string(32) mWhoBan;

		[tag="whyb", description="Why bans the user."] 
		string(256) mWhyBan;
		
		[tag="note", description="Field for user-defined data."] 
		string(1024) mNote;
		
		[tag="sinf", description="If the user wishes to be notified of event info."] 
		int8_t mShareInfo;
		
		[tag="cdat", description="Creation date of the record."] 
		string(32) mCreateDate;
	};
	
	typedef list<SponsoredEventsUser> RegisteredUserList;
	class ReturnUsersResponse
	{
		[tag="num", description="Num of users returned."]
		int32_t mNumUsers;	

		[tag="rows", description="All users of an event."]
		RegisteredUserList mRegisteredUsers;	
	};

	class SponsoredEventsConfig
	{
		[tag="dbna", default="main", description = "DB to use.", reconfigurable="no"]
		string(64) mDbName;

		[tag="evtu", description = "SponsoredEvents events URL.", reconfigurable="yes"]
		string(256) mEventsURL;

		[tag="sbnm", default="sponsoredev", description = "Stats Base NameTest of large define", reconfigurable="yes"]
		string(128) mStatsBaseName;
	};
	class GetConfigResponse
	{
		[tag="cfg", description="SponsoredEvents server config TDF"]
		SponsoredEventsConfig mConfig;
	};
	
	typedef map<string(256), string(256)> LocStringMap;
	typedef list<LocStringMap> LocStringMapList;
	class LocalizationData
	{
		[tag="lstr", description="The array of localized strings."]
        LocStringMapList    mStrings;
	};
	
} // SponsoredEvents
} // Blaze



