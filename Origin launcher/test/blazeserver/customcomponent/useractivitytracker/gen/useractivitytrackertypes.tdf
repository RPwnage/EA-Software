// Defines the TDF classes used in the fifagroups component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp


[headername="stats/tdf/stats.h"]
#include "stats/gen/stats.tdf"


namespace Blaze
{
namespace UserActivityTracker
{

class UserActivityTrackerError
{
    [tag="msg"] 
    string(256) mMessage;
};

enum ActivityPeriodType
{
    TYPE_CURRENT = 0,
    TYPE_PREVIOUS
};

class UserActivity
{
    [tag="apty", description="the Activity Period type (current or previous)"] 
	ActivityPeriodType mActivityPeriodType;
	
    [tag="tdur", description="time duration user has played (secs)"] 
    int64_t mTimeDuration;

    [tag="nmch", description="number of matches user has played)"] 
    uint64_t mNumMatches;
};
typedef list<UserActivity> UserActivityList;


class SubmitUserActivityRequest
{
    [tag="tmsp", description="time stamp used to calculate current/previous week epoch time"] 
    int64_t mTimeStamp;

    [tag="attr", description="list of user activities to track"] 
    UserActivityList mUserActivityList;
};

class SubmitUserActivityResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;
};

class InitializeUserActivityTrackerRequest
{
    [tag="opti", description="optin to UserActivityTracker this user session.", default=true] 
    bool mOptIn;
};

class InitializeUserActivityTrackerResponse
{
	[tag="rert", description="result of the operation"] 
    bool mSuccess;

    [tag="rped", description="current rollover type being used"] 
    Stats::StatPeriodType mRollOverPeriod;

    [tag="pccl", description="parental control link url"] 
    string(128) mParentalControlsLink;

    [tag="pycl", description="player control link"]
    string(128) mPlayerControlsLink;

    [tag="prst", description="privacy settings link"]
    string(128) mPrivacySettingsLink;

	[tag="kswt", description="is kill switch enabled"] 
    bool mKillSwitchEnabled;
};

class UserActivityRequest
{
};

class UserActivityResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;
};

class UserActivityTrackerNotification
{
    [tag="ropd", description="period type for tracking login time and games played"] 
	Blaze::Stats::StatPeriodType mRollOverPeriod;
};

class IncrementMatchPlayedResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;
};

} // UserActivityTracker
} // Blaze



