// Defines the TDF classes used in the vprogrowthunlocks component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp
[headername="vprogrowthunlocks/tdf/vprogrowthunlockstypes.h"]
#include "vprogrowthunlocks/gen/vprogrowthunlockstypes.tdf"

namespace Blaze
{
	namespace VProGrowthUnlocks
	{
		[
			description = "The configuration object for the vprogrowthunlocks component",
			details = "This class represents the schema for all the configuration parameters for the vprogrowthunlocks component.."
		]
		class ObjectiveServerConfig
		{
			[tag="obid", description="objective id"]
			uint32_t mObjectiveId;

			[tag="obti", description="objective title"]
			string(32) mObjectiveTitle;

			[tag="obds", description="objective description"]
			string(32) mObjectiveDesc;

			[tag="asid", description="objective asset id"]
			uint32_t mAssetId;

			[tag="ogrp", description="group of objective in the category"]
			uint32_t mGroup;

			[tag="orow", description="row of the objective placement"]
			uint32_t mRow;

			[tag="ocol", description="column of the objective placement"]
			uint32_t mColumn;

			[tag="stna", description="stat name needs to verify"]
			string(32) mStatName;

			[tag="srvl", description="required stat value"]
			uint32_t mStatReqVal;

			[tag="rwty", description="objective reward type"]
			uint32_t mRewardType;
	
			[tag="rwvl", description="objective reward value"]
			uint32_t mRewardVal;
		};

		class ObjectiveCategoryServerConfig
		{
			[tag="ocid", description="objective category id"]
			uint32_t mObjectiveCategoryId;

			[tag="octi", description="objective category title"]
			string(32) mObjectiveCategoryTitle;

			[tag="ocds", description="objective category desc"]
			string(32) mObjectiveCategoryDesc;

			[tag="stct", description="stats category"]
			string(32) mStatsCategory;

			[tag="obli", description="list of objective config"]
			list<ObjectiveServerConfig> mObjectiveServerConfigs;
		};

		class VProGrowthUnlocksConfig
		{ 
			[tag="dbna", default="main", description = "DB to use.", reconfigurable="no"]
			string(64) mDbName;

			[tag="mxlo", description="Max number of loadout", reconfigurable="yes", default=5]
			uint32_t mMaxLoadOutCount;	

			[tag="dgsp", description="Default Granted SP", reconfigurable="yes"]
			uint32_t mDefaultGrantedSP;	

			[tag="prim", description="Primary Modifier", reconfigurable="yes"]
			uint32_t mPrimaryModifier;	

			[tag="secm", description="Secondary Modifier", reconfigurable="yes"]
			uint32_t mSecondaryModifier;	

			[tag="term", description="Tertiary Modifer", reconfigurable="yes"]
			uint32_t mTertiaryModifier;	

			[tag="sprd", description="List of skill point rewards"]
			list<SkillPointReward> mSkillPointRewards;

			[tag="mrxp", description="List of match rating xp rewards"]
			list<MatchRatingXPReward> mMatchRatingXPRewards;

			[tag="mexp", description="List of match event xp rewards"]
			list<MatchEventReward> mMatchEventXPRewards;

			[tag="occl", description="List of objective category configs"]
			list<ObjectiveCategoryServerConfig> mObjectiveCategoryServerConfigs;

			[tag="stgp", description="objective stats group"]
			string(32) mObjectiveStatsGroup;

			[tag="stpe", description="Objective stats period"]
			string(32) mObjectiveStatsPeriod;

			[tag="mcsg", description="objective stats group"]
			string(32) mMatchCountStatsGroup;

			[tag="mcsp", description="Objective stats period"]
			string(32) mMatchCountStatsPeriod;
		};
	
		class GetConfigResponse
		{
			[tag="cfg", description="VProGrowthUnlocks server config TDF"]
			VProGrowthUnlocksConfig mConfig;
		};

	} // VProGrowthUnlocks
} // Blaze



