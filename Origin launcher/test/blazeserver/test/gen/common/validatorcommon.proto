/*************************************************************************************************/
/*!
    \file validatorcommon.proto

    \attention
    (c) Electronic Arts. All Rights Reserved.
*/
/*************************************************************************************************/

syntax = "proto3";
package TestingUtils;

////////////////////////////////////
////////////////// Primitives

message Int32Validator
{
    repeated int32 value = 1; //if specified, validate the value is one of the values in the list
    repeated int32 notvalue = 2; //if specified, validate the value is NOT one of the values in the list
    repeated int32 min = 3;//if specified, validate the value is >= the (first) value in the list. Note: extra items in list are ignored
    repeated int32 max = 4;//if specified, validate the value is <= the (first) value in the list. Note: extra items in list are ignored
}

message Int64Validator
{
    repeated int64 value = 1; //if specified, validate the value is one of the values in the list
    repeated int64 notvalue = 2; //if specified, validate the value is NOT one of the values in the list
    repeated int64 min = 3;//if specified, validate the value is >= the (first) value in the list. Note: extra items in list are ignored
    repeated int64 max = 4;//if specified, validate the value is <= the (first) value in the list. Note: extra items in list are ignored
}

message Uint32Validator
{
    repeated uint32 value = 1; //if specified, validate the value is one of the values in the list
    repeated uint32 notvalue = 2; //if specified, validate the value is NOT one of the values in the list
    repeated uint32 min = 3;//if specified, validate the value is >= the (first) value in the list. Note: extra items in list are ignored
    repeated uint32 max = 4;//if specified, validate the value is <= the (first) value in the list. Note: extra items in list are ignored
}

message Uint64Validator
{
    repeated uint64 value = 1; //if specified, validate the value is one of the values in the list
    repeated uint64 notvalue = 2; //if specified, validate the value is NOT one of the values in the list
    repeated uint64 min = 3;//if specified, validate the value is >= the (first) value in the list. Note: extra items in list are ignored
    repeated uint64 max = 4;//if specified, validate the value is <= the (first) value in the list. Note: extra items in list are ignored
}

////////////////////////////////////
////////////////// Maps

message StringInt32MapValidator
{
    map<string, Int32Validator> hasvalues = 1; //if specified, validate the map has keys, in the list, and with the appropriate the value restrictions
    repeated string notvalues = 2; //if specified, validate the map does NOT have keys, in the list.
    Uint64Validator count = 3;//validates the size of the map as specified
}
message StringInt64MapValidator
{
    map<string, Int64Validator> hasvalues = 1; //if specified, validate the map has keys, in the list, and with the appropriate the value restrictions
    repeated string notvalues = 2; //if specified, validate the map does NOT have keys, in the list.
    Uint64Validator count = 3;//validates the size of the map as specified
}
message StringUint32MapValidator
{
    map<string, Uint32Validator> hasvalues = 1; //if specified, validate the map has keys, in the list, and with the appropriate the value restrictions
    repeated string notvalues = 2; //if specified, validate the map does NOT have keys, in the list.
    Uint64Validator count = 3;//validates the size of the map as specified
}
message StringUint64MapValidator
{
    map<string, Uint64Validator> hasvalues = 1; //if specified, validate the map has keys, in the list, and with the appropriate the value restrictions
    repeated string notvalues = 2; //if specified, validate the map does NOT have keys, in the list.
    Uint64Validator count = 3;//validates the size of the map as specified
}
