[headername="stats/tdf/stats_commontypes_server.h"]
#include "stats_commontypes_server.tdf"

#include "stats/statstypes.h"

namespace Blaze
{
namespace Stats
{

[baseTdf=Blaze::Stats::StatData]
class Stat;

typedef list<Stat> StatList;

class StatCategoryData
{
    [tag="name", default="", description="The name of category."]
    string(STATS_CATEGORY_NAME_LENGTH) mName;
    
    [tag="desc", default="", description="The description of category."]
    string(STATS_LONG_DESC_LENGTH) mDesc;
    
    [tag="type", default=CATEGORY_TYPE_REGULAR, description="Category type."]
    CategoryType mCategoryType;
    
    [tag="etpe", default="", description="Entity type of category."]
    string(STATS_TYPE_LENGTH) mEntityType;

    [tag="petp", default=0, description="Period types of category."]
    int32_t mPeriodTypes;

    [tag="scpe", description="The scope list data of category."]
    ScopeList mScope;

    [tag="stat", description="Stats list data of category."]
    StatList mStats;
};

[baseTdf=Blaze::Stats::StatDescData]
class StatDesc;

typedef list<StatDesc> StatDescList;  

class StatGroupData
{
    [tag="name", default="", description="The name of stat group."]
    string(STATS_GROUP_NAME_LENGTH) mName;

    [tag="desc", default="", description="Desc data."]
    string(STATS_LONG_DESC_LENGTH) mDesc;

    [tag="cate", default="", description="The name of category for stat group."]
    string(STATS_CATEGORY_NAME_LENGTH) mCategory;

    [tag="scpe", description="Paired scope name/value."]
    ScopeMap mScope;

    [tag="stas", description="List of stats descriptions for group."]
    StatDescList mStats;

    [tag="meta", default="", description="Meta data for stat group."]
    string(STATS_METADATA_LENGTH) mMetadata;
};

[baseTdf=Blaze::Stats::StatDescData]
class GroupStat;

typedef list<GroupStat> LbStatList;

class LeaderboardGroupData
{
    [tag="grop", default="", description="Group name for leaderboard group."]
    string(STATS_GROUP_NAME_LENGTH) mGroup;     

    [tag="cate", default="", description="Category name for leaderboard group."]
    string(STATS_CATEGORY_NAME_LENGTH) mCategory;

    [tag="stas", description="Cached stats desc data."]
    LbStatList mStats;
};

[baseTdf=Blaze::Stats::StatLeaderboardBaseData]
class StatLeaderboardData;


class RankingStatData
{
    [tag="stna", description="The stat name of the ranking stat."]
    string(STATS_STAT_NAME_LENGTH) mStatName;

    [tag="asce", default=false, description="the flag of ascending."]
    bool mAscending;

    [tag="iint", default=false, description="(Internal Usage- Overridden on load)"]
    bool mIsInt;
};
typedef list<RankingStatData> RankingStatList;

class StatLeaderboardTreeNode
{
    [tag="name", default="", description="Name of leaderboard hierarchy."]
    string(STATS_HIERARCHY_NAME_LENGTH) mName;

    [tag="desc", default="", description="desc data."]
    string(STATS_LONG_DESC_LENGTH) mDesc;

    [tag="grop", default="", description="The name of group."]
    string(STATS_GROUP_NAME_LENGTH) mGroup ;

    [tag="scpe", description="paired scope name/value."]
    ScopeMap mScope;

    [tag="scps", description="paired scope name/values"]
    ScopesMap mScopes;

    [tag="next", description="The next point data of leaderboard hierarchy."]
    list<StatLeaderboardTreeNode> mNext;
    
    [tag="data", description="The additional data of leaderboard determined during stats configuration."]
    StatLeaderboardData mData;

    [tag="ptye", default=0, description="Period type for leaderboard hierarchy."]
    int32_t mPeriodType;

    [tag="stna", default="", description="The stat name of stat."]
    string(STATS_STAT_NAME_LENGTH) mStatName;

    [tag="mdat", default="", description="Meta data of leaderboard hierarchy."]
    string(STATS_METADATA_LENGTH) mMetadata;

    [tag="size", default=100, description="The size of leaderboard hierarchy."]
    int32_t mSize;

    [tag="extr", default="", description="The extra data for leaderboard hierarchy."]
    string(STATS_HIERARCHY_EXTRA_DATA_LENGTH) mExtra;

    [tag="cofv", default="", description="The StatValue of Cutoff."]
    string(STATS_STATVALUE_LENGTH) mCutoffStatValue;

    [tag="sotd", default="", description="ShortDesc data."]
    string(STATS_SHORT_DESC_LENGTH) mShortDesc;
 
    [tag="asce", default=false, description="the flag of ascending."]
    bool mAscending;
    
    [tag="tied", default=false, description="The flag of Tied Rank."]
    bool mTiedRank;

    [tag="inme", default=true, description="Flag to store in memory these leaderboards or not."]
    bool mInMemory;

    [tag="srsd", description="Optional additional stats {name, ascending} to rank by. Order determines order of ranking."]
    RankingStatList mMultiStatRanking;
};
typedef list<StatLeaderboardTreeNode> LeaderboardHierarchyList;

}
}
