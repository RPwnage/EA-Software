/*! ************************************************************************************************/
/*!
    \file inputsanitizers_server.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

namespace Blaze
{
namespace GameManager
{

// May want to prefix these:  FAIL_OP_
    // What to do if the sanitizer fails an input value.
    enum SanitizerFailureOperation
    {
        FAIL_INPUT = 0,
        CLAMP_VALUE,    // For Min/Max vlaues
        USE_DEFAULT,    // For Min/Max vlaues
        CHOOSE_RANDOM,  // For full Allowlist failure
        REMOVE_ENTRY,   // For Map Keys

        NO_FAILURE      // Indicates that the operation didn't fail, so the input can be used directly. 
    };

    // The following classes would be better if they could be templated, but that's not really an option. 
    class IntSanitizer
    {
        [tag="inpt", reconfigurable="yes", default = 0]            int64_t input;
        [tag="dflt", reconfigurable="yes", default = 0]            int64_t default;
        [tag="minv", reconfigurable="yes", default = 0]            int64_t min;
        [tag="maxv", reconfigurable="yes", default = 0]            int64_t max;
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation failureOp;
    };
    class UIntSanitizer
    {
        [tag="inpt", reconfigurable="yes", default = 0]            uint64_t input;
        [tag="dflt", reconfigurable="yes", default = 0]            uint64_t default;
        [tag="minv", reconfigurable="yes", default = 0]            uint64_t min;
        [tag="maxv", reconfigurable="yes", default = 0]            uint64_t max;
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation failureOp;
    };
    class FloatSanitizer
    {
        [tag="inpt", reconfigurable="yes", default = 0.0f]    float input;
        [tag="dflt", reconfigurable="yes", default = 0.0f]    float default;
        [tag="minv", reconfigurable="yes", default = 0.0f]    float min;
        [tag="maxv", reconfigurable="yes", default = 0.0f]    float max;
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation failureOp;
    };
    class StringSanitizer
    {
        [tag="inpt", reconfigurable="yes"]    string(-1) input;
        [tag="dflt", reconfigurable="yes"]    string(-1) default;
        [tag="maxl", reconfigurable="yes", default = 0]    uint64_t maxLength;
        [tag="allo", reconfigurable="yes"]    list<string(-1)>  allowList;
        [tag="blck", reconfigurable="yes"]    list<string(-1)>  blockList;
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation failureOp;
    };

// Lists:
    typedef list<int64_t> ListInt;
    class ListIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] ListInt input;
        [tag="valu", reconfigurable="yes"] IntSanitizer value;
    };
    typedef list<uint64_t> ListUInt;
    class ListUIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] ListUInt input;
        [tag="valu", reconfigurable="yes"] UIntSanitizer value;
    };
    typedef list<float> ListFloat;
    class ListFloatSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] ListFloat input;
        [tag="valu", reconfigurable="yes"] FloatSanitizer value;
    };
    typedef list<string(-1)> ListString;
    class ListStringSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] ListString input;
        [tag="valu", reconfigurable="yes"] StringSanitizer value;
    };

// Maps:
    typedef map<string(-1), int64_t> MapStringInt;
    class MapStringIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapStringInt input;
        [tag="keey", reconfigurable="yes"] StringSanitizer key;
        [tag="valu", reconfigurable="yes"] IntSanitizer value;
    };
    typedef map<string(-1), uint64_t> MapStringUInt;
    class MapStringUIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapStringUInt input;
        [tag="keey", reconfigurable="yes"] StringSanitizer key;
        [tag="valu", reconfigurable="yes"] UIntSanitizer value;
    };
    typedef map<string(-1), float> MapStringFloat;
    class MapStringFloatSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapStringFloat input;
        [tag="keey", reconfigurable="yes"] StringSanitizer key;
        [tag="valu", reconfigurable="yes"] FloatSanitizer value;
    };
    typedef map<string(-1), string(-1)> MapStringString;
    class MapStringStringSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapStringString input;
        [tag="keey", reconfigurable="yes"] StringSanitizer key;
        [tag="valu", reconfigurable="yes"] StringSanitizer value;
    };
    typedef map<int64_t, string(-1)> MapIntString;
    class MapIntStringSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapIntString input;
        [tag="keey", reconfigurable="yes"] IntSanitizer key;
        [tag="valu", reconfigurable="yes"] StringSanitizer value;
    };
    typedef map<int64_t, int64_t> MapIntInt;
    class MapIntIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapIntInt input;
        [tag="keey", reconfigurable="yes"] IntSanitizer key;
        [tag="valu", reconfigurable="yes"] IntSanitizer value;
    };
    typedef map<int64_t, uint64_t> MapIntUInt;
    class MapIntUIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapIntUInt input;
        [tag="keey", reconfigurable="yes"] IntSanitizer key;
        [tag="valu", reconfigurable="yes"] UIntSanitizer value;
    };
    typedef map<int64_t, float> MapIntFloat;
    class MapIntFloatSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapIntFloat input;
        [tag="keey", reconfigurable="yes"] IntSanitizer key;
        [tag="valu", reconfigurable="yes"] FloatSanitizer value;
    };
    typedef map<uint64_t, string(-1)> MapUIntString;
    class MapUIntStringSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapUIntString input;
        [tag="keey", reconfigurable="yes"] UIntSanitizer key;
        [tag="valu", reconfigurable="yes"] StringSanitizer value;
    };
    typedef map<uint64_t, int64_t> MapUIntInt;
    class MapUIntIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapUIntInt input;
        [tag="keey", reconfigurable="yes"] UIntSanitizer key;
        [tag="valu", reconfigurable="yes"] IntSanitizer value;
    };
    typedef map<uint64_t, uint64_t> MapUIntUInt;
    class MapUIntUIntSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapUIntUInt input;
        [tag="keey", reconfigurable="yes"] UIntSanitizer key;
        [tag="valu", reconfigurable="yes"] UIntSanitizer value;
    };
    typedef map<uint64_t, float> MapUIntFloat;
    class MapUIntFloatSanitizer
    {
        [tag="fail", reconfigurable="yes", default = FAIL_INPUT] SanitizerFailureOperation emptyFailureOp;
        [tag="inpt", reconfigurable="yes"] MapUIntFloat input;
        [tag="keey", reconfigurable="yes"] UIntSanitizer key;
        [tag="valu", reconfigurable="yes"] FloatSanitizer value;
    };
    // No Map<float, XXX>  because that shouldn't be supported.

    

    typedef MapStringUInt MergedPlayerPingsiteLatencyMap;
    class PingSiteSanitizer
    {
        [tag="hpst", reconfigurable="yes"] ListString hostedPingSites;      // Pingsites from Hardcoded Defaults in a config 
        [tag="rpst", reconfigurable="yes"] ListString requestedPingSites;   // Pingsites from the Request / Scenario
        [tag="mxlt", reconfigurable="yes", default = 0] uint32_t maximumLatency;

        [tag="ltms", reconfigurable="yes"] MergedPlayerPingsiteLatencyMap mergedPingsiteLatencyMap;
    };

} // namespace GameManager
} // namespace Blaze
