[headername="framework/tdf/attributes.h"]
#include "framework/gen/attributes.tdf"

[headername="framework/tdf/entity.h"]
#include "framework/gen/entity.tdf"

[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

// Constants
// ----
[description="Max game report view description length."]
const uint32_t DESCRIPTION_LENGTH = 128;

[description="Max game report view short description length."]
const uint32_t SHORT_DESC_LENGTH = 32;

[description="Max game report view meta data length."]
const uint32_t METADATA_LENGTH = 128;

[description="Max filter expression length."]
const uint32_t MAX_FILTER_LENGTH = 256;

// Typedefs
// ----
[description="Game report query name."]
typedef string(MAX_NAME_LENGTH) QueryName;  

[description="Game report view name."]
typedef string(MAX_NAME_LENGTH) ViewName;  

[description="Game History table name."]
typedef string(MAX_NAME_LENGTH) TableName;

typedef list<string(32)> QueryVarValuesList;
    
[
    description = "Game history report object.",
    details = "This data holds a game history"
]
class GameHistoryReport
{
    [tag="grid", description="The unique value assigned at the beginning of the game."] 
    GameManager::GameReportingId mGameReportingId;
    
    [tag="onli", description="Indication whether the game report is online or not. 1 is online and 0 is offline"] 
    bool mOnline;
    
    [tag="flag", description="The flags of the game report."] 
    uint64_t mFlags;
    
    [tag="fgre", description="The flag reason."]
    string(128) mFlagReason;

    [tag="ghid", description="The unique value assigned for game history look-up."] 
    GameHistoryId mGameHistoryId;

    [tag="gtyp", description="The type of the game."] 
    GameManager::GameReportName mGameReportName;

    [tag="time", description="The timestamp of the game."] 
    int64_t mTimestamp;
    
    class TableRow
    {
        [tag="trow", description="A collection of attributes."] Collections::AttributeMap mAttributeMap;
    };

    typedef list<TableRow> TableRowList;
    class TableRows
    {
        [tag="rlis", description="A list of table rows under the same table."] TableRowList mTableRowList;
    };
        
    typedef map<TableName, TableRows, ignorecase> TableRowMap;

    [tag = "trm", description = "A collection of table row lists."] TableRowMap mTableRowMap;
};

[
    description = "Game report filter object.",
    details = "This data holds the information restricting the query result."
]
class GameReportFilter
{
    [tag="tabn", description="Game history table name."]
    TableName mTable;

    [tag="anam", description="Attribute name."]
    ReportAttributeName mAttributeName;

    [tag="aidx", description="Attribute Index."]
    uint16_t mIndex;

    [tag="hvar", description="Indication whether the filter rule includes a variable."]
    bool mHasVariable;

    [tag="etyp", description="Blaze object type."]
    ObjectType mEntityType;

    [tag="expr", description="Expression of filter rule."]
    string(MAX_FILTER_LENGTH) mExpression;
};

typedef list<GameReportFilter> GameReportFilterList;

class GameReportColumnKey
{
    [tag="tabn", description="Game history table name."]
    TableName mTable;
    
    [tag="anam", description="Attribute name."]
    ReportAttributeName mAttributeName;

    [tag="aidx", description="Attribute index."]
    uint16_t mIndex;
};

class GameReportQuery
{
    [tag="qnam", description="Game report query name."]
    QueryName mName;

    [tag="gtyp", description="Game type as specified via the game reporting configuration."]
    GameManager::GameReportName mTypeName;
   
    [tag="mgrr", description="Max number of game reports to return."]
    uint32_t mMaxGameReport;
    
    [tag="filt", description="List of filters."]
    GameReportFilterList mFilterList;
    
    [tag="cols", description="List of game report columns selected to fetch."]
    list<GameReportColumnKey> mColumnKeyList;   
};

class GetGameReportQuery
{
    [tag="qnam", description="Game report query name."]
    QueryName mName;
};

class GameReportQueriesList
{
    [tag="quer", description="List of game report query."]
    list<GameReportQuery> mQueries;
};

class GetGameReports
{
    [tag="qnam", description="Query name."]
    QueryName mQueryName;

    [tag="qvar", description="List of values of query variables."]
    QueryVarValuesList mQueryVarValues;

    [tag="mgrr", description="Max number of game reports to return."]
    uint32_t mMaxGameReport;
    
    [tag="quer", description="Game report query."]
    GameReportQuery mGameReportQuery;
};

class GameReportsList
{
    [tag="gmrs", description="List of game reports."]
    list<GameHistoryReport> mGameReportList;
};

class GetGameReportViewInfo
{
    [tag="vnam", description="Game report view name."]
    ViewName mName;
};

class GameReportViewInfo
{
    [tag="vnam", description="Game report view name."]
    ViewName mName;

    [tag="gtyp", description="Game type as specified via the game reporting configuration."]
    GameManager::GameReportName mTypeName;

    [tag="desc", description="Game report view description."]
    string(DESCRIPTION_LENGTH) mDesc;

    [tag="meta", description="Game report view metadata."]
    string(METADATA_LENGTH) mMetadata;
};

class GameReportViewInfosList
{
    [tag="info", description="List of game report view info."]
    list<GameReportViewInfo> mViewInfo;
};

class GameReportColumn
{
    [tag="ckey", description="Column key to identify the column."]
    GameReportColumnKey mKey;

    [tag="etyp", description="Entity type."]
    ObjectType mEntityType;
    
    [tag="sdsc", description="Short description of column title."]
    string(SHORT_DESC_LENGTH) mShortDesc;
    
    [tag="ldsc", description="Long description of column title."]
    string(DESCRIPTION_LENGTH) mDesc;
      
    [tag="frmt", description="Formatting string in printf syntax."]
    string(32) mFormat;

    [tag="dtyp", description="Data type of attribute."]
    int32_t mType;
       
    [tag="kind", description="Hint to localize type on client."]
    string(8) mKind;

    [tag="meta", description="Metadata."]
    string(METADATA_LENGTH) mMetadata;

    [tag="unkv", description="Value to return when the value is unknown or NULL."]
    Collections::AttributeValue mUnknownValue;
    
    [tag="valu", description="List of attribute values."]
    Collections::AttributeValueList mValues; 

    [tag="core", description="If non-empty, identifies this column as containing information about a Blaze user. Valid values are 'externalId' or 'personaNamespace'."]
    string(32) mUserCoreIdentName;
};

class GameReportView
{
    [tag="info", description="Game report view info."]
    GameReportViewInfo mViewInfo;

    [tag="maxg", description="Max number of games to return."]
    uint32_t mMaxGames;

    [tag="rtyp", description="Game type as the context of returned row data."]
    GameManager::GameReportName mRowTypeName;
        
    [tag="filt", description="List of filters."]
    GameReportFilterList mFilterList;

    [tag="lgrc", description="List of game report columns."]
    list<GameReportColumn> mColumns;

    [tag="skgr", default=false, description="If true, the group by tag will not be added to the query."]
    bool skipGrouping;
};

class GetGameReportViewRequest
{
    [tag="name", description="Name of game report view."]
    ViewName mName;

    [tag="qvar", description="List of values of query variables."]
    QueryVarValuesList mQueryVarValues;

    [tag="maxr", description="Max number of rows to return."]
    uint32_t mMaxRows;
};

class GetGameReportViewResponse
{
    [tag="enid", description="List of entity ids."]
    list<EntityId> mEntityIds;

    [tag="lgrc", description="List of game report columns."]
    list<GameReportColumn> mColumns;
};

class TableData
{
    [tag="tabn", description="Game history table name."]
    TableName mTable;
    [tag="pkey", description = "a list of primary keys for the table"]
    list<ReportAttributeName> mPrimaryKey;
    [tag="cols", description = "a list of columns (except primary keys) for the table"]
    list<ReportAttributeName> mColumns;
};

class GameReportType
{
    [tag="gtna", description="Game type name."]
    GameManager::GameReportName mGameReportName;
    [tag="hist", description="List of table data defined in this game type."]
    list<TableData> mHistoryTables;
};

class GetGameReportTypesResponse
{
    [tag="grts", description="List of game report types."]
    list<GameReportType> mGameReportTypes;
};

class GetGameReportColumnInfo
{
    [tag="name", description="Name of game report view."]
    ViewName mName;
};

class GameReportColumnInfo
{
    [tag="ckey", description="Column key to identify the column."]
    GameReportColumnKey mKey;

    [tag="etyp", description="Entity type."]
    ObjectType mEntityType;
    
    [tag="sdsc", description="Short description of column title."]
    string(SHORT_DESC_LENGTH) mShortDesc;
    
    [tag="ldsc", description="Long description of column title."]
    string(DESCRIPTION_LENGTH) mDesc;
      
    [tag="frmt", description="Formatting string in printf syntax."]
    string(32) mFormat;

    [tag="dtyp", description="Data type of attribute."]
    int32_t mType;
       
    [tag="kind", description="Hint to localize type on client."]
    string(8) mKind;

    [tag="meta", description="Metadata."]
    string(METADATA_LENGTH) mMetadata;

    [tag="unkv", description="Value to return when the value is unknown or NULL."]
    Collections::AttributeValue mUnknownValue;
};

class GameReportColumnInfoResponse
{
    [tag="cil", description="List of all column information per view without values."]
    list <GameReportColumnInfo> mColumnInfoList;
};

class GameReportColumnValues
{
    [tag="valu", description="List of attribute values."]
    Collections::AttributeValueList mValues;
};

class GetGameReportColumnValuesResponse
{
    [tag="enid", description="List of entity ids."]
    list<EntityId> mEntityIds;

    [tag="lgrc", description="List of game report columns."]
    list<GameReportColumnValues> mColumnValues;
};

class GetTournamentGameReportViewRequest
{
    [tag="name", description="Name of game report view."]
    ViewName mName;

    [tag="gmid", description="Depending on the view's configuration, GameReportingId or the GameId, used to filter the view."]
    GameHistoryId mGameId;
};

} // namespace GameReporting
} // namespace Blaze
