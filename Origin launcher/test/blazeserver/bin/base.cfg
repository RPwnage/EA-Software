#
# This file contains the basic configurations for all server deployments. And
# will always be loaded before your specified server.cfg.  You should not need 
# to make any changes in this file itself.  All changes can be overridden by
# specifing the section/option within your server.cfg 
#

[DEPLOY]
label = %(serviceName)s
bootfile = env/%(env)s.boot

tempDir = /opt/gos-deploys                     ; temp location on remote hosts for file transfers

baseDir  = /opt/home/%(user)s/%(label)s        ; root directory for deploy
runDir   = %(baseDir)s/run                     ; server script directory
logDir   = %(baseDir)s/log                     ; log location
arcDir   = /opt/home/%(user)s/arc/%(label)s    ; target location log archiving
coreDir  = /opt/home/%(user)s/core/%(label)s   ; core file location

buildDir = %(baseDir)s/build                   ; location of builds for blaze instances
linkDir  = %(baseDir)s                         ; root dir for symlinks to current builds

redisDir = %(baseDir)s/redis                   ; directory for redis node configuration

buildPrefix = blaze ; should not contain the '-' character
# used by the server script to find and sort available builds

suffix = ""  ; should not contain the '-' character
# optional suffix added to the end of a blaze service name

oldBuildCount = 2
# number of old builds to keep

[REDIS]
dumpWaitTimeout = 10       ; Seconds to wait for node dump completion before exitign script. Note the dump still proceeds. We just stop waiting for it

# sentinel settings for monitoring master nodes
# format: sentinel_<setting> = <value>
# will be written into sentinel.conf as
#  sentinel <setting> <master> <value>
sentinel_down-after-milliseconds = 10000
sentinel_failover-timeout = 180000
sentinel_parallel-syncs = 1

[LOGSTASH]
send_pin = True

[SETTINGS]
# Basic configuation values for all runsets.  Can be overridden in each runset section
startPort         = 10000  ; default starting port for all hosts. only used when PAS is disabled.
usePas            = True   ; toggles PAS on and off
useMonitors       = True  ; toggles the use of monitors when running blaze
portsPerInstance  = 20      ; only used when PAS is disabled

stopDelay          = 900  ; seconds to wait between stop attempts
termAttempts       = 1    ; number of times to attempt process termination (before killing the process)
rollingStopDelay   = 5    ; seconds to wait after process stop during rolling restarts (before restarting the instance)
rollingStartDelay  = 30   ; deprecated in lieu of 'waitInService' value. 
waitInService      = 300  ; seconds to wait for an instance to transition into an IN-SERVICE state after startup

nameByCount        = True ; boolean switch to name our instances by their type count instead of with their id value
runStatsdExporter  = True ; boolean switch to determine if we run a statsd metrics exporter for redis
useRedisContainers = True ; boolean switch to control whether or not we run redis in docker containers

# We support multiple configuration versions for the auto generation of blaze's redis.cfg
#   version 1: is the legacy format that generates the 'etc/framework/redis.cfg' file
#   version 2: is for Urraca+ blaze releases and generates a 'init/redis.cfg' file, in order to match BitC configuration requirements
redisConfigVersion = 2    ; config version for generation of redis.cfg.


[ENV_VARS]
# environment variables set when starting blaze processes
# you may include the enviornment var in the definition in order to inherit current value from parent
#   ie.  PATH = /mypath/bin:$PATH

LD_LIBRARY_PATH = %(var:buildPath)s/lib:/opt/rh/devtoolset-2/root/usr/lib64:/opt/rh/devtoolset-2/root/usr/lib:%(var:opensslPath)s/lib
PATH = /opt/rh/devtoolset-2/root/usr/bin:/opt/redis-3.0.0/bin:/usr/local/bin:$PATH

[DEFAULT_CMDLINE] 
# Basic command line argument set.
# Can be overrided for individual instance types
#
# The server script will provide a set of server driven variables for use in command line
#   var:buildPath    -  symlink to build for current instance
#   var:instanceType - current instance type
#   var:instanceId   - unique id of current instance
#   var:instanceName - name of blaze instance
#   var:clusterName  - name of cluster for current instance
#   var:timeStamp    - timestamp of format YYYYMMDD_HHMMSS.
#   var:internalIp   - ip of current host. used for redis
#   var:port         - port being assigned to current instance

workingDir: %(var:buildPath)s/etc

# Monitor options
# monitor [-p PID file] [-e monitor-external] [-c allowed crash count] [-t allowed crash time] [-r delay restart in seconds] [-l log file name]
#    -p  sets PID file name
#    -e  sets monitor-external location
#    -m  sets monitor-exception location
#    -c  sets allowed number of server restarts
#    -t  sets allowed restart time interval
#    -r  sets the number of seconds to wait before restart
#    -l  sets log file name
monitor: 
  %(var:buildPath)s/bin/monitor -p %(DEPLOY:runDir)s/monitor_%(var:instanceName)s.pid 
  -e %(DEPLOY:runDir)s/monitor-external -m %(DEPLOY:runDir)s/monitor-exception
  -c 3 -t 10 -r 20 -l %(DEPLOY:logDir)s/blaze_%(var:instanceName)s

# Blazeserver options
blazeserver: 
 %(var:buildPath)s/bin/blazeserver -l %(DEPLOY:label)s --name %(var:instanceName)s
 --type %(var:instanceType)s --id %(var:instanceId)s -p %(DEPLOY:runDir)s/blaze_%(var:instanceName)s.pid
 -DPLATFORM=%(DEPLOY:platform)s -DENV=%(DEPLOY:env)s -DBLAZE_SERVICE_NAME_PREFIX=%(DEPLOY:prefix)s
 -DBLAZE_SERVICE_NAME_DEFAULT=%(DEPLOY:serviceName)s -DBLAZE_SERVICE_NAME_SUFFIX=%(DEPLOY:suffix)s
 --logdir %(DEPLOY:logDir)s --logname blaze_%(var:instanceName)s  %(DEPLOY:bootfile)s

# log rotate program which will be added to the crontab for the deploy user
rotatelog:
 %(DEPLOY:runDir)s/rotatelog --archive --logdir %(DEPLOY:logDir)s --archivedir %(DEPLOY:arcDir)s --prefix blaze --maxage 365 

# output redirect for crontab.  we separate it hear so that we can ignore the setting
# when executing the rotatelog script within the server script (eg. for shutdowns)
rotatelog_output: 
  > /dev/null 2>&1

# Docker image to use for redis in containers
redisimage = src.ent.ea.com:8443/gs/gs_docker_sandbox/redis:5.0.5

# command line for redis nodes.  The working directory for redis will be set by the
# server script and has format: %(DEPLOY:redisDir)/<cluster_name>/<port>/...
redis:
 redis-server redis.conf --port %(var:port)s --bind %(var:internalIp)s 127.0.0.1 --logfile %(DEPLOY:logDir)s/redis_%(var:clusterName)s%(var:port)s.log

sentinel:
 redis-server sentinel.conf --sentinel --port %(var:port)s --bind %(var:internalIp)s 127.0.0.1 --logfile %(DEPLOY:logDir)s/sentinel_%(var:clusterName)s%(var:port)s.log
  
# We can override any of the options in the DEFAULT_CMDLINE section for a specific instance type
# by specifying the option within a [<instance type>] section.
# Example:  This will add --memAllocTracking NONE to the exampleSlave commandline
#   Note:  The per-instance override does not append to the base command line specification. It OVERWRITES it.  
#          You must provide all arguments necessary for the execution of the program
#   Warning:  Do not override the --name option for blazeservers.  This could cause issues with the deploy scripts
#             ability to lookup instances
#
#[exampleSlave]
#blazeserver:  %(DEFAULT_CMDLINE:blazeserver)s  --memAllocTracking none
# 
  
[MAIL]
#
# Used by the monitor scripts for email notifications
#
recipients = nobody@ea.com            ; email recipients. should be overrided in server.cfg for each environment.
gos_recipients = GS-Alerts@ea.com     ; gos email contacts
gos_mail_environs = cert,prod         ; environments where gos is emailed.
sender     = %(DEPLOY:label)s
sendmail   = /usr/sbin/sendmail
