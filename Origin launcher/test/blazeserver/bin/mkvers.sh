#!/bin/bash

OUTFILE=$1
BLAZE_TARGET_CONFIG=$2
BLAZE_BUILD_PATH=$3
DEPLOY_OUTFILE=$4
PACKAGE_ROOTS="${@:5}"

TOP=.

P4EXISTS=1

# Make sure that Either P4PORT or P4CONFIG has been set
if [ -z "$P4PORT" -a -z "$P4CONFIG" ]; then
    echo "mkvers.sh disabled due to missing P4PORT or P4CONFIG environment variables."
    P4EXISTS=0;
else
    #
    # Determine if p4 exists (and has been setup) on this machine.  If
    # not, the values that would normally be populated by running perforce
    # commands will be empty or some default value.
    #
    p4 > /dev/null 2>&1
    if [ $? != 0 ]; then
        echo "mkvers.sh disabled due p4 command not working"
        P4EXISTS=0;
    fi
fi

#
# Capture the current date/time, build directory, changelist number, person doing the build and
#

if [ $P4EXISTS == 0 ]; then
    DEPOT_LOCATION="?"
    CLIENTNAME="?"
    LCL="?"
else
    echo "Determining Latest ChangeList ..."
    CLIENTNAME=$(p4 client -o | awk -F' ' '/^Client:/ {print $2}' 2>/dev/null)
    if [ "$CLIENTNAME" != "" ]; then
        CLIENTNAME=@$CLIENTNAME
    fi

    # Along with the blazeserver directory, search the packageroots provided
    # from NAnt for the latest CL
    LCL=0
    for root in `realpath .` ${PACKAGE_ROOTS[@]}
    do
        path=`echo $root/...$CLIENTNAME | sed 's#\/\/#/#g'`
        changelist=`p4 changes -m1 $path 2>/dev/null | awk -F' ' '{print $2}' 2>/dev/null`

        echo "  CL for path '$root' is ${changelist:-UNKNOWN (path may not be in P4)}"
        if [[ ! -z "$changelist" ]] && [[ "$changelist" =~ ^[0-9]+$ ]]; then
            if [[ $changelist > $LCL ]]; then
                LCL=$changelist
            fi
        fi
    done

    if [ $LCL == 0 ]; then
        LCL="?"
    fi
    echo "Latest ChangeList = $LCL"

    P4RESULT=$(p4 info 2> /dev/null)
    P4ERROR=$?
    if [ $P4ERROR -ne 0 -o -z "$P4RESULT" ]; then
        echo "p4 info failed ($P4ERROR), setting default depot location"
    else
    DEPOT_LOCATION=$(echo "$P4RESULT" | grep  '^Server address:' | awk -F' ' '{print $3 }')":"
    P4RESULT=$(p4 fstat Manifest.xml 2> /dev/null)
    P4ERROR=$?
    if [ $P4ERROR -ne 0 -o -z "$P4RESULT" ]; then
        echo "p4 fstat failed ($P4ERROR), setting default depot location"
        DEPOT_LOCATION="?"
    else
        DEPOT_LOCATION+=$(echo "$P4RESULT" | grep depotFile | awk -F' ' '{print $3}' | xargs dirname)
    fi
    fi
fi

buildtime=$(date --rfc-3339=seconds)
echo "[mkvers] $OUTFILE"
rm -f $OUTFILE
echo "// auto generated by $*" >> $OUTFILE
echo "extern const char _BlazeBuildTime[] = \""$buildtime"\";" >> $OUTFILE
echo "extern const char _BlazeBuildLocation[] = \""$(id -n -u)"@"$(uname -n)":"$(pwd)"\";" >> $OUTFILE
echo "extern const char _BlazeP4DepotLocation[] = \""$DEPOT_LOCATION"\";" >> $OUTFILE
echo "extern const char _BlazeChangelist[] = \"$LCL\";" >> $OUTFILE
echo "extern const char _BlazeBuildTarget[] = \"$BLAZE_TARGET_CONFIG\";" >> $OUTFILE
echo "#ifdef EA_PLATFORM_LINUX" >> $OUTFILE
echo "extern char _binary_vers_tar_gz_start[];" >> $OUTFILE
echo "extern char _binary_vers_tar_gz_end[];" >> $OUTFILE
echo "extern unsigned long long _binary_vers_tar_gz_size[]; " >> $OUTFILE
echo "#endif" >> $OUTFILE


vers_str=$(grep "_BlazeVersion" $(dirname $0)/../framework/version.h)
vers_str=${vers_str// /}
vers_arr=(${vers_str//\"/ })
echo "[mkvers] $DEPLOY_OUTFILE"
rm -f $DEPLOY_OUTFILE
echo "[BLAZE_VERSION]" >> $DEPLOY_OUTFILE
echo "version: ${vers_arr[1]}" >> $DEPLOY_OUTFILE
echo "buildtime: $buildtime" >> $DEPLOY_OUTFILE
echo "changelist: $LCL" >> $DEPLOY_OUTFILE
echo "buildtarget: $BLAZE_TARGET_CONFIG" >> $DEPLOY_OUTFILE

#
# Get all the opened files and include them as part of the build so we can reproduce (hopefully)
# exactly what the executable was built from
#

clientFiles=""
if [ $P4EXISTS != 0 ]; then
    #get the file statistics for just the opened files
    #we only get files that have been added or edited (meaning they are not read-only)
    P4RESULT=$(p4 fstat -Ro -F "action=add | action=edit" ... 2> /dev/null)
    P4ERROR=$?
    if [ $P4ERROR != 0 ]; then
        echo "p4 fstat failed ($P4ERROR), setting defaults for clientFiles"
        clientFiles=""
    elif [ "$P4RESULT" != "" ]; then
        clientFiles=$(echo "$P4RESULT" | awk -F' ' '
                    BEGIN { clientFile=""; }
                    /^\.\.\. clientFile/ { clientFile=$3; }
                    /^\.\.\. (headType|type)/ { type=$3; if (clientFile != "") { printf("%s\n", clientFile); clientFile=""; } }')
    fi
fi

echo "mkdir $BLAZE_BUILD_PATH/$BLAZE_TARGET_CONFIG/lib..."
mkdir -p $BLAZE_BUILD_PATH/$BLAZE_TARGET_CONFIG/lib
if [ $P4EXISTS != 0 ]; then
    p4 have ... > $BLAZE_BUILD_PATH/p4have.LIST
    p4 sync -n ...@$LCL > $BLAZE_BUILD_PATH/p4unsync.LIST
    p4 opened ... > $BLAZE_BUILD_PATH/p4opened.LIST
    p4 diff -du ... > $BLAZE_BUILD_PATH/p4localchange.patch
else
    echo "p4 enviroment not set." > $BLAZE_BUILD_PATH/p4have.LIST
    echo "p4 enviroment not set." > $BLAZE_BUILD_PATH/p4unsync.LIST
    echo "p4 enviroment not set." > $BLAZE_BUILD_PATH/p4opened.LIST
    echo "p4 enviroment not set." > $BLAZE_BUILD_PATH/p4localchange.patch
fi
(
    cd $BLAZE_BUILD_PATH && tar czvf vers.tar.gz p4localchange.patch p4opened.LIST p4unsync.LIST p4have.LIST
    ld -r -b binary -o vers.tar.gz.o vers.tar.gz
)
ar rcs $BLAZE_BUILD_PATH/$BLAZE_TARGET_CONFIG/lib/libvers.a $BLAZE_BUILD_PATH/vers.tar.gz.o

echo >> $OUTFILE
echo "const char* _BlazeEditedFiles[] = {" >> $OUTFILE

fileIndex=0
cwd=$(pwd)
for file in $clientFiles
do
    relativeFile=$(echo $file | sed -e "s%$cwd/%%g")
    echo "    \"$relativeFile\"," >> $OUTFILE
    fileIndex=$(expr $fileIndex + 1)
done

echo "    0" >> $OUTFILE
echo "};" >> $OUTFILE
echo "" >> $OUTFILE

