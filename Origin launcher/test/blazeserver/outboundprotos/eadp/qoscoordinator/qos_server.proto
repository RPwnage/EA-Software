syntax = "proto3";
package eadp.qoscoordinator;

import "google/rpc/status.proto";
import "eadp/annotations.proto";

option java_package = "com.ea.gs.qoscoordinator.grpc";
option java_outer_classname = "QosCoordinatorServerProto";
option java_multiple_files = true;

service QOSCoordinatorRegistration{
    // This is the service that QOS Servers will use to register/send heartbeats
       option (eadp.grpc.service_mapping) = {
           ports: [ PUBLIC, S2S, S2S_ADMIN]
       };

    rpc registerServer(ServerRegistrationRequest) returns (ServerRegistrationResponse) {};
}

// enum ServerToCoordinatorRequestFields aka struct QosCommonServerToCoordinatorRequestT
message ServerRegistrationRequest{
   enum CommunicationMode{
      HTTP = 0;
      HTTPS = 1;
      NUM_TYPES = 2; // I don't think we'll need this for the coordinator itself, but the .proto files might be shared.
   }

   string siteName = 1;
   string addr = 2;
   string pool = 3;
   bytes secureKey = 4;
   uint32 port = 5; // The address and port will be used to uniquely identify this server in the future.
   CommunicationMode communicationMode = 6;
   uint32 capacityPerSec = 7;
   uint32 lastLoadPerSec = 8;
   uint32 probeVersion = 9;
   uint32 interval = 10;  // the heartbeat interval in ms
   bool shuttingDown = 11;
}

//enum CoordinatorToServerResponseFields aka struct QosCommonCoordinatorToServerResponseT
message ServerRegistrationResponse{
   google.rpc.Status status = 1;
   string message = 2; // Error message when failed
}



