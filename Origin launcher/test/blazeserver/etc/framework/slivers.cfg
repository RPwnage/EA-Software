
#if (ENV == "dev")
  #define DEFAULT_SLIVER_COUNT_SMALL 10
  #define DEFAULT_SLIVER_COUNT_LARGE 20
#else
  #define DEFAULT_SLIVER_COUNT_SMALL 500
  #define DEFAULT_SLIVER_COUNT_LARGE 1000
#endif

slivers = {
    preferredCoordinatorTypes = [ "configMaster" ]

    coordinatorExpiryPeriod = "10s"
    coordinatorRefreshInterval = "3s"
    coordinatorActivationTimeout = "40s"

    sliverNamespaces = {
        "gamereporting" = {
            sliverCount = "#DEFAULT_SLIVER_COUNT_SMALL#"
        }

        "gamemanager_master" = {
            sliverCount = #DEFAULT_SLIVER_COUNT_LARGE#

            // Use updateCoalescePeriod to delay replication of changes made to the state of a GameSession.
            // A timer equal to the period specified by this setting is started whenever a change is made to the state of a
            // GameSession.  For example, a player joining or leaving, or a change to any of the game's properties.  The new state
            // of the GameSession is not replicated to the searchSlaves until the timer expires.  This allows additional changes
            // to occur before replicating the updated state to the searchSlaves.  Because of the number of changes that occur to
            // game's state immediately upon initialization, even a short coalescing period can have a huge impact on the CPU
            // usage of the coreMasters and searchSlaves.  The CPU saving can be as great as 40%.
            // A value of 0 disables any coalescing, and every change in state results in a replication message being sent to the searchSlaves.
            //
            updateCoalescePeriod = "200ms"


            // Setting the partitionCount for the GameManager sliver namespace directly impacts the number of games each searchSlave is
            // asked to index.  Therefore, the greater number of partitions means that each searchSlave will index fewer games. The trade-off
            // is that each searchSlave will be asked to process more game searches and game lists subscriptions.
            // Setting to 0 enables auto-paritioning, which is intern affected by the listenerMatrixShapeModifier setting below.
            //
            partitionCount = 0

            // Use listenerMatrixShapeModifier to tune the automatic sliver partitioning. Details for the partitionCount setting (above)
            // describe the impact of sliver partitions.  This setting is ingored if automatic partitioning is disabled.
            // 
            // Set to a value ranging 0..10.
            // Lower values favor more game sessions relative to game browser searches/subscriptions.and matchmaking sessions
            //     - This often coorelates to games with a small number of players per game session. (e.g. head-2-head games like FIFA and NHL)
            //     - Results in a relatively higher number of partitions.
            //     - Typically reduces memory requirements.
            // Higher values favor more game browser searches/subscriptions and matchmaking sessions relative to game sessions.
            //     - This often coorelates to games with a high number of players per game session. (e.g. open world games like Battlefield and PvZ)
            //     - Results in a relatively lower number of partitions.
            //     - Typically reduces CPU requirements.
            //
            //  0  Results in the number of partitions being equal to the number of searchSlaves.
            //     - Each searchSlave will index the smallest possible number of games.
            //     - Each searchSlave will process every single game browser search and subscription.
            //  10 Results in every searchSlave being part of the same partition, e.g. there is only 1 partition.
            //     - Each searchSlave will index every single game.
            //     - Each searchSlave will process the smallest possible number of game browser searches and subscriptions.
            //
            listenerMatrixShapeModifier = 3
        }

        "gamepacker_master" = {
            sliverCount = #DEFAULT_SLIVER_COUNT_LARGE#

            // When 0, the system auto balances partitions
            partitionCount = 1 // no listeners so don't bother balancing partitions
        }

        "usersessions_master" = {
            sliverCount = #DEFAULT_SLIVER_COUNT_LARGE#
            partitionCount = 1

            updateCoalescePeriod = "200ms"

            // When true (default), sliver migration (export) will be initiated automatically when the server begins shutting down.
            // When false, sliver migration (export) will NOT be initiated automatically when the server begins shutting down.  Instead, the server
            // will begin draining and only continue with a complete shutdown once there are no more objects associted with any owned sliver.
            //
            // To force the slivers to be migrated off of an instance (e.g. if the draining instance is taking a long time) you can call
            // the Slivers::ejectSlivers(), and specify the SliverNamespace and the InstanceId to eject all slivers from RPC.  For example:
            //      http://<any internalHttp host:port>/slivers/ejectSlivers?name=usersessions_master&frid=123
            //
            autoMigrationOnShutdown = true

            // When true (default), sliver migration (rebalance/import) will be initiated automatically when the server is started.
            // When false, an instance that is started will not automatically be assigned slivers to own.
            //
            // Instead, a user must call the Slivers::rebalanceSlivers() RPC, and specify the SliverNamespace.  For example:
            //      http://<any internalHttp host:port>/slivers/rebalanceSlivers?name=usersessions_master
            //
            autoMigrationOnStartup = true

            // When true (default), sliver migration (import/export) will occur automatically, regardless of sliver ownership, at the
            // Sliver Coordinator's discretion in order to balance sliver load across all available instances.
            // When false, slivers will never be migrated away from an owning instance while that instance is online.
            ownedSliverMigration = true

            // When true (default), a Blaze instance will not transition to the IN-SERVICE state until at least one sliver is owned by this instance.
            // When false, allow transitioning to the IN-SERVICE state (which enables the redirector to return this instance to clients) even if no slivers are yet owned.
            requireSliversForInServiceState = true
        }

        "example" = {
            sliverCount = "#DEFAULT_SLIVER_COUNT_SMALL#"
        }
    }
}
