// EXAMPLES. CAN BE REMOVED - RECOMMEND COMMENTING OUT #include in scenarios.cfg rather than editing this file
"sampleBitWiseFilter" = {
    gameProperty = "game.attributes[gameAttrib1]"
    requirement = {
        UIntBitwiseFilter = {
            testBits  = { attrName="TEST_BITS" }
            bitMask   = 15          // 1111
            operation = { default = "SET_BITS_MATCH" }       // All requirement values can set defaults with either '= {default = XXX}', of just '= XXX'.
        }
    }
    description = "Sample Bitwise Filter"
}
"sampleGameStateSetFilter" = {
    gameProperty = "game.state"
    requirement = {
        StringSetFilter = {
            values    = ["PRE_GAME", "IN_GAME"]    // StringSetFilter can be used for Enums  (if IntSetFilter is used, then the defaults would need to use numbers)
            operation = "INCLUDE" 
        }
    }
    description = "this is a game state set filter"
}

"rankedEqualityFilter" = {
    gameProperty = "game.settings[ranked]"
    requirement = {
        IntEqualityFilter = {
            value     = { attrName="RANKED_ATTR", default=false }
            operation = "EQUAL" 
        }
    }
    description = "this is a ranked equality filter"
}

"protocolVersionFilter" = {
    description = "basic filter on caller gameProtocolVersionString."
    gameProperty = "game.gameProtocolVersionString"
    requirement = {
        StringEqualityFilter = {
            operation = "EQUAL"
            value     = { propertyName = "caller.gameProtocolVersionString" }
        }
    }
}
  
"sampleModeFilter" = {
    description = "basic filter game attributes[mode]."
    gameProperty = "game.attributes[mode]" 
       requirement = {
        StringEqualityFilter = {
            value     = { attrName="GAME_MODE", default="test_mode" }
            operation = "EQUAL" 
        }
    }
}

"sampleMapFilter" = {
    description = "basic filter game attributes[MAP]."
    gameProperty = "game.attributes[MAP]" 
       requirement = {
        StringEqualityFilter = {
            value     = { attrName="GAME_MAP", default="test_map" }
            operation = "EQUAL" 
        }
    }
}

"participantCapacityFilter" = {
    description = "basic filter game.participantCapacity."
    gameProperty = "game.participantCapacity" 
       requirement = {
        IntEqualityFilter = {
            value     = { propertyName = "game.participantCapacity"}
            operation = "EQUAL" 
        }
    }
}

"platformFilter" = {
    description = "Example crossplay platform filter using 3 platforms.  A PlatformFilter is always required."
    gameProperty = "game.platforms"         // The dynamic list 
       requirement = {
        PlatformFilter = {
            clientPlatformListOverride   = { attrName = "PLATFORM_OVERRIDE", default = ["pc", "xone", "ps4"]}
            crossplayMustMatch           = { attrName = "XPLAY_MUST_MATCH", default = false }
        }
    }
}
