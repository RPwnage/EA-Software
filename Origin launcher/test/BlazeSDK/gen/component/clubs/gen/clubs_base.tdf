[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/attributes.h"]
#include "framework/gen/attributes.tdf"

namespace Blaze
{

namespace Clubs
{

//!< Minimum length of an online club name
const uint32_t OC_MIN_NAME_LENGTH = 2;

//!< Maximum length of an online club name
const uint32_t OC_MAX_NAME_LENGTH = 30;

//!< Minimum length of an online club non-unique name
const uint32_t OC_MIN_NON_UNIQUE_NAME_LENGTH = 2;

//!< Maximum length of an online club non-unqiue name
const uint32_t OC_MAX_NON_UNIQUE_NAME_LENGTH = 30;

//!< Minimum length of an online club description
const uint32_t OC_MIN_DESCR_LENGTH = 1;

//!< Maximum length of an online club description
const uint32_t OC_MAX_DESCR_LENGTH = 65;

//!< Maximum length of club tag text
const uint32_t OC_MAX_TAG_TEXT_LENGTH = 32;

//!< Maximum length of club password
const uint32_t OC_MAX_PASSWORD_LENGTH = 32;

// Maximum items per fetch when fetching clubs or news
const uint32_t OC_MAX_ITEMS_PER_FETCH = 200;

// Maximum parameter string length
const uint32_t OC_MAX_NEWS_PARAM_LEN = 256;

// Maximum parameter count for news
const uint32_t OC_MAX_NEWS_PARAMS = 5;

// Record stat type for integer
const char8_t* RECORD_STAT_TYPE_INT = "int";

// Record stat type for float
const char8_t* RECORD_STAT_TYPE_FLOAT = "float";

// User extended data identifier to get ClubId
const uint16_t USER_EXTENDED_DATA_CLUB_ID = 0xC001;

// Maximum member metadata string length
const uint32_t OC_MAX_MEMBER_METADATA_SIZE = 1024;

// Maximum/unlimited number of results to retrieve
const uint32_t OC_UNLIMITED_RESULTS = 2147483647;

enum NewsParamType
{
    NEWS_PARAM_NONE = 0,
    NEWS_PARAM_STRING = 1,
    NEWS_PARAM_INT = 2,
    NEWS_PARAM_PLAYER_ID = 3,
    NEWS_PARAM_TROPHY_ID = 4,
    NEWS_PARAM_BLAZE_ID = 5
};

enum ClubConfigParams
{
    CLUBS_MAX_MEMBER_COUNT,
    CLUBS_MAX_GM_COUNT,
    CLUBS_MAX_DIVISION_SIZE,
    CLUBS_MAX_NEWS_COUNT,
    CLUBS_MAX_INVITE_COUNT,
    CLUBS_MAX_INACTIVE_DAYS,
    CLUBS_PURGE_HOUR
};

enum MessageType
{
    CLUBS_INVITATION,
    CLUBS_PETITION
};

enum InvitationsType
{
    CLUBS_SENT_TO_ME,
    CLUBS_SENT_BY_ME,
    CLUBS_SENT_BY_CLUB
};

enum PetitionsType
{
    CLUBS_PETITION_SENT_BY_ME,
    CLUBS_PETITION_SENT_TO_CLUB
};

enum NewsType
{
    CLUBS_SERVER_GENERATED_NEWS,
    CLUBS_MEMBER_POSTED_NEWS,
    CLUBS_ASSOCIATE_NEWS, 
    CLUBS_ALL_NEWS
};

bitfield ClubNewsFlags
{
    CLUBS_NEWS_HIDDEN_BY_GM : 1;
    CLUBS_NEWS_HIDDEN_BY_TOS_VIOLATION : 1;
};

enum TimeSortType
{
    CLUBS_SORT_TIME_DESC,
    CLUBS_SORT_TIME_ASC
};

enum MetaDataType
{
    CLUBS_METADATA_TYPE_STRING,
    CLUBS_METADATA_TYPE_BINARY
};

typedef string(2048) MetadataString;
typedef blob MetadataBlob;

[trackChanges = true]
union MetadataUnion
{
    [tag="mets", description="Clubs metadata in string format."]
    MetadataString mMetadataString;

    [tag="metb", description="Clubs metadata in binary format."]
    MetadataBlob mMetadataBlob;
};

typedef uint32_t MembershipStatusValue;
enum MembershipStatus
{
    CLUBS_MEMBER,
    CLUBS_GM,   
    CLUBS_OWNER
};

typedef uint32_t MemberOnlineStatusValue;

[addProtoAlias = true]
enum MemberOnlineStatus
{
    CLUBS_MEMBER_OFFLINE = 0,
    CLUBS_MEMBER_ONLINE_INTERACTIVE = 1,
    CLUBS_MEMBER_ONLINE_NON_INTERACTIVE = 2,
    CLUBS_MEMBER_IN_GAMEROOM = 3,
    CLUBS_MEMBER_IN_OPEN_SESSION = 4,
    CLUBS_MEMBER_IN_GAME = 5,

    // Intentionally set custom and custom 1 to the same enum value,
    // allows older code that referenced just the single status
    // without numberic suffix to continue working, but also newer code
    // can use custom statuses 1 through 4
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS = 6,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_1 = 6,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_2 = 7,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_3 = 8,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_4 = 9,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_5 = 10,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_6 = 11,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_7 = 12,
    CLUBS_MEMBER_CUSTOM_ONLINE_STATUS_8 = 13,

    CLUBS_MEMBER_ONLINE_STATUS_COUNT
};

enum UpdateReason
{
    UPDATE_REASON_USER_SESSION_CREATED,
    UPDATE_REASON_USER_SESSION_DESTROYED,
    UPDATE_REASON_USER_JOINED_CLUB,
    UPDATE_REASON_USER_LEFT_CLUB,
    UPDATE_REASON_USER_ONLINE_STATUS_UPDATED,
    UPDATE_REASON_CLUB_DESTROYED,
    UPDATE_REASON_CLUB_CREATED,
    UPDATE_REASON_CLUB_SETTINGS_UPDATED,
    UPDATE_REASON_USER_PROMOTED_TO_GM,
    UPDATE_REASON_USER_DEMOTED_TO_MEMBER,
    UPDATE_REASON_TRANSFER_OWNERSHIP
};
    
enum ArtPackageType
{
    CLUBS_ART_UNKNOWN,
    CLUBS_ART_JPG,
    CLUBS_ART_GIF
};

enum RecordStatType
{
    CLUBS_RECORD_STAT_INT,
    CLUBS_RECORD_STAT_FLOAT
};

enum SeasonPeriod
{
    CLUBS_PERIOD_DAILY,
    CLUBS_PERIOD_WEEKLY,
    CLUBS_PERIOD_MONTHLY
};

enum SeasonState
{
    CLUBS_IN_SEASON,
    CLUBS_POST_SEASON
};

enum TagSearchOperation
{
    CLUB_TAG_SEARCH_IGNORE = 0,
    CLUB_TAG_SEARCH_MATCH_ANY,  
    CLUB_TAG_SEARCH_MATCH_ALL  
};  

enum PasswordOption
{
    CLUB_PASSWORD_IGNORE = 0,
    CLUB_PASSWORD_NOT_PROTECTED,  
    CLUB_PASSWORD_PROTECTED  
};

enum ClubLogEventKeyType
{
    CLUB_LOG_EVENT_CREATE_CLUB = 0,
    CLUB_LOG_EVENT_JOIN_CLUB = 1,
    CLUB_LOG_EVENT_LEAVE_CLUB = 2,
    CLUB_LOG_EVENT_REMOVED_FROM_CLUB = 3,
    CLUB_LOG_EVENT_AWARD_TROPHY = 4,
    CLUB_LOG_EVENT_GM_PROMOTED = 5,
    CLUB_LOG_EVENT_GM_DEMOTED = 6,
    CLUB_LOG_EVENT_OWNERSHIP_TRANSFERRED = 7
};

enum RequestorAcceptance
{   
    CLUB_ACCEPT_NONE = 0,
    CLUB_ACCEPT_GM_FRIENDS,
    CLUB_ACCEPT_ALL
};

enum ClubJoinOrPetitionStatus 
{ 
    CLUB_JOIN_AND_PETITION_FAILURE = 0, 
    CLUB_JOIN_SUCCESS, 
    CLUB_PETITION_SUCCESS 
}; 

typedef uint64_t ClubId;
const uint64_t INVALID_CLUB_ID = 0;
typedef uint32_t ClubDomainId;
typedef uint32_t TeamId;
typedef uint32_t LogoId;
typedef uint32_t BannerId;
typedef uint32_t SeasonLevel;
typedef string(3) Language;
typedef string(30) ClubName;
typedef string(30)  ClubNonUniqueName;
typedef string(65) ClubDesc;
typedef string(2304) ClubTickerMessageText;
typedef string(256) ClubTickerMetadata;
typedef uint32_t ClubRegion;
typedef list<NewsType> NewsTypeList;
typedef list<ClubId> ClubIdList;
typedef list<BlazeId> BlazeIdList;
typedef list<uint32_t> GetParamsConfigResponse;
typedef map<MemberOnlineStatus, uint16_t> MemberOnlineStatusCountsMap;
typedef list<MemberOnlineStatus> MemberOnlineStatusList;
typedef uint32_t ClubRecordId;
typedef uint32_t ClubAwardId;
typedef Collections::AttributeMap MemberMetaData;
typedef string(1024) RivalMetadata;
typedef uint32_t ClubTagId;
typedef list<ClubTagId> ClubTagIdList;
typedef string(OC_MAX_TAG_TEXT_LENGTH) ClubTag;
typedef list<ClubTag> ClubTagList;
typedef string(OC_MAX_PASSWORD_LENGTH) ClubPassword;
typedef string(OC_MAX_NAME_LENGTH) ClubLogEventParamValue;
typedef map<NewsParamType, ClubLogEventParamValue> ClubLogEventParams;
typedef map<BlazeId, MembershipStatusValue> MembershipStatusMap;
typedef map<ClubId, MemberOnlineStatusValue> MemberOnlineStatusMap;
typedef map<BlazeId, MemberOnlineStatusValue> MemberOnlineStatusMapForClub;
typedef map<ExternalId, MemberOnlineStatusValue> MemberOnlineStatusMapByExternalId;

bitfield ClubAcceptanceFlags
{
    CLUBS_ACCEPT_CHALLENGES : 1;
    CLUBS_ACCEPT_RIVALS : 1;
};

bitfield ClubArtSettingsFlags
{
    CLUBS_CUSTOM_LOGO : 1;
    CLUBS_CUSTOM_BANNER : 1;
};

enum PetitionMessageType {
    CLUBS_PI_PETITION_SENT = 0,
    CLUBS_PI_PETITION_ACCEPTED,
    CLUBS_PI_PETITION_DECLINED,
    CLUBS_PI_PETITION_REVOKED
};

enum PetitionMessageAttribute {
    CLUBS_MSGATR_MESSAGE_TYPE = 0,
    CLUBS_MSGATR_CLUB_MSG_ID,
    CLUBS_MSGATR_CLUB_NAME
};

class AwardSettings
{
    [tag="awid", description="Award Id."]
    uint32_t mAwardId;

    [tag="awna", description="Award name."]
    string(64) mAwardName;

    [tag="awur", description="Award image URL."]
    string(512) mAwardURL;

    [tag="awcs", description="Award image checksum."]
    uint32_t mAwardChecksum;
};

class ClubDomain
{
    [tag="dmid", description="Unique Domain Id."]
    ClubDomainId mClubDomainId;

    [tag="dnam", description="Domain Name."]
    string(64) mDomainName;

    [tag="dxmb", description="Maximum members per club in this domain."]
    uint32_t mMaxMembersPerClub;

    [tag="dxgm", description="Maximum GMs per club in this domain."]
    uint16_t mMaxGMsPerClub;

    [tag="dxms", description="Maximum memberships per user in this domain."]
    uint16_t mMaxMembershipsPerUser;

    [tag="dxnw", description="Maximum news items per club in this domain."]
    uint16_t mMaxNewsItemsPerClub;

    [tag="dxiv", description="Maximum invites per user or per club in this domain."]
    uint16_t mMaxInvitationsPerUserOrClub;

    [tag="dxia", description="Maximum inactive days per club in this domain (0 if clubs in this domain never expire)."]
    uint16_t mMaxInactiveDaysPerClub;

    [tag="dued", description="Indication whether to keep the value as part of User Extended Data; hence, track membership status for clubs in this domain."]
    bool mTrackMembershipInUED;
    
    [tag="amrp", description="If true, allow non-gm/non-owner to retrieve club password when getting club data."]
    bool mAllowMemberToRetrievePassword;
    
    [tag="jitv", default="0s", description="User can not join another club in the same domain if this timevalue has not expired since he left last club. Value 0s means no jump limit."]
    TimeValue mClubJumpingInterval;
};

typedef list<ClubDomain> ClubDomainList;

}

}
