[headername="framework/tdf/entity.h"]
#include "framework/gen/entity.tdf"

[headername="framework/tdf/qosdatatypes.h"]
#include "framework/gen/qosdatatypes.tdf"

namespace Blaze
{

[description = "Identifier for inbound RPC connections for Blaze instances with the cluster.  Currently equal to the InstanceId of the server that is calling the RPC."]
typedef uint64_t SlaveSessionId;

[description = "Identifier for a single (logged-in) UserSession.  One User may have multiple UserSessions open simultaneously, and thus multiple UserSessionIds in use."]
typedef uint64_t UserSessionId;

[description = "The Nucleus AccountId type.  Used for most Nucleus commands."] 
typedef int64_t AccountId;

[description = "The Nucleus PersonaId type.  If a UserSession is associated with a Nucleus Persona, then the UserSession's BlazeId will be the same as the PersonaId."] 
typedef int64_t PersonaId;

[description = "DEPRECATED -- Use PlatformInfo instead, or uint64_t if needed.  Previously used to store PSN / Xbl Ids."] 
typedef uint64_t ExternalId;  

[description = "Steam Account Id."] 
typedef ExternalId ExternalSteamAccountId;

[description = "Stadia Account Id."] 
typedef ExternalId ExternalStadiaAccountId; 

[description = "1st-party Xbox Live Account Id."] 
typedef ExternalId ExternalXblAccountId;

[description = "1st-party PSN Account Id."] 
typedef ExternalId ExternalPsnAccountId;

[description = "1st-party NSA id, prefixed with the Nintendo environment."] 
typedef string(-1) ExternalSwitchId;

[description = "DEPRECATED -- Use ExternalPsnAccountId instead.  Previously used to store the PSN Id prior to PSN switching to int64."] 
typedef blob ExternalBlob;

[description = "Integer representation of a 4-char code (e.g., 1701729619 ==> 0x 65 6E 55 53 ==> 'enUS')"] 
typedef uint32_t Locale;

[description = "DEPRECATED -- Use Locale typedef instead.  Integer representation of a 4-char code (e.g., 1701729619 ==> 0x 65 6E 55 53 ==> 'enUS')"] 
typedef Locale AccountLocale;

[description = "The PersonaId used by Origin, NOT the OriginId.  NOTE: OriginId uses the Nucleus Account Id, not the Origin PersonaId."] 
typedef uint64_t OriginPersonaId;

[description = "ObjectId for a connection.  Used by DirtySDK/NetConn for game data/voip packet routing.  Also used to support MLU, where one connection may be used by multiple users on the same console."] 
typedef ObjectId ConnectionGroupObjectId;

[description = "Identifier for a connection.  Used by DirtySDK/NetConn for game data/voip packet routing.  Also used to support MLU, where one connection may be used by multiple users on the same console."] 
typedef uint64_t ConnectionGroupId;

[description = "Encrypted version of the BlazeId used when talking with 3rd party Services (ex. Tournament providers)"] 
typedef string(-1) EncryptedBlazeId;
typedef list<EncryptedBlazeId> EncryptedBlazeIdList;

[description = "DEPRECATED - List of ExternalId's. Use UserIdentificationList instead, if possible, when dealing with external users."]
typedef list<ExternalId> ExternalIdList;
typedef list<ExternalXblAccountId> ExternalXblAccountIdList;
typedef list<ExternalPsnAccountId> ExternalPsnAccountIdList;

// should be converted to vector types, for now lists for compatibility
typedef list<UserSessionId> UserSessionIdList;
typedef list<BlazeId> BlazeIdList;

typedef list<string(256)> TrialContentIdList;

[description = "PSN push context id for a PS5 client"]
typedef string(36) PsnPushContextId;// For PS: max 36 chars (SCE_NP_WEBAPI2_PUSH_EVENT_UUID_LENGTH)

[description="Nucleus namespace names"]
// PS4 uses 'ps3' namespace, and XBoxOne uses 'xbox' namespace
const char8_t* NAMESPACE_XBOXONE = "xbox";
const char8_t* NAMESPACE_PS4 = "ps3";
const char8_t* NAMESPACE_NX = "nx";
const char8_t* NAMESPACE_ORIGIN = "cem_ea_id";
const char8_t* NAMESPACE_PS5 = "ps3";
const char8_t* NAMESPACE_XBSX = "xbox";
const char8_t* NAMESPACE_STEAM= "steam";
const char8_t* NAMESPACE_STADIA= "stadia";

[description="Enumeration of Blaze Client Types"]
enum ClientType
{
    CLIENT_TYPE_GAMEPLAY_USER = 0x0,
    CLIENT_TYPE_HTTP_USER = 0x1,
    CLIENT_TYPE_DEDICATED_SERVER,
    CLIENT_TYPE_TOOLS,
    CLIENT_TYPE_LIMITED_GAMEPLAY_USER,
    CLIENT_TYPE_INVALID
};

typedef list<ClientType> ClientTypeList;

[description="Enumeration of Blaze Client Platforms Type"]
enum ClientPlatformType
{
    
    [description="Invalid"]
    INVALID = 0x0,
    [description="PC"]
    pc = 4,
    [description="Android"]
    android = 5,
    [description="iOS"]
    ios = 6,
    [description="common, platform agnostic"]
    common = 8,
    [description="MOBILE, see nucleus"]
    mobile = 9,
    [description="LEGACYPROFILEID, see nucleus"]
    legacyprofileid = 10,
    [description="VERIZON, see nucleus"]
    verizon = 11,
    [description="FACEBOOK, see nucleus"]
    facebook = 12,
    [description="FACEBOOK_EACOM, see nucleus"]
    facebook_eacom = 13,
    [description="BEBO, see nucleus"]
    bebo = 14,
    [description="FRIENDSTER, see nucleus"]
    friendster = 15,
    [description="TWITTER, see nucleus"]
    twitter = 16,
    [description="Xbox One"]
    xone = 19,
    [description="PlayStation 4"]
    ps4 = 20,
    [description="Nintendo Switch"]
    nx = 21,
    [description="Sony PS5"]
    ps5 = 22,
    [description="MS Xbox Series X"]
    xbsx = 23,
    [description="Steam"]
    steam = 24,
    [description="Stadia"]
    stadia = 25,
    [description="NATIVE, normally represents a nucleus persona id that is unknown to this Blaze server"]
    NATIVE = 0xFFFF
};

typedef list<ClientPlatformType> ClientPlatformTypeList;

const uint32_t MAX_SESSION_KEY_LENGTH = 64;
const uint32_t MAX_EMAIL_LENGTH = 256;
const uint32_t MAX_PERSONA_LENGTH = 256;
const uint32_t MAX_PERSONA_ID_LENGTH = 32;
const uint32_t MAX_GEOCITY_LENGTH = 256;
const uint32_t MAX_GEOCOUNTRY_LENGTH = 3;
const uint32_t MAX_GEOSTATE_LENGTH = 3;
const uint32_t MAX_PERMISSION_LENGTH = 128;
const uint32_t MAX_SERVICENAME_LENGTH = 49;   // 48 char limit plus null character
const uint32_t MAX_ISP_LENGTH = 256;
const uint32_t MAX_TIMEZONE_LENGTH = 128;
const uint32_t MAX_PRODUCTNAME_LENGTH = 256;
const uint32_t MAX_NUCLEUS_CLIENT_ID_LENGTH = 64;
const uint32_t UNIQUE_DEVICE_ID_MAX = 64;

typedef list<string(MAX_PERSONA_LENGTH)> PersonaNameList;
typedef list<string(UNIQUE_DEVICE_ID_MAX)> DeviceIdList;


const UserSessionId INVALID_USER_SESSION_ID = 0;   // Replaces UserSession::INVALID_SESSION_ID
const BlazeId INVALID_BLAZE_ID = 0;
const ExternalId INVALID_EXTERNAL_ID = 0;  // DEPRECATED
const ExternalXblAccountId INVALID_XBL_ACCOUNT_ID = 0;
const ExternalPsnAccountId INVALID_PSN_ACCOUNT_ID = 0;
const ExternalSteamAccountId INVALID_STEAM_ACCOUNT_ID = 0;
const ExternalStadiaAccountId INVALID_STADIA_ACCOUNT_ID = 0;
const AccountId INVALID_ACCOUNT_ID = 0;
const OriginPersonaId INVALID_ORIGIN_PERSONA_ID = 0;
const ConnectionGroupId INVALID_CONNECTION_GROUP_ID = 0;

[description="Used to select the service name to connect with.  Different products that are serviced by the same Blaze cluster often used different service names.  (Such as separating th Demo and Full versions.)"]
typedef string(MAX_SERVICENAME_LENGTH) ServiceName;

[description="Indicates the product the user is using.  One Blaze Server can support multiple products."]
typedef string(MAX_PRODUCTNAME_LENGTH) ProductName;

typedef map<ProductName, TrialContentIdList, ignorecase> ProductTrialContentIdMap;
typedef map<ProductName, string(-1), ignorecase> ProductProjectIdMap;

typedef list<ServiceName> ServiceNameList;

const uint32_t MAX_NAMESPACE_LENGTH = 32;

[description="Nucleus Persona Namespace."]
typedef string(MAX_NAMESPACE_LENGTH) PersonaNamespace;
typedef list<PersonaNamespace> PersonaNamespaceList;

[description="DEPRECATED -- Nucleus Persona Namespace.  Use PersonaNamespace instead."]
typedef PersonaNamespace Namespace;
typedef PersonaNamespaceList NamespaceList;

[trackChanges = true, description="Contains the EA account ids for a user."]
class EaIdentifiers
{
    [tag="nid", default=INVALID_ACCOUNT_ID, description="Nucleus account id of the user."] 
    AccountId mNucleusAccountId;

    [tag="pcid", default=INVALID_ORIGIN_PERSONA_ID, description="Origin PersonaId of the user."] 
    OriginPersonaId mOriginPersonaId;

    [tag="name", default="", description="Origin persona name of the user."]
    string(MAX_PERSONA_LENGTH) mOriginPersonaName;
};

[trackChanges = true, description="Contains the first party/external ids of a user's linked account(s).",
details="One or more platform Ids can be valid below(that's why it's not a union). The presence of an id doesn't mean the user is currently logged into that platform, just that they have a linked account for that platform."]
class ExternalIdentifiers
{
    [tag="xbid", default=INVALID_XBL_ACCOUNT_ID, description="XBL (xuid) id of the user"] 
    ExternalXblAccountId mXblAccountId;

    [tag="psid", default=INVALID_PSN_ACCOUNT_ID, description="PSN (SceNpAccountId) id of the user"] 
    ExternalPsnAccountId mPsnAccountId;

    [tag="swid", description="Combination of the 3-letter environment, and the user's 128-bit NSA id.  ex. 'ld1:123456'"] 
    ExternalSwitchId mSwitchId;

    [tag="stid", default=INVALID_STEAM_ACCOUNT_ID, description="SteamId of the user"] 
    ExternalSteamAccountId mSteamAccountId;

    [tag="said", default=INVALID_STADIA_ACCOUNT_ID, description="StadiaId of the user"] 
    ExternalStadiaAccountId mStadiaAccountId;
};

[trackChanges = true, description="Contains the platform/first party ids of the user and the current platform the user is on.",
details="One or more platform Ids can be valid below(that's why it's not a union). The presence of an id doesn't mean the user is currently logged into that platform, just that they have a linked account for that platform."]
class PlatformInfo
{
    [tag="eaid", description="Contains EA ids for this user."]
    EaIdentifiers mEaIds;

    [tag="exid", description="Contains a user's linked external ids. Presence of an Id does not mean the user is currently logged in via that platform."] 
    ExternalIdentifiers mExternalIds;

    [tag="plat", default=INVALID, description="The current logged in platform."]
    ClientPlatformType mClientPlatform;
};

[trackChanges = true, description="Used to package information describing a Blaze user to components."]
class UserIdentification
{
    [tag="name", description="The persona name of the user"] string(MAX_PERSONA_LENGTH) mName;
    [tag="id", description="The user's BlazeId"] BlazeId mBlazeId;
    [tag="aids", description="Contains platform ids and current client platform."] PlatformInfo mPlatformInfo;
    [tag="exid", description="DEPRECATED (Use PlatformInfo) - The user's ExternaId (XUID or PSN ID)"] ExternalId mExternalId;
    [tag="aid", description="DEPRECATED (Use PlatformInfo) - The master account id (for example, the Nucleus master id)"] AccountId mAccountId;
    
    [tag="aloc", description="The user's account locale"] Locale mAccountLocale;
    [tag="cnty", description="The user's account country"] uint32_t mAccountCountry;
    [tag="orig", description="DEPRECATED (Use PlatformInfo) - The user's Origin persona id"] OriginPersonaId mOriginPersonaId;
    [tag="pidi", description="The user's Pid Id"] int64_t mPidId;
    [tag="nasp", description="The persona namespace for mName."] PersonaNamespace mPersonaNamespace;

    [tag="ispp", description="Indicates that the user is the primary persona for a given account. (Remove once secondary personas are removed from nucleus.)", default=true] bool mIsPrimaryPersona;
};

typedef list<UserIdentification> UserIdentificationList;

[trackChanges = true, description="Used to package core information describing an entity, often but not always a user."]
class CoreIdentification
{
    [tag="id",   description="The id of the entity"] BlazeId mBlazeId;
    [tag="name", description="The name of the entity"] string(MAX_PERSONA_LENGTH) mName;
    [tag="nasp", description="The namespace of mName (only relevant for users)"] PersonaNamespace mPersonaNamespace;
    [tag="aids", description="Contains platform ids and current client platform."] PlatformInfo mPlatformInfo;
    [tag="exid", description="DEPRECATED (Use PlatformInfo) - External id (only relevant for users on platform with external ids)"] ExternalId mExternalId;
};

[ description="Flags used to carry additional information about a User." ]
bitfield UserDataFlags
{
    [description="User is currently subscribed to"]
    Subscribed : 1;
    [description="User is online"]
    Online     : 1;
};

[description="Used to update a users status."]
class UserStatus
{
    [tag="id", description="The BlazeID of the user with the specified status."]
    BlazeId mBlazeId;
    
    [tag="flgs", description="User status flags"]
    UserDataFlags mStatusFlags;
};

class LookupUsersByPrefixRequest
{
    [tag="pref", description="The persona name of the user for prefix"] string(MAX_PERSONA_LENGTH) mPrefixName;
    [tag="cap", description="The max result count per platform"] uint32_t mMaxResultCount;
    [tag="nasp", description="The persona namespace"] PersonaNamespace mPersonaNamespace;
    [tag="ponl", default=true, description="Search for users in their primary namespace only  (xbox for xone users, ps3 for ps4 users, etc.) Only applicable when PersonaNamespace is NAMESPACE_ORIGIN."] bool mPrimaryNamespaceOnly;
};

class LookupUsersByPrefixMultiNamespaceRequest
{
    [tag="pref", description="The persona name of the user for prefix"] string(MAX_PERSONA_LENGTH) mPrefixName;
    [tag="cap", description="The max result count per platform"] uint32_t mMaxResultCount;
    [tag="ponl", default=true, description="Search for users in their primary namespace only (xbox for xone users, ps3 for ps4 users, etc.)"] bool mPrimaryNamespaceOnly;
};

class LookupUsersByPersonaNameMultiNamespaceRequest
{
    [tag="pref", description="The persona name of the user"] string(MAX_PERSONA_LENGTH) mPersonaName;
    [tag="ponl", default=true, description="Search for users in their primary namespace only (xbox for xone users, ps3 for ps4 users, etc.)"] bool mPrimaryNamespaceOnly;
};

class LookupUsersByPersonaNamesRequest
{
    [tag="nasp", description="The persona namespace"] PersonaNamespace mPersonaNamespace;
    [tag="plst", description="The persona names of the users"] PersonaNameList mPersonaNameList;
};

class LookupUsersByPersonaNamesMultiNamespaceRequest
{
    [tag="plst", description="The persona names of the users"] PersonaNameList mPersonaNameList;
    [tag="ponl", default=true, description="Search for users in their primary namespace only (xbox for xone users, ps3 for ps4 users, etc.)"] bool mPrimaryNamespaceOnly;
};

class LookupUsersRequest
{
    enum LookupType
    {
        [description="Lookup by BlazeId"]
        BLAZE_ID,
        [description="Lookup by Persona"]
        PERSONA_NAME,
        [description="Lookup by ExternalId"]
        EXTERNAL_ID,
        [description="Lookup by AccountId"]
        ACCOUNT_ID,
        [description="Lookup by OriginPersonaId"]
        ORIGIN_PERSONA_ID
    };
    
    [tag="ltyp", description="Specifies what to use when searching for the user. One of the LookupType values."]
    LookupType mLookupType;

    [tag="ulst", description="A list of UserIdentification objects."]
    UserIdentificationList mUserIdentificationList;
};

class LookupUsersResponse
{
    [tag="ulst", description="A list of userIdentification objects that were found."] UserIdentificationList mUserIdentificationList;
};

[description="UserSessionId Look up request type"]
class LookupUserSessionIdRequest
{
        [tag="uid", description="The user's BlazeId"] 
        BlazeId mBlazeId;
};

[description="UserSessionId Look up response type"]
class LookupUserSessionIdResponse
{
    [tag="sid", description="The user's UserSessionIds"]
    UserSessionIdList usersessionidList;
};

[description="String for access group name." ]
typedef string(64) AccessGroupName;


[description="Used to override and fetch GeoIP data of a user."]
class GeoLocationData
{
    [tag="id", description="The BlazeID of the user"] BlazeId mBlazeId;
    [tag="lat", default = 360.0f, description="The latitude value (Negative values indicate south)"] float mLatitude;
    [tag="lon", default = 360.0f, description="The longitude value (Negative values indicate west)"] float mLongitude;
    [tag="cty", description="The name of the city"] string(MAX_GEOCITY_LENGTH) mCity;
    [tag="cnty", description="The country code"] string(MAX_GEOCOUNTRY_LENGTH) mCountry;
    [tag="st", description="The state or region code"] string(MAX_GEOSTATE_LENGTH) mStateRegion;
    [tag="isp", description="The ISP"] string(MAX_ISP_LENGTH) mISP;
    [tag="tz", description="The time zone"] string(MAX_TIMEZONE_LENGTH) mTimeZone;
    [tag="opt", description="Opt In", default=false] bool mOptIn;
    [tag="over", description="Indicates if this data is the result of an override", default=false] bool mIsOverridden;
};

class OptInRequest
{
    [tag="id", description="The BlazeID of the user"] BlazeId mBlazeId;
    [tag="opt", description="Opt In", default=false] bool mOptIn;
};

enum CrossPlatformLookupType
{
    [description="Lookup by NucleusAccountId"]
    NUCLEUS_ACCOUNT_ID,
    [description="Lookup by OriginPersonaId"]
    ORIGIN_PERSONA_ID,
    [description="Lookup by Origin persona name"]
    ORIGIN_PERSONA_NAME,
    [description="Lookup by 1st party id"]
    FIRST_PARTY_ID
};

typedef list<PlatformInfo> PlatformInfoList;
class LookupUsersCrossPlatformRequest
{
    bitfield LookupOpts
    {
        [description="If set, lookup results will exclude offline users"]
        OnlineOnly : 1;
        [description="If set, users will be excluded from the lookup results if there is another user linked to their Nucleus account (on a different platform) who logged in more recently"]
        MostRecentPlatformOnly : 1;
        [description="If set, then for each PlatformInfo in the requested list, only users on the platform specified by the PlatformInfo's ClientPlatform will be included in the lookup results. This option is assumed to be set when mLookupType is FIRST_PARTY_ID. (The default behaviour when mLookupType is not FIRST_PARTY_ID is to ignore ClientPlatform and include results from all platforms the caller is permitted to search)"]
        ClientPlatformOnly : 1;
    };

    [tag="ltyp", description="Specifies what to use when searching for the user. One of the CrossPlatformLookupType values."]
    CrossPlatformLookupType mLookupType;

    [tag="pil", description="PlatformInfo of the user(s) to look up."]
    PlatformInfoList mPlatformInfoList;

    [tag="opts", description="Additional options for user lookups."]
    LookupOpts mLookupOpts;
};

typedef uint64_t UserInfoAttribute;
typedef map<BlazeId, UserInfoAttribute> UserInfoAttributeMap;

const uint32_t ENVIRONMENT_NAME_MAX_LENGTH = 16;
const uint32_t PLATFORM_NAME_MAX_LENGTH = 16;
const uint32_t CLIENT_NAME_MAX_LENGTH = 64;
const uint32_t CLIENT_VERSION_MAX_LENGTH = 64;
const uint32_t CLIENT_SKU_ID_MAX_LENGTH = 64;

class ClientInfo
{
    [tag="env"]  string(ENVIRONMENT_NAME_MAX_LENGTH) mEnvironment;
    [tag="cpft", default=NATIVE] ClientPlatformType mPlatform;
    [tag="clnt"] string(CLIENT_NAME_MAX_LENGTH) mClientName;
    [tag="cver"] string(CLIENT_VERSION_MAX_LENGTH) mClientVersion;
    [tag="csku"] string(CLIENT_SKU_ID_MAX_LENGTH) mClientSkuId;
    [tag="loc"]  uint32_t mClientLocale;
    [tag="ctry"] uint32_t mClientCountry;
    [tag="bsdk"] string(64) mBlazeSDKVersion;
    [tag="btim"] string(64) mBlazeSDKBuildDate;
    [tag="dsdk"] string(64) mDirtySDKVersion;
    [tag="ptvr"] string(16) mProtoTunnelVersion;
    [tag="ttid"] string(64) mTitleId;
    [tag="push", description="(DEPRECATED, use GameManager::UpdateExternalSessionPresenceForUserRequest.mPsnPushContextId)"] PsnPushContextId mPsnPushContextId;
};

class ServiceNameInfo
{
    [tag="plat", default=pc, description = "platform"]
    ClientPlatformType platform;

    [tag="prdt", description="The product name as configured in products.cfg to which this service name associates."]
    ProductName mProductName;
};
typedef map<ServiceName, ServiceNameInfo, ignorecase> ServiceNameInfoMap;

class FetchLastLocaleUsedAndAuthErrorRequest
{
    [tag="id", description="The user's BlazeId"] 
    BlazeId mBlazeId;
};

class FetchLastLocaleUsedAndAuthErrorResponse
{
    [tag="llud", description="Last account locale settings used."] 
    string(4) mLastLocaleUsed;
    
    [tag="lahe", description="Last auth error."] 
    string(32) mLastAuthError;
};

class FetchUserFirstLastAuthTimeRequest
{
   [tag="uid", description="The user's BlazeId"]
   BlazeId mBlazeId;
};

  
class FetchUserFirstLastAuthTimeResponse
{
   [tag="ufat", default=0, description="the user's first auth time"]
   int64_t mUserFirstAuthTime;
      
   [tag="ulat", default=0, description="the user's last auth time"]
   int64_t mUserLastAuthTime;
};

typedef map<Blaze::ClientType, uint32_t> ConnectedCountsMap;
typedef map<PingSiteAlias, uint32_t> ConnectedCountsByPingSiteMap;
[
    description = "The user manager census data.",
    tdfid = "hash"
]
class UserManagerCensusData  
{      
    [tag="cpcm", description="censusdata for connected player counts for each client type."]  
    ConnectedCountsMap mConnectedPlayerCounts;
    
    [tag="cpcp", description="censusdata for connected player counts for each ping site.", allowref=true]  
    ConnectedCountsByPingSiteMap mConnectedPlayerCountByPingSite;
}; 

class ListAllPermissionsRequest
{
    [tag="ctid", default=0, description="Component Id, if not given, return  permissions of all components."]
    uint16_t mComponentId; 
};

typedef string(64) ComponentName;
typedef Blaze::ComponentName BlazeComponentName; // Need to keep this typedef around for backward compatibility with runtime code using this typedef
typedef list<string(MAX_PERMISSION_LENGTH)> PermissionsList;
typedef map<BlazeComponentName, PermissionsList> PermissionsListMap;

class ListAllPermissionsResponse
{
    [tag="pelm", description="Permission list pair component name."]
    PermissionsListMap mPermissionsByComponent;
};

[description="Enum of user session type"]
enum UserSessionType
{
    [description="A UserSession that has been created after an end-user has successfully authenticated via the available Authentication component's login RPCs."]
    USER_SESSION_NORMAL = 0x0,
    [descroption="A guest UserSession. UserSessions of this type must have an existing USER_SESSION_NORMAL UserSession as a parent."]
    USER_SESSION_GUEST,
    [descroption="A cloned USER_SESSION_NORMAL UserSession intended to be interacted with via commands received from the WAL proxy."]
    USER_SESSION_WAL_CLONE,
    [descroption="A UserSession created via the trustedLogin() RPC.  This UserSession is similar to the USER_SESSION_NORMAL type, except there is no UserInfo associated (other than PersonaName)."]
    USER_SESSION_TRUSTED
};

class UserSessionLoginInfo
{
    [tag="key", description="The SessionKey created by the Blaze server for this session" ]
    string(MAX_SESSION_KEY_LENGTH) mSessionKey;

    [tag="buid", description="The unique BlazeId assigned to the user account associated with this session"]
    BlazeId mBlazeId;

    [tag="uid", description="DEPRECATED (Use PlatformInfo) - The Nucleus account id for the user associated with this session" ]
    AccountId mAccountId;

    [tag="frst", description="True if this is the first time the user has logged on to this Blaze server"]
    bool mIsFirstLogin;

    [tag="1con", description="True if this is the first time the user has logged on to this Blaze server on the Console (not a Web login) & has external data set"]
    bool mIsFirstConsoleLogin;

    [tag="llog", description="provides the data/time this user was last authenticated by this Blaze server"]
    int64_t mLastLoginDateTime;

    [tag="aloc", description="The user's account locale"]
    Locale mAccountLocale;

    [tag="cnty", description="The user's account country"]
    uint32_t mAccountCountry;

    [tag="pid", description="Nucleus personaId"]
    PersonaId mPersonaId;

    [tag="dsnm", description="Persona name"]
    string(MAX_PERSONA_LENGTH) mDisplayName;

    [tag="nasp", description="Persona namespace"]
    PersonaNamespace mPersonaNamespace;

    [tag="xref", default=0, description="DEPRECATED (Use PlatformInfo) - External reference value such as XUID"]
    ExternalId mExtId;

    [tag="plat", default=INVALID, description="DEPRECATED (Use PlatformInfo) - Client platform type"]
    ClientPlatformType mClientPlatform;

    [tag="aids", description="Contains platform ids and current client platform."] 
    PlatformInfo mPlatformInfo;

    [tag="last", description="Last authentication timestamp for persona"]
    uint32_t mLastAuthenticated;

    [tag="cgid", description="The connection group id for users accross a shared conneciton."]
    ObjectId mConnectionGroupObjectId; 

    [tag="ustp", description="The type of user logging in"]
    UserSessionType mUserSessionType;
};

enum UserSessionForcedLogoutType
{
    FORCED_LOGOUTTYPE_INVALID,
    FORCED_LOGOUTTYPE_RELOGIN_REQUIRED,
    FORCED_LOGOUTTYPE_LOGGEDIN_ELSEWHERE,
    FORCED_LOGOUTTYPE_ACCESS_REVOKED
};

[description="Enum of blaze device locality/nucleus connection type."]
enum DeviceLocality
{
    DEVICELOCALITY_UNKNOWN = 0,
    DEVICELOCALITY_LOCAL = 1,
    DEVICELOCALITY_CLOUD = 2
};

class UserSessionLogoutInfo
{
    [tag="bid", description="The unique BlazeId assigned to the user account associated with this session"]
    BlazeId mBlazeId;

    [tag="ustp", description="The type of user logging out"]
    UserSessionType mUserSessionType;

    [tag="flrs", description="If the session is forcefully logged out, indicates the reason.", default=FORCED_LOGOUTTYPE_INVALID]
    UserSessionForcedLogoutType mForcedLogoutReason; 
};

[description="Specifies which users to start audit logging on"]
class EnableUserAuditLoggingRequest
{
    [tag="ulst", description="The BlazeID list of the users"]
    BlazeIdList mBlazeIdList;
};

[description="Specifies which users to turn audit logging off"]
class DisableUserAuditLoggingRequest
{
    [tag="ulst", description="The BlazeID list of the users"]
    BlazeIdList mBlazeIdList;
};

[description="Specifies user to reset geoip data for."]
class ResetUserGeoIPDataRequest
{
    [tag="id", default=INVALID_BLAZE_ID, description="The BlazeID of the user. If INVALID_BLAZE_ID (the default) uses the current user."]
    BlazeId mBlazeId;
};

[trackChanges = true, description="Contains information about a client's state, such as status, mode, etc."]
class ClientState
{
    enum Status
    {
        STATUS_NORMAL,
        STATUS_SUSPENDED,
        STATUS_MAX
    };

    [tag="stat", default=STATUS_NORMAL, description="Client status."]
    Status mStatus;

    enum Mode
    {
        MODE_UNKNOWN,
        MODE_MENU,
        MODE_SINGLE_PLAYER,
        MODE_MULTI_PLAYER,
        MODE_MAX
    };

    [tag="mode", default=MODE_UNKNOWN, description="Client mode."]
    Mode mMode;
};

[description="Specifies, by UserSessionId, the user to get geoip data for. If the supplied BlazeId is valid, it is used to search the database for any location overrides for the user."]
class GetUserGeoIpDataRequest
{
    [tag="uid", description="The User Session Id of the user."]
    UserSessionId mUserSessionId;

    [tag="bid", description="The Blaze Id of the user."]
    BlazeId mBlazeId;
};

class GetUniqueDeviceIdResponse
{
    [tag="udid", description="The unique console id (not MAC)."]
    string(UNIQUE_DEVICE_ID_MAX) mUniqueDeviceId;
};

class GetDeviceLocalityResponse
{
    [tag="dvlo", description="Device Locality: local vs cloud."]
    DeviceLocality mDeviceLocality;
};

class ForceOwnSessionLogoutRequest
{
    [tag="bid", description="The BlazeId to logout."]
    BlazeId mBlazeId;

    [tag="key", description="The SessionKey created by the Blaze server for this session" ]
    string(MAX_SESSION_KEY_LENGTH) mSessionKey;
};

typedef list<uint32_t> ConnectionUserIndexList;
class UpdateLocalUserGroupRequest
{
    [tag="cuil", description="A list of requested connection user indices to be added or removed from the user group."]
    ConnectionUserIndexList mConnUserIndexList;
};

class UpdateLocalUserGroupResponse
{
    [tag="ugid", description="The user group id for local users joined across a shared conneciton."]
    ObjectId mUserGroupObjectId; 

    [tag="cuil", description="A list of requested connection user indices has been added or removed from the user group."]
    ConnectionUserIndexList mConnUserIndexList;
};

class ValidateSessionKeyRequest
{
    [tag="skey", description="The session key to validate"]
    string(MAX_SESSION_KEY_LENGTH) mSessionKey;
};

class SessionInfo
{
    [tag="key", description="The SessionKey created by the Blaze server for this session" ]
    string(MAX_SESSION_KEY_LENGTH) mSessionKey;

    [tag="buid", description="The unique Nucleus persona id assigned to the persona associated with this session"]
    BlazeId mBlazeId;

    [tag="uid", description="The Nucleus account id for the user associated with this session" ]
    AccountId mAccountId;

    [tag="dsnm", description="Persona name"]
    string(MAX_PERSONA_LENGTH) mDisplayName;
};

[ description="Flags used to carry UpdateNetworkInfoRequest options." ]
bitfield UpdateNetworkInfoOpts
{
    [description="If set, only the user's network address is updated."]
    NetworkAddressOnly : 1;

    [description="If set, and if NetworkAddressOnly is not set, only the user's network address and NAT type are updated."] 
    NatInfoOnly : 1;

    [description="If set, and if both NetworkAddressOnly and NatInfoOnly are unset, the request will update qos metrics in addition to updating the user's network info."] 
    UpdateMetrics : 1;
};

// TODO: Proto generation is disabled for NetworkInfo
[description="Used to update a user's network info.", generateProto=false]
class UpdateNetworkInfoRequest
{
    [tag="info", allowref=true] NetworkInfo mNetworkInfo;
    [tag="opts"] UpdateNetworkInfoOpts mOpts;
};

}
