<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project xmlns="schemas/ea/framework3.xsd">

	<property name="xbsx.support-shared-pch" value="true"/>

	<property name="incredibuild.supports.sln" value="true"/>

	<!-- Deprecated, use config-processor instead. Define this property to switch VisualStudio package into 64 bit mode-->
	<property name="package.VisualStudio.64bit" value="true"/>

	<!-- pointer size -->
	<property name="platform-ptrsize" value="64bit"/>
	<!-- registers size -->
	<property name="platform-wordsize" value="64bit"/>

	<property name="default-lib-prefix"     value="" />
	<property name="default-lib-suffix"     value=".lib" />
	<property name="default-dll-suffix"     value=".dll"/>
	<property name="default-exe-suffix"     value=".exe"/>

	<property name="exe-suffix"     value="${exe-suffix.${config-system}??${exe-suffix??${default-exe-suffix}}}"/>
	<property name="lib-prefix"     value="${lib-prefix.${config-system}??${lib-prefix??${default-lib-prefix}}}"/>
	<property name="lib-suffix"     value="${lib-suffix.${config-system}??${lib-suffix??${default-lib-suffix}}}"/>
	<property name="dll-suffix"     value="${dll-suffix.${config-system}??${dll-suffix??${default-dll-suffix}}}"/>

	<!-- some microsoft msbuild task dlls are shippped as 32 bit only and will fail if you use 64-bit msbuild, we have an open ask with microsoft to fix this -->
	<!-- On the build farm we have a workaround to use the microsoft GDK supplied 64bit msbuild tasks since we re-wire the msbuild properties to our non-proxy package we hope this will work out-of-the-box in a future GDK -->	
	<do unless="${package.VisualStudio.use-non-proxy-build-tools??false}">
		<property name="eaconfig.msbuild.use32bit" value="${eaconfig.msbuild.use32bit??true}"/>
	</do>

	<dependent name="VisualStudio"/>
	<dependent name="WindowsSDK"/>

	<!-- clearing cc.usingdir so we don't include the platform.winmd file from WindowsSDK -->
	<property name="cc.usingdirs" />

	<set-config-vs-version/>

	<!-- defining a common property for the msvc compiler version, since the compiler version can be different when using the MSBuildTools package -->
	<property name="eaconfig.msvc.version" value="${package.MSBuildTools.msvc-version}" if="@{PropertyExists('package.MSBuildTools.msvc-version')}"/>
	<!-- when not using MSBuildTools package we can just use the installed visual studio version -->
	<!-- InstalledUpdateVersion is not in all versions of the vs2015 package, so fall back to InstalledVersion in those cases -->
	<property name="eaconfig.msvc.version" value="${package.VisualStudio.InstalledUpdateVersion??${package.VisualStudio.InstalledVersion??}}" unless="@{PropertyExists('eaconfig.msvc.version')}"/>

	<!-- This matches the default XB1 exclusion filter except we remove *.pdb. We do want to deploy .pdbs for callstack resolution -->
	<property name="eaconfig.xbsx.layout-exclusion-filter" value="*.ilk;*.exp;*.lib;*.winmd;*.appxrecipe"/>

	<!-- TODO: Eventually Remove these old legacy properties we still need to set because they are still used by old version of the capilanoSDK -->
	<property name="cc" value="${package.VisualStudio.compiler}"/>
	<property name="as" value="${package.VisualStudio.assembler}"/>
	<property name="lib" value="${package.VisualStudio.archiver}"/>
	<property name="link" value="${package.VisualStudio.linker}"/>

	<!-- Tell the GDK that we'll initialize its modules when we're ready, i.e. in post-combine. This is required because we need to
	     initialize the GDK to get its system libs/includes, but the GDK's utility modules require certain config options that haven't been loaded yet.-->
	<property name="package.GDK.delay-module-load" value="true"/> 
	<dependent name="GDK" />

	<choose>
		<do if="${config-vs-version}==15.0">
			<!-- VS2017 is ABI compatible, so unless we actually get VS2017 specific libs we just use the V2015 libs we have -->
			<property name="vs_dir" value="VS2017" local="true"/>
		</do>
		<do if="${config-vs-version}==16.0">
			<!-- VS2019 is supported by the GDK, but not by the vanilla XDK package -->
			<property name="vs_dir" value="VS2019" local="true"/>
		</do>
		<do>
			<fail message="Unknown version of visual studio: ${config-vs-version}" />
		</do>
	</choose>

	<property name="eaconfig.PlatformSDK.dir" value="${package.GDK.gxdkdir}"/>
	<property name="eaconfig.PlatformSDK.dir.lib" value="${package.GDK.gxdkdir}\gamekit\lib\amd64"/>
	<property name="xbsx_link_librarydirs"  value="${package.GDK.librarydirs}"/>

	<include file="xbsx-vc-buildtools.xml"/>

	<property name="build.rc.program" value="${package.WindowsSDK.tools.rc}"/>
	<property name="build.mt.program" value="${package.WindowsSDK.tools.mt}"/>

	<!-- <build> task properties -->
	<property name="build.pathstyle" value="Windows" />
	<!-- For 64 bit configs on 32 bit platform need to put VC\bin directory in path 
  to have access to cvtres.exe file from linker-->
	<property name="build.env.PATH" value="${package.VisualStudio.appdir}\VC\BIN;${property.value}"/>
	<!-- Always use response files, to avoid overflowing the command-line. -->
	<property name="link.useresponsefile" value="true"/>
	<!-- Always use response files, to avoid overflowing the command-line. -->
	<property name="lib.useresponsefile" value="true"/>

	<property name="cc.std.xbsx.default" value="${cc.std.xbsx.default??c++17}"/>

	<optionset name="config-options-common">
		<option name="debugfastlink" value="on" if="${package.eaconfig.usedebugfastlink??false}"/>
		<option name="disable_comdat_folding" value="on" if="${package.eaconfig.disablecomdatfolding??false}"/>
		<option name="print_link_timings" value="on" if="${package.eaconfig.printlinktime??false}"/>
		<option name="preprocess">
			xbsx-vc-preprocess
		</option>
		<option name="postprocess">
			xbsx-vc-postprocess
		</option>
		<!-- Does not support static libraries anymore. -->
		<option name="multithreadeddynamiclib"              value="on" />
		<option name="buildset.cc.defines">
			${option.value}
			${cc.common-defines}
		</option>
		<option name="buildset.link.libraries">
			${option.value}
			${link.system-libs}
		</option>
		<option name="buildset.cc.system-includedirs">
			${cc.system-includedirs}
		</option>
		<option name="buildset.cc.usingdirs">
			${cc.usingdirs??}
			${eaconfig.PlatformSDK.dir.lib}
			${package.GDK.usingdirs??}
		</option>
		<option name="buildset.as.includedirs">
			${option.value}
			${as.system-includedirs}
		</option>
		<option name="buildset.as.usingdirs">
			${option.value}
			${as.usingdirs??}
			${eaconfig.PlatformSDK.dir.lib}
			${package.GDK.usingdirs??}
		</option>
		<option name="buildset.cc.options">
			${option.value}
			${cc.common-options}
		</option>

		<option name="buildset.cc.workingdir" value="%outputdir%"/>
		<option name="buildset.as.workingdir" value="%outputdir%"/>

		<option name="buildset.link.options">
			${option.value}
			${link.common-options}
		</option>
		<option name="buildset.link.librarydirs">
			${link.system-librarydirs}
		</option>
	</optionset>

	<property name="windowsruntime.cc.forceusing-assemblies" local="true"/>

	<optionset name="config-options-program">
		<option name="pcconsole" value="off" />
		<option name="windowsruntime" value="on" unless="${gdk.enabled??false}"/>
		<option name="buildset.tasks" value="asm cc link" />
		<option name="postprocess">
			xbsx-vc-set-pull-deployment
		</option>
		<option name="buildset.cc.sdk-forceusing-assemblies">
			${option.value}
			${windowsruntime.cc.forceusing-assemblies}
		</option>

		<!-- This deviates from the normal exe output pattern of %outputdir%/%outputname%${exe-suffix}. The extra %outputname% is necessary
    because there are additional packaging files that needs to go along side .exe (such as appmanifest). If a package has multiple exe
    modules these packaging files will stomp each other if not in a per module folder -->
		<option name="linkoutputname" value="%outputdir%/%outputname%/%outputname%${exe-suffix}" />

		<option name="link.postlink.commandline" >
			-nologo
			-outputresource:"%outputdir%\%outputname%${exe-suffix};1"
		</option>
	</optionset>

	<optionset name="config-options-dynamiclibrary" >
		<option name="generatedll"              value="on" />
		<option name="multithreadeddynamiclib"  value="on" />
		<option name="buildset.name"            value="DynamicLibrary" />
		<option name="buildset.tasks"           value="asm cc link" />
		<option name="postprocess">
			xbsx-vc-set-pull-deployment
		</option>
		<option name="buildset.cc.defines"      value="EA_DLL" />

		<option name="buildset.link.options">
			-implib:"%outputlibdir%/%outputname%.lib"  <!-- name of import library -->
		</option>
		<option name="linkoutputpdbname" value="%outputdir%\%outputname%.pdb"/>
		<option name="linkoutputname"    value="%outputdir%\%outputname%${dll-suffix}"/>
		<option name="impliboutputname"  value="%outputlibdir%\%outputname%.lib"/>
	</optionset>

	<property name="visualstudio.hide.unsupported.csharp" value="${visualstudio.hide.unsupported.csharp??true}"/>

	<optionset name="config-options-csharplibrary">
		<option name="buildset.name"            value="CSharpLibrary" />
		<option name="buildset.tasks"           value="csc" />
		<option name="buildset.csc.target"      value="library" />
	</optionset>

	<optionset name="config-options-csharpprogram">
		<option name="buildset.name"            value="CSharpProgram" />
		<option name="buildset.tasks"           value="csc" />
		<option name="buildset.csc.target"      value="exe" />
	</optionset>

	<optionset name="config-options-csharpwindowsprogram">
		<option name="buildset.name"            value="CSharpWindowsProgram" />
		<option name="buildset.tasks"           value="csc" />
		<option name="buildset.csc.target"      value="winexe" />
	</optionset>

	<optionset name="sdk.portable-gen-data">
		<option name="DurangoXDK" value="package.GDK.appdir"/>
	</optionset>

	<property name="platform.sdklibs.regular">
		${package.GDK.regularlib}
	</property>
	<property name="platform.sdklibs.debug">
		${package.GDK.debuglib}
	</property>

	<fileset name="platform.sdklibs.network" fromfileset="package.GDK.networklibs"/>

	<!-- All options from these properties were appended to the buildoptionsets. Reset properties -->
	<property name="cc.includedirs"/>
	<property name="cc.usingdirs"/>
	<property name="link.librarydirs"/>
	<property name="link.options"/>
	<property name="link.libraries"/>
	<property name="lib.options"/>

	<!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
	<!-- +-+-  Visual Studio solution generation related data       -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
	<!-- +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- -->
	<property name="visualstudio.platform.name" value="Gaming.Xbox.Scarlett.x64"/>

	<property name="platform.name.xbsx" value="Xbsx"/>

	<do if="${package.EATestPrintServer.EnableTcpSocketExtensions??false}">
		<!-- EATestPrintServer may require additional socket extensions -->
		<dependent name="EATestPrintServer" if="@{IsPackageInMasterconfig('EATestPrintServer')}"/>
	</do>

	<optionset name="image-visual-studio-tool">
		<option name="visual-studio-tool" value="Image"/>
		<option name="visual-studio-tool-excludedfrombuild-respected" value="false"/>
	</optionset>

	<optionset name="resw-visual-studio-tool">
		<option name="visual-studio-tool" value="PRIResource"/>
		<option name="visual-studio-tool-excludedfrombuild-respected" value="false"/>
	</optionset>

	<optionset name="appxmanifest-visual-studio-tool">
		<option name="visual-studio-tool" value="AppxManifest"/>
		<option name="visual-studio-tool-excludedfrombuild-respected" value="false"/>
	</optionset>

	<optionset name="config-build-layout-entrypoint-common">
		<option name="application" value="%output%"/>
	</optionset>

	<createtask name="AddNetworkLibsToModule" overload="true">
		<parameters>
			<option name="module" value="Required"/>
			<!-- Need to pass in the group name as well.  That is pass in <group> or <group>.<module_name> for this variable. -->
		</parameters>
		<code>
			<property name="debugcode.enabled" value="false"/>
			<property name="debugcode.enabled" value="true" if="@{OptionSetGetValue('config-options-common', 'usedebuglibs')} == 'on'"/>

			<property name="libsuffix" value=""/>
			<property name="libsuffix" value="d" if="${debugcode.enabled}==true"/>

			<dependent name="GDK" />
			<fileset name="${AddNetworkLibsToModule.module}.libs" append="true" fromfileset="package.GDK.networklibs"/>

		</code>
	</createtask>

	<property name="eaconfig-run-bindir" value="${package.GDK.appdir}\bin" />
</project>
