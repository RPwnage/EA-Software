[headername="nucleusidentity/tdf/nucleusidentity_base.h"]
#include "nucleusidentity/gen/nucleusidentity_base.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
namespace NucleusConnect
{

class ErrorResponse
{
    [tag="err", description="The error string"]
    string(64) mError;
    
    [tag="desc", description="The error description", nameoverride="error_description"]
    string(128) mErrorDescription;

    [tag="errc", description="The error code.", default=0]
    int64_t mCode;
};

class GetAccessTokenRequest
{
    [tag="type", description="The type of token being requested", default=""]
    string(64) mGrantType;

    [tag="code", description="Used with 'authorization_code' grant type.  The autorization code provided by Nucleus.", default=""]
    string(-1) mCode;

    [tag="ruri", description="Used with 'authorization_code' grant type.  The redirect uri.", default=""]
    string(128) mRedirectUri;

    [tag="rtok", description="Used with 'refresh_token' grant type.  The refresh token issued to the client.", default=""]
    string(-1) mRefreshToken;

    [tag="pidd", description="Used with 'client_credentials' grant type.  The pid of the user to request access token for.", default=0]
    int64_t mPidId;

    [tag="name", description="Used with 'password' grant type.  The email address of the user.", default=""]
    string(64) mEmail;

    [tag="pass", description="Used with 'password' grant type.  The password of the user.", default="", printFormat="censor"]
    string(64) mPassword;

    [tag="atok", description="Deprecated. Used with 'exchange' grant type. The access token used to exchange for another access token for this client.", default=""]
    string(-1) mCurrentAccessToken;

    [tag="clid", description="The client id.", default=""]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;
    
    [tag="clsc", description="The client secret of the calling application, as registered with Nucleus", default=""]
    string(64) mClientSecret;

    [tag="scop", description="The requested scope for the access token", default=""]
    string(256) mScope;

    [tag="salt", description="The salt of the refresh token", default=""]
    string(256) mSalt;

    [tag="addr", description="The client's ipAddress to pass to Nucleus"]
    string(32) mIpAddress;

    [tag="rftm", description="Indicates if the Nucleus service should include the refresh token expiry time", default="true"]
    string(32) mRefreshTime;

    [tag="relt", description="The server's release type (TEST, CERT, PROD, etc.). This is only used for express login as normally this value is sent from the client when fetching an auth code."]
    string(32) mReleaseType;

    [tag="ttyp", description="The token format we are requesting.", default=""]
    string(32) mTokenFormat;
};

class GetAccessTokenResponse
{
    [tag="atok", description="Nucleus 2.0 Access token", default="", nameoverride="access_token"]
    string(-1) mAccessToken;

    [tag="type", description="Access token type", default="", nameoverride="token_type"]
    string(64) mTokenType;

    [tag="expr", description="Access token expiry in seconds", default=0, nameoverride="expires_in"]
    int64_t mExpiresIn;

    [tag="rtok", description="Refresh token", default="", nameoverride="refresh_token"]
    string(-1) mRefreshToken;

    [tag="rexp", description="Refresh token expiry in seconds", default=0, nameoverride="refresh_token_expires_in"]
    int64_t mRefreshExpiresIn;
};

class GetTokenInfoRequest
{
    [tag="tokn", description="The Nucleus access token."]
    string(-1) mAccessToken;

    [tag="addr", description="The client's ipAddress to pass to Nucleus."]
    string(32) mIpAddress;

    [tag="uage", description="Indicates if the Nucleus service should respond with underage account included", default="true"]
    string(32) mIncludeUnderage;

    [tag="deid", description="Indicates if the Nucleus service should respond with device id included", default="true"]
    string(64) mIncludeDeviceid;

    [tag="geo", description="Whether to include IP Geo location info in the response", default=true]
    bool mIncludeGeoIp;
    
    [tag="stpr", description="Whether to include the StopProcess flag on the account in the response", default=true]
    bool mIncludeStopProcess;
    
    [tag="cenv", description="Indicates if the Nucleus service should respond with console environment (xone: sandbox id)  included", default="true"]
    string(64) mIncludeConsoleenv;
    
    [tag="clid", description="The client id of the calling application, as registered with Nucleus", default=""]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;

    [tag="auth", description="Whether to include auth source in the response", default=true]
    bool mIncludeAuthSource;

    [tag="pltt", description="Whether to include the platform type in the response", default=true]
    bool mIncludePlatformType;
};

class GetTokenInfoResponse
{
    [tag="clid", description="The client id of this access token.", default="", nameoverride="client_id"]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;

    [tag="scop", description="The set of scopes of this access token.", default=""]
    string(64) mScope;

    [tag="expi", description="The lifetime in seconds of the access token.", default=0, nameoverride="expires_in"]
    int64_t mExpiresIn;

    [tag="ppid", description="The platform identity id of this access token.", default="", nameoverride="pid_id"]
    string(64) mPidId;

    [tag="pidt", description="The platform identity type of this access token. Possible values include NUCLEUS, FACEBOOK, XBOX, WII, PS3.", default="", nameoverride="pid_type"]
    string(64) mPidType;

    [tag="uid", description="The default nucleus platform identity id of this access token. It's called user id internally in nucleus.", default="", nameoverride="user_id"]
    string(64) mAccountId;

    [tag="pid", description="The persona id of this access token if authenticated from the specific persona", default=0, nameoverride="persona_id"]
    int64_t mPersonaId;

    [tag="dvid", description="The device id of this access token.", default="", nameoverride="device_id"]
    string(UNIQUE_DEVICE_ID_MAX) mDeviceId;

    [tag="sbid", description="The console environment (xone: sandbox id) of this access token.", default="", nameoverride="console_env"]
    string(64) mConsoleEnv;

    [tag="stpr", description="The StopProcessing flag currently set for on the account.", default=""]
    string(64) mStopProcess;

    [tag="uage", description="The is_underage flag on the account as determined by Nucleus.", default=false, nameoverride="is_underage"]
    bool mIsUnderage;

    [tag="geo", description="IP Geo location info."]
    NucleusIdentity::IpGeoLocation mIpGeoLocation;

    [tag="auth", description="The authentication source for which the token was issued.", default="", nameoverride="authentication_source"]
    string(-1) mAuthSource;

    [tag="cont", description="The platform type of this access token.", default="", nameoverride="connection_type"]
    string(64) mConnectionType;
};

class GetAuthCodeRequest
{
    [tag="tokn", description="The Nucleus access token to use for authentication", nameoverride="access_token"]
    string(-1) mAccessToken;

    [tag="clid", description="The client id of this access token.", default="", nameoverride="client_id"]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;

    [tag="rtyp", description="The response type. This should be 'code'.", nameoverride="response_type"]
    string(64) mResponseType;

    [tag = "ruri", description = "The redirect uri.", default = ""]
    string(128) mRedirectUri;

    [tag="pnam", description="The persona name to associate with the auth code", default="", nameoverride="persona_display_name"]
    string(64) mPersonaName;

    [tag="nspc", description="The persona namespace of the persona", default="", nameoverride="persona_namespace"]
    string(64) mPersonaNamespace;

    [tag="relt", description="The server's release type (TEST, CERT, PROD, etc.). This is only used for express login as normally this value is sent from the client when fetching an auth code."]
    string(32) mReleaseType;
};

class GetAuthCodeResponse
{
    [tag="code", description="The Nucleus auth code"]
    string(-1) mAuthCode;
};

//uif in jwt token payload, what blaze considers account is considered as user by Nucleus
class JwtAccountInfo
{
    [tag = "udg", description = "Underage flag", default = false, nameoverride = "udg"]
    bool mIsUnderage;

    [tag = "cty", description = "User country", default = "", nameoverride = "cty"]
    string(128) mCountry;

    [tag = "lan", description = "User language", default = "", nameoverride = "lan"]
    string(128) mLanguage;

    [tag = "sta", description = "User status", default = "", nameoverride = "sta"]
    string(64) mStatus;

    [tag = "ano", description = "Is user anonymous", default = false, nameoverride = "ano"]
    bool mIsAnonymous;
};

class JwtPersonaInfo
{
    [tag = "id", description = "Persona ID", default = 0, nameoverride = "id"]
    int64_t mPersonaId;

    [tag = "ns", description = "Namespace", default = "", nameoverride = "ns"]
    string(64) mNamespace;

    [tag = "dis", description = "Display name", default = "", nameoverride = "dis"]
    string(-1) mDisplayName;

    [tag = "nic", description = "Nickname", default = "", nameoverride = "nic"]
    string(-1) mNickname;

    [tag = "anid", description = "Anonymous id", default = "", nameoverride = "anoid"]
    string(-1) mAnonymousId;

    [tag = "extr", description = "External reference value", default = "", nameoverride = "extref"]
    string(-1) mExternalRefValue;
};

typedef list<JwtPersonaInfo> JwtPersonaInfoList;

class JwtIpGeoLocation
{
    [tag = "ip", description = "IP address", default = "", nameoverride = "ip"]
    string(128) mIpAddress;

    [tag = "cty", description = "Country", default = "", nameoverride = "cty"]
    string(128) mCountry;

    [tag = "reg", description = "Region", default = "", nameoverride = "reg"]
    string(128) mRegion;

    [tag = "cit", description = "City", default = "", nameoverride = "cit"]
    string(128) mCity;

    [tag = "lat", description = "Latitude", default = "", nameoverride = "lat"]
    string(32) mLatitude;

    [tag = "lgt", description = "Longitude", default = "", nameoverride = "lgt"]
    string(32) mLongitude;

    [tag = "tz", description = "Timezone", default = "", nameoverride = "tz"]
    string(128) mTimeZone;

    [tag = "isp", description = "ISP provider", default = "", nameoverride = "isp"]
    string(256) mIspProvider;
};

class JwtNexusClaims
{
    [tag = "cli", description = "Client ID", default = "", nameoverride = "cli"]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;

    [tag = "sco", description = "Scopes", default = "", nameoverride = "sco"]
    string(-1) mScopes;

    [tag = "pid", description = "Pid ID", default = "", nameoverride = "pid"]
    string(64) mPidId;

    [tag = "pty", description = "Pid Type", default = "", nameoverride = "pty"]
    string(32) mPidType;

    [tag = "uid", description = "User ID", default = "", nameoverride = "uid"]
    string(64) mUserId;

    [tag = "psid", description = "Persona ID", default = 0, nameoverride = "psid"]
    int64_t mPersonaId;

    [tag = "csev", description = "Console environment", default = "", nameoverride = "csev"]
    string(64) mConsoleEnv;

    [tag = "dvid", description = "Device ID", default = "", nameoverride = "dvid"]
    string(UNIQUE_DEVICE_ID_MAX) mDeviceId;

    [tag = "ptyp", description = "Platform type", default = "", nameoverride = "pltyp"]
    string(32) mPlatformType;

    [tag = "stps", description = "Stop process", default = "", nameoverride = "stps"]
    string(32) mStopProcess;

    [tag = "udg", description = "Underage flag", default = false, nameoverride = "udg"]
    bool mIsUnderage;

    [tag = "xprv", description = "Xbox prv. Only available on XBOX", default = "", nameoverride = "xprv"]
    string(-1) mXboxPrv;

    [tag = "xcty", description = "Xbox country. Only available on XBOX", default = "", nameoverride = "xcty"]
    string(-1) mXboxCountry;

    [tag = "scv", description = "Sony S2S client id version. Only available on PS", default = "", nameoverride = "scv"]
    string(-1) mSonyS2SClientIdVersion;

    [tag = "nxm", description = "Nintendo online member. Only available on Nintendo Switch", default = "", nameoverride = "nxm"]
    string(-1) mNintendoOnlineMember;

    [tag = "gst", description = "Is guest mode", default = "", nameoverride = "gst"]
    string(32) mIsGuestMode;

    [tag = "puid", description = "Proxy user id", default = "", nameoverride = "pxyuid"]
    string(-1) mProxyUserId;

    [tag = "cnty", description = "Connection type", default = "", nameoverride = "cnty"]
    string(32) mConnectionType;

    [tag = "auth", description = "Authentication source", default = "", nameoverride = "ausrc"]
    string(-1) mAuthSource;

    [tag = "geo", description = "Ip geo location data", nameoverride = "ipgeo"]
    JwtIpGeoLocation mIpGeoLocation;

    [tag = "uif", description = "Basic user info", nameoverride = "uif"]
    JwtAccountInfo mAccountInfo;

    [tag = "psif", description = "List of basic persona info", nameoverride = "psif"]
    JwtPersonaInfoList mPersonaInfoList;
};

class JwtPayloadInfo
{
    [tag = "iss", description = "Issuer of the token", default = "", nameoverride = "iss"]
    string(-1) mIssuer;

    [tag = "jti", description = "Unique id of the token", default = "", nameoverride = "jti"]
    string(-1) mTokenId;

    [tag = "azp", description = "Authorization party, Client ID", default = "", nameoverride = "azp"]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mAuthParty;

    [tag = "iat", description = "Token issuer time (seconds)", default = 0, nameoverride = "iat"]
    int64_t mIssuerTime;

    [tag = "exp", description = "Token expiration time (seconds)", default = 0, nameoverride = "exp"]
    int64_t mExpirationTime;

    [tag = "ver", description = "Token version", default = 0, nameoverride = "ver"]
    int16_t mVersion;

    [tag = "nxs", description = "Nexus related claims", nameoverride = "nexus"]
    JwtNexusClaims mNexusClaims;
};

class JwtHeaderInfo
{
    [tag = "alg", description = "The algorithm used by Nucleus to sign JWT token", default = "", nameoverride = "alg"]
    string(32) mAlgorithm;

    [tag = "kid", description = "Key ID, a ramdom UUID", default = "", nameoverride = "kid"]
    string(-1) mKeyId;
};

class JwtPublicKeyInfo
{
    [tag = "alg", description = "The algorithm used by Nucleus to sign JWT token", default = "", nameoverride = "alg"]
    string(32) mAlgorithm;

    [tag = "use", description = "The usage of the key", default = "", nameoverride = "use"]
    string(32) mUsage;

    [tag = "kty", description = "Key type", default = "", nameoverride = "kty"]
    string(32) mKeyType;

    [tag = "kid", description = "Key ID, a ramdom UUID", default = "", nameoverride = "kid"]
    string(-1) mKeyId;

    [tag = "e", description = "Base64 encoded public exponent of the RSA public key", default = "", nameoverride = "e"]
    string(-1) mExponent;

    [tag = "n", description = "Base64 encoded modulus of the RSA public key", default = "", nameoverride = "n"]
    string(-1) mModulus;
};

typedef list<JwtPublicKeyInfo> JwtPublicKeyInfoList;

class GetJwtPublicKeyInfoResponse
{
    [tag = "keys", description = "List of Json Web Keys which are the public key info for JWT signature verification", nameoverride = "keys"]
    JwtPublicKeyInfoList mJwtPublicKeyInfoList;
};

} // namepsace NucleusConnect
} // namespace Blaze
