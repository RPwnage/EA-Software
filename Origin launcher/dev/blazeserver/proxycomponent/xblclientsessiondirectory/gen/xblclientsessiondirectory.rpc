[ headername="xblclientsessiondirectory/tdf/xblclientsessiondirectory.h" ]
#include "xblclientsessiondirectory/gen/xblclientsessiondirectory.tdf"


namespace Blaze
{
namespace XBLServices
{

[
    id = core/1026,
    description = "Proxy component used to define xbl client session directory api.  Note that client, actually means using server authentication",
    details = "xbl client session directory",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]
component XBLClientSessionDirectory
{
    errors
    {
        [ description = "Exernal session authentication error, possibly due to invalid/expired token" ]
        XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED = 1;
        [ description = "The specified scid, or session template was invalid, or the service config may not configured for sessions." ]
        XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND = 2; //http 404
        [ description = "Requested service config or operation cannot be accessed. May be due to caller's account not having access to sandbox, a certificate error, client title id not having access to scid, invalid attempt to access a private session by non-member, etc." ]
        XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN = 3; //http 403
        [ description = "Invalid or malformed request parameters. Invalid parameters may be caused by mismatched contract version to external session parameters sent by blaze version's code, or a badly configured session template." ]
        XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST = 4; //http 400
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE = 5; //http 503
        [ description = "The external session service call failed due to possible bad gateway." ]
        XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY = 6; //http 502
        [ description = "The external session service had an unspecified internal error. Check with Microsoft for potential issues." ]
        XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR = 7; //http 500
        [ description = "The external session was not found (for get), or got removed (for join/leave)." ]
        XBLCLIENTSESSIONDIRECTORY_NO_CONTENT = 8; //http 204
    }

    slave
    {
        methods
        {
            [
                id = 1,
                description = "Remove players from a session",
                details = "Remove one or more players from a multiplayer session",
                requires_authentication = false,
                client_export = false,
                errortype = MultiplayerSessionErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "x-sim-outage"           = "header.simOutage",
                        "x-xbl-contract-version" = "header.contractVersion",
                        "X-Xbl-OnBehalfOf-Users" = "header.onBehalfOfUsers"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            MultiplayerSessionResponse putMultiplayerSessionLeaveGroup(PutMultiplayerSessionLeaveGroupRequest);

            [
                id = 2,
                description = "Get a multiplayer a session",
                details = "Get info on a multiplayer session",
                requires_authentication = false,
                client_export = false,
                errortype = MultiplayerSessionErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_NO_CONTENT, XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "x-sim-outage"           = "header.simOutage",
                        "X-Xbl-OnBehalfOf-Users" = "header.onBehalfOfUsers"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        204 = XBLCLIENTSESSIONDIRECTORY_NO_CONTENT,
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            MultiplayerSessionResponse getMultiplayerSession(GetMultiplayerSessionRequest);

            [
                id = 3,
                description = "Update properties of a session",
                details = "Update properties of a multiplayer session",
                requires_authentication = false,
                client_export = false,
                errortype = MultiplayerSessionErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR},
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}/sessions/{sessionName}",
                    method = "PUT",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "x-sim-outage"           = "header.simOutage",
                        "X-Xbl-OnBehalfOf-Users" = "header.onBehalfOfUsers"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            MultiplayerSessionResponse putMultiplayerSessionUpdate(PutMultiplayerSessionUpdateRequest);

            [
                id = 4,
                description = "Get the session template",
                details = "Get the multiplayer session template configuration",
                requires_authentication = false,
                client_export = false,
                errortype = MultiplayerSessionErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessiontemplates/{sessionTemplateName}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            MultiplayerSessionTemplateResponse getMultiplayerSessionTemplate(GetMultiplayerSessionTemplateRequest);

            [
                id = 5,
                description = "Retrieve info about user's primary session",
                details = "Retrieve info about the user's current 'activity' multiplayer session",
                requires_authentication = false,
                client_export = false,
                errortype = HandlesErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "handles/query?include=relatedInfo",
                    method = "POST",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion"
                    },
                    status_code_errors = {
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    requestPayloadMember = "body"
                }
            ]
            PostHandlesGetActivityResponse postHandlesGetActivity(PostHandlesGetActivityRequest);
            
            [
                id = 6,
                description = "Get a user's multiplayer sessions",
                details = "Get all multiplayer sessions for the specified xuid",
                requires_authentication = false,
                client_export = false,
                errortype = MultiplayerSessionErrorResponse,
                errors = { XBLCLIENTSESSIONDIRECTORY_NO_CONTENT, XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST, XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED, XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN, XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND, XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE, XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY, XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "serviceconfigs/{scid}/sessions?xuid={xuid}",
                    method = "GET",
                    custom_request_headers = {
                        "x-xbl-contract-version" = "header.contractVersion",
                        "x-sim-outage"           = "header.simOutage",
                        "X-Xbl-OnBehalfOf-Users" = "header.onBehalfOfUsers"
                    },
                    custom_error_headers = {
                        "Retry-After" = "retryAfter"
                    },
                    status_code_errors = {
                        204 = XBLCLIENTSESSIONDIRECTORY_NO_CONTENT,
                        400 = XBLCLIENTSESSIONDIRECTORY_BAD_REQUEST,
                        401 = XBLCLIENTSESSIONDIRECTORY_AUTHENTICATION_REQUIRED,
                        403 = XBLCLIENTSESSIONDIRECTORY_ACCESS_FORBIDDEN,
                        404 = XBLCLIENTSESSIONDIRECTORY_RESOURCE_NOT_FOUND,
                        503 = XBLCLIENTSESSIONDIRECTORY_SERVICE_UNAVAILABLE,
                        500 = XBLCLIENTSESSIONDIRECTORY_SERVICE_INTERNAL_ERROR,
                        502 = XBLCLIENTSESSIONDIRECTORY_BAD_GATEWAY
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            GetMultiplayerSessionsResponse getMultiplayerSessionsForUser(GetMultiplayerSessionsForUserRequest);
        }
    }
}


}
}
