[ headername="secretvault/tdf/secretvault.h" ]
#include "secretvault/gen/secretvault.tdf"

namespace Blaze
{
namespace SecretVault
{

[
    id = core/1035,
    description = "Component used for access to the Hashicorp Vault instance.",
    details = "Vault supports RESTful APIs for communicating with the Hashicorp Vault instance.",
    proxyOnly = true,
    http = {
        apiVersion = "",
        payloadEncoderSubType = "NORMAL"
    }
]
component SecretVault
{
    errors
    {
        [description = "Invalid request, missing or invalid data."]
        SECRETVAULT_ERR_INVALID_REQUEST = 1;
        [description = "Forbidden, your authentication details are either incorrect or you don't have access to this feature."]
        SECRETVAULT_ERR_FORBIDDEN = 2;
        [description = "Invalid path. This can both mean that the path truly doesn't exist or that you don't have permission to view a specific path. We use 404 in some cases to avoid state leakage."]
        SECRETVAULT_ERR_INVALID_PATH = 4;
        [description = "Rate limit exceeded. Try again after waiting some period of time."]
        SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED = 5;
        [description = "Internal server error. An internal error has occurred, try again later. If the error persists, report a bug."]
        SECRETVAULT_ERR_INTERNAL = 6;
        [description = "The secret vault is down for maintenance or is currently sealed. Try again later."]
        SECRETVAULT_ERR_SEALED = 7;
    }
    slave 
    {
        methods
        {
            [
                id = 1,
                description = "Reads a secret from the secret vault.",
                details = "Reads a secret from the secret vault.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/{path}",
                    method = "GET",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Token" = "vaultToken",
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = false
                }
            ]
            SecretVaultSecret read(SecretVaultReadRequest);

            [
                id = 2,
                description = "Renews a lease with the secret vault.",
                details = "Renews a lease with the secret vault.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/sys/leases/renew",
                    method = "PUT",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Token" = "vaultToken",
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = true,
                    requestPayloadMember = "requestBody"
                }
            ]
            RenewLeaseResponse renewLease(SecretVaultRenewLeaseRequest);
            
            [
                id = 3,
                description = "Renews a token with the secret vault.",
                details = "Renews a token with the secret vault.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/auth/token/renew-self",
                    method = "POST",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Token" = "vaultToken",
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = true,
                    requestPayloadMember = "requestBody"
                }
            ]
            RenewTokenResponse renewToken(SecretVaultRenewTokenRequest);

            [
                id = 4,
                description = "Authenticate with secret vault.",
                details = "Uses the Approle Vault authentication method.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/{path}/login",
                    method = "POST",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = true,
                    requestPayloadMember = "requestBody"
                }
            ]
            ApproleLoginResponse approleLogin(SecretVaultApproleLoginRequest);

            [
                id = 5,
                description = "Reads a secret from the secret vault kv2 engine.",
                details = "Reads a secret from the secret vault kv2 engine.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/{path}",
                    method = "GET",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Token" = "vaultToken",
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = false
                }
            ]
            SecretVaultKv2Secret kv2Read(SecretVaultReadRequest);

            [
                id = 6,
                description = "Unwrap a wrapped secret id.",
                details = "Note that while Vault allows for wrapping many different calls, Blaze will only use unwrapping to extract a secret id.",
                errors = {
                    SECRETVAULT_ERR_INVALID_REQUEST, 
                    SECRETVAULT_ERR_FORBIDDEN, 
                    SECRETVAULT_ERR_INVALID_PATH, 
                    SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED, 
                    SECRETVAULT_ERR_INTERNAL, 
                    SECRETVAULT_ERR_SEALED
                },
                requires_authentication = false,
                client_export = false,
                errortype = SecretVaultErrorResponse,
                http = {
                    resource = "/v1/sys/wrapping/unwrap",
                    method = "POST",
                    contentType = "application/json",
                    custom_request_headers = { 
                        "X-Vault-Token" = "vaultToken",
                        "X-Vault-Namespace" = "vaultNamespace"
                    },
                    status_code_errors = {
                        400 = SECRETVAULT_ERR_INVALID_REQUEST,
                        403 = SECRETVAULT_ERR_FORBIDDEN,
                        404 = SECRETVAULT_ERR_INVALID_PATH,
                        429 = SECRETVAULT_ERR_RATE_LIMIT_EXCEEDED,
                        500 = SECRETVAULT_ERR_INTERNAL,
                        503 = SECRETVAULT_ERR_SEALED
                    },
                    addEncodedPayload = false
                }
            ]
            SecretVaultSecretIdResponse unwrapSecretId(SecretVaultUnwrapRequest);
        }
    }
}

} // namespace SecretVault
} // namespace Blaze
