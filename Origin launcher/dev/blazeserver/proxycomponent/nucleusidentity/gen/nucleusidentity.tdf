[headername="nucleusidentity/tdf/nucleusidentity_base.h"]
#include "nucleusidentity/gen/nucleusidentity_base.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
namespace NucleusIdentity
{

class EntitlementInfo
{
    [tag="eid", description="The entitlement's ID", default=0]
    uint64_t mEntitlementId;

    [tag="duri", description="The URI of the device to which this entitlement is applied", default=""]
    string(64) mDeviceUri;

    [tag="esrc", description="The entitlement's source", default=""]
    string(64) mEntitlementSource;

    [tag="etag", description="The entitlement's tag", default=""]
    string(64) mEntitlementTag;

    [tag="etyp", description="The type of entitlement", default=""]
    string(64) mEntitlementType;

    [tag="grnt", description="The grant date for the entitlement", default=""]
    string(64) mGrantDate;

    [tag="gnam", description="The entitlement's group name", default=""]
    string(64) mGroupName;

    [tag="cycl", description="Whether the entitlement has a managed lifecycle", default=false]
    bool mManagedLifecycle;

    [tag="pcat", description="The entitlement's project catalog", default=""]
    string(64) mProductCatalog;

    [tag="pdid", description="The entitlement's productId", default=""]
    string(64) mProductId;

    [tag="pjid", description="The entitlement's projectId", default=""]
    string(64) mProjectId;

    [tag="reas", description="The reason for the entitlement's status", default=""]
    string(32) mStatusReasonCode;

    [tag="stat", description="The entitlement's status", default=""]
    string(64) mStatus;

    [tag="term", description="The termination date for the entitlement", default=""]
    string(64) mTerminationDate;

    [tag="ucnt", description="The new entitlement use count", default=0]
    uint64_t mUseCount;

    [tag="cons", description="Whether the entitlement is consumable", default=false]
    bool mIsConsumable;
    
    [tag="puri", description="The entitlement owner's URI", default=""]
    string(64) mPidUri;

    [tag="perm", description="The Origin permissions of the entitlement", default=0]
    uint32_t mOriginPermissions;

    [tag="vers", description="The entitlement version", default=0]
    uint32_t mVersion;
};
typedef list<EntitlementInfo> EntitlementInfoList;

[trackChanges = true]
class UpsertEntitlementInfo
{
    [tag="pdid", description="The entitlement's productId", default=""]
    string(64) mProductId;

    [tag="pcat", description="The entitlement's project catalog", default=""]
    string(64) mProductCatalog;

    [tag="etag", description="The entitlement's tag", default=""]
    string(64) mEntitlementTag;

    [tag="stat", description="The entitlement's status", default=""]
    string(64) mStatus;

    [tag="reas", description="The reason for the entitlement's status", default=""]
    string(32) mStatusReasonCode;

    [tag="ucnt", description="The new entitlement use count", default=0]
    uint64_t mUseCount;

    [tag="grnt", description="The grant date for the entitlement", default=""]
    string(64) mGrantDate;

    [tag="term", description="The termination date for the entitlement", default=""]
    string(64) mTerminationDate;

    [tag="cycl", description="Whether the entitlement has a managed lifecycle", default=false]
    bool mManagedLifecycle;

    [tag="gnam", description="The entitlement's group name", default=""]
    string(64) mGroupName;

    [tag="esrc", description="The entitlement's source", default=""]
    string(64) mEntitlementSource;

    [tag="etyp", description="The type of entitlement", default=""]
    string(64) mEntitlementType;

    [tag="pjid", description="The entitlement's projectId", default=""]
    string(64) mProjectId;

    [tag="dvid", description="The device Id of the device to which this entitlement is to be applied", default=0]
    uint64_t mDeviceId;

    [tag="perm", description="The Origin permissions of the entitlement", default=0]
    uint32_t mOriginPermissions;

    [tag="vers", description="The entitlement version", default=0]
    uint32_t mVersion;
};

class UpdateEntitlementRequest
{
    [tag="pid", description="The PID of the entitlement owner", default=0]
    uint64_t mPid;

    [tag="eid", description="The entitlement's unique ID", default=0]
    int64_t mEntitlementId;

    [tag="body", description="The request body (info with which to update the entitlement)"]
    UpsertEntitlementInfo mEntitlementInfo;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class PostEntitlementRequest
{
    [tag="pid", description="The PID of the entitlement owner", default=0]
    uint64_t mPid;

    [tag="body", description="The request body (info with which to update the entitlement)"]
    UpsertEntitlementInfo mEntitlementInfo;
    
    [tag="rtyp", description="The server's configured release type. Nucleus requires this for their PIN events."]
    string(64) mReleaseType;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class UpsertEntitlementResponse
{
    [tag="euri", description="The URI of the newly created entitlement", default=""]
    string(64) mEntitlementUri;
};

class PostEntitlementPersonaLinkRequest
{
    [tag="eid", description="The entitlement's unique ID", default=0]
    int64_t mEntitlementId;

    [tag="peid", description="The persona ID to link to", default=0]
    uint64_t mPersonaId;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class PostEntitlementPersonaLinkResponse
{
    [tag="eapu", description="The URI of the persona entitlement link", default=""]
    string(64) mEntAuthPersonaUri;
};

[trackChanges = true]
class PersonaInfo
{
    [tag="pid", description="The persona identifier", default=0]
    int64_t mPersonaId;

    [tag="ppid", description="The identifier of the user the persona belongs to", default=0]
    int64_t mPidId;

    [tag="dnam", description="The unique persona name", default=""]
    string(64) mDisplayName;

    [tag="name", description="The normalized persona name (used for uniqueness validation)", default=""]
    string(64) mName;

    [tag="nick", description="The non-unique persona name (for display purposes).", default=""]
    string(64) mNickName;

    [tag="nmsp", description="The identifier of the namespace the persona is in", default=""]
    string(64) mNamespaceName;

    [tag="ivis", description="This is a Namespace property. Indicates whether the persona should be visible in the namespace it belongs to.", default=false]
    bool mIsVisible;

    [tag="stat", description="The current status of the persona", default=""]
    string(64) mStatus;

    [tag="srsn", description="The reason the persona is in the current status", default=""]
    string(64) mStatusReasonCode;

    [tag="show", description="Indicates how to show a persona on public profile page. This is a privacy control field. This is meant for social applications", default=""]
    string(64) mShowPersona;

    [tag="crea", description="The date when the persona was created", default=""]
    string(64) mDateCreated;

    [tag="last", description="The date when the persona was last authenticated", default=""]
    string(64) mLastAuthenticated;
};

class GetPersonaListFilter
{
    [tag="dnam", description="Display name or name of persona to be retrieved. If the namespaceName is specified, the display name is searched; otherwise, the default behavior is to search by name. A wildcard (*) can be used at the end. Minimum length is five characters.", default=""]
    string(64) mDisplayName;

    [tag="nspc", description="Namespace name of the personas to be retrieved. If you specify namespaceName, the isVisible flag is ignored.", default=""]
    string(64) mNamespaceName;

    [tag="stat", description="The status the personas should be in", default=""]
    string(64) mStatus;

    [tag="strc", description="The status reason code the personas should have", default=""]
    string(64) mStatusReasonCode;

    [tag="show", description="Indicates how to show a persona on public profile page. This is a privacy control field. This is meant for social applications", default=""]
    string(64) mShowPersona;

    [tag="extt", description="The type of external reference being maintained. Required if externalRefValue is provided", default=""]
    string(64) mExternalRefType;

    [tag="extv", description="The value of this external reference. Required if externalRefType is provided", default=""]
    string(64) mExternalRefValue;
};

class GetPersonaListRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="pid", description="The PID of the owner of the persona to fetch", default=0]
    uint64_t mPid;

    [tag="expd", description="True to get full persona details in the response, or false to only get the persona uri", default=""]
    string(10) mExpandResults;

    [tag="filt", description="Filter criteria for the returned list"]
    GetPersonaListFilter mFilter;
};

class PersonaListResponseDetails
{
    [tag="pinf", description="A list of PersonaInfo"]
    list<PersonaInfo> mPersona;

    [tag="puri", description="A list of persona uris"]
    list<string(512)> mPersonaUri;
};

class GetPersonaListResponse
{
    [tag="pinf", description="A list of PersonaInfo"]
    PersonaListResponseDetails mPersonas;
};

class GetPersonaInfoRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="ppid", description="The PID of the owner of the persona to fetch", default=0]
    uint64_t mPid;

    [tag="pid", description="The persona id to get", default=0]
    uint64_t mPersonaId;
};

class GetPersonaInfoResponse
{
    [tag="pers", description="The PersonaInfo"]
    PersonaInfo mPersona;
};

class GetPersonaInfoExtIdRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
    
    [tag="expd", description="True to get full persona details in the response, or false to only get the persona uri", default=""]
    string(10) mExpandResults;

    [tag="filt", description="Filter criteria for the returned list"]
    GetPersonaListFilter mFilter;
};

class UpdatePersonaRequest
{
    [tag="pid", description="The PID of the owner of the persona to update", default=0]
    uint64_t mPid;

    [tag="peid", description="The persona ID to update", default=0]
    uint64_t mPersonaId;

    [tag="body", description="The request body (info with which to update the persona)"]
    PersonaInfo mPersonaInfo;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class UpdatePersonaResponse
{
    [tag="puri", description="The URI of the updated persona", default=""]
    string(64) mPersonaUri;
};

class DeletePersonaRequest
{
    [tag="pid", description="The PID of the owner of the persona to delete", default=0]
    uint64_t mPid;

    [tag="peid", description="The persona ID to delete", default=0]
    uint64_t mPersonaId;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class OptinRequest
{
    [tag="pid", description="The PID of the account", default=0]
    uint64_t mPid;
    
    [tag="type", description="The optin type", default=""]
    string(64) mOptinType;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class OptinResponse
{
    [tag="otyp", description="The opt-in type", default=""]
    string(64) mOptin;
};

class GetAccountRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class AccountInfo
{
    [tag="pid", description="The account's PID", default=0]
    uint64_t mPidId;

    [tag="exid", description="The account's external id", default="0"]
    string(32) mExternalRefValue;

    [tag="exre", description="", default=""]
    string(64) mExternalRefType;

    [tag="ests", description="The account's email status", default=""]
    string(64) mEmailStatus;

    [tag="pstr", description="The account's password strength", default=""]
    string(16) mStrength;

    [tag="ctry", description="The account's country code", default=""]
    string(2) mCountry;

    [tag="lang", description="The account's language code", default=""]
    string(2) mLanguage;

    [tag="lcle", description="The account's locale code", default=""]
    string(5) mLocale;

    [tag="stat", description="The account's status", default=""]
    string(16) mStatus;

    [tag="reas", description="The reason for the account's status", default=""]
    string(64) mReasonCode;

    [tag="tver", description="The account's accepted TOS version", default=""]
    string(64) mTosVersion;

    [tag="topt", description="The account's 3rd party opt-in setting", default=false]
    bool mThirdPartyOptin;

    [tag="gopt", description="The account's global opt-in setting", default=false]
    bool mGlobalOptin;

    [tag="dcre", description="The date the account was created", default=""]
    string(64) mDateCreated;

    [tag="dmod", description="The date the account was last updated", default=""]
    string(64) mDateModified;

    [tag="auth", description="The date the account last authenticated", default=""]
    string(64) mLastAuthDate;

    [tag="rsrc", description="The account's registration source", default=""]
    string(64) mRegistrationSource;

    [tag="asrc", description="The account's authentication source", default=""]
    string(64) mAuthenticationSource;

    [tag="smal", description="Who to show the account's email to", default=""]
    string(64) mShowEmail;

    [tag="dmal", description="Who can discover this account", default=""]
    string(64) mDiscoverableEmail;

    [tag="anon", description="Whether the account is anonymous", default=false]
    bool mAnonymousPid;

    [tag="uage", description="Whether the account is underage", default=false]
    bool mUnderagePid;

    [tag="bill", description="The account's billing address", default=""]
    string(64) mDefaultBillingAddressUri;

    [tag="ship", description="The account's shipping address", default=""]
    string(64) mDefaultShippingAddressUri;
};

class GetAccountResponse
{
    [tag="body", description="The response body (the account info)"]
    AccountInfo mPid;
};

[trackChanges = true]
class EntitlementSearchParams
{
    [tag="pdid", description="The entitlements' productId", default=""]
    string(64) mProductId;

    [tag="etag", description="The entitlements' tag", default=""]
    string(64) mEntitlementTag;

    [tag="stat", description="The entitlements' status", default=""]
    string(64) mStatus;

    [tag="reas", description="The reason for the entitlements' status", default=""]
    string(32) mStatusReasonCode;    

    [tag="sgrt", description="The start grant date for the entitlements", default=""]
    string(64) mStartGrantDate;

    [tag="egrt", description="The end grant date for the entitlements", default=""]
    string(64) mEndGrantDate;

    [tag="strm", description="The start termination date for the entitlements", default=""]
    string(64) mStartTerminationDate;

    [tag="etrm", description="The end termination date for the entitlements", default=""]
    string(64) mEndTerminationDate;

    [tag="gnam", description="The list of group names to search"]
    list<string(64)> mGroupNames;

    [tag="pcat", description="The entitlement's project cataog", default=""]
    string(64) mProductCatalog;

    [tag="etyp", description="The type of entitlement", default=""]
    string(64) mEntitlementType;

    [tag="pjid", description="The entitlement's projectId", default=""]
    string(64) mProjectId;

    [tag="hap", desciprtion="Whether the entitlement has a linked authorized persona", default="true"]
    string(64) mHasAuthorizedPersona;
};

class GetEntitlementsRequest
{
    [tag="pid", description="The PID of the account for which to get entitlements", default=0]
    uint64_t mPid;

    [tag="peid", description="The persona ID for which to get entitlements", default=0]
    uint64_t mPersonaId;

    [tag="eid", description="The entitlement's ID", default=0]
    uint64_t mEntitlementId;

    [tag="info", description="The entitlement information to search on"]
    EntitlementSearchParams mEntitlementSearchParams;

    [tag="expd", description="True to get full persona details in the response, or false to only get the persona uri", default=""]
    string(10) mExpandResults;

    [tag="recu", description="True to do a recursive group name search, or false otherwise", default="false"]
    string(10) mRecursiveSearch;

    [tag="psiz", description="The number of results to return per page", default=0]
    uint32_t mPageSize;

    [tag="pnum", description="The page number to return", default=0]
    uint32_t mPageNumber;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class GetEntitlementsResponseDetails
{
    [tag="ents", description="A list of found entitlements"]
    EntitlementInfoList mEntitlement;

    [tag="euri", description="A list of entitlement uris"]
    list<string(512)> mEntitlementUri;
};

class GetEntitlementsResponse
{
    [tag="body", description="The response body (the list of found entitlements)"]
    GetEntitlementsResponseDetails mEntitlements;
};

class GetEntitlementResponse
{
    [tag="body", description="The response body (the found entitlement)"]
    EntitlementInfo mEntitlement;
};

class PostProfileInfoRequest
{
    [tag="pid", description="The PID of the account for which to post the profile info", default=0]
    uint64_t mPid;

    [tag="body", description="The request body (the user profile info)"]
    map<string(64), string(64)> mPidProfilePostRequest;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class GetProfileInfoRequest
{
    [tag="pid", description="The PID of the account for which to get the profile info", default=0]
    uint64_t mPid;

    [tag="pcat", description="Optional category on which to search", default=""]
    string(64) mProfileInfoCategory;

    [tag="expd", description="True to get full profile info in the response, or false to only get the profile info uri", default=""]
    string(10) mExpandResults;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class EntryElement
{
    [tag="ptyp", description="The entry profile type"]
    string(64) mProfileType;

    [tag="valu", description="The entry profile value"]
    string(64) mValue;
};
typedef list<EntryElement> EntryElementList;

class ProfileEntry
{
    [tag="puri", description="The PID portion of the profile entry URI."]
    string(64) mPidUri;

    [tag="eid", description="The PID of the account the profile info is for."]
    uint64_t mEntryId;

    [tag="ecat", description="The profile entry category."]
    string(64) mEntryCategory;

    [tag="elem", description="The list of profile entry elements."]
    EntryElementList mEntryElement;
};
typedef list<ProfileEntry> ProfileEntryList;

class ProfileEntryWrapper
{
    [tag="entr", description="List of user profile entries"]
    ProfileEntryList mPidProfileEntry;
};

class GetProfileInfoResponse
{
    [tag="prof", description="List of user profile entries"]
    ProfileEntryWrapper mPidProfiles;
};

class GetXBLTokenRequest
{
    [tag="peid", description="The persona ID for the XBL token", default=0]
    PersonaId mPersonaId;

    [tag="sbid", description="The sandbox ID for the XBL token", default=""]
    string(64) mSandboxId;

    [tag="rlyp", description="The relying party for the XBL token. Possible values: http://licensing.xboxlive.com, http://mp.microsoft.com, http://xboxlive.com (default if unspecified)", default="http://xboxlive.com"]
    string(512) mRelyingParty;

    [tag="ref", description="Flag to indicate if Blaze should tell Nucleus to update its cached XBL token.", default="false"]
    string(10) mForceRefresh;

    [tag="mock", description="Indicates if the Nucleus service should respond with a valid XBL token for nucleus accounts"]
    string(32) mUseMock;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class XBLToken
{
    [tag="peid", description="The persona ID for the XBL token"]
    PersonaId mPersonaId;

    [tag="prof", description="The token's proof key"]
    string(-1) mProofKey;

    [tag="tokn", description="The XBL token string"]
    string(-1) mAuthToken;

    [tag="expr", description="The lifetime in seconds of the XBL token."]
    int64_t mExpiresIn;
};

class GetXBLTokenResponse
{
    [tag="tokn", description="The XBL token"]
    XBLToken mXblToken;
};
[description="Get PS4 user access token request."]
class GetPSNTokenRequest
{
    [tag="peid", description="The persona ID for the PSN token"]
    PersonaId mPersonaId;
    
    [tag="tick", description="The PS4 ticket obtained from the console client. This is required for custom code to be able to fetch an access token for use with things like Sony Commerce and Entitlements."]
    string(-1) mPs4Ticket;

    [tag="envp", description="The environment query parameter string, for instance environment=PROD_QA. Only for Sony environments that require this."]
    string(-1) mEnvironmentQueryParam;

    [tag="ref", description="Flag to indicate if Blaze should tell Nucleus to update its cached PSN token.", default="false"]
    string(5) mForceRefresh;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

[description="PS4 user access token, for making S2S calls to PSN"]
class PSNToken
{
    [tag="peid", description="The persona ID for the PSN token"]
    PersonaId mPersonaId;

    [tag="tokn", description="The PSN token string"]
    string(-1) mPsnAccessToken;

    [tag="expr", description="The lifetime in seconds of the PSN token", nameoverride="expires_in"]
    int64_t mExpiresIn; // side: signed int, for compatibility with TimeValue
};
[description="Get PS4 user access token response."]
class GetPSNTokenResponse
{
    [tag="tokn", description="The PSN token"]
    PSNToken mPsnAccessToken;
};


[description="PS5 user access token, for making S2S calls to PSN"]
class PS5Token
{
    [tag="peid", description="The persona ID for the PSN token"]
    PersonaId mPersonaId;

    [tag="tokn", description="The PSN token string"]
    string(-1) mAccessToken;

    [tag="expr", description="The lifetime in seconds of the PSN token", nameoverride="expires_in"]
    int64_t mExpiresIn; // side: signed int, for compatibility with TimeValue
};

class GetPS5OnlineTokenResponse
{
    [tag="tokn", description="The PS5 online token"]
    PS5Token mPs5AccessToken;
};

class GetPS5ClientCredentialTokenResponse
{
    [tag="tokn", description="The PS5 client credential server access token"]
    PS5Token mPs5AccessToken;
};

class GetPidRequest
{
    [tag="pid", description="The PID of the account for which to get the information", default=0]
    uint64_t mPid;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class DeviceProfileRequestData
{
    [tag="plat", description="The platform type of the device profile.", default=""]
    string(64) mPlatformType;

    [tag="idt", description="The ID type of the device profile.", default=""]
    string(64) mIdType;

    [tag="idv", description="The ID value of the device profile.", default=""]
    string(64) mIdValue;
};

class GetDeviceProfileRequest
{
    [tag="pid", description="The PID of the account for which to get the information", default=0]
    uint64_t mPid;

    [tag="dprd", description="Common data for device profile requests."]
    DeviceProfileRequestData mDeviceProfileRequestData;

    [tag="expd", description="True to get device profile details in the response, or false to only get the device profile uri", default=""]
    string(10) mExpandResults;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class DeviceProfile
{
    [tag="duri", description="The URI of the device profile.", default=""]
    string(128) mDeviceProfileUri;

    [tag="plat", description="The platform type of the device profile.", default=""]
    string(64) mPlatformType;

    [tag="idt", description="The ID type of the device profile.", default=""]
    string(64) mIdType;

    [tag="idv", description="The ID value of the device profile.", default=""]
    string(64) mIdValue;

    [tag="date", description="The data the device profile was created.", default=""]
    string(64) mDateCreated;
};
typedef list<DeviceProfile> DeviceProfileList;

class GetDeviceProfileResponse
{
    [tag="dpl", description="A list of device profiles."]
    DeviceProfileList mDeviceProfile;
};

class PostDeviceProfileRequest
{
    [tag="pid", description="The PID of the account for which to get the information", default=0]
    uint64_t mPid;

    [tag="dprd", description="Common data for device profile requests."]
    DeviceProfileRequestData mDeviceProfileRequestData;

    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class PostDeviceProfileResponse
{
    [tag="prof", description="The newly created device profile."]
    DeviceProfile mDeviceProfile;
};

class GetAgeRequirementsRequest
{
    [tag="ctry", description="The ISO country code used to lookup the age requirements."]
    string(8) mCountryCode;
    
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;
};

class GetAgeRequirementsResponse
{
    [tag="mlra"]
    uint16_t mMinLegalRegAge;

    [tag="mawc"]
    uint16_t mMinAgeWithConsent;

    [tag="mlca"]
    uint16_t mMinLegalContactAge;
};

class DecryptedBlazeIdContainer
{
    [tag="enid"] EncryptedBlazeId mEncryptedValue;
    [tag="deid"] string(32) mDecryptedValue;//Length for the int64 id as string, plus a possible platform suffix ':XBOX', ':PS4', etc
};

class DecryptBlazeIdsRequestBody
{
    [tag="type", default="tournamentId", description="The decryption type. Possible values: tournamentId"]
    string(14) mEncryptionType; //14 chars for "tournamentId"

    [tag="eids", description="List of encrypted Blaze Ids"]
    list<EncryptedBlazeId> mEncryptedValues;
};

class DecryptBlazeIdsRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="body", description="Decrypt Blaze Ids request body"]
    DecryptBlazeIdsRequestBody mBody;
};

class DecryptBlazeIdsResult
{
    [tag="type", default="tournamentId", description="The decryption type. Possible values: tournamentId"]
    string(14) mEncryptionType; //14 chars for "tournamentId"

    [tag="dids", description="List of decrypted Blaze Ids"]
    list<DecryptedBlazeIdContainer> mCryptoResult;
};

class DecryptBlazeIdsResponse
{
    [tag="decr", description="The decryption results"]
    DecryptBlazeIdsResult mCrypto;
};

class GetTosRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="expd", description="True to get device profile details in the response, or false to only get the device profile uri", default=""]
    string(10) mExpandResults;
    
    [tag="pid", description="The PID of the account for which to get the accepted ToS", default=0]
    uint64_t mPid;
    
    [tag="toss", description="The ToS string to check for acceptance. If empty, all accepted ToS strings are returned", default=""]
    string(-1) mTosString;
};

class ToSDetails
{
    [tag="tid"]
    string(-1) mTosId;
    
    [tag="puri"]
    string(-1) mPidUri;
    
    [tag="tacp"]
    string(-1) mTosAccepted;
    
    [tag="dacp"]
    string(-1) mDateAccepted;
};

class GetTosResponse
{
    [tag="tosl", description="List of accepted ToS URIs."]
    list<string(-1)> mTosUri;
    
    [tag="tosd", description="List of accepted ToS in detailed format (when X-Expand-Results = true)."]
    list<ToSDetails> mTos;
};

class GetInfoSharingRequirementsRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="ctry", description="The country to get the info sharing requirements."]
    string(3) mCountry;
};

class InfoSharingRequirements
{
    [tag="ectc"]
    bool mEaMayContact;
    
    [tag="pctc"]
    bool mEaPartnersMayContact;
    
    [tag="oreg"]
    bool mOfficiallyRegister;
};

class GetInfoSharingRequirementsResponse
{
    [tag="info", description="The info sharing requirements for a country."]
    InfoSharingRequirements mInfoSharingReqs;
};

class GetIpGeoLocationRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="addr", description="The IP address to retrieve GeoLocation info for. IPv4 address are accepted formatted in the quad decimal notation."]
    string(32) mIpAddress;
};

class GetIpGeoLocationResponse
{
    [tag="geo", description="The geographic location about an IP Address."]
    IpGeoLocation mIpGeoLocation;
};

typedef list<int64_t> PreferenceIDsType;
[trackChanges = true]
class PreferenceUserPutRequestBody
{
    [tag="emal"] string(-1) email;
    [tag="stts"] string(-1) status;
    [tag="dtob"] string(-1) dob;
    [tag="cnty"] string(-1) country;
    [tag="gopt"] bool globalOptin;
    [tag="freq"] string(-1) frequency;
    [tag="optd"] string(-1) optDownDate;
    [tag="selp"] PreferenceIDsType selectedPreferences;
    [tag="addp"] PreferenceIDsType addedPreferences;
    [tag="remp"] PreferenceIDsType removedPreferences;
};

class PreferenceUserRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="acid", description="Nucleus AccountId of the user that is making this request."]
    AccountId mPidId;

    [tag="body"]
    PreferenceUserPutRequestBody mBody;
};

class PreferenceUserTypeResponse
{
    [tag="id"] int64_t id;   // PreferenceUserId
    [tag="nuri"] string(-1) nucleusUserUri;
    [tag="ever"] bool emailVerified;
    [tag="stat"] string(-1) status;
    [tag="dob"] string(-1) dob;
    [tag="cnty"] string(-1) country;
    [tag="regs"] string(-1) registrationSource;
    [tag="gopt"] bool globalOptin;
    [tag="gopd"] string(-1) globalOptinDate;
    [tag="good"] string(-1) globalOptoutDate;
    [tag="tpoi"] bool thirdPartyOptin;
    [tag="freq"] string(-1) frequency;
    [tag="opdd"] string(-1) optDownDate;
    [tag="creb"] string(-1) createdBy;
    [tag="datc"] string(-1) dateCreated;
    [tag="modb"] string(-1) modifiedBy;
    [tag="datm"] string(-1) dateModified;
    [tag="selp"] PreferenceIDsType selectedPreferences;
    [tag="dslp"] PreferenceIDsType deselectedPreferences;
};

class PreferenceUserResponse
{
    [tag="pusr"] PreferenceUserTypeResponse preferenceUser;
};

class GetExternalRefRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="prid", description="The persona id to get", default=0]
    PersonaId mPersonaId;

    [tag="expd", description="True to get full persona details in the response, or false to only get the persona uri", default="true"]
    string(10) mExpandResults;

};

[trackChanges = true]
class PersonaReference
{
    [tag="puri", description="Persona uri"]
    string(-1) mPersonaUri;

    [tag="prid", description="Persona reference id"]
    string(64) mReferenceId;
    
    [tag="prtp", description="Reference Type"]
    string(64) mReferenceType;

    [tag="prva", description="Reference Value"]
    string(64) mReferenceValue;

    [tag="pdis", description="Discoverable"]
    string(64) mDiscoverable;

    [tag="extv", description="External account visible"]
    bool mExternalAccountVisible;
};

class GetExternalRefResponse
{
    [tag="pref", description="Persona reference details"]
    list<PersonaReference> mPersonaReference;
};

class GetRefreshExternalEntitlementsRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="ppid", description="The identifier of the user the persona belongs to", default=0]
    int64_t mPidId;
};

class EntitlementUri
{
   [tag="euri", description="The URI of the newly created entitlement"]
   list<string(64)> mEntitlementUri;
};

class GetRefreshExternalEntitlementsResponse
{
    [tag="ents", description="List of entitlements"]
    EntitlementUri mEntitlements;
};

class GetPlayerSettingsRequest
{
    [tag="auth", description="The authentication credentials"]
    AuthenticationCredentials mAuthCredentials;

    [tag="name", description="Schema (settings) name for core Blaze settings", default="invalid"]
    string(32) mName;

    [tag="acid", description="Nucleus AccountId"]
    AccountId mAccountId;
};

class GetPlayerSettingsResponse
{
    [tag="voip", description="Is voip disabled", default=false]
    bool mVoipDisabled;
};


} // namepsace NucleusIdentity
} // namespace Blaze
