
// ====================================================
// OAuth/Nucleus configurations.
// ====================================================
oauth = {
    redirectUri = "#NUCLEUS2REDIRECT#"

#if (PLATFORM == "pc")
    restrictedScope = "basic.identity search.identity basic.persona basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#elif (PLATFORM == "xone")
    restrictedScope = "basic.crypto basic.identity search.identity basic.persona basic.xbltoken basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#elif (PLATFORM == "ps4")
    restrictedScope = "basic.crypto basic.identity search.identity basic.persona basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#elif (PLATFORM == "xbsx")
    restrictedScope = "basic.identity search.identity basic.persona basic.xbltoken basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#elif (PLATFORM == "stadia")
    restrictedScope = "basic.identity search.identity basic.persona basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#else
    restrictedScope = "basic.identity search.identity basic.persona basic.entitlement basic.utility basic.domaindata dp.playersettings.settings.r offline"
#endif

#if (ENV != "prod")
  #if defined(MOCK_EXTERNAL_SERVICE_URL_XONE) || defined(MOCK_EXTERNAL_SERVICE_URL_PS4)  || defined(MOCK_EXTERNAL_SERVICE_URL_PS5)
    // If true, instructs Nucleus to return a mock XBL token. Used for stress testing without real XBL accounts.
    useMock = true
  #endif
 #endif

    //Token format for server access token. Does not apply to user access token obtained by Blaze via traditional auth code -> access token exchange.
    //TOKEN_FORMAT_DEFAULT means the format is determined by the server Client ID setting on EA Console; TOKEN_FORMAT_JWT means JWT format for server access token.
    serverAccessTokenFormat = "TOKEN_FORMAT_DEFAULT"

    jwtConfig = {
#if (NUCLEUS_ENV == "prod")
        tokenIssuer = "accounts.ea.com",
#elif (NUCLEUS_ENV == "int")
        tokenIssuer = "accounts.int.ea.com",
#elif (NUCLEUS_ENV == "lt")
        tokenIssuer = "accounts.lt.ea.com",
#else
        tokenIssuer = "unknowm issuer for unknown nucleus env",
#endif
        publicKeyInfoRefreshMinInterval = "5m"
    }

    //By default, all rpcs that require authentication are allowed to execute with a valid access token. If some component/service and/or rpc require higher
    //access levels, they can be configured below.

    // Allowed scopes to access particular component/service. If multiple scopes (separated by space) are specified, any one of them is sufficient. 
    // So if you have an "admin type" component and specify "gs_blaze_limited_admin gs_blaze_admin" as allowed scopes, a client with "gs_blaze_limited_admin" scope
    // can access the component.

    // The component names follow the usual Blaze standard.
        // For slave, the component name is lowercase name of the component. 
        // For master, the component name is <lowercase component name>_master.
    // Example
    identityContextConfig = {
        componentMap = {
            "gamebrowserservice" = {
                scopes = "dp.blaze.gamebrowserservice.rw",
                requireTrusted = true
            }
        }
    }

#if PLATFORM == "ps5" || XPLAY_HOST_PS5 == "1"
    // Settings for Blaze's internal calls to Nucleus to return PS5 client credential tokens
    psnClientCredential = {
        #if defined(MOCK_EXTERNAL_SERVICE_URL_PS5)
            useMock = true
        #endif

        // For Nucleus to return PS5 client credential tokens in cert (Sony prod-qa), they require this to be PROD_QA. Intentionally omitted for dev or prod:
        #if (ENV == "cert")
            identityEnvironment = "PROD_QA"
        #endif

        // For internal use. Access scope for Blaze's calls to Identity's GET ps5s2stoken. Titles should normally keep this as shown:
        identityScope = "dp.identity.psnservertoken.r"
    }
#endif
}



