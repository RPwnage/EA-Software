//
//  This file defines the Rules' Attribute Mappings 
//  If you are using a custom rule, and want it to be accessible to the Scenarios system, you will need to add it here.
//   See the exampleUpstreamBPSRule and exampleMultiRule examples below. 
//  NOTE: You must also register your Multi rule in RuleDefinitionCollection::registerCustomMultiInputValues.  (See examples there.)

ruleAttributeMap = {


    "gameAttributeRules" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.gameAttributeRuleCriteriaMap[%s].minFitThresholdName",   required = true  }
        "desiredValues" = { name = "MatchmakingCriteriaData.gameAttributeRuleCriteriaMap[%s].desiredValues",           required = true  }
    }
    "geoLocationRule" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.geoLocationRuleCriteria.minFitThresholdName",          required = true  }
    }
    "modRule" = {
        "desiredModRegister" = { name = "MatchmakingCriteriaData.modRuleCriteria.desiredModRegister",                required = true  }
        "isEnabled" = { name = "MatchmakingCriteriaData.modRuleCriteria.isEnabled",                                  required = true  }
    }
    "playerAttributeRules" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.playerAttributeRuleCriteriaMap[%s].minFitThresholdName", required = true  }
        "desiredValues" = { name = "MatchmakingCriteriaData.playerAttributeRuleCriteriaMap[%s].desiredValues",         required = true  }
    }
    "rosterSizeRule" = {
        "minPlayerCount" = { name = "MatchmakingCriteriaData.rosterSizeRulePrefs.minPlayerCount",                    required = true  }
        "maxPlayerCount" = { name = "MatchmakingCriteriaData.rosterSizeRulePrefs.maxPlayerCount",                    required = true  }
    }
    "SingleGroupMatchRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.rangeOffsetListName",          required = true  }
        "isSingleGroupMatch" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.isSingleGroupMatch",        required = true  }
    }
    "teamCompositionRuleMap" = {
        "ruleName" = { name = "MatchmakingCriteriaData.teamCompositionRulePrefs.ruleName",                           required = true  }
        "minFitThreshold" = { name = "MatchmakingCriteriaData.teamCompositionRulePrefs.minFitThresholdName",         required = false }
    }
    "teamUEDBalanceRuleMap" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.teamUEDBalanceRulePrefs.rangeOffsetListName",          required = true  }
        "ruleName" = { name = "MatchmakingCriteriaData.teamUEDBalanceRulePrefs.ruleName",                            required = true  }
    }
    "teamUEDPositionParityRuleMap" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.teamUEDPositionParityRulePrefs.rangeOffsetListName",   required = true  }
        "ruleName" = { name = "MatchmakingCriteriaData.teamUEDPositionParityRulePrefs.ruleName",                     required = true  }
    }
    "userExtendedDataRuleMap" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.UEDRuleCriteriaMap[%s].thresholdName",                   required = true  }
        "searchValue" = { name = "MatchmakingCriteriaData.UEDRuleCriteriaMap[%s].clientUEDSearchValue",                required = false }
        "overrideValue" = { name = "MatchmakingCriteriaData.UEDRuleCriteriaMap[%s].overrideUEDValue",                  required = false }
    }
    
    // // Example Custom Rule Attribute config: 
    // // The name "exampleUpstreamBPSRule" comes from the DEFINE_RULE_DEF_CPP() in the rule's definition file:
    //"exampleUpstreamBPSRule" = {  
    //    // Explanation of 'name' value: 
    //    // * 'MatchmakingCriteriaData' is the base class type used for all rule criteria.
    //    // * '.variableCustomRulePrefs' is the map storing the custom rule preferences, a map of Variable types (which must indicate their type before usage)
    //    // * [exampleUpstreamBPSRule] is the map key for the variableCustomRulePrefs, and is also used in the code when getCustomRulePrefFromCriteria<> is called.   
    //    // * [Blaze::GameManager::ExampleUpstreamBPSRuleCriteria] is the type of the Variable, a Custom TDF type used for this custom rule.  
    //    //   (Note: The namespace qualifiers are only required if the class name is used in multiple different namespaces)
    //    // * '.thresholdName' is the value we're mapping, the threshold associated with the custom BPS Rule Criteria.
    //    "minFitThreshold" = { name = "MatchmakingCriteriaData.variableCustomRulePrefs[exampleUpstreamBPSRule][Blaze::GameManager::ExampleUpstreamBPSRuleCriteria].thresholdName",         required = true }
    //    "desiredUpstreamBps" = { name = "MatchmakingCriteriaData.variableCustomRulePrefs[exampleUpstreamBPSRule][Blaze::GameManager::ExampleUpstreamBPSRuleCriteria].desiredUpstreamBps", required = true }
    //}
    //
    // // If your custom rule is a RULE_DEFINITION_TYPE_MULTI, and you use multiple rules (rather than passing up a 'ruleName' param) you'll need to use syntax like the following:
    // //   The [%s] will be replaced with the string for the specific rule name used in the Scenarios.cfg.  You must have one exactly [%s] is the name or the type will not register properly.  
    // //   NOTE: You must register your Multi rule in RuleDefinitionCollection::registerCustomMultiInputValues.  (See examples there.)
    // //   When you use a Multi rule, you'll need to specify both the rule definition name and the specific rule version you want. (ex. "exampleMultiRule.basicVersion", "gameAttributeRules.gameModeMatchRule")
    //"exampleMultiRule" = {  
    //  "minFitThreshold" = { name = "MatchmakingCriteriaData.variableCustomRulePrefs[%s][ExampleUpstreamBPSRuleCriteria].thresholdName",         required = true }
    //}

    "dedicatedServerAttributeRules" = {
        "minFitThresholdValue" = { name = "MatchmakingCriteriaData.dedicatedServerAttributeRuleCriteriaMap[%s].minFitThresholdValue",   required = true  }
        "desiredValue" = { name = "MatchmakingCriteriaData.dedicatedServerAttributeRuleCriteriaMap[%s].desiredValue",           required = true  }
    }

    "Predefined_AvoidGamesRule" = {
        "gameIdList" = { name = "MatchmakingCriteriaData.avoidGamesRuleCriteria.gameIdList",                         required = true  }
    }

    "Predefined_AvoidPlayersRule" = {
        "avoidListIds" = { name = "MatchmakingCriteriaData.avoidPlayersRuleCriteria.avoidListIds",                   required = false }
        "avoidList" = { name = "MatchmakingCriteriaData.avoidPlayersRuleCriteria.avoidList",                         required = false }
        "avoidAccountList" = { name = "MatchmakingCriteriaData.avoidPlayersRuleCriteria.avoidAccountList",       required = false }
    }

    "Predefined_FreePlayerSlotsRule" = {
        "minFreeSlots" = { name = "MatchmakingCriteriaData.freePlayerSlotsRuleCriteria.minFreePlayerSlots",          required = false }
        "maxFreeSlots" = { name = "MatchmakingCriteriaData.freePlayerSlotsRuleCriteria.maxFreePlayerSlots",          required = true  }
    }

    "Predefined_GameNameRule" = {
        "searchString" = { name = "MatchmakingCriteriaData.gameNameRuleCriteria.searchString",                       required = true  }
    }

    "Predefined_HostBalancingRule" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.hostBalancingRulePrefs.minFitThresholdName",           required = true  }
    }

    "Predefined_HostViabilityRule" = {
        "minFitThreshold" = { name = "MatchmakingCriteriaData.hostViabilityRulePrefs.minFitThresholdName",           required = true  }
    }

    "Predefined_ExpandedPingSiteRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.expandedPingSiteRuleCriteria.rangeOffsetListName",   required = true  }
        "latencyCalcMethod" = { name = "MatchmakingCriteriaData.expandedPingSiteRuleCriteria.latencyCalcMethod",   required = false  }
        "sessionMatchCalcMethod" = { name = "MatchmakingCriteriaData.expandedPingSiteRuleCriteria.sessionMatchCalcMethod",   required = false  }
        "pingSiteSelectionMethod" = { name = "MatchmakingCriteriaData.expandedPingSiteRuleCriteria.pingSiteSelectionMethod",   required = false  }
        "pingSiteWhitelist" = { name = "MatchmakingCriteriaData.expandedPingSiteRuleCriteria.pingSiteWhitelist",   required = false  }        
    }

    "Predefined_PlatformRule" = {
        "platformListOverride" = { name = "MatchmakingCriteriaData.platformRuleCriteria.clientPlatformListOverride", required = false }
        "crossplayMustMatch"   = { name = "MatchmakingCriteriaData.platformRuleCriteria.crossplayMustMatch",         required = false }
    }

    "Predefined_PlayerCountRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.rangeOffsetListName",          required = true  }
        "desiredPlayerCount" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.desiredPlayerCount",        required = false }
        "isSingleGroupMatch" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.isSingleGroupMatch",        required = false }
        "maxPlayerCount" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.maxPlayerCount",                required = false }
        "minPlayerCount" = { name = "MatchmakingCriteriaData.playerCountRuleCriteria.minPlayerCount",                required = false }
    }

    "Predefined_PlayerSlotUtilizationRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.playerSlotUtilizationRuleCriteria.rangeOffsetListName",   required = true  }
        "desiredPercentFull" = { name = "MatchmakingCriteriaData.playerSlotUtilizationRuleCriteria.desiredPercentFull", required = false }
        "maxPercentFull" = { name = "MatchmakingCriteriaData.playerSlotUtilizationRuleCriteria.maxPercentFull",         required = false }
        "minPercentFull" = { name = "MatchmakingCriteriaData.playerSlotUtilizationRuleCriteria.minPercentFull",         required = false }
    }

    "Predefined_PreferredGamesRule" = {
        "requirePreferredGame" = { name = "MatchmakingCriteriaData.preferredGamesRuleCriteria.requirePreferredGame", required = false }
        "preferredList" = { name = "MatchmakingCriteriaData.preferredGamesRuleCriteria.preferredList",               required = true  }
    }

    "Predefined_PreferredPlayersRule" = {
        "requirePreferredPlayer" = { name = "MatchmakingCriteriaData.preferredPlayersRuleCriteria.requirePreferredPlayer",   required = false }
        "preferredListId" = { name = "MatchmakingCriteriaData.preferredPlayersRuleCriteria.preferredListId",                 required = false }
        "preferredList" = { name = "MatchmakingCriteriaData.preferredPlayersRuleCriteria.preferredList",                     required = false }
        "preferredAccountList" = { name = "MatchmakingCriteriaData.preferredPlayersRuleCriteria.preferredAccountList",       required = false }
    }

    "Predefined_RankedGameRule" = {
        "desiredValue" = { name = "MatchmakingCriteriaData.rankedGameRulePrefs.desiredRankedGameValue",              required = true  }
        "minFitThreshold" = { name = "MatchmakingCriteriaData.rankedGameRulePrefs.minFitThresholdName",              required = true  }
    }

    "Predefined_ReputationRule" = {
        "desiredValue" = { name = "MatchmakingCriteriaData.reputationRulePrefs.reputationRequirement",               required = true  }
    }

    "Predefined_TeamBalanceRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.teamBalanceRulePrefs.rangeOffsetListName",                     required = true  }
        "maxTeamSizeDifference" = { name = "MatchmakingCriteriaData.teamBalanceRulePrefs.maxTeamSizeDifferenceAllowed",      required = false }
    }

    "Predefined_TeamCountRule" = {
        "teamCount" = { name = "MatchmakingCriteriaData.teamCountRulePrefs.teamCount",                               required = true  }
    }

    "Predefined_TeamMinSizeRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.teamMinSizeRulePrefs.rangeOffsetListName",             required = true  }
        "teamMinSize" = { name = "MatchmakingCriteriaData.teamMinSizeRulePrefs.teamMinSize",                         required = true  }
    }

    "Predefined_TotalPlayerSlotsRule" = {
        "rangeOffsetList" = { name = "MatchmakingCriteriaData.totalPlayerSlotsRuleCriteria.rangeOffsetListName",             required = true  }
        "minTotalPlayerSlots" = { name = "MatchmakingCriteriaData.totalPlayerSlotsRuleCriteria.minTotalPlayerSlots",         required = false }
        "desiredTotalPlayerSlots" = { name = "MatchmakingCriteriaData.totalPlayerSlotsRuleCriteria.desiredTotalPlayerSlots", required = false }
        "maxTotalPlayerSlots" = { name = "MatchmakingCriteriaData.totalPlayerSlotsRuleCriteria.maxTotalPlayerSlots",         required = false }
    }

    "Predefined_VirtualGameRule" = {
        "desiredValue" = { name = "MatchmakingCriteriaData.virtualGameRulePrefs.desiredVirtualGameValue",            required = true  }
        "minFitThreshold" = { name = "MatchmakingCriteriaData.virtualGameRulePrefs.minFitThresholdName",             required = false }
    }

    "Predefined_XblBlockPlayersRule" = {
        "disableRule" = { name = "MatchmakingCriteriaData.xblBlockPlayersRuleCriteria.disableRule",            required = false  }
    }

    // The following rules are either always active, or use values set elsewhere  (The rules are included here for completeness)
    "gameProtocolVersionRule" = {}

    "Predefined_DedicatedServerPlayerCapacityRule" = {}
    "Predefined_FreePublicPlayerSlotsRule" = {}
    "Predefined_GameSettingsRule" = {}
    "Predefined_GameStateRule" = {}
    "Predefined_GameTopologyRule" = {}
    "Predefined_GameTypeRule" = {}
    "Predefined_QosAvoidGamesRule" = {}
    "Predefined_RolesRule" = {}
    "Predefined_TeamChoiceRule" = {}
}