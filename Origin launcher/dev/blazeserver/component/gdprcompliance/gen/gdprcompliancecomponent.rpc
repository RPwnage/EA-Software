// Defines the RPCs and async notifications used in the gdprcompliance component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="gdprcompliance/tdf/gdprcompliancetypes.h" ]
#include "gdprcompliance/gen/gdprcompliancetypes.tdf"

[ 
  client_include = false,
  headername="gdprcompliance/tdf/gdprcompliancetypes_server.h" 
]
#include "gdprcompliance/gen/gdprcompliancetypes_server.tdf"


namespace Blaze
{
namespace GdprCompliance
{

[
  id = core/4000,
  description = "The GDPR compliance component.",
  details = "The GDPR Compliance component supports GDPR Player Data Pull/Delete. ",
  configurationType=GdprComplianceConfig
]
component GdprCompliance
{
    permissions
    {
        PERMISSION_DELETE_USER_DATA = 1;
        PERMISSION_GET_USER_DATA = 2;
    }

    errors
    {
        [ description = "The requested player not found." ]
        GDPRCOMPLIANCE_ERR_REQUESTED_USER_NOT_FOUND = 1;
        [ description = "Require authentication." ]
        GDPRCOMPLIANCE_ERR_AUTHENTICATION_REQUIRED = 2;
    }

    slave
    {           
        methods
        {
            [
                id = 1,
                errors = {
                    GDPRCOMPLIANCE_ERR_REQUESTED_USER_NOT_FOUND,
                    GDPRCOMPLIANCE_ERR_AUTHENTICATION_REQUIRED
                },
                internal = true,
                client_export = false,
                description = "Get all Blaze data for a specific user",
                details = "Get all Blaze data for a specific user",
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            GetUserDataResponse getUserData(GetUserDataRequest);

            [
                id = 2,
                errors = {
                    GDPRCOMPLIANCE_ERR_REQUESTED_USER_NOT_FOUND,
                    GDPRCOMPLIANCE_ERR_AUTHENTICATION_REQUIRED
                },
                internal = true,
                client_export = false,
                description = "Deactivate Blaze data for a specific user",
                details = "Deactivate Blaze data for a specific user",
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            DeactivateUserDataResponse deactivateUserData(DeactivateUserDataRequest);

            [
                id = 3,
                errors = {
                    GDPRCOMPLIANCE_ERR_REQUESTED_USER_NOT_FOUND,
                    GDPRCOMPLIANCE_ERR_AUTHENTICATION_REQUIRED
                },
                internal = true,
                client_export = false,
                description = "Check progress for a specific user",
                details = "Check progress for a specific user",
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            CheckRecordProgressResponse checkRecordProgress(CheckRecordProgressRequest);

        } // methods
    } // slave
}

}
}
