[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/attributes.h"]
#include "framework/gen/attributes.tdf"

namespace Blaze
{
namespace Achievements
{

// Constants
// ----

// Typedefs
// ----
typedef string(128) ProductId;
typedef string(128) AchievementId;
typedef string(16) LanguageCode;
typedef int64_t Points;

enum UserType
{
    USER_TYPE_INVALID = 0,
    USER,
    PERSONA,
    NUCLEUS_USER,
    NUCLEUS_PERSONA
};

enum FilterType
{
    ALL = 0, // all achievements
    ACTIVE   // achievements with some form of progress
};

class User
{
    [tag="id", description="Numeric identifier for the user.", default=INVALID_BLAZE_ID]
    int64_t mId;

    [tag="type", useEnumName=true, description="The type of id specified for the user.", default=USER_TYPE_INVALID]
    UserType mType;
};

class AuxiliaryAuthentication
{
    [tag="htba", description="The HTTP basic authentication, which should be [user name]:[password]", printFormat="censor"]
    string(128) mUserPassword;

    [tag="skey", description="The shared key to generate a cryptographic signature for verification.", printFormat="censor"]
    string(128) mSecretKey;

    [tag="sign", description="The SHA256 cryptographic signature required to verify the content body."]
    string(128) mSignature;

    [tag="user", description="The user id and type making the achievement request"]
    User mUser;

    [tag="atok", description="The nucleus auth token of the user."]
    string(-1) mAuthToken;

    [tag="attk", description="The nucleus server to server auth token."]
    string(-1) mTrustedAuthToken;

    [tag="time", description="The timestamp (in seconds) of the request."]
    int64_t mTimestamp;

    [tag="api", description="The Api version for NEXUS_S2S."]
    int32_t mApiVersion;
};

class ExpansionPackData
{
    [tag="id", description="The product id string associated for the expansion pack."]
    ProductId mId;

    [tag="name", description="The localized expansion pack name."]
    string(128) mName;
};

class RequirementData
{
    [tag="stat", description="The stat of the requirement."]
    string(128) mStat;

    [tag="cur", description="The number of current points."]
    Points mCurrent;

    [tag="user", description="User's contribution to the number of current points."]
    Points mUser;

    [tag="req", description="The number of require points."]
    Points mRequired;

    [tag="last", description="The last updated epoch timestamp."]
    TimeValue mLastUpdated;

    [tag="name", description="The localized achievement name."]
    string(128) mName;
};

typedef map<uint32_t, string(-1)> IconsMap;

class TieredAchievementData
{
    [tag="tpts", description="The number of progress points required to achieve a progressive achievement."]
    Points mT;

    [tag="rpts", description="The number of reward points given."]
    Points mRp;

    [tag="xpts", description="The number of experience points given."]
    Points mXp;

    [tag="img", description="The URL to achievement image file in PNG format."]
    string(256) mImg;

    [tag="name", description="The localized achievement name."]
    string(128) mName;

    [tag="desc", description="The localized achievement description."]
    string(512) mDesc;

    [tag="howt", description="The localized achievement 'how to' string."]
    string(256) mHowto;

    [tag="reql", description="A list of requirements that details the multi-requirement progression."]
    list<RequirementData> mRequirements;

    [tag="icon", description="A mapping of Icon URLs by Icon size."]
    IconsMap mIcons;
};

class AchievementData
{
    [tag="strt", description="The start epoch timestamp."]
    TimeValue mS;

    [tag="time", description="The last updated epoch timestamp."]
    TimeValue mU;

    [tag="expy", description="The expiry epoch timestamp, negative = no expiration."]
    TimeValue mE;

    [tag="devc", description="The device used to award achievement."]
    string(128) mD;

    [tag="pts", description="The progress points toward goal."]
    Points mP;

    [tag="upts", description="The user's contribution to progress points toward goal.", nameoverride="up"]
    Points mUserProgressPoints;

    [tag="tpts", description="The number of progress points required to achieve a progressive achievement."]
    Points mT;

    [tag="rpts", description="The number of reward points given."]
    Points mRp;

    [tag="xpts", description="The number of experience points given."]
    Points mXp;

    [tag="cnt", description="The number of times the achievement is awarded."]
    uint32_t mCnt;

    [tag="img", description="The URL to achievement image file in PNG format."]
    string(256) mImg;

    [tag="name", description="The localized achievement name."]
    string(128) mName;

    [tag="desc", description="The localized achievement description."]
    string(512) mDesc;

    [tag="howt", description="The localized achievement 'how to' string."]
    string(256) mHowto;

    [tag="curt", description="The current tier index.", default=-1]
    int8_t mTc;

    [tag="tott", description="The total tier count."]
    int8_t mTt;

    [tag="next", description="A list of all tier-specific data for future, unachieved tiers."]
    list<TieredAchievementData> mTn;

    [tag="xpac", description="Details of the expansion pack if applicable for this achievement."]
    ExpansionPackData mXpack;

    [tag="reql", description="A list of requirements that details the multi-requirement progression."]
    list<RequirementData> mRequirements;

    [tag="icon", description="A mapping of Icon URLs by Icon size."]
    IconsMap mIcons;
};

typedef map<AchievementId, AchievementData, ignorecase> AchievementList;

class AchievementListData
{
    [tag="acli", description="A list of achievement."]
    AchievementList mAchievementList;
};

class UserHistoryData
{
    [tag="time", description="The epoch timestamp of when this achievement was awarded."]
    TimeValue mT;

    [tag="pts", description="The progress points at time when this achievement was awarded."]
    Points mP;

    [tag="cnt", description="The number of times awarded at time when this achievement was awarded."]
    uint32_t mC;

    [tag="prod", description="The product id string associated with this achievement."]
    ProductId mG;

    [tag="ahid", description="The numeric achievement identifier."]
    AchievementId mA;

    [tag="devc", description="The device used to award achievement."]
    string(128) mD;

    [tag="xpts", description="The number of experience points at time when this achievement was awarded."]
    Points mXp;

    [tag="rpts", description="The number of reward points at time when this achievement was awarded."]
    Points mRp;

    [tag="rev", description="The product revision string associated with this achievement."]
    ProductId mR;

    [tag="tier", description="The tier index associated with this achievement.", default=-1]
    int8_t mTi;

    [tag="xpac", description="Details of the expansion pack if applicable for this achievement."]
    ExpansionPackData mXpack;

    [tag="reql", description="A list of requirements that details the multi-requirement progression."]
    list<RequirementData> mRequirements;
};

typedef list<UserHistoryData> UserHistoryList;

/*
 * RPC TDF Objects
 * ---------------
 * The following TDF objects are used by the client to make RPC requests to the server.
 */

class GetAchievementsRequest
{
    [tag="user", description="The user id and type associated with the requested achievement."]
    User mUser;

    [tag="prod", description="The product id string associated with the achievement."]
    ProductId mProductId;

    [tag="lang", description="The localized strings are returned along with the achievements."]
    LanguageCode mLanguage;

    [tag="meta", description="Flag to include extra (static) metadata - only use this if caching product definitions is impractical.", default=false]
    bool mIncludeMetadata;

    [tag="filt", description="Flag to return only non-expired achievements. True filters out expired achievements.", default=true]
    bool mFiltered;

    [tag="limi", description="Filter what achievements to be returned."]
    FilterType mLimit;

    [tag="auxa", description="Additional authentication information required for Achievements privacy settings"]
    AuxiliaryAuthentication mAuxAuth;
};

class GetAchievementsResponse
{
    [tag="achs", description="The list of achievement data."]
    AchievementList mAchievements;
};

class ProgressUpdate
{
    [tag="pts", description="The number of points by which to increment the achievement."]
    Points mPoints;

    [tag="cur", description="Compare it against the current progress of the achievement and only increment if they match."]
    Points mCurrent;
};

class GrantAchievementRequest
{
    [tag="user", description="The user id and type associated with the requested achievement."]
    User mUser;
 
    [tag="prod", description="The product ID string associated with the achievement."]
    ProductId mProductId;

    [tag="ahid", description="The numeric achievement identifier."]
    AchievementId mAchieveId;

    [tag="lang", description="The localized strings are returned along with the achievement."]
    LanguageCode mLanguage;

    [tag="meta", description="Flag to include extra (static) metadata - only use this if caching product definitions is impractical.", default=false]
    bool mIncludeMetadata;

    [tag="prog", description="The progress of the achievement to update. The update will be included the request payload."]
    ProgressUpdate mProgress;

    [tag="auxa", description="Additional authentication information required for Achievements privacy settings"]
    AuxiliaryAuthentication mAuxAuth;
};

typedef map<string(512), string(512), ignorecase> dataList;
class EventData
{
    [tag="acid", description="The achievement ID of an event."]
    string(128) mId;

    [tag="data", description="Key-value pairs of game-defined data in an event."]
    dataList mData;
};

class EventsPayload
{
    [tag="dev", description="The device name of the events."]
    string(128) mDevice;

    [tag="even", description="The events list in the payload."]
    list<EventData> mEvents;
};

class PostEventsRequest
{
    [tag="user", description="The user id and type associated with the requested achievement."]
    User mUser;

    [tag="prod", description="The product ID string associated with the achievement."]
    ProductId mProductId;
    
    [tag="even", description="The event data in JSON format that will be sent to achievement service directly without any modifications."]
    EventsPayload mPayload;

    [tag="auxa", description="Additional authentication information required for Achievements privacy settings"]
    AuxiliaryAuthentication mAuxAuth;
};

} //namespace Achievements
} //namespace Blaze
