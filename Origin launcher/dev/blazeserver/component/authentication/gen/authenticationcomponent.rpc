// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="authentication/tdf/authentication.h" ]
#include "authentication/gen/authentication.tdf"

[ headername="authentication/tdf/accountdefines.h" ]
#include "authentication/gen/accountdefines.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[
  client_include = false,
  headername="authentication/tdf/authentication_server.h"
]
#include "authentication/gen/authentication_server.tdf"

namespace Blaze
{
namespace Authentication
{
[ id = core/1,
  configurationType = AuthenticationConfig
]
component Authentication
{
    permissions
    {
        PERMISSION_LIST_ALL_ENTITLEMENTS = 1;
        PERMISSION_CLIENT_WRITE_OTHER_USER_ENTITLEMENTS = 2;
        PERMISSION_INCREMENT_ENTITLEMENT_USECOUNT = 3;
        PERMISSION_IGNORE_CLIENT_WHITELIST = 4;
        PERMISSION_LIST_OTHER_USER_ENTITLEMENTS = 5;
    }

    errors
    {
        [ description = "The token provided was not a valid Identity 2.0 access token", http_status_code=400 ]
        AUTH_ERR_INVALID_TOKEN             = 1;
        [ description = "Generic error if specific error could not be obtained for a failed request."]
        AUTH_ERR_INVALID_REQUEST           = 2;
        [ description = "The auth code provided could not be used to log to requested service."]
        AUTH_ERR_INVALID_AUTHCODE          = 3;
        [ description = "The platform that service belongs to is not allowed in the login command."]
        AUTH_ERR_INVALID_PLATFORM          = 4;
        [ description = "The supplied sandbox id is not supported on this server." ]
        AUTH_ERR_INVALID_SANDBOX_ID        = 6;
        [ description = "The country does not exist or is invalid" ]
        AUTH_ERR_INVALID_COUNTRY       = 10;
        [ description = "The user does not exist or is invalid" ]
        AUTH_ERR_INVALID_USER          = 11;
        [ description = "The supplied password was invalid" ]
        AUTH_ERR_INVALID_PASSWORD      = 12;
        [ description = "The supplied auth token was expired" ]
        AUTH_ERR_EXPIRED_TOKEN         = 14;
        [ description = "Cannot create user/persona because email/displayname already exists" ]
        AUTH_ERR_EXISTS                = 15;
        [ description = "User is too young, cannot create underage account" ]
        AUTH_ERR_TOO_YOUNG             = 16;
        [ description = "The account does not exist" ]
        AUTH_ERR_NO_ACCOUNT            = 17;
        [ description = "The requested persona name was not found." ]
        AUTH_ERR_PERSONA_NOT_FOUND     = 18;
        [ description = "The requested persona is not active." ]
        AUTH_ERR_PERSONA_INACTIVE      = 19;
        [ description = "Invalid parental email." ]
        AUTH_ERR_INVALID_PMAIL         = 20;
        [ description = "One of the input fields was invalid" ]
        AUTH_ERR_INVALID_FIELD         = 21;
        [ description = "Invalid email" ]
        AUTH_ERR_INVALID_EMAIL         = 22;
        [ description = "Invalid account status" ]
        AUTH_ERR_INVALID_STATUS        = 23;
        [ description = "The requested persona is banned." ]
        AUTH_ERR_PERSONA_BANNED        = 32;
        [ description = "The persona does not exist or is invalid" ]
        AUTH_ERR_INVALID_PERSONA       = 33;
        [ description = "The command required the current password of the Nucleus account, the password provided is incorrect." ]
        AUTH_ERR_CURRENT_PASSWORD_REQUIRED = 34;

        [ description = "Account deactivated" ]
        AUTH_ERR_DEACTIVATED           = 41;
        [ description = "Account banned from online play" ]
        AUTH_ERR_BANNED                = 43;
        [ description = "Account has been disabled" ]
        AUTH_ERR_DISABLED              = 44;
        [ description = "Account is already logged in with a different persona." ]
        AUTH_ERR_DUPLICATE_LOGIN       = 45;

        [ description = "There was a restriction violation on a product" ]
        AUTH_ERR_RESTRICTION_VIOLATION                  = 46;
        [ description = "More than one wallet was found." ]
        AUTH_ERR_MULTIPLE_WALLET_ACCOUNTS_FOUND         = 47;
        [ description = "The product is not configured correctly in the catalog" ]
        AUTH_ERR_INVALID_PRODUCT_CONFIGURATION          = 48;
        [ description = "The product in the catalog does not have an entitlement tag defined" ]
        AUTH_ERR_ENTITLEMENT_TAG_MISSING                = 49;
        [ description = "Received an invalid response from the upstream server" ]
        AUTH_ERR_BAD_GATEWAY                            = 50;


        [ description = "No Associated product for this key" ]
        AUTH_ERR_NO_ASSOCIATED_PRODUCT = 54;
        [ description = "Invalid Mapping" ]
        AUTH_ERR_INVALID_MAPPING_ERROR = 55;
        [ description = "Group name not found" ]
        AUTH_ERR_NO_SUCH_GROUP_NAME    = 56;
        [ description = "Missing personaId" ]
        AUTH_ERR_MISSING_PERSONAID     = 57;
        [ description = "User not match with persona" ]
        AUTH_ERR_USER_DOES_NOT_MATCH_PERSONA = 58;
        [ description = "Group name failed whilelist test" ]
        AUTH_ERR_WHITELIST             = 59;
        [ description = "Failed linking persona and entitlement" ]
        AUTH_ERR_LINK_PERSONA          = 60;
        [ description = "No such group" ]
        AUTH_ERR_NO_SUCH_GROUP         = 61;
        [ description = "No active entitlement matching the criteria" ]
        AUTH_ERR_NO_SUCH_ENTITLEMENT   = 63;
        [ description = "The use count for the user's entitlement is 0" ]
        AUTH_ERR_USECOUNT_ZERO        = 66;
        [ description = "The entitlement tag is required but it's empty string in requirement" ]
        AUTH_ERR_ENTITLEMETNTAG_EMPTY = 67;
        [ description = "Groupname is required" ]
        AUTH_ERR_GROUPNAME_REQUIRED    = 70;
        [description="A groupname in group list is empty string"]
        AUTH_ERR_GROUPNAME_INVALID     = 71;
        [description="Too many entitlements were found in Nucleus. Requestor should use pagination to fetch smaller result sets."]
        AUTH_ERR_TOO_MANY_ENTITLEMENTS   = 72;
        [description="Page size in the request can't be 0"]
        AUTH_ERR_PAGESIZE_ZERO           = 73;

        [description="Entitlement tag is required"]
        AUTH_ERR_ENTITLEMENT_TAG_REQUIRED  = 74;
        [description="Page No in the request can't be 0"]
        AUTH_ERR_PAGENO_ZERO             = 75;
        [description="You only can modify an entitlement status to DISABLED, DELETED or BANNED"]
        AUTH_ERR_MODIFIED_STATUS_INVALID = 76;
        [description="You only can decrement the use count and can not increment it"]
        AUTH_ERR_USECOUNT_INCREMENT      = 77;
        [description="You can't make the termination date LATER, than it is currently.  You can make it sooner"]
        AUTH_ERR_TERMINATION_INVALID     = 78;
        [description="The entitlement doesn't exist"]
        AUTH_ERR_UNKNOWN_ENTITLEMENT     = 79;
        [description="PSU cutoff for entitlement type is less than the current connected user count"]
        AUTH_ERR_EXCEEDS_PSU_LIMIT  = 80;

        [description = "The opt-in name is required"]
        AUTH_ERR_OPTIN_NAME_REQUIRED     = 81;
        [description = "The provided opt-in is invalid "]
        AUTH_ERR_INVALID_OPTIN           = 82;
        [description = "German double opt in cannot be set to true if global opt in is not set to true as well"]
        AUTH_ERR_OPTIN_MISMATCH          = 83;
        [description = "The user has not opted in for the given optInType"]
        AUTH_ERR_NO_SUCH_OPTIN           = 84;

        [description = "The ID of the external authentication data is required"]
        AUTH_ERR_AUTHID_REQUIRED         = 85;
        [description = "The ID for the persona external reference is required"]
        AUTH_ERR_PERSONA_EXTREFID_REQUIRED   = 86;
        [description = "The requestor/game that is adding the external authentication is required"]
        AUTH_ERR_SOURCE_REQUIRED         = 87;
        [description = "The application ID or other identifier associated with the external authentication token is required"]
        AUTH_ERR_APPLICATION_REQUIRED    = 88;
        [description = "The token associated with the external authentication is required"]
        AUTH_ERR_TOKEN_REQUIRED          = 89;
        [description = "The input parameter exceeds the max value (255) on the server"]
        AUTH_ERR_PARAMETER_TOO_LENGTH    = 90;
        [description = "The persona external reference does not exist"]
        AUTH_ERR_NO_SUCH_PERSONA_REFERENCE = 91;
        [description = "Invalid source provided. The source doesn't exist in the system"]
        AUTH_ERR_INVALID_SOURCE            =93;
        [description = "The authentication data does not exist"]
        AUTH_ERR_NO_SUCH_AUTH_DATA         =94;
        [ description = "Account already has primary persona and updating primary via authentication is not allowed at this time." ]
        AUTH_ERR_NOT_PRIMARY_PERSONA       = 95;

        [ description = "User's status is inactive (disabled, banned, etc.)" ]
        AUTH_ERR_USER_INACTIVE         = 101;
        [ description = "User isn't awaiting activation." ]
        AUTH_ERR_UNEXPECTED_ACTIVATION = 102;
        [ description = "User's display name doesn't match gamer tag." ]
        AUTH_ERR_NAME_MISMATCH         = 103;
        [ description = "The supplied namespace was invalid." ]
        AUTH_ERR_INVALID_NAMESPACE     = 105;

        [ description = "The value contains invalid characters." ]
        AUTH_ERR_FIELD_MIN_LOWER_CHARS        = 198;
        [ description = "The value is too short." ]
        AUTH_ERR_FIELD_MIN_UPPER_CHARS        = 199;
        [ description = "The value is too long." ]
        AUTH_ERR_FIELD_MIN_DIGITS             = 200;
        [ description = "The value contains invalid characters." ]
        AUTH_ERR_FIELD_INVALID_CHARS          = 201;
        [ description = "The value is too short." ]
        AUTH_ERR_FIELD_TOO_SHORT              = 202;
        [ description = "The value must begin with a letter." ]
        AUTH_ERR_FIELD_MUST_BEGIN_WITH_LETTER = 204;
        [ description = "The value is missing." ]
        AUTH_ERR_FIELD_MISSING                = 205;
        [ description = "The value is not valid for this field." ]
        AUTH_ERR_FIELD_INVALID                = 206;
        [ description = "The value contains profanity or disallowed text." ]
        AUTH_ERR_FIELD_NOT_ALLOWED            = 207;
        [ description = "The value must contain special characters." ]
        AUTH_ERR_FIELD_NEEDS_SPECIAL_CHARS    = 208;
        [ description = "The value already exists." ]
        AUTH_ERR_FIELD_ALREADY_EXISTS         = 209;
        [ description = "The user requires parental consent." ]
        AUTH_ERR_FIELD_NEEDS_CONSENT          = 210;
        [ description = "The user is too young to create an account." ]
        AUTH_ERR_FIELD_TOO_YOUNG              = 211;
        [ description = "The associated user is too young, cannot associate with the new created account." ]
        AUTH_ERR_ASSOCIATION_TOO_YOUNG        = 212;

        [ description = "The maximum number of personas in this namespace has been reached for this account. Cannot create additional personas." ]
        AUTH_ERR_TOO_MANY_PERSONA_FOR_NAMESPACE = 300;

        [ description = "The user requires parental mail." ]
        AUTH_ERR_NEEDS_PMAIL          = 303;

        [ description = "A parent session is required to create a guest MLU session but was not found." ]
        AUTH_ERR_NO_PARENT_SESSION = 307;

        [ description = "No XBL token is available for the user. This is likely due to the user being externally available in MS, but not 'known' to Nucleus." ]
        AUTH_ERR_NO_XBLTOKEN = 308;

        [ description = "No PSN token is available for the user. This is likely due to the user being externally available in PSN, but not 'known' to Nucleus." ]
        AUTH_ERR_NO_PSNTOKEN = 309;

        [ description = "Attempting to grant an entitlement outside the trial period. For period trials, this means the current time is outside the start/end time. For managed lifecycle, this means we attempt to grant an entitlement with a status that doesn't match based on the start/end time (PENDING, ACTIVE, DISABLED for before, during, and after, respectively.)" ]
        AUTH_ERR_TRIAL_PERIOD_CLOSED = 310;

        [ description = "The first party token expired for the user. The user may need to relogin to Nucleus with a new token." ]
        AUTH_ERR_EXPIRED_1PTOKEN = 311;
    }

    slave
    {
        methods
        {
            [
                id = 10,
                description = "Login with Identity 2.0 Client Auth Code or Client JWT Access Token",
                details = "Login with Identity 2.0 Client Auth Code or Client JWT Access Token",
                errors = {
                    AUTH_ERR_INVALID_TOKEN,
                    AUTH_ERR_INVALID_REQUEST,
                    AUTH_ERR_EXPIRED_TOKEN,
                    AUTH_ERR_TRIAL_PERIOD_CLOSED,
                    AUTH_ERR_EXCEEDS_PSU_LIMIT,
                    AUTH_ERR_BANNED,
                    AUTH_ERR_INVALID_SANDBOX_ID,
                    AUTH_ERR_INVALID_FIELD,
                    AUTH_ERR_NO_SUCH_ENTITLEMENT,
                    AUTH_ERR_INVALID_AUTHCODE,
                    AUTH_ERR_INVALID_PLATFORM,
                    AUTH_ERR_DUPLICATE_LOGIN,
                    AUTH_ERR_NOT_PRIMARY_PERSONA
                },
                requires_authentication = false,
                obfuscate_platform_info = true
            ]
            LoginResponse login(LoginRequest);

            [
                id = 11,
                description = "Login for S2S standardized trust",
                details = "Login for S2S standardized trust",
                errors = {
                    AUTH_ERR_INVALID_TOKEN,
                    AUTH_ERR_EXCEEDS_PSU_LIMIT
                },
                http = {
                    resource = "trustedLogin",
                    method = "GET",
                    custom_request_headers = {
                        "Authorization" = "accessToken",
                        "X-Forwarded-UserId" = "id",
                        "X-Forwarded-UserType" = "idType"
                    }
                },
                requires_authentication = false
            ]
            LoginResponse trustedLogin(TrustedLoginRequest);

            [
                id = 30,
                description = "Fetch a Nucleus account",
                details = "Fetch and existing Nucleus account"
            ]
            AccountInfo getAccount();

            [
                id = 242,
                description = "Retrieve the email opt-in setting for the current user",
                details = "Retrieves the email opt-in setting for the current user",
                errors = {AUTH_ERR_INVALID_COUNTRY},
                requires_authentication = false
            ]
            GetEmailOptInSettingsResponse getEmailOptInSettings(GetEmailOptInSettingsRequest);

            [
                id = 246,
                description = "Retrieve latest TermsOfService Content",
                details = "Returns the latest TermsOfService Content for the provided country, platform, language",
                requires_authentication = false
            ]
            GetLegalDocContentResponse getTermsOfServiceContent(GetLegalDocContentRequest);

            [
                id = 47,
                description = "Retrieve latest PrivacyPolicy Content",
                details = "Returns the latest PrivacyPolicy Content for the provided country, platform, language",
                requires_authentication = false
            ]
            GetLegalDocContentResponse getPrivacyPolicyContent(GetLegalDocContentRequest);

            [
                id = 60,
                description = "Express login using email, password and optionally, the persona. Should be replaced with trustedLogin.",
                details = "Express login using email, password and optionally, the persona. Should be replaced with trustedLogin.",
                errors = {
                    AUTH_ERR_PERSONA_NOT_FOUND,
                    AUTH_ERR_PERSONA_INACTIVE,
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_PERSONA_BANNED,
                    AUTH_ERR_FIELD_MISSING,
                    AUTH_ERR_TOO_YOUNG,
                    AUTH_ERR_INVALID_FIELD,
                    AUTH_ERR_EXCEEDS_PSU_LIMIT,
                    AUTH_ERR_DUPLICATE_LOGIN,
                    AUTH_ERR_NOT_PRIMARY_PERSONA
                },
                requires_authentication = false,
                obfuscate_platform_info = true
            ]
            LoginResponse expressLogin(ExpressLoginRequest);

            [
                id = 61,
                description = "Stress testing login that bypasses Nucleus",
                details = "This RPC should only be enabled for stress testing and will bypass any Nucleus validation",
                errors = {
                    AUTH_ERR_FIELD_MISSING,
                    AUTH_ERR_EXISTS,
                    AUTH_ERR_INVALID_FIELD,
                    AUTH_ERR_EXCEEDS_PSU_LIMIT,
                    AUTH_ERR_DUPLICATE_LOGIN,
                    AUTH_ERR_NOT_PRIMARY_PERSONA
                },
                requires_authentication = false,
                client_export = false,
                obfuscate_platform_info = true
            ]
            LoginResponse stressLogin(StressLoginRequest);

            [
                id = 70,
                description = "Log out current user session",
                details = "Log out current user session",
                allowGuestCall = true
            ]
            void logout();

            [
                id = 90,
                description = "Fetch a Nucleus persona",
                details = "Fetch a Nucleus persona"
            ]
            GetPersonaResponse getPersona();

            [
                id = 100,
                description = "List all Nucleus personas in this namespace that belongs to the logged in Nucleus account",
                details = "List all Nucleus personas in this namespace that belongs to the logged in Nucleus account"
            ]
            ListPersonasResponse listPersonas();

            [
                id = 29,
                description = "List Entitlements for a Nucleus account that's not associated with any Nucleus personas",
                details = "List Entitlements for a Nucleus account that's not associated with any Nucleus personas",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_GROUPNAME_REQUIRED,
                    AUTH_ERR_TOO_MANY_ENTITLEMENTS,
                    AUTH_ERR_PAGESIZE_ZERO,
                    AUTH_ERR_GROUPNAME_INVALID,
                    AUTH_ERR_PAGENO_ZERO
                }
            ]
            Entitlements listUserEntitlements2(ListUserEntitlements2Request);

            [
                id = 48,
                description = "List Entitlements for a persona",
                details = "List entitlements for a nucleus persona",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_GROUPNAME_REQUIRED,
                    AUTH_ERR_TOO_MANY_ENTITLEMENTS,
                    AUTH_ERR_PAGESIZE_ZERO,
                    AUTH_ERR_GROUPNAME_INVALID,
                    AUTH_ERR_PAGENO_ZERO
                }
            ]
            Entitlements listPersonaEntitlements2(ListPersonaEntitlements2Request);

            [
                id = 39,
                description = "Grant an entitlement to the logged in account and optionally link it with the logged in persona",
                details = "Grant an entitlement to the logged in account and optionally link it with the logged in persona",
                requires_authentication = true,
                requiresUserSession = false,
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_GROUPNAME_REQUIRED,
                    AUTH_ERR_ENTITLEMENT_TAG_REQUIRED,
                    AUTH_ERR_WHITELIST,
                    AUTH_ERR_LINK_PERSONA
                }
            ]
            GrantEntitlement2Response grantEntitlement2(GrantEntitlement2Request);

            // grant entitlement to persona
            [
                id = 31,
                description = "Grant an entitlement to the logged in account and optionally link it with the logged in persona",
                details = "Grant an entitlement to the logged in account and optionally link it with the logged in persona",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_WHITELIST,
                    AUTH_ERR_LINK_PERSONA
                }
            ]
            void grantEntitlement(PostEntitlementRequest);

            [
                id = 32,
                description = "List entitlements tied the logged in user",
                details = "List entitlements tied to the logged in Nucleus account and can select whether or not to list only the ones tied to the logged in Nucleus persona",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_GROUPNAME_REQUIRED,
                    AUTH_ERR_TOO_MANY_ENTITLEMENTS,
                    AUTH_ERR_PAGESIZE_ZERO,
                    AUTH_ERR_PAGENO_ZERO,
                    AUTH_ERR_GROUPNAME_INVALID
                }
            ]
            Entitlements listEntitlements(ListEntitlementsRequest);

            [
                id = 34,
                description = "Get the use count on an entitlement for the logged in user",
                details = "Get the use count on an entitlement for the logged in user",
                errors = {
                    AUTH_ERR_NO_SUCH_ENTITLEMENT,
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_ENTITLEMETNTAG_EMPTY
                }
            ]
            UseCount getUseCount(GetUseCountRequest);

            [
                id = 35,
                description = "Decrement the use count of a particular entitlement",
                details = "Decrement the use count of a particular entitlement",
                errors = {
                    AUTH_ERR_NO_SUCH_ENTITLEMENT,
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_USECOUNT_ZERO,
                    AUTH_ERR_ENTITLEMETNTAG_EMPTY
                }
            ]
            DecrementUseCount decrementUseCount(DecrementUseCountRequest);

            [
                id = 43,
                description = "Modify an existing entitlement. Sets the values to what's specified",
                details = "Modify an existing entitlement. Sets the values to what's specified",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_MODIFIED_STATUS_INVALID,
                    AUTH_ERR_USECOUNT_INCREMENT,
                    AUTH_ERR_TERMINATION_INVALID,
                    AUTH_ERR_WHITELIST,
                    AUTH_ERR_UNKNOWN_ENTITLEMENT
                }
            ]
            void modifyEntitlement2(ModifyEntitlement2Request);

            [
                id = 52,
                description = "Check whether a user has the given opt-in",
                details = "Check whether a user has the given opt-in. If yes, the Blaze server will return true. Otherwise false.",
                errors = {
                    AUTH_ERR_OPTIN_NAME_REQUIRED,
                    AUTH_ERR_INVALID_OPTIN
                }
            ]
            OptInValue getOptIn(OptInRequest);

            [
                id = 53,
                description = "Enable an opt-in of a particular type to a user",
                details = "Enable an opt-in of a particular type to a user",
                errors = {
                    AUTH_ERR_OPTIN_NAME_REQUIRED,
                    AUTH_ERR_INVALID_OPTIN,
                    AUTH_ERR_OPTIN_MISMATCH
                }
            ]
            void enableOptIn(OptInRequest);

            [
                id = 54,
                description = "Disable an opt-in of a particular type to a user",
                details = "Disable an opt-in of a particular type to a user",
                errors = {
                    AUTH_ERR_OPTIN_NAME_REQUIRED,
                    AUTH_ERR_INVALID_OPTIN
                }
            ]
            void disableOptIn(OptInRequest);

            [
                id = 230,
                description = "Create a WAL user session",
                details = "Create a WAL user session",
                obfuscate_platform_info = true
            ]
            UserLoginInfo createWalUserSession();

            [
                id = 240,
                description = "(DEPRECATED) Check a Legal Doc version",
                details = "(DEPRECATED) Check if the logged in Nucleus account has accepted the Legal Doc version. It should not be used without consultation with EA Online production staff",
                client_export = false
            ]
            CheckLegalDocResponse checkLegalDoc(CheckLegalDocRequest);

            [
                id = 260,
                description = "Fetch origin persona",
                details = "Fetch origin persona",
                errors = {
                    AUTH_ERR_INVALID_USER,
                    AUTH_ERR_PERSONA_NOT_FOUND
                }
            ]
            GetPersonaResponse getOriginPersona(GetOriginPersonaRequest);

            [
                id = 290,
                description = "Guest login",
                details = "Supports guest logins for MLU by associating the guest session with the parent session on the same connection.",
                requires_authentication = false,
                allowGuestCall = true,
                errors = {
                    AUTH_ERR_NO_PARENT_SESSION
                }
            ]
            SessionInfo guestLogin();

            [
                id = 300,
                internal = true,
                client_export = false,
                description = "Decrypt encrypted BlazeIds",
                details = "Decrypt encrypted BlazeIds",
                errortype = GetDecryptedBlazeIdsResponseError,
                errors = {
                    AUTH_ERR_INVALID_USER
                },
                requires_authentication = false,
                allowGuestCall = true
            ]
            GetDecryptedBlazeIdsResponse getDecryptedBlazeIds(GetDecryptedBlazeIdsRequest);

            [
                id = 310,
                description = "Update user's Identity 2.0 Client JWT Access Token",
                details = "Update user's Identity 2.0 Client JWT Access Token",
                errors = {
                    AUTH_ERR_INVALID_TOKEN,
                    AUTH_ERR_EXPIRED_TOKEN
                }
            ]
            UpdateAccessTokenResponse updateAccessToken(UpdateAccessTokenRequest);

        } // methods
    } // slave

}
}
}
