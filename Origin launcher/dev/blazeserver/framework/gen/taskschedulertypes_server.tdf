
[headername="framework/tdf/frameworkconfigtypes_server.h"]
#include "framework/gen/frameworkconfigtypes_server.tdf"

namespace Blaze
{

[
    description = "",
    details = ""
]

class TaskSchedulerConfig
{
    [tag="dbnp", reconfigurable="no", description="The database instance names (per platform) that are used by the task scheduler."]
    DbNameByPlatformTypeMap mDbNamesByPlatform;
    [tag="updt", default="5s", reconfigurable="yes", description="Governs how often updates will occur for INPROGRESS one time tasks.  Min is 5s."]
    TimeValue mOneTimeTaskUpdateInterval;
    [tag="wait", default=4, reconfigurable="yes", description="max number of update interval periods that can be missed before the instance that's executing the INPROGRESS one time task is assumed dead andanother instance takes over.  Min is 2"]
    uint32_t mOneTimeTaskMaxIdleUpdatePeriods;
};

typedef uint64_t TaskId;

enum TaskStatus
{
    TASK_STATUS_SCHEDULED = 0,
    TASK_STATUS_INPROGRESS,
    TASK_STATUS_COMPLETED,
    TASK_STATUS_INVALID
};

class TaskInfo
{
    [tag="task", description="The unique TaskId of this task"]
    TaskId mTaskId;
    [tag="name", description="The unique name of this task"]
    string(128) mTaskName;
    [tag="comp", description="The component id of the component that will execute this task"]
    ComponentId mCompId;
    [tag="tdf", description="The input parameter tdf for this task"]
    variable mTdf;
    [tag="strt", description="The start time for this task in seconds"]
    uint32_t mStart;
    [tag="dur", description="The duration for this task in seconds"]
    uint32_t mDuration;
    [tag="rcur", description="The frequency of recurrence for this task in seconds"]
    uint32_t mRecurrence;
    [tag="stat", description="The status of this task.  Defaults to TASK_STATUS_SCHEDULED"]
    TaskStatus mStatus;
};

} // Blaze



