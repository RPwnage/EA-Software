
define dumptls
    set $i = 0
    while ($i < 'Blaze::sThreadLocalInfoCount')
        set $printIt = 0
        set $done = 0
        if $argc == 0
            set $printIt = 1
        else
            if $arg0 == 'Blaze::sThreadLocalInfo'[$i].mThreadId
                set $printIt = 1
                set $done = 1
            end
            if $arg0 == 'Blaze::sThreadLocalInfo'[$i].mPid
                set $printIt = 1
                set $done = 1
            end
        end
        if $printIt == 1
            printf "-->'Blaze::sThreadLocalInfo'[%d]: \n", $i
            printf "tid %d\n", 'Blaze::sThreadLocalInfo'[$i].mThreadId
            printf "pid %d\n", 'Blaze::sThreadLocalInfo'[$i].mPid
            printf "gSelector=%p\n", *'Blaze::sThreadLocalInfo'[$i].mSelector
            printf "gController=%p\n", *'Blaze::sThreadLocalInfo'[$i].mController
            printf "gSliverManager=%p\n", *'Blaze::sThreadLocalInfo'[$i].mSliverManager
            printf "gUserSessionManager=%p\n", *'Blaze::sThreadLocalInfo'[$i].mUserSessionManager
            printf "gUserSessionMaster=%p\n", *'Blaze::sThreadLocalInfo'[$i].mUserSessionMaster
            printf "gOutboundHttpService=%p\n", *'Blaze::sThreadLocalInfo'[$i].mOutboundHttpService
            printf "gFiberManager=%p\n", *'Blaze::sThreadLocalInfo'[$i].mFiberManager
            printf "gCurrentFiber=%p\n", *'Blaze::sThreadLocalInfo'[$i].mCurrentFiber
        end
        if $done == 1
            loop_break
        end
        set $i = $i + 1
    end
end

document dumptls
dumptls: This function will lookup the thread local globals used by the blaze server based on either
    thread ID or PID (from a core file) and print the values of the interesting globals 
    (like gCurrentContext).  This is to work around a bug in GDB which prevents printing of TLS
    variables 
end

define settls
    set $i = 0
    while ($i < 'Blaze::sThreadLocalInfoCount')
        set $done = 0
        if (($arg0 == 'Blaze::sThreadLocalInfo'[$i].mThreadId) || ($arg0 == 'Blaze::sThreadLocalInfo'[$i].mPid))
            set $done = 1

            set $sThreadLocalInfo=&'Blaze::sThreadLocalInfo'[$i]
            set $gSelector=('Blaze::Selector'*)(*'Blaze::sThreadLocalInfo'[$i].mSelector)
            set $gController=('Blaze::Controller'*)(*'Blaze::sThreadLocalInfo'[$i].mController)
            set $gSliverManager=('Blaze::SliverManager'*)(*'Blaze::sThreadLocalInfo'[$i].mSliverManager)
            set $gUserSessionManager=('Blaze::UserSessionManager'*)(*'Blaze::sThreadLocalInfo'[$i].mUserSessionManager)
            set $gUserSessionMaster=('Blaze::UserSessionMaster'*)(*'Blaze::sThreadLocalInfo'[$i].mUserSessionMaster)
            set $gOutboundHttpService=('Blaze::OutboundHttpService'*)(*'Blaze::sThreadLocalInfo'[$i].mOutboundHttpService)
            set $gFiberManager=('Blaze::FiberManager'*)(*'Blaze::sThreadLocalInfo'[$i].mFiberManager)
            set $gCurrentFiber=('Blaze::Fiber'*)(*'Blaze::sThreadLocalInfo'[$i].mCurrentFiber)

            printf "tls successfully set fo pid %d\n", 'Blaze::sThreadLocalInfo'[$i].mPid
        end
        if $done == 1
            loop_break
        end
        set $i++
    end
    if $done != 1
        printf "tls could not be set. Unrecognized id %d\n", $arg0
    end
end

document settls
settls <ThreadId|Pid>: This function sets up the thread local globals used by the blaze server based on either
    thread ID or PID (from a core file). 
end

define printbasicinfo
    printf "AllocatorType: "
    p AllocatorManager::msInstance->mAllocatorType
    printf "Blaze Version: %s\n", Blaze::gProcessController->mVersion.mVersion->mTdfStringPointer
    printf "Blaze Build Location: %s\n", Blaze::gProcessController->mVersion.mBuildLocation->mTdfStringPointer
    printf "Blaze P4 Location: %s\n", Blaze::gProcessController->mVersion.mP4DepotLocation->mTdfStringPointer
    set $exceptionEnabled = Blaze::gProcessController->mExceptionConfig.mExceptionHandlingEnabled
    if ($exceptionEnabled == 1)
       printf "ExceptionHandlingEnabled :True\n"
    else
       printf "ExceptionHandlingEnabled :False\n"
    end
    
    set $i = 0
    while ($i < 'Blaze::sThreadLocalInfoCount')
        set $done = 0
        if (($arg0 == 'Blaze::sThreadLocalInfo'[$i].mThreadId) || ($arg0 == 'Blaze::sThreadLocalInfo'[$i].mPid))
            set $done = 1
            
            set $gController=('Blaze::Controller'*)(*'Blaze::sThreadLocalInfo'[$i].mController)
            printf "Controller state: "
            p $gController->mState
	       
            #if ( $gController->mState == Blaze::ComponentStub::SHUTTING_DOWN)
            #    printf "ShutdownReason: \n"
            #    p $gController->mShutdownReason
            #end
        
            printf "instance name: %s\n",&($gController->mInstanceName)
            printf "instance id: %d\n", $gController->mInstanceId
            printf "base name: %s\n", &($gController->mBaseName)
        end
        if $done == 1
            loop_break
        end
        set $i++
    end
    if $done != 1
        printf "basic info could not be printed. Unrecognized id %d\n", $arg0
    end
end

document printbasicinfo
printbasicinfo: This function prints some very basic info about the Blaze instance.
end

define infoblazethread
    set $i = 0
    while ($i < 'Blaze::sThreadLocalInfoCount')
	if ((*'Blaze::sThreadLocalInfo'[$i].mCurrentThread)->mThreadType == 'Blaze::BlazeThread::SERVER' )
		printf " * "
		set $gController=('Blaze::Controller'*)(*'Blaze::sThreadLocalInfo'[$i].mController)
	else
	        printf " - "
	end
	printf "pid(%d) ", 'Blaze::sThreadLocalInfo'[$i].mPid
	p (*'Blaze::sThreadLocalInfo'[$i].mCurrentThread)->mThreadType
        set $i = $i + 1
    end
end

document infoblazethread
infoblazethread: This function prints useful TLS info target id of each Blaze server. The output of this function
    is the input to the settls function. 
end