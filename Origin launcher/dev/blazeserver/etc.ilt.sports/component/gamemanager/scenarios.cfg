
//gamemanager.scenariosConfig = {
    globalAttributes = { 
        "Blaze::GameManager::StartMatchmakingRequest.sessionData.sessionDuration" = { attrName = "SESSION_DURATION", isOptional=true }
        "Blaze::GameManager::StartMatchmakingRequest.sessionData.sessionMode" = { attrName = "SESSION_MODE", isOptional=true }
    }


    globalRules = {
        "Predefined_AvoidPlayersRule"       = { "Predefined_AvoidPlayersRule"       = { "avoidList" = { attrName = "AVOID_LIST", isOptional=true } } }
        "Predefined_PreferredPlayersRule"   = { "Predefined_PreferredPlayersRule"   = { "preferredList" = { attrName = "PREFER_LIST", isOptional=true } } }

        "Predefined_RankedGameRule"       = { "Predefined_RankedGameRule"       = { "minFitThreshold"    = { attrName = "RANKED_FIT_THR", isOptional=true }, "desiredValue" = { attrName = "RANKED_DESIRE", isOptional=true } } }
        "Predefined_TeamCountRule"        = { "Predefined_TeamCountRule"        = { "teamCount"          = { attrName = "TEAM_COUNT", isOptional=true } } }
        "geoLocationRule"                 = { "geoLocationRule"                 = { "minFitThreshold"    = { attrName = "GEO_LOC_FIT_THR", isOptional=true } } }
        "modRule"                         = { "modRule"                         = { "desiredModRegister" = { attrName = "DESIRED_MOD", isOptional=true }, "isEnabled" = { attrName = "IS_MOD_ENABLED", isOptional=true } } }
        "Predefined_HostBalancingRule"    = { "Predefined_HostBalancingRule"    = { "minFitThreshold"    = { attrName = "HOST_BALANCING_FIT_THR", isOptional=true } } }
        //"Predefined_HostViabilityRule"    = { "Predefined_HostViabilityRule"    = { "minFitThreshold"    = { attrName = "HOST_VIABILITY_FIT_THR", isOptional=true } } }
        //"Predefined_ExpandedPingSiteRule" = { "Predefined_ExpandedPingSiteRule" = { "rangeOffsetList"    = { attrName = "PING_SITE_OFFSET_LIST", isOptional=true }, "latencyCalcMethod" = { attrName = "LATENCY_CALC_METHOD", default="BEST_LATENCY", isOptional=true },
        //                                                                            "sessionMatchCalcMethod" = { attrName = "SESSION_MATCH_CALC_METHOD", default="MY_BEST", isOptional=true }, "pingSiteSelectionMethod" = { attrName = "PING_SITE_SELECTION_METHOD", default="STD_DEV", isOptional=true } } }

        "fut2TournyId"   = { "gameAttributeRules.fut2TournyId"   = { "minFitThreshold" = { attrName = "fut2TournyId_FIT_THR", isOptional=true },   "desiredValues" = { attrName = "fut2TournyId_DESIRED", isOptional=true } } }
        "fut2TournyRnd"  = { "gameAttributeRules.fut2TournyRnd"  = { "minFitThreshold" = { attrName = "fut2TournyRnd_FIT_THR", isOptional=true },  "desiredValues" = { attrName = "fut2TournyRnd_DESIRED", isOptional=true } } }
        "fut2StarLevel"  = { "gameAttributeRules.fut2StarLevel"  = { "minFitThreshold" = { attrName = "fut2StarLevel_FIT_THR", isOptional=true },  "desiredValues" = { attrName = "fut2StarLevel_DESIRED", isOptional=true } } }
        "futTournyCrit1" = { "gameAttributeRules.futTournyCrit1" = { "minFitThreshold" = { attrName = "futTournyCrit1_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "futTournyCrit1_DESIRED", isOptional=true } } }
        "futTournyCrit2" = { "gameAttributeRules.futTournyCrit2" = { "minFitThreshold" = { attrName = "futTournyCrit2_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "futTournyCrit2_DESIRED", isOptional=true } } }
        "futNewUser"     = { "gameAttributeRules.futNewUser"     = { "minFitThreshold" = { attrName = "futNewUser_FIT_THR", isOptional=true },     "desiredValues" = { attrName = "futNewUser_DESIRED", isOptional=true } } }

        "OSDK_rosterVersion" = { "gameAttributeRules.OSDK_rosterVersion" = { "minFitThreshold" = { attrName = "OSDK_rosterVersion_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_rosterVersion_DESIRED", isOptional=true } } }
        "OSDK_categoryId" = { "gameAttributeRules.OSDK_categoryId" = { "minFitThreshold" = { attrName = "OSDK_categoryId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_categoryId_DESIRED", isOptional=true } } }
        "OSDK_sponsoredEventId" = { "gameAttributeRules.OSDK_sponsoredEventId" = { "minFitThreshold" = { attrName = "OSDK_sponsoredEventId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_sponsoredEventId_DESIRED", isOptional=true } } }
        "OSDK_arenaChallengeId" = { "gameAttributeRules.OSDK_arenaChallengeId" = { "minFitThreshold" = { attrName = "OSDK_arenaChallengeId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_arenaChallengeId_DESIRED", isOptional=true } } }
        "OSDK_ChlngrClubId" = { "gameAttributeRules.OSDK_ChlngrClubId" = { "minFitThreshold" = { attrName = "OSDK_ChlngrClubId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_ChlngrClubId_DESIRED", isOptional=true } } }
        "OSDK_clubId" = { "gameAttributeRules.OSDK_clubId" = { "minFitThreshold" = { attrName = "OSDK_clubId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_clubId_DESIRED", isOptional=true } } }
        "OSDK_clubIdInverse" = { "gameAttributeRules.OSDK_clubIdInverse" = { "minFitThreshold" = { attrName = "OSDK_clubIdInverse_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_clubIdInverse_DESIRED", isOptional=true } } }
        "OSDK_clubGamegroupSize" = { "gameAttributeRules.OSDK_clubGamegroupSize" = { "minFitThreshold" = { attrName = "OSDK_clubGamegroupSize_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_clubGamegroupSize_DESIRED", isOptional=true } } }
        "OSDK_clubIsDDP" = { "gameAttributeRules.OSDK_clubIsDDP" = { "minFitThreshold" = { attrName = "OSDK_clubIsDDP_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_clubIsDDP_DESIRED", isOptional=true } } }
        "OSDK_language" = { "gameAttributeRules.OSDK_language" = { "minFitThreshold" = { attrName = "OSDK_language_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_language_DESIRED", isOptional=true } } }
        "OSDK_tourTeamIdInverse" = { "gameAttributeRules.OSDK_tourTeamIdInverse" = { "minFitThreshold" = { attrName = "OSDK_tourTeamIdInverse_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_tourTeamIdInverse_DESIRED", isOptional=true } } }
        "OSDK_tourId" = { "gameAttributeRules.OSDK_tourId" = { "minFitThreshold" = { attrName = "OSDK_tourId_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_tourId_DESIRED", isOptional=true } } }
        "OSDK_tourTier" = { "gameAttributeRules.OSDK_tourTier" = { "minFitThreshold" = { attrName = "OSDK_tourTier_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_tourTier_DESIRED", isOptional=true } } }
        "OSDK_playoffDivision" = { "gameAttributeRules.OSDK_playoffDivision" = { "minFitThreshold" = { attrName = "OSDK_playoffDivision_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_playoffDivision_DESIRED", isOptional=true } } }
        "OSDK_gameMode" = { "gameAttributeRules.OSDK_gameMode" = { "minFitThreshold" = { attrName = "OSDK_gameMode_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_gameMode_DESIRED", isOptional=true } } }
        "OSDK_coop" = { "gameAttributeRules.OSDK_coop" = { "minFitThreshold" = { attrName = "OSDK_coop_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "OSDK_coop_DESIRED", isOptional=true } } }
        "gameSpeed" = { "gameAttributeRules.gameSpeed" = { "minFitThreshold" = { attrName = "gameSpeed_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "gameSpeed_DESIRED", isOptional=true } } }
        "fifaClubTournament" = { "gameAttributeRules.fifaClubTournament" = { "minFitThreshold" = { attrName = "fifaClubTournament_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaClubTournament_DESIRED", isOptional=true } } }
        "gamePoints" = { "gameAttributeRules.gamePoints" = { "minFitThreshold" = { attrName = "gamePoints_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "gamePoints_DESIRED", isOptional=true } } }
        "fifaGameMode" = { "gameAttributeRules.fifaGameMode" = { "minFitThreshold" = { attrName = "fifaGameMode_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaGameMode_DESIRED", isOptional=true } } }
        "fifaTeamLevel" = { "gameAttributeRules.fifaTeamLevel" = { "minFitThreshold" = { attrName = "fifaTeamLevel_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaTeamLevel_DESIRED", isOptional=true } } }
        "fifaTeamStarRating" = { "gameAttributeRules.fifaTeamStarRating" = { "minFitThreshold" = { attrName = "fifaTeamStarRating_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaTeamStarRating_DESIRED", isOptional=true } } }
        "fifaTeamOVR" = { "gameAttributeRules.fifaTeamOVR" = { "minFitThreshold" = { attrName = "fifaTeamOVR_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaTeamOVR_DESIRED", isOptional=true } } }
        "fifaHalfLength" = { "gameAttributeRules.fifaHalfLength" = { "minFitThreshold" = { attrName = "fifaHalfLength_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaHalfLength_DESIRED", isOptional=true } } }
        "fifaCustomController" = { "gameAttributeRules.fifaCustomController" = { "minFitThreshold" = { attrName = "fifaCustomController_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaCustomController_DESIRED", isOptional=true } } }
        "fifaGameSpeed" = { "gameAttributeRules.fifaGameSpeed" = { "minFitThreshold" = { attrName = "fifaGameSpeed_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaGameSpeed_DESIRED", isOptional=true } } }
        "fifaDivision" = { "gameAttributeRules.fifaDivision" = { "minFitThreshold" = { attrName = "fifaDivision_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaDivision_DESIRED", isOptional=true } } }
        "fifaCup" = { "gameAttributeRules.fifaCup" = { "minFitThreshold" = { attrName = "fifaCup_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaCup_DESIRED", isOptional=true } } }
        "fifaRoster" = { "gameAttributeRules.fifaRoster" = { "minFitThreshold" = { attrName = "fifaRoster_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaRoster_DESIRED", isOptional=true } } }
        "fifaPPT" = { "gameAttributeRules.fifaPPT" = { "minFitThreshold" = { attrName = "fifaPPT_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaPPT_DESIRED", isOptional=true } } }
        "fifaGKControl" = { "gameAttributeRules.fifaGKControl" = { "minFitThreshold" = { attrName = "fifaGKControl_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaGKControl_DESIRED", isOptional=true } } }
        "fifaClubNumPlayers" = { "gameAttributeRules.fifaClubNumPlayers" = { "minFitThreshold" = { attrName = "fifaClubNumPlayers_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaClubNumPlayers_DESIRED", isOptional=true } } }
        "fifaClubMMAny" = { "gameAttributeRules.fifaClubMMAny" = { "minFitThreshold" = { attrName = "fifaClubMMAny_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaClubMMAny_DESIRED", isOptional=true } } }
        "fifaClubMMGK" = { "gameAttributeRules.fifaClubMMGK" = { "minFitThreshold" = { attrName = "fifaClubMMGK_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaClubMMGK_DESIRED", isOptional=true } } }
        "fifaMatchClubType" = { "gameAttributeRules.fifaMatchClubType" = { "minFitThreshold" = { attrName = "fifaMatchClubType_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaMatchClubType_DESIRED", isOptional=true } } }
        "fifaMatchGuests" = { "gameAttributeRules.fifaMatchGuests" = { "minFitThreshold" = { attrName = "fifaMatchGuests_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaMatchGuests_DESIRED", isOptional=true } } }
//        "fifaAvoidTeam" = { "gameAttributeRules.fifaAvoidTeam" = { "minFitThreshold" = { attrName = "fifaAvoidTeam_FIT_THR", isOptional=true }, "desiredValues" = { attrName = "fifaAvoidTeam_DESIRED", isOptional=true } } }

        "fifaSkillLevel"   = { "userExtendedDataRuleMap.fifaSkillLevel" = { "minFitThreshold" = { attrName = "fifaSkillLevel_FIT_THRESHOLD", default = "OSDK_matchRelax" } } }

        // Add the player attribute rules here, if anything ever starts using them.         
        

        "Predefined_TeamMinSizeRule"    = { "Predefined_TeamMinSizeRule"    = { "rangeOffsetList" = { attrName = "TEAM_MIN_SIZE_RANGE_OFFSET", isOptional=true },  "teamMinSize" = { attrName = "TEAM_MIN_SIZE", isOptional=true } } }
        "Predefined_TeamBalanceRule"    = { "Predefined_TeamBalanceRule"    = { "rangeOffsetList" = { attrName = "TEAM_BALANCE_RANGE_OFFSET", isOptional=true },  "maxTeamSizeDifference" = { attrName = "TEAM_MAX_SIZE_DIFF", isOptional=true } } }
        "teamUEDBalanceRuleMap"         = { "teamUEDBalanceRuleMap"         = { "rangeOffsetList" = { attrName = "TEAM_UED_RANGE_OFFSET", isOptional=true },  "ruleName" = { attrName = "TEAM_UED_RULE_NAME", isOptional=true } } }
        "teamUEDPositionParityRuleMap"  = { "teamUEDPositionParityRuleMap"  = { "rangeOffsetList" = { attrName = "TEAM_UED_PP_RANGE_OFFSET", isOptional=true },  "ruleName" = { attrName = "TEAM_UED_PP_RULE_NAME", isOptional=true } } }
        "teamCompositionRuleMap"        = { "teamCompositionRuleMap"        = { "minFitThreshold" = { attrName = "TEAM_COMP_FIT_THR", isOptional=true },  "ruleName" = { attrName = "TEAM_COMP_RULE_NAME", isOptional=true } } }

        "Predefined_PlayerSlotUtilizationRule" = { "Predefined_PlayerSlotUtilizationRule" = { 
                "rangeOffsetList" = { attrName = "SLOT_UTIL_RANGE_OFFSET", isOptional=true }  
                "desiredPercentFull" = { attrName = "SLOT_UTIL_DESIRE", isOptional=true }
                "maxPercentFull" = { attrName = "SLOT_UTIL_MAX", isOptional=true }
                "minPercentFull" = { attrName = "SLOT_UTIL_MIN", isOptional=true }
             }
        }

        "Predefined_PlayerCountRule" = { "Predefined_PlayerCountRule" = { 
                "rangeOffsetList" = { attrName = "PLAYER_COUNT_RANGE_OFFSET", isOptional=true }  
                "desiredPlayerCount" = { attrName = "PLAYER_COUNT_DESIRE", isOptional=true }
                "maxPlayerCount" = { attrName = "PLAYER_COUNT_MAX_COUNT", isOptional=true }
                "minPlayerCount" = { attrName = "PLAYER_COUNT_MIN_COUNT", isOptional=true }
             }
        }

        "Predefined_TotalPlayerSlotsRule" = { "Predefined_TotalPlayerSlotsRule" = { 
                "rangeOffsetList" = { attrName = "TOTAL_SLOTS_RANGE_OFFSET", isOptional=true }  
                "desiredTotalPlayerSlots" = { attrName = "TOTAL_SLOTS_DESIRE", isOptional=true }
                "maxTotalPlayerSlots" = { attrName = "TOTAL_SLOTS_MAX", isOptional=true }
                "minTotalPlayerSlots" = { attrName = "TOTAL_SLOTS_MIN", isOptional=true }
             }
        }
        
        "Predefined_FreePlayerSlotsRule"    = { "Predefined_FreePlayerSlotsRule"    = { "minFreeSlots" = { attrName = "FREE_SLOTS_MIN", isOptional=true },  "maxFreeSlots" = { attrName = "FREE_SLOTS_MAX", isOptional=true } } }
        "Predefined_GameNameRule"           = { "Predefined_GameNameRule"           = { "searchString" = { attrName = "GAME_NAME_SEARCH", isOptional=true } } }
    }

    scenarioRuleMap = {
    }

    globalFilters = [
        #include "../etc/component/gamemanager/tools/matchmaking_global_filters_list.cfg"
         "platformFilter"
    ]

//     globalInputSanitizers = ["gameDurationSanitizer", "modeChoiceSanitizer"]
    globalInputSanitizers = ["pingSiteSanitizer"] 

    // Named Scenarios
    scenarios = {

        "ILT" = {
            totalDuration = "15s"   // Overridden by SESSION_DURATION
            subsessions = {
                
                "ILTSession" = {                         // Sub session names are arbitrary. Displayed via GOSCC.
                    
                    rulesList = []  // We're just using all the global rules:
         
                    matchmakingSettings = {                         
                        sessionMode = ["FindGame", "CreateGame"]    // Overridden
                    }

                    createGameAttributes = {

                        "Blaze::GameManager::GameCreationData.networkTopology" = { attrName = "NET_TOPOLOGY", isOptional=true }

                        // Note: only one attribute is currently provided for the create game settings:
                        "Blaze::GameManager::GameCreationData.gameAttribs[OSDK_gameMode]" = { attrName = "GAME_MODE", isOptional=true }

                        "Blaze::GameManager::GameCreationData.gameSettings" = { attrName = "GAME_SETTINGS", isOptional=true }
                        "Blaze::GameManager::GameCreationData.roleInformation" = { attrName = "ROLE_INFORMATION", isOptional=true }
                    }
                }
            }
        }
        
        "ILT_Packer" = {
            totalDuration = "15s"   // Overridden by SESSION_DURATION
            subsessions = {
                
                "ILTSession" = {                         // Sub session names are arbitrary. Displayed via GOSCC.
                    
                    // Not specifying any rules, because this is a packer session
                    filtersList = [
                        "participantCapacityFilter" // PACKER_TODO: conditionally use global createGameTemplate filter, but that needs to be subsession-specific(if subsession does not use a template, it shouldn't apply, this means we need to make a caller.createGameTemplate property, and make the createGameFilter conditional on existence of caller.createGameTemplate property)
                    ]

                    matchmakingSettings = {
                        sessionMode = [ ]    // Overridden by globalAttributes at the top of this file, see: SESSION_MODE, passed up from the stress client!
                    }

                    createGameAttributes = {

                        "Blaze::GameManager::GameCreationData.networkTopology" = { attrName = "NET_TOPOLOGY", isOptional=true }

                        // Note: only one attribute is currently provided for the create game settings:
                        "Blaze::GameManager::GameCreationData.gameAttribs[OSDK_gameMode]" = { attrName = "GAME_MODE", isOptional=true }

                        "Blaze::GameManager::GameCreationData.gameSettings" = { attrName = "GAME_SETTINGS", isOptional=true }
                        "Blaze::GameManager::GameCreationData.roleInformation" = { attrName = "ROLE_INFORMATION", isOptional=true }
                    }


                    // The CreateGameTemplate will be used as the basis for the create game request:
                    createGameTemplate = "packerGameILT"
                }
            }
        }
        
        "ILT_Packer_CSD" = {
            totalDuration = "15s"   // Overridden by SESSION_DURATION
            subsessions = {
                
                "ILTSession" = {                         // Sub session names are arbitrary. Displayed via GOSCC.
                    
                    // Not specifying any rules, because this is a packer session
                    filtersList = [
                        "participantCapacityFilter" // PACKER_TODO: conditionally use global createGameTemplate filter, but that needs to be subsession-specific(if subsession does not use a template, it shouldn't apply, this means we need to make a caller.createGameTemplate property, and make the createGameFilter conditional on existence of caller.createGameTemplate property)
                    ]

                    matchmakingSettings = {
                        sessionMode = [ ]    // Overridden by globalAttributes at the top of this file, see: SESSION_MODE, passed up from the stress client!
                    }

                    createGameAttributes = {

                        "Blaze::GameManager::GameCreationData.networkTopology" = { attrName = "NET_TOPOLOGY", isOptional=true }

                        // Note: only one attribute is currently provided for the create game settings:
                        "Blaze::GameManager::GameCreationData.gameAttribs[OSDK_gameMode]" = { attrName = "GAME_MODE", isOptional=true }

                        "Blaze::GameManager::GameCreationData.gameSettings" = { attrName = "GAME_SETTINGS", isOptional=true }
                        "Blaze::GameManager::GameCreationData.roleInformation" = { attrName = "ROLE_INFORMATION", isOptional=true }
                    }


                    // The CreateGameTemplate will be used as the basis for the create game request:
                    createGameTemplate = "packerGameILTCSD"
                }
            }
        }
    }
//}
