// Defines the RPCs and async notifications used in the proclubsCustom component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="proclubscustom/tdf/proclubscustomtypes.h" ]
#include "proclubscustom/gen/proclubscustomtypes.tdf"

[ 
  client_include = false,
  headername="proclubscustom/tdf/proclubscustom_server.h" 
]
#include "proclubscustom/gen/proclubscustom_server.tdf"


namespace Blaze  
{
namespace proclubscustom
{
[
  id = custom/43,
  description = "A component used for FIFA 21 to store team customizations, Custom tactics and AIPlayer customization.",
  details = "This component will compile.  It will not be configured to run by default.",
  configurationType=proclubsConfiguration //Configuration TDF that describes what the component configuration looks like.
]
component proclubscustom
{                              
    errors
    {
        [ description = "An unknown error occurred." ]
        PROCLUBSCUSTOM_ERR_UNKNOWN = 1;
        [ description = "A database error has occurred." ]
        PROCLUBSCUSTOM_ERR_DB = 2;
    }

    slave
    {                           
        methods
        {
            [
				id = 1,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            getCustomizationsResponse fetchSetting(getCustomizationsRequest);

            [
				id = 2,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
			]
			updateCustomizationsResponse updateSetting(updateCustomizationsRequest);
			
			[
				id = 3,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
			]
			getAIPlayerCustomizationResponse fetchAIPlayerCustomization(getAIPlayerCustomizationRequest);
			
			[
				id = 4,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
			]
			updateAIPlayerCustomizationResponse updateAIPlayerCustomization(updateAIPlayerCustomizationRequest);
			
						[
				id = 5,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
			]
			getCustomTacticsResponse fetchCustomTactics(getCustomTacticsRequest);
			
			[
				id = 6,
				errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
			]
			updateCustomTacticsResponse updateCustomTactics(updateCustomTacticsRequest);
			
			[
                id = 7,
                description = "Update profane club AI Player names",
                details = "Updates profane AI Player names.",
                client_export = false,
                requiresUserSession = false,
                errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            UpdateProfaneAiPlayerNamesResponse updateProfaneAiPlayerNames(UpdateProfaneAiPlayerNamesRequest);

			[
                id = 8,
                description = "Gets AI Player names",
                details = "Gets a list of AI Player names.",
                client_export = false,
                requiresUserSession = false,
                 errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            GetAiPlayerNamesResponse getAiPlayerNames(GetAiPlayerNamesRequest);
			
			[
                id = 9,
                description = "Gets Pro Clubs Avatar data from the proclubs_avatar table",
                errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            getAvatarDataResponse getAvatarData(getAvatarDataRequest);
			
			[
                id = 10,
                description = "Update Pro Clubs Avatar name",
                errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            void updateAvatarName(updateAvatarNameRequest);
			
			[
                id = 11,
				description = "Get Pro Clubs Avatar name from the pro clubs avatar table",
                client_export = false,
                description = "Gets Pro Clubs Avatar name",
                errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            getAvatarNameResponse getAvatarName(getAvatarNameRequest);
			
			[
                id = 12,
                description = "Updates profane Pro Clubs Avatar name",
                client_export = false,
                requiresUserSession = false,
                errors = {PROCLUBSCUSTOM_ERR_UNKNOWN, PROCLUBSCUSTOM_ERR_DB}
            ]
            void updateProfaneAvatarName(updateProfaneAvatarNameRequest);
			
        } // methods
    } // slave

	master
	{
	
	}
}
}
}


