// Defines the RPCs and async notifications used in the matchcodegen component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="matchcodegen/tdf/matchcodegentypes.h" ]
#include "matchcodegen/gen/matchcodegentypes.tdf"

[ 
  client_include = false,
  headername="matchcodegen/tdf/matchcodegentypes_server.h" 
]
#include "matchcodegen/gen/matchcodegentypes_server.tdf"


namespace Blaze
{
namespace MatchCodeGen
{

[
  id = custom/401,
  description = "A component used strictly as a template.",
  details = "This component will compile.  It will not be configured to run by default.",
  configurationType=MatchCodeGenConfig //Configuration TDF that describes what the component configuration looks like.
]
component MatchCodeGen
{
    errors
    {
        [ description = "An unknown error occurred." ]
        MATCHCODEGEN_ERR_UNKNOWN = 1;

		[ description = "The GameId we received is invalid." ]
        MATCHCODEGEN_ERR_INVALIDGAMEID = 2;

		[ description = "The code we received is invalid." ]
        MATCHCODEGEN_ERR_INVALIDCODE = 3;
    }

    slave
    {           
        methods
        {
			[
                id = 1,
                description = "This command will store the given GameId and generate a code for future lookup.",
				errors = {MATCHCODEGEN_ERR_INVALIDGAMEID}
            ]
			GenerateCodeResponse generateCode(GenerateCodeRequest);

			[
                id = 2,
                description = "This command will lookup a previously stored GameId using its code.",
				errors = {MATCHCODEGEN_ERR_INVALIDCODE}
            ]
			LookupGameIdResponse lookupGameId(LookupGameIdRequest);
        } // methods
    } // slave

    master
    {
        methods
        {
            [
                id = 1,
                description = "This command will store the given GameId and generate a code for future lookup.",
				errors = {MATCHCODEGEN_ERR_INVALIDGAMEID}
            ]
			GenerateCodeResponse generateCodeMaster(GenerateCodeRequest);

			[
                id = 2,
                description = "This command will lookup a previously stored GameId using its code.",
				errors = {MATCHCODEGEN_ERR_INVALIDCODE}
            ]
			LookupGameIdResponse lookupGameIdMaster(LookupGameIdRequest);
        } // methods
    } // master
}

}
}
