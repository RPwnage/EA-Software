// Defines the TDF classes used in the shield component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

namespace Blaze
{
namespace HeatShield
{

// Constants / Enums
const  uint32_t SETTING_PIN_LENGTH_MAX    = 64;

typedef list<string(128)> ClientChallengeGameTypesList;

[
	description = "Used to define a rate limit for Heat Shield calls."
]
class HeatShieldCallRate
{
	[tag="intc", default=30, description="Number of calls allowed within interval"]
	int64_t mIntervalCount;

	[tag="ints", default="1m", description="Interval for rate."]
	TimeValue mIntervalSize;
};

[
	description = "Used to define custom parameters for shield-related PIN events"
]
class HeatShieldPinConfig
{
	[tag="npin", default="error_custom", description="The PIN Event name for shield-related PIN events"]
	string(SETTING_PIN_LENGTH_MAX) mPinEventName;

	[tag="epin", default="server_blaze_proxy", description="The PIN Event type for shield-related PIN events"]
	string(SETTING_PIN_LENGTH_MAX) mPinEventType;

	[tag="tpin", default="rate_limit_exceeded", description="The PIN type for shield-related PIN events"]
	string(SETTING_PIN_LENGTH_MAX) mPinType;
};

class HeatShieldClientChallengeConfig
{
	[tag="amet", description="Allowed game report types for submitting ClientChallenge events on MatchEnd"]
	ClientChallengeGameTypesList mAllowedMatchEndGameTypes;

	[tag="ammt", description="Allowed match making game types for submitting ClientChallenge events on MatchMaking"]
	ClientChallengeGameTypesList mAllowedMatchMakingTypes;
};

[
	description = "The configuration object for the Heat Shield component"
]
class HeatShieldConfig
{
	[tag="eshb", default=false, description="Enables interactions with the Shield Backend Server."]
	bool mEnableShieldBackend;

	[tag="esof", default=false, description="Enables client's interactions with the Shield Backend Server even in FUT online mode."]
	bool mEnableShieldOnlineFUTMode;

	[tag="esov", default=false, description="Enables client's interactions with the Shield Backend Server even in VOLTA online mode."]
	bool mEnableShieldOnlineVoltaMode;

	[tag="entc", default=false, description="Enables shield notifications to the client."]
	bool mEnableNotificationToClient;

	[tag="clrt", description="The maximum number calls per unit of time that can be made to the Shield Backend Server."]
	HeatShieldCallRate mCallRate;

	[tag="mxps", default=0, description="The maximum allowed payload size from the Shield Backend Server in Bytes. A 0 value means no maximum payload size."]
	uint32_t mMaximumPayloadSize;
	
	[tag="mxfc", default=20, description="The maximum number of fiber workers allowed for HeatShield."]
	uint16_t mMaxFibers;
	
	[tag="psce", default="2m", description="The expiry time from last access that the game sessionId will be cached"]
	TimeValue mPinSessionCacheExpiry;

	[tag="rlpc", description="Configuration for the rate limit exceeded PIN event"]
	HeatShieldPinConfig mRateLimitPinConfig;

	[tag="hccc", description="Mode specific configuration for sending ClientChallenge events"]
	HeatShieldClientChallengeConfig mClientChallengeConfig;

	[tag="efty", default=false, description=""]
	int32_t mEnterFUTOnlineFlowType;

	[tag="xfty", default=false, description=""]
	int32_t mExitFUTOnlineFlowType;

	[tag="evty", default=false, description=""]
	int32_t mEnterVoltaOnlineFlowType;

	[tag="xvty", default=false, description=""]
	int32_t mExitVoltaOnlineFlowType;
};

} // HeatShield
} // Blaze
