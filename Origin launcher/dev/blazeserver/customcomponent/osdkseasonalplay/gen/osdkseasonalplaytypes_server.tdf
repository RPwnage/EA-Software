// Defines the TDF classes used in the osdkseasonalplay component. This is for server side only data
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

[headername="osdkseasonalplay/tdf/osdkseasonalplaytypes.h"]
#include "osdkseasonalplay/gen/osdkseasonalplaytypes.tdf"

namespace Blaze
{
namespace OSDKSeasonalPlay
{
    [description = "Max string length for member variables."]
    const uint32_t MAX_STRING_LENGTH = 128;

	[tdfid = "hash", reconfigurable="yes", description="The configuration of a Seasonal Play Instance"]
	class SeasonConfigurationServer
	{
	    [tag="sid", reconfigurable="yes", description="The seasonal play instance id"]
        SeasonId mSeasonId;
        
        [tag="mtyp", reconfigurable="yes", description="The type of Entity that can be a member of this seasonal play instance"]
        MemberType mMemberType;

        [tag="lgid", reconfigurable="yes", description="The clubs league id"]
        LeagueId mLeagueId;
        
        [tag="tid", reconfigurable="yes", description="The tournament id"]
        TournamentId mTournamentId;
        
        [tag="lnam", reconfigurable="yes", description="The name of the leaderboard associated with this seasonal play instance"]
        string(Blaze::Stats::STATS_LEADERBOARD_NAME_LENGTH) mLeaderboardName;
        
        [tag="snam", reconfigurable="yes", description="The stats category associated with this season"]
        string(Blaze::Stats::STATS_CATEGORY_NAME_LENGTH) mStatCategoryName;
        
        [tag="sprt", reconfigurable="yes", descripion="Stats category period type"]
        Blaze::Stats::StatPeriodType mStatPeriodtype;
        
        [tag="pdur", reconfigurable="yes", description="PlayOff period duration"]
        TimeStamp mPlayoffDuration;
        
        [tag="bdur", reconfigurable="yes", description="End of Season black out time duration"]
        TimeStamp mBlackOutDuration;
        
        [tag="prrg", reconfigurable="yes", description="Playoff eligibility requires reqular season game"]
        bool mPlayoffsRequireRegularSeasonGame;
        
        [tag="fdiv", default=false, reconfigurable="yes", description="True for fixed divisions sizes, false for percentage based"]
        bool mFixedDivisions;
        
        [tag="divl", reconfigurable="yes", description="List of divisions"]
        list<Division> mDivisions;
	};
	
	[tdfid = "hash", reconfigurable="yes", description="Stats period data for initiating end of season processing"]
	class EndOfSeasonRolloverData
	{
	    [tag="ptyp", reconfigurable="yes", description="The perdiod type that's rolling over"]
	    Blaze::Stats::StatPeriodType mStatPeriodType;
	    
	    [tag="opid", reconfigurable="yes", description="The old period id"]
	    int32_t mOldPeriodId;
	    
	    [tag="npid", reconfigurable="yes", description="The new period id"]
	    int32_t mNewPeriodId;
	};

    class ConfigInstancePlayoffDuration 
    {
        [tag="ipdd", reconfigurable="yes", description="Days of playoff duration."]
        int32_t mDays;

        [tag="ipdh", reconfigurable="yes", description="Hours of playoff duration."]
        int32_t mHours;

        [tag="ipdm", reconfigurable="yes", description="Minutes of playoff duration."]
        int32_t mMinutes;
    };

    class ConfigInstanceEndOfSeasonBlackOutDuration 
    {
        [tag="eosd", reconfigurable="yes", description="Days of end of season black out duration."]
        int32_t mDays;

        [tag="eosh", reconfigurable="yes", description="Hours of end of season black out duration."]
        int32_t mHours;

        [tag="eosm", reconfigurable="yes", description="Minutes of end of season black out duration."]
        int32_t mMinutes;
    };

    class ConfigInstanceDivision
    {
        [tag="dnum", reconfigurable="yes", description="Division number."]
        uint8_t mDivisionNumber;

        [tag="dsiz", reconfigurable="yes", description="Division size."]
        uint8_t mDivisionSize;

        [tag="dpru", reconfigurable="yes", description="Division playoff rule."]
        int32_t mPlayoffRule;
    };

    typedef list<ConfigInstanceDivision> ConfigInstanceDivisionList;

    class ConfigInstance
    {
        [tag="iid", reconfigurable="yes", description="Instance id."]
        uint32_t mId;

        [tag="imty", reconfigurable="yes", description="Instance member type."]
        uint32_t mMemberType;

        [tag="ilid", reconfigurable="yes", description="Instance league id."]
        uint32_t mLeagueId;

        [tag="ilea", reconfigurable="yes", description="Instance leadboard."]
        string(MAX_STRING_LENGTH) mLeaderboard;

        [tag="isca", reconfigurable="yes", description="Instance stat category."]
        string(MAX_STRING_LENGTH) mStatCategory;

        [tag="ipty", reconfigurable="yes", description="Instance period type."]
        int8_t periodType;

        [tag="itid", reconfigurable="yes", description="Instance tournament id."]
        uint32_t mTournamentId;

        [tag="iprr", reconfigurable="yes", description="Instance playoffs require regular season game flag."]
        bool mPlayoffsRequireRegularSeasonGame;

        [tag="ifdi", reconfigurable="yes", description="Instance fixed divisions flag."]
        bool mFixedDivisions;

        [tag="ipdu", reconfigurable="yes", description="Instance playoff duration."]
        ConfigInstancePlayoffDuration mPlayoffDuration;

        [tag="ieos", reconfigurable="yes", description="Instance end of season black out duration."]
        ConfigInstanceEndOfSeasonBlackOutDuration mEndOfSeasonBlackOutDuration;

        [tag="idiv", reconfigurable="yes", description="Instance divisions."]
        ConfigInstanceDivisionList mDivisions;
    };

    typedef list<ConfigInstance> ConfigInstanceList;

    class ConfigAward
    {
        [tag="aid", reconfigurable="yes", description="Award id."]
        int32_t mId;

        [tag="anam", reconfigurable="yes", description="Award name."]
        string(MAX_STRING_LENGTH) mName;

        [tag="ades", reconfigurable="yes", description="Award description."]
        string(MAX_STRING_LENGTH) mDescription;

        [tag="aass", reconfigurable="yes", description="Award asset."]
        string(MAX_STRING_LENGTH) mAsset;
    };

    typedef list<ConfigAward> ConfigAwardList;

    class OSDKSeasonalPlayConfig
    {
        [tag="dbna", reconfigurable="no", description="Database name."]
        string(MAX_STRING_LENGTH) mDbName;

        [tag="aure", reconfigurable="yes", description="Auto user registration."]
        bool mAutoUserRegistration;

        [tag="acre", reconfigurable="yes", description="Auto club registration."]
        bool mAutoClubRegistration;

        [tag="inst", reconfigurable="yes", description="Instances."]
        ConfigInstanceList mInstances;

        [tag="awar", reconfigurable="yes", description="Awards."]
        ConfigAwardList mAwards;
    };

} // OSDKSeasonalPlay
} // Blaze

