<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EA.Tasks</name>
    </assembly>
    <members>
        <member name="P:EA.Eaconfig.Backends.BackendGenerateBaseTask.TopModules">
            <summary>A whitespace delimited list of module names. If provided, overrides the default modules slngenerator will use a starting point when searching the graph for modules to include in the solution.</summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.BackendGenerateBaseTask.ExcludedRootModules">
            <summary>A whitespace delimited list of module names. The solution generator will not include projects that are dependencies of these modules - can be used to exclude subgraphs when searching graph for modules to include in the solution.</summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.BackendGenerateTask.SolutionName">
            <summary>The Name of the Solution to Generate.</summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.Generator.GetTopModuleGroups(NAnt.Core.Project,System.Collections.Generic.IEnumerable{EA.FrameworkTasks.Model.IModule},System.Boolean,System.Boolean)">
            <summary>Group top modules by solution name</summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.Generator.Name">
            <summary>
            Generator output name. 
            </summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.Generator.OutputDir">
            <summary>
            Full path to the solution file without solution file name. 
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.GeneratedFiles">
            <summary>
            Generated files
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.GroupNumber">
            <summary>
            Sequential number of a group when solution files split based on output directory or file names. 
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.IsPortable">
            <summary>
            In portable mode SDK paths are replaced with environment variables and all other paths (including paths in tools options) are made relative whenever possible.
            The goal is to have generated files that aren't tied to particular computer
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.StartupProject">
            <summary>
            The "project" that was used to Initialize this generator.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.Generator.Initialize(NAnt.Core.Project,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{EA.FrameworkTasks.Model.IModule},System.Collections.Generic.IEnumerable{EA.FrameworkTasks.Model.IModule},System.Boolean,EA.Eaconfig.Core.GeneratorTemplatesData,System.Int32)">
            <summary>
            Populate module generators.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.ModuleGenerator.RelativeDir">
            <summary>
            module generator output directory relative to the to solution build root:
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.ModuleGenerator.PackageDir">
            <summary>
            Full path to package directory
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.NantBuildTask.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.Text.WriteBuildInfo">
            <summary>The task used by the buildinfo target to generate the build info file</summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask">
            <summary>
            Generates 'dot' language description of the dependency graph between modules or packages. Generated file can be opened by "Graphviz" tools to create an image
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.PackageName">
            <summary>
            Name of a package to use a root of generated dependency graph picture. Separate graph is generated for each configuration.
            Package name can contain module name: valid values are 'package_name' or 'package_name/module_name' or 'package_name/group/module_name', where group is one of 'runtime, test, example, tool'".
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.GraphFile">
            <summary>
            Full path to the output file. Configguration name is added to the file name.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.GraphModules">
            <summary>
            If 'true' picture of dependencies between modules is generated. Otherwise dependencies between packages are used, no modules are added to the picture. Default is 'true'.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.GroupByPackages">
            <summary>
            Modules from the same package are grouped together on an image. This may complicate outline for very big projects. Only has effect when graphmodules='true', default is 'true'.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.Configurations">
            <summary>
            List of configurations to use.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.DependencyFilter">
            <summary>
            Types of dependencies to include in the generated picture. Possible values are: 'build', 'interface', 'link', 'copylocal', 'auto', or any combination of these, enter values space separated. Default value is: 'build interface link'.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.ExcludeDependencyFilter">
            <summary>
            Types of dependencies to exinclude from the generated picture. Possible values are: 'build', 'interface', 'link', 'copylocal', 'auto', or any combination of these, enter values space separated. Default value is empty.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.FindAncestors">
            <summary>
            Graph ancestors of a given package/module indead of dependents. Default value is false.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.DependencyColorScheme">
            <summary>
            Dependency Color scheme. Standard - by dependency type, ByDependent - same color as dependent module.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageGraphVizTask.ExcludeModules">
            <summary>
            List of modules to exclude
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.Text.WritePackageTreeTask">
            <summary>
            This Task prints the dependency tree for a specified package. Shows all of the packages
            that are added as package dependents in the current configuration.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Text.WritePackageTreeTask.PackageName">
            <summary>
            The name of the package whose dependency tree should be printed.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSCppProject.ProcessSwitches(NAnt.Core.Project,System.Collections.Generic.List{EA.Eaconfig.Backends.VisualStudio.VSConfig.SwitchInfo},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.List{System.String},System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            ProcessSwitches -	Takes a newline separated collection of command line switches; parses them according to
            					the parsing directives and then puts the translated result (XML attributes) into a hash
            					table.
            </summary>
            <param name="project"></param>
            <param name="parseDirectives">An List of SwitchInfo's dictating the translation from command line to XML</param>
            <param name="nameToXMLValue">The hash table that contains values of the XML attributes (string->string map) that were obtained by the parsing</param>
            <param name="options"></param>
            <param name="taskName"></param>
            <param name="errorIfUnrecognized"></param>
            <param name="nameToDefaultXMLValue"></param>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSDotNetProject.ConvertNamespaceToLinkPath(System.String)">
            <summary>
            Since LinkPath (the Link tag) is used by VS05 to construct the name of the global resources, so we need
            to make the link path same as the namespace structure of the global resource designer file.
            For example:
            Resources.Designer.cs: namespace DefaultNameSpace.Properties { class Resources ... }
            LinkPath (designer): should be Properties\\Resources.Designer.cs (DefaultNameSpace is omitted)
            LinkPath (resx)    : should be Properties\\Resources.resx
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudio.VSDotNetProject.DuplicateXamlFileTracker">
            <summary>
            This class is used to track XAML files with the same name within an assembly. There is a bug in the
            WPF build tasks for .Net Core and .Net 5 that makes linked XAML files with the same name stomp each
            in the IntermediateOuputPath. When this issue has been resolved this class can be safely removed.
            https://github.com/dotnet/wpf/issues/3292
            </summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.VisualStudio.VSProjectBase.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSProjectBase.WriteUniqueTarget(System.String,System.Action)">
            often we need to inject an target override / extension target into a project file but only for specific platforms / configs / module types
            however including the target more than once caused msbuild to  get confused - wrap in the write in this function in order to make
            sure it is only written the first time (and make sure your target is correctly guard to run the right situation only)
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSProjectBase.AddCustomVsOptions(NAnt.Core.IXmlWriter,EA.FrameworkTasks.Model.Module)">
            <summary>Allows users to inject custom elements into their vcxproj file, so they don't need to wait for us to update framework</summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.VisualStudio.VSSolutionBase.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudioFunctions">
            <summary>
            Visual Studio functions
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudioFunctions.GetSolutionFileName(NAnt.Core.Project,EA.FrameworkTasks.Model.BuildGroups,System.Boolean,System.Boolean)">
            <summary>
            Returns path to the solution file generated ty 'slnruntime', 'slntest', etc targets.
            </summary>
            <param name="project"></param>
            <param name="buildgroup">The name of the buildgroup: 'runtime', 'test', 'example', or 'tool'</param>
            <param name="generateSingleConfig">If true, solution names generated by single config targets 'slnruntime-generate-single-config', 'slntest-generate-single-config' is evaluated. Default is "false"</param>
            <param name="splitByGroupNames">If true returns solution names split by groups. During solution generation property 'eaconfig.build.split-by-group-names' used to turn this functionality on. Default is "false".</param>
            <returns>Full Path to the solution file name.</returns>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudioFunctions.GetVisualStudioPlatformName(NAnt.Core.Project)">
            <summary>
            Evaluates Visual Studio "Platform' name for the currently loaded configuration (${config}).
            </summary>
            <param name="project"></param>
            <returns>Name of the Visual Studio 'Platform'</returns>
        </member>
        <member name="T:EA.Eaconfig.Build.Task_InitBuildGraph">
            <summary>
            Verify whether we can reuse build graph or need to reset it. This is only needed when we are chaining targets.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Build.LoadPackageTask.CheckPublicDataModulesExist(EA.FrameworkTasks.Model.IPackage)">
            <summary>
            Ensure that all modules defined in the initialize.xml file are also defined in the build files. If not also check to see if perhaps the build group was declared incorrectly.
            This is to help catch a simple mistake that would otherwise fail silently and be hard to figure out.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Public.GetModuleBinPath(NAnt.Core.Project,System.String,System.String,System.String,System.String,EA.Eaconfig.BuildType,NAnt.Core.OptionSet,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets information about a module's binary output path. This is the path to a native shared library, a .NET assembly or native executable produced by this module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Public class so it assumed the Project passed is not the
            Project that owns the package the module is defined in.</param>
            <param name="packageName">Name of the package the module is from.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the module is in e.g. "runtime", "test", etc.</param>
            <param name="defaultSuffix">If buildType is not provided a default suffix must be used for the binary suffix e.g. ".dll", ".exe", etc.</param>
            <param name="buildType">Build type object if known, used to get output path templates - function may return incorrect information with this being provided but it is not required.</param>
            <param name="outputMappingOptionSet">Module can have private output name mapping options e.g. "runtime.MyModule.outputname-map-options" that will not be accessible in public context.
            This optionset should be provided here if it exists. Package level e.g. "package.MyPackage.outputname-map-options" are assumed to be public and will be pcked up automatically.</param>
            <param name="outputNameOverride">Moduke nay override it's output name in private context e.g. "runtime.MyModule.outputname". If this is case the override name must be provided here.</param>
            <param name="outputDirOverride">Moduke nay override it's output name in private context e.g. "runtime.MyModule.outputdir". If this is case the override directory must be provided here.</param>
            <param name="configDirOverride">Package may override the "package.configbindir" property in private context. If this is the case new value must be provided here.</param>
            <param name="buildDirOverride">Package may override the "package.configbuilddir" property in private context. This is used to determine moudle intermediate dir which is a possible 
            replacement token in output mapping. If "package.configbuilddir" is overridden new value must be provided here.</param>
            <param name="ignoreOutputMapping">Set to true to ignore all output mapping name optionsets.</param>
            <returns>A ModulePath object coontain information about the binary output path for the module.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Public.GetModuleLibPath(NAnt.Core.Project,System.String,System.String,System.String,EA.Eaconfig.BuildType,NAnt.Core.OptionSet,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets information about a module's library output path. This is the path to a native static library, or a shared library import library file produced by this module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Public class so it assumed the Project passed is not the
            Project that owns the package the module is defined in.</param>
            <param name="packageName">Name of the package the module is from.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the moduke is in e.g. "runtime", "test", etc.</param>
            <param name="buildType">Build type object if known, used to get output path templates - function may return incorrect information with this being provided but it is not required.</param>
            <param name="outputMappingOptionSet">Module can have private output name mapping options e.g. "runtime.MyModule.outputname-map-options" that will not be accessible in public context.
            This optionset should be provided here if it exists. Package level e.g. "package.MyPackage.outputname-map-options" are assumed to be public and will be pcked up automatically.</param>
            <param name="outputNameOverride">Moduke nay override it's output name in private context e.g. "runtime.MyModule.outputname". If this is case the override name must be provided here.</param>
            <param name="outputDirOverride">Moduke nay override it's output name in private context e.g. "runtime.MyModule.outputdir". If this is case the override directory must be provided here.</param>
            <param name="configBinDirOverride">Package may override the "package.configbindir" property in private context. Binary directory is potentiall used as a replacement token if output 
            library is an import library. If "package.configbindir" is overridden new value must be provided here.</param>
            <param name="configLibDirOverride">Package may override the "package.configlibdir" property in private context. If this is the case new value must be provided here.</param>
            <param name="buildDirOverride">Package may override the "package.configbuilddir" property in private context. This is used to determine module intermediate dir which is a possible 
            replacement token in output mapping. If "package.configbuilddir" is overridden new value must be provided here.</param>
            <param name="forceNoImportLib">Used to force the function to return path as if module was building a library rather than an import library. Mainly used internally to deduce
            normal lib path as it can be a template replacement token in import lib path.</param>
            <param name="ignoreOutputMapping">Set to true to ignore all output mapping name optionsets.</param>
            <returns>A ModulePath object coontain information about the library output path for the module.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Public.GetModuleIntermedidateDir(NAnt.Core.Project,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the intermedaite folder path for a module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Public class so it assumed the Project passed is not the
            Project that owns the package the module is defined in.</param>
            <param name="packageName">Name of the package the module is from.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the moduke is in e.g. "runtime", "test", etc.</param>
            <param name="packageBuildDir">Package may override the "package.configbuilddir" property in private context. This is used to determine module intermediate dir 
            which is a possible replacement token in output mapping. If "package.configbuilddir" is overridden new value must be provided here.</param>
            <returns>A string containing normalized path to intermediate directory.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Private.GetModuleBinPath(NAnt.Core.Project,System.String,System.String,System.String,EA.Eaconfig.BuildType,System.Boolean,System.String,System.String)">
            <summary>	
            Gets information about a module's binary output path. This is the path to a native shared library, a .NET assembly or native executable produced by this module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Private class so it assumed the Project passed contains
            all information for module and its package.</param>
            <param name="packageName">Name of the package the module is from.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the moduke is in e.g. "runtime", "test", etc.</param>
            <param name="buildType">Build type for the module.</param>
            <param name="ignoreOutputMapping">Set to true to ignore all output mapping name optionsets.</param>
            <param name="binaryPrefix"></param>
            <param name="binarySuffix"></param>
            <returns>A ModulePath object coontain information about the binary output path for the module.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Private.GetModuleLibPath(EA.Eaconfig.Core.ProcessableModule,System.Boolean,System.String,System.String)">
            <summary>
            Gets information about a module's library output path. This is the path to a native static library, or a shared library import library file produced by this module.
            </summary>
            <param name="module">Module to get library output path from.</param>
            <param name="ignoreOutputMapping">Set to true to ignore all output mapping name optionsets.</param>
            <param name="libraryPrefix"></param>
            <param name="librarySuffix"></param>
            <returns>A ModulePath object coontain information about the library output path for the module.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Private.GetModuleLibPath(NAnt.Core.Project,System.String,System.String,System.String,EA.Eaconfig.BuildType,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Gets information about a module's library output path. This is the path to a native static library, or a shared library import library file produced by this module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Private class so it assumed the Project passed contains
            all information for module and its package.</param>
            <param name="packageName">Name of the package the module is from.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the moduke is in e.g. "runtime", "test", etc.</param>
            <param name="buildType">Build type for the module.</param>
            <param name="forceNoImportLib">Used to force the function to return path as if module was building a library rather than an import library. Mainly used internally to deduce
            normal lib path as it can be a template replacement token in import lib path.</param>
            <param name="ignoreOutputMapping">Set to true to ignore all output mapping name optionsets.</param>
            <param name="libraryPrefix"></param>
            <param name="librarySuffix"></param>
            <returns>A ModulePath object coontain information about the library output path for the module.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Private.GetModuleIntermedidateDir(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Returns the intermedaite folder path for a module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Private class so it assumed the Project passed contains
            all information for module and its package.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the module is in e.g. "runtime", "test", etc.</param>
            <returns>A string containing normalized path to intermediate directory.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModulePath.Private.GetModuleGenerationDir(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Returns the generation folder path for a module.
            </summary>
            <param name="project">The project in which the path is trying to be resolved. This function is in the Private class so it assumed the Project passed contains
            all information for module and its package.</param>
            <param name="moduleName">The name of the module.</param>
            <param name="moduleGroup">The group the module is in e.g. "runtime", "test", etc.</param>
            <returns>A string containing normalized path to generation directory.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.ModuleProcessor_ProcessDependencies.ProcessModuleDependents(EA.FrameworkTasks.Model.IModule,System.Boolean,System.Boolean)">
            <summary>Dependencies between modules in the same package</summary>
        </member>
        <member name="M:EA.Eaconfig.Build.ModuleProcessor_SetModuleData.ThrowIfBulkBuildPropertiesSet(EA.Eaconfig.Modules.Module_DotNet)">
            <summary>BulkBuild features aren't available to C# modules so if any bulkbuild properties are set throw an error</summary>
        </member>
        <member name="M:EA.Eaconfig.Build.ModuleProcessor_SetModuleData.ProcessModuleDotNetPlatform(System.String,EA.Eaconfig.Modules.Module_DotNet,EA.Eaconfig.Modules.Tools.DotNetCompiler)">
            <summary>Returns the appropriate dotnet platform name given whether the module property value has been set or not</summary>
        </member>
        <member name="M:EA.Eaconfig.Build.ModuleProcessor_SetModuleData.SetupCustomBuildTools(EA.Eaconfig.Modules.Module_DotNet,EA.Eaconfig.Modules.Tools.DotNetCompiler)">
            <summary>Add custom build files tools and build up list of generated source files</summary>
        </member>
        <member name="T:EA.Eaconfig.Build.BuildFunctions">
            <summary>
            Collection of utility functions usually used in build, run and other targets.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleOutputDir(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Returns output directory for a given module. For programs and DLLs it is usually 'bin' directory, for libraries 'lib'.
            This function takes into account output mapping.
            </summary>
            <param name="project"></param>
            <param name="type">type can be either "lib" or "bin"</param>
            <param name="packageName">name of the package</param>
            <returns>module output directory</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleOutputDirEx(NAnt.Core.Project,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns output directory for a given module. For programs and DLLs it is usually 'bin' directory, for libraries 'lib'.
            This function takes into account output mapping. NOTE. In the context of a .build file set property 'eaconfig.build.group' 
            to use this function for groups other than runtime.
            </summary>
            <param name="project"></param>
            <param name="type">type can be either "lib" or "bin"</param>
            <param name="packageName">name of the package</param>
            <param name="moduleName">name of the module</param>
            <param name="moduleGroup">Optional - group of the module e.g. runtime, test. If not provided Framework will attempt to deduce it from context.</param>
            <param name="buildType">Optional - build type of the module e.g. Program, Library.</param>
            <returns>module output directory</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleOutputName(NAnt.Core.Project,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns outputname for a module. Takes into account output mapping. 
            </summary>
            <param name="project"></param>
            <param name="type">Can be either "lib" or "bin"</param>
            <param name="packageName">name of a package</param>
            <param name="moduleName">name of a module in the package</param>
            <param name="moduleGroup">Optional - group of the module e.g. runtime, test. If not provided Framework will attempt to deduce it from context.</param>
            <param name="buildType">Optional - build type of the module e.g. Program, Library.</param>
            <returns>outputname</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleGroupnames(NAnt.Core.Project,System.String)">
            <summary>
            Returns list of module groupmanes for modules defined in package loaded into the current Project.
            </summary>
            <param name="project"></param>
            <param name="groups">list of groups to examine. I.e. 'runtime', 'test', ...</param>
            <returns>module groupnames, new line separated.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.ModuleNameFromGroupname(NAnt.Core.Project,System.String)">
            <summary>
            Returns module name based on the group name
            </summary>
            <param name="project"></param>
            <param name="groupname">I.e. '${module}, runtime.${module}', 'test.${module}', ...</param>
            <returns>module name.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.HasUsableBuildGraph(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Returns true if there is usable build graph
            </summary>
            <param name="project"></param>
            <param name="configurations">list of configurations</param>
            <param name="groups">list of group names</param>
            <returns>Returns true if there is usable build graph.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.RetrieveConfigInfo(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Return a specific config component for a specifc full config name from top level build graph.
            </summary>
            <param name="project"></param>
            <param name="configuration">The full config name (such as pc64-vc-debug)</param>
            <param name="config_component">The config component (supported values are: config-system, config-compiler, config-platform, config-name, config-processor)</param>
            <returns>Return a specific config component for a specifc full config name or an empty string if not found.  NOTE that this function assumes that build graph is already constructed, otherwise, it will just return empty string.</returns>
        </member>
        <member name="P:EA.Eaconfig.Core.ProcessableModule.GraphOrder">
            <summary>
            Bottom up dependency order.  It is useful when one needs to process modules in the order that
            ensures that dependencies are processed before their parents e.g. <see cref="T:EA.Eaconfig.Core.ForEachModule"/>
            </summary>
        </member>
        <member name="T:EA.Eaconfig.GenerateModuleInteropAssembliesTask">
            <summary>Helper task to generate interop assemblies for a list of COM DLL's in a module.</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateModuleInteropAssembliesTask.ModuleName">
            <summary>The name of the module</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateModuleInteropAssembliesTask.GroupName">
            <summary>The name of the group that the module is part of, defaults to runtime</summary>
        </member>
        <member name="T:EA.Eaconfig.SlnRuntimeGenerateInteropAssemblyTask">
            <summary>Generates a single interop assembly from a COM DLL. Dependency-checking is performed.</summary>
        </member>
        <member name="P:EA.Eaconfig.GetComLibraryNameTask.Result">
            <summary>The property where the result will be stored</summary>
        </member>
        <member name="T:EA.Eaconfig.GenerateModuleWebReferencesTask">
            <summary>Use wsdl to generate proxy classes for ASP.NET web services. The generated code is placed in ${workingdir}.</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateModuleWebReferencesTask.Module">
            <summary>The name of the module</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateModuleWebReferencesTask.Group">
            <summary>The group the module is in</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateModuleWebReferencesTask.Output">
            <summary>The fileset (C#) or property (managed) where the output will be stored</summary>
        </member>
        <member name="T:EA.Eaconfig.CapilanoFunctions">
            <summary>A collection of functions used by capilano targets</summary>
        </member>
        <member name="M:EA.Eaconfig.CapilanoFunctions.GetModuleLayoutDir(NAnt.Core.Project,System.String,System.String,System.String)">
            <summary>
            Get the Capilano Layout directory for a specific module.
            </summary>
            <param name="project"></param>
            <param name="platform">The platform - expected to be one of 'capilano' or 'xbsx'</param>
            <param name="module">The name of the module to get the layour dir for.</param>
            <param name="groupname">The group that the module is part of.</param>
            <returns>Capilano Layout directory for this module.</returns>
        </member>
        <member name="F:EA.Eaconfig.Modules.Tools.DotNetCompiler.ReferenceAssemblyDirs">
            <summary>
            Path to system reference assemblies.  (Corresponds to the -lib argument in csc.exe)
            Although the actual -lib argument list multiple directories using comma separated,
            you can separate them using ',' or ';' or '\n' in this task.  Note that space is a valid path
            character and therefore won't be used as separator characters.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Combine">
            <summary>
            An internal task used by eaconfig to setup buildtypes. Not intended to be used by end users.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Combine.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.GenerateBuildOptionset">
            <summary>
            (Deprecated) Creates <token>buildtype</token> optionset from a meta build optionset. 
            This task is deprecated please use the Structured XML &lt;BuildType&gt; task instead.
            </summary>
            <example>
             <para>This is an example of how to generate a build type using GenerateBuildOptionset:</para>
             <code><![CDATA[
             <optionset name="config-options-library-custom" fromoptionset="config-options-library">
               <option name="buildset.name" value="Library-Custom" />
               <option name="optimization" value="off"/>
             </optionset>
             <GenerateBuildOptionset configsetname="config-options-library-custom"/>
             ]]></code>
             <para>The same thing can be done much more simply now with Structured XML:</para>
             <code><![CDATA[
             <BuildType name="Library-Custom" from="Library">
               <option name="optimization" value="off"/>
             </BuildType>
             ]]></code>
            </example>
        </member>
        <member name="P:EA.Eaconfig.GenerateBuildOptionset.ConfigSetName">
            <summary>
            The name of the meta optionset. 
            The name of the target <token>buildtype</token> optionset is provided by 'buildset.name' option
            </summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateBuildOptionset.ControllingProperties">
            <summary>
            List of the controlling properties. Intended to be used in the configuration packages to override default list of controlling properties like 
            'eaconfig.debugflags", eaconfig.optimization, etc.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.GenerateBuildOptionset.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.MergeOptionset">
            <summary>
            NAnt custom task which merges options from a NAnt code-build script.
            This differs from the built-in Framework mergeoption in that it is using C#
            instead of nAnt tasks to do the work in order to increase performance
            </summary>
        </member>
        <member name="M:EA.Eaconfig.MergeOptionset.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AndroidGradle.GradleProject">
            <summary>Project name for this module in Gradle context If omitted the module name will be used.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AndroidGradle.GradleJvmArgs">
            <summary>Value for the org.gradle.jvmargs property in gradle.properties</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AndroidGradle.JavaSourceFiles">
            <summary>Java files to display in Visual Studio for debugging purposes (not used for build)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AndroidGradle.IncludeNativeActivityGlue">
            <summary>True by default. Includes the necessary files for using a native activity. Set to false if your program 
            implement its own activity class.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AndroidGradle.GradleProperties">
            <summary>Extra values that should be added to the gradle.properties file when building this project.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.AssemblyInfoTask">
            <summary>If this XML element is present on a module definition Framework will generate an AssemblyInfo file and add it to the project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.Company">
            <summary>Overrides the company field in the generated AssemblyInfo file, default is "Electronic Arts"</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.Copyright">
            <summary>Overrides the copyright field in the generated AssemblyInfo file, default is "(c) Electronic Arts. All Rights Reserved."</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.Product">
            <summary>Overrides the product field in the generated AssemblyInfo file, default is the package's name</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.Title">
            <summary>Overrides the title field in the generated AssemblyInfo file, default is "(ModuleName).dll"</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.Description">
            <summary>Overrides the description field in the generated AssemblyInfo file, default is the an empty string.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblyInfoTask.VersionNumber">
            <summary>Overrides the version field in the generated AssemblyInfo file, default is the package version</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildStepsElement">
            <summary>BuildStepsElement</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PrebuildTarget">
            <summary>Sets the prebuild steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PostbuildTarget">
            <summary>Sets the postbuild steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.CustomBuildStep">
            <summary>Defines a custom build step that may execute before or 
            after another target</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PackagingData">
            <summary>Sets the packaging steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.RunData">
            <summary>Sets the run steps for a project</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTargetElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.TargetName">
            <summary>Sets the target name</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.NantBuildOnly">
            <summary>Autoconvert target to command when needed in case command is not defined. Default is 'true'</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.Target">
            <summary>Sets the target</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.Command">
            <summary>Sets the comand</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.TargetElement">
            <summary>Create a dynamic target. This task is a Framework 2 feature</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.DependencyList">
            <summary>A space separated list of target names that this target depends on.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Description">
            <summary>The Target description.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Hidden">
            <summary>Prevents the target from being listed in the project help. Default is true.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Style">
            <summary>Style can be 'use', 'build', or 'clean'.   See 'Auto Build Clean' 
            page in the Reference/NAnt/Fundamentals section of the help doc for details.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.DummyName">
            <summary>This attribute is not used. Adding it here only to prevent build breaks after turning on strict attribute check.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypePropertyElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypePropertyElement.AttrValue">
            <summary>Argument. Default is null.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypeTask">
            <summary>The build type task can be used to create custom build types, derived from existing build types but with custom settings.</summary>
            <example>
             <para>This is an example of how to generate and use a build type using the Build Type task:</para>
             <code><![CDATA[
             <BuildType name="Library-Custom" from="Library">
               <option name="optimization" value="off"/>
             </BuildType>
             
             <Library name="MyLibrary" buildtype="Library-Custom">
               . . .
             </Library>
             ]]></code>
            </example>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeTask.FromBuildType">
            <summary>The name of a buildtype ('Library', 'Program', etc.) to derive new build type from.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeTask.BuildTypeName">
            <summary>Sets the name for the new buildtype</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeTask.RemoveOptions">
            <summary>Define options to remove from the final optionset</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypeElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeElement.IfDefined">
            <summary>If true then the option will be included; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeElement.UnlessDefined">
            <summary>Opposite of if.  If false then the option will be included; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.BuildTypeElement.InitializeElement(System.Xml.XmlNode)">
            <summary>Add all the child option elements.</summary>
            <param name="elementNode">XML node to initialize from.</param>
        </member>
        <member name="T:EA.Eaconfig.Structured.BulkBuildElement">
            <summary>Bulkbuild input</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.Enable">
            <summary>enable/disable bulkbuild generation.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.Partial">
            <summary>If partial enabled, source files with custom build settings are excluded from bulkbuild generation and compiled separately.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.MaxSize">
            <summary>If 'maxsize' is set, generated bulkbuild files will contain no more than maxsize entries. I.e. They are split in several if number of files exceeds maxsize.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.SplitByDirectories">
            <summary>If 'SplitByDirectories' is set, generated bulkbuild files will be split according to directories (default is false).</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.MinSplitFiles">
            <summary>Use 'MinSplitFiles' to specify minimum files when directory is split into a separate BulkBuild file (only used when SplitByDirectories is turned on).  That is, if current directory has less then the specified minimun files, this directory's files will be merged with the next directory to form a group and then do a split in this group.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.DeviateMaxSizeAllowance">
            <summary>Use 'DeviateMaxSizeAllowance' to specify a threadhold of number of files we're allowed to deviate from maxsize input.  This parameter
            only get used on incremental build where existing bulkbuild files have already been created from previous build.  Purpose of this parameter 
            is to allow your development process to not get slowed down by adding/removing files.  Default is set to 5.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.LooseFiles">
            <summary>Files that are not included in the bulkbuild</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.SourceFiles">
            <summary>Groups of sourcefiles to be used to generate bulkbuild files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.ManualSourceFiles">
            <summary>Manual bulkbuild files</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ConfigElement">
            <summary>Sets various attributes for a config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.BuildOptions">
            <summary>Gets the build options for this config.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Defines">
            <summary>Gets the macros defined for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.TargetFrameworkVersion">
            <summary>Set target framework version for managed modules (4.0, 4.5, ...)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.TargetFrameworkFamily">
            <summary>Set target framework family for managed modules (framework, standard, core)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Warningsuppression">
            <summary>Gets the warning suppression property for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Preprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Postprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.PrecompiledHeader">
            <summary>Set up precompiled headers.  NOTE: To use this option, you still need to list a source file and specify that file with 'create-precompiled-header' optionset.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.RemoveOptions">
            <summary>Define options to remove from the final optionset</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CustomBuildStepElement">
            <summary>Defines a custom build step that may execute before or 
            after another target.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.Before">
            <summary>
            Name of the target a custom build step should run before (build, link, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.After">
            <summary>
            Name of the target a custom build step should run after (build, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.Script">
            <summary>The commands to be executed by the custom build step, 
            either NAnt tasks or OS commands.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.OutputDependencies">
            <summary>A list of files that are added to the step's output dependencies.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.InputDependencies">
            <summary>A list of files that are added to the step's input dependencies.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DependenciesPropertyElement">
            <summary>Specifies dependencies at both the package and module level. For more details see dependency section of docs, filed under "Reference/Packages/build scripts/Dependencies".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.Dependencies">
            <summary>(Note: New in Framework 3+) Using autodependencies is always a safe option. They simplify build scripts when module declaring dependencies can be built as a static or dynamic library depending on configuration settings.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.UseDependencies">
            <summary>This type of dependency is often used with static libraries. Acts as a combined interface and link dependency.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.BuildDependencies">
            <summary>Sets the dependencies to be built by the package. Ignored when dependent package is non buildable, or has autobuildclean=false.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.InterfaceDependencies">
            <summary>These dependencies are used when only header files from dependent package are needed. Adds include directories and defines set in the Initialize.xml file of dependent package.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.LinkDependencies">
            <summary>Use these dependencies to make sure no header files or defines from dependent package are used. Library directories, using directories, assemblies and DLLs are also taken from the dependent package.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.SkipRuntimeDependency">
            <summary>Allows you to disable the automatic build dependency on runtime modules that is used for test and example builds.</summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.DependenciesPropertyElement.InitializeElement(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">XML node used to define this task instance.</param>
        </member>
        <member name="T:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsInterface">
            <summary>Public include directories from dependent packages are added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsLink">
            <summary>Public libraries from dependent packages are added if this attribute is true.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsCopyLocal">
            <summary>Set copy local flag for this dependency output.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsInternal">
            <summary>Deprecated, this will be ignored.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetAssembliesFileset.UseDefaultAssemblies">
            <summary>Controls whether default assemblies dependencies should be included.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetDataElement">
            <summary>MCPP/DotNet specific data</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask">
            <summary>A module buildable by the dot net framework</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.OutputDir">
            <summary>Overrides the default framework directory where built files are located.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.OutputName">
            <summary>Overrides the default name of built files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Workflow">
            <summary>Is this a Workflow module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.UnitTest">
            <summary>Is this a UnitTest module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.WebApp">
            <summary>Indicates this is a web application project and enables web debugging.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RootNamespace">
            <summary>Specifies the Rootnamespace for a visual studio project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ApplicationManifest">
            <summary>Specifies the location of the Application manifest</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.AppdesignerFolder">
            <summary>Specifies the name of the App designer folder</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DisableVsHosting">
            <summary>used to enable/disable Visual Studio hosting process during debugging</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ImportMSBuildProjects">
            <summary>Additional MSBuild project imports</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RunPostbuildEvent">
            <summary>Postbuild event run condition</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ApplicationIcon">
            <summary>The location of the Application Icon file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.GenerateDoc">
            <summary>property enables/disables generation of XML documentation files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.KeyFile">
            <summary>Key File</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.SourceFiles">
            <summary>Adds the list of sourcefiles</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Assemblies">
            <summary>A list of referenced assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Dlls">
            <summary>Adds a set of native dynamic/shared libraries. These do not affect build but be copied
            to module output directory if copy local is enabled.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ResourceFiles">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.CustomBuildFiles">
            <summary>Files with associated custombuildtools</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ResourceFilesNonEmbed">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ContentFiles">
            <summary>Adds a list of 'Content' files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.WebReferences">
            <summary>A list of webreferences for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Modules">
            <summary>Adds the list of modules</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ComAssemblies">
            <summary>A list of COM assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Config">
            <summary>Sets the configuration for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.PlatformExtensions">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.NugetReferences">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.MergeInto">
            <summary>[Deprecated] Merge module feature is being deprecated.  If you still required to use this feature, please contact Frostbite.Team.CM regarding your requirement.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.GeneratedAssemblyInfo">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement">
            <summary>Sets various attributes for a config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.BuildOptions">
            <summary>Gets the build options for this config.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Defines">
            <summary>Gets the macros defined for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.AdditionalOptions">
            <summary>Additional commandline options, new line separated (added to options defined through optionset</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.CopyLocal">
            <summary>Defines whether referenced assemblies are copied into the output folder of the module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Platform">
            <summary>Specifies the platform to build against</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.TargetFrameworkVersion">
            <summary>used to define target .Net framework version</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.LanguageVersion">
            <summary>Set the C# language version, if not set the compiler default will be used</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.UseWpf">
            <summary>option used together with .net core to depend on necessary libraries for WPF</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.UseWindowsForms">
            <summary>option used together with .net core to depend on necessary libraries for Windows Forms</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.TargetFrameworkFamily">
            <summary>used to indicate .net framework or core or standard</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.GenerateSerializationAssemblies">
            <summary>Generate serialization assemblies:  None, Auto, On, Off</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Suppresswarnings">
            <summary>Gets the warning suppression property for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.WarningsaserrorsList">
            <summary>List of warnings to treat as errors</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Warningsaserrors">
            <summary>Treat warnings as errors</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Warningsnotaserrors">
            <summary>List of warnings that should just be treated as warnings, when warningsaserrors is on these warnings will not be errors and will not be suppressed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.RemoveOptions">
            <summary>Define options to removefrom the final optionset</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Preprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Postprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions">
            <summary>Sets options to be removed from final configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions.Defines">
            <summary>Defines to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions.Options">
            <summary>Compiler options to be removed</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.PregenerateTarget">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.ExcludedBuildFiles">
            <summary>A list of files that are excluded from the build but are added to the visual studio
            project as non-buildable files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.EnableUnmanagedDebugging">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.MsbuildOptions">
            <summary>A list of elements to insert directly into the visualstudio project file in the config build options section.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.ProjectTypeGuids">
            <summary>Allow users to set custom project type guids. Multiple guids should be separated by a semicolon.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.Extension">
            <summary>The name(s) of a Visual Studio Extension task used for altering the solution generation process 
            to allow adding custom elements to a project file.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ElementWithCondition">
            <summary>A non-nested conditional property element is used by tasks that want to have the 
            user enter a string only as an attribute.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ElementWithCondition.IfDefined">
            <summary>If true then the task will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ElementWithCondition.UnlessDefined">
            <summary>Opposite of if.  If false then the task will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaModuleBaseTask.GradleDirectory">
            <summary>Sets the directory to use for Gradle to build this Android module. A build.gradle should be located in this directory. If omitted
            then the directory of the .build file will be used.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaModuleBaseTask.GradleProject">
            <summary>Project name for this module in Gradle context If omitted the module name will be used.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaModuleBaseTask.Dependencies">
            <summary>Set the dependencies for this java module. Note that unlikely other modules, specific dependency types do not need to be defined.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaModuleBaseTask.JavaSourceFiles">
            <summary>Java files to display in Visual Studio for debugging purposes (not used for build).</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaModuleBaseTask.GradleProperties">
            <summary>Extra values that should be added to the gradle.properties file when building this project.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Debug">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Comment">
            <summary></summary>       
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.ModuleName">
            <summary>The name of this module.</summary>       
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Group">
            <summary>The name of the build group this module is a part of. The default is 'runtime'.</summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.PartialModuleName">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.BuildType">
            <summary>Used to explicitly state the build type. By default 
            structured XML determines the build type from the structured XML tag.
            This field is used to override that value.</summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.BuildLayout">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.PartialModuleNameProp">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.NantScript">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.CopyLocal">
            <summary>Applies 'copylocal' to all dependents</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.BuildTypeProp">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Dependencies">
            <summary>Sets the dependencies for a project</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.NantScript">
            <summary>
            Execute arbitrary XML script. Useful in partial modules.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.NantScript.ExecutionOrder">
            <summary>Script can be executed 'before' structured XML data are processed or 'after'.</summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.NantScript.InitializeElement(System.Xml.XmlNode)">
            <summary>Add all the child option elements.</summary>
            <param name="elementNode">XML node to initialize from.</param>
        </member>
        <member name="P:EA.Eaconfig.Structured.NantScript.ExecScript.Dummy">
            <summary>Script can be executed 'before' structured XML data are processed or 'after'.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CopyLocalElement">
            <summary>
            Module's global copylocal setting.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CopyLocalElement.UseHardLinkIfPossible">
            <summary>Specifies that the copylocal task will use hard link if possible (default is false)</summary>        
        </member>
        <member name="T:EA.Eaconfig.Structured.ModuleTask">
            <summary>A standard structured XML Module with user specified buildtype to be used in the .build file (not to be confused with the &lt;module&gt; task for Initialize.xml file)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.OutputDir">
            <summary>Overrides the default framework directory where built files are located.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.OutputName">
            <summary>Overrides the default name of built files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Libraries">
            <summary>Adds a set of libraries </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Dlls">
            <summary>Adds a set of dynamic/shared libraries. DLLs are passed to the linker input.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ObjectFiles">
            <summary>Adds the list of object files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.SourceFiles">
            <summary>Adds the list of source files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.AsmSourceFiles">
            <summary>Adds a list of assembly source files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ResourceFiles">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ShaderFiles">
            <summary>Adds a list of shader files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ResourceFilesNonEmbed">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.NatvisFiles">
            <summary>Adds a list of natvis files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.CustomBuildFiles">
            <summary>Files with associated custombuildtools</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.RootNamespace">
            <summary>Specifies the Rootnamespace for a visual studio project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.IncludeDirs">
            <summary>Defines set of directories to search for header files. Relative paths are prepended with the package directory.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.LibraryDirs">
            <summary>Defines set of directories to search for library files. Relative paths are prepended with the package directory.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.UsingDirs">
            <summary>Defines set of directories to search for forced using assemblies. Relative paths are prepended with the package directory.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.HeaderFiles">
            <summary>Includes a list of header files for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ComAssemblies">
            <summary>A list of COM assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Assemblies">
            <summary>A list of referenced assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.AdditionalManifestFiles">
            <summary>A list of application additional manifest files for native projects.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.UseSharedPch">
            <summary>Specified to use shared pch module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Config">
            <summary>Sets the configuration for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.BulkBuild">
            <summary>Sets the bulkbuild configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.SdkReferences">
            <summary>SDK references (used in MSBuild files)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.DotNetDataElement">
            <summary>MCPP/DotNet specific data</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.VisualStudioData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.JavaData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.AndroidGradle">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.PlatformExtensions">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.MergeInto">
            <summary>[Deprecated] Merge module feature is being deprecated.  If you still required to use this feature, please contact Frostbite.Team.CM regarding your requirement.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.GeneratedAssemblyInfo">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.NamedStructuredFileSets">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.NamedStructuredFileSets.FileSetName">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PackagingElement">
            <summary>PackagingElement</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.PackageName">
            <summary>Sets or gets the package name</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.DeployAssets">
            <summary>If true assetfiles are deployed/packaged according to platform requirements. Default is true for programs.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.CopyAssetsWithoutSync">
            <summary>Specify assets files are copied only and do not perform asset directory synchronization. Default is false for programs.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.Assets">
            <summary>
            Asset files defined by the module. 
            The asset files directory will be synchronized to match this fileset, therefore only one assetfiles fileset can be defined per package.
            To attach asset files to multiple modules use the assetfiles 'fromfileset' attribute.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.AssetDependencies">
            <summary>Sets or gets the asset dependencies</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.AssetConfigBuildDir">
            <summary>Sets or gets the asset-configbuilddir</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.ManifestFile">
            <summary>Gets the manifest file</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PartialModuleTask">
            <summary>
            Declares partial module definition. NOTE: schema and intellisense are generated for 'native' PartialModule only, for DotNet partial modules use 'CsharpLibrary' as a template.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PartialModuleTask.ModuleName">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PartialModuleTask.Comment">
            <summary></summary>       
        </member>
        <member name="T:EA.Eaconfig.Structured.PrecompiledHeadersElement">
            <summary>Precompiled headers input.   NOTE: To use this option, you still need to list a source file and specify that file with 'create-precompiled-header' optionset.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.Enable">
            <summary>enable/disable using precompiled headers.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.PchFile">
            <summary>Name of output precompiled header (Note that some platform's VSI don't provide this setting.  So this value may not get used!</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.PchHeaderFile">
            <summary>Name of the precompiled header file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.PchHeaderFileDir">
            <summary>Directory to the precompiled header file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.UseForcedInclude">
            <summary>
            Use forced include command line switches to set up include to the header file so that people don't need to modify
            all source files to do #include "pch.h"
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.UseSharedPchElement">
            <summary>
            Shared Precompiled Header module input.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UseSharedPchElement.SharedModule">
            <summary>The shared pch module (use the form [package_name]/[build_group]/[module_name]).  The build_group field can be ignored if it is runtime.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UseSharedPchElement.UseSharedBinary">
            <summary>For platforms that support using common shared pch binary, this attribute allow module level control of using the shared pch binary. (default = true)</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RemoveBuildOptions">
            <summary>Sets options to be removed from final configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.Defines">
            <summary>Defines to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.CcOptions">
            <summary>C/CPP compiler options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.AsmOptions">
            <summary>Assembly compiler options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.LinkOptions">
            <summary>Linker options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.LibOptions">
            <summary>librarian options to be removed</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ResourceFilesElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.Prefix">
            <summary>Indicates the prefix to prepend to the actual resource.  This is usually the 
            default namespace of the assembly.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.ResourceBasedir">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.ResourceIncludeDirs">
            <summary>Additional include directories to pass to the resource compiler</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.ResourceDefines">
            <summary>Additional defines to pass to the resource compiler</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RunDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.WorkingDir">
            <summary>Sets the current working directory from which the executable needs to run</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.Args">
            <summary>Sets the command line arguments for an executable</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.StartupProgram">
            <summary>Sets the startup program</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.WorkingDirProp">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.ArgsProp">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.StartupProgramProp">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredFileSet">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSet.AppendBase">
            <summary>If true, the patterns specified by this task are added to the patterns contained in the fileset. If false, the fileset will only contains the patterns specified in this task. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSet.Suffix">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredFileSetCollection">
            <summary>Sometimes it's useful to be able to access each fileset defined as a collection rather than
            appending from multiple definitions into a single fileset. Gives the facade of a fileset so 
            the XML declaration can be the same (minus properties which don't make sense for structured.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.IfDefined">
            <summary>If true then the task will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.UnlessDefined">
            <summary>Opposite of if.  If false then the task will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredOptionSet">
            <summary></summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.StructuredOptionSet.Initialize(System.Xml.XmlNode)">
            <summary>Optimization. Directly initialize</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.VisualStudioDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PregenerateTarget">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.ExcludedBuildFiles">
            <summary>A list of files that are excluded from the build but are added to the visual studio
            project as non-buildable files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PreBuildStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PostBuildStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.VcProj">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.CsProj">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.MsbuildOptions">
            <summary>A list of elements to insert directly into the visualstudio project file in the config build options section.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.Extension">
            <summary>The name(s) of a Visual Studio Extension task used for altering the solution generation process 
            to allow adding custom elements to a project file.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.VcprojDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.PreLinkStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.InputResourceManifests">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.AdditionalManifestFiles">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CsprojDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CsprojDataElement.LinkNonembeddedResources">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RuntimeTask">
            <summary>
            Contains 'runtime' modules in structured XML. Module definitions inside this tag will belong to 'runtime' group. 
            runtime group element is optional, structured XML modules belong to 'runtime' group by default.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.TestsTask">
            <summary>
            Contains 'test' modules in structured XML. Module definitions inside this tag will belong to 'test' group.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ExamplesTask">
            <summary>
            Contains 'example' modules in structured XML. Module definitions inside this tag will belong to 'example' group.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ToolsTask">
            <summary>
            Contains 'tool' modules in structured XML. Module definitions inside this tag will belong to 'tool' group.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildToolTemplates.CommandLine">
            <summary>Create template property {tool}.template.commandline.  Note that each argument should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildToolTemplates.Responsefile">
            <summary>Templates that control response files, their contents and how they are passed to the build tool (optional)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResponseFileTemplates.CommandLine">
            <summary>A template of the command line when response files are being used.
            Normally this would just contain the path to the response file, using the token %responsefile%,
            but it can also contain any other properties that can't be put inside the response file.
            This corresponds to the old template property {tool}.template.responsefile (optional)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResponseFileTemplates.Contents">
            <summary>A template of the contents of the reponse file.
            This corresponds to the old template property {tool}.template.responsefile.commandline (optional)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildToolTask`1.Path">
            <summary>Create readonly "{tool}" property (or verify property is not changed) and points to full path of c++ compiler.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildToolTask`1.Version">
            <summary>Create readonly "{tool}.version" property indicating tool version.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildToolTask`1.CommonOptions">
            <summary>Create readonly "{tool}.common-options" property indicating compiler options that will be applied to all c++ compiles (optional).  Note that each option should be separated by new line.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CompilerTemplates">
            <summary>Setup c/c++ compiler template information.  This block meant to be used under &lt;compiler&gt; block.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.CommandLineCLanguage">
            <summary>Create template property cc-clanguage.template.commandline (optional).  Note that each argument should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.PchCommandLine">
            <summary>Create template property cc.template.pch.commandline (optional)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.Define">
            <summary>Create template property cc.template.define</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.IncludeDir">
            <summary>Create template property cc.template.includedir</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.SystemIncludeDir">
            <summary>Create template property cc.template.system-includedir</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.UsingDir">
            <summary>Create template property cc.template.usingdir (optional - should only get used for managed c++ build)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTemplates.ForceUsingAssembly">
            <summary>Create template property cc.template.forceusing-assembly (optional - should only get used for managed c++ build)</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CompilerTask">
            <summary>Setup c/c++ compiler properties for used by the build optionsets.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTask.CommonDefines">
            <summary>Create readonly "cc.common-defines" property indicating defines that will be applied to all c++ compiles (optional).  Note that each define should be separated by new line.(</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTask.SystemIncludeDirs">
            <summary>Create readonly "cc.system-includedirs" property indicating system (SDK) include directories that will be applied to all c/c++ compiles (optional).  Note that each path should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTask.PathCLanguage">
            <summary>Create readonly "cc-clanguage" property (or verify property is not changed) and points to full path of c compiler (optional).</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTask.CommonDefinesCLanguage">
            <summary>Create readonly "cc-clanguage.common-defines" property indicating defines that will be applied to all c compiles (optional).  Note that each define should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CompilerTask.CommonOptionsCLanguage">
            <summary>Create readonly "cc-clanguage.common-options" property indicating compiler options that will be applied to all c compiles (optional).  Note that each option should be separated by new line.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.AssemblerTemplates">
            <summary>Setup c/c++ assembler template information.  This block meant to be used under &lt;assembler&gt; block.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblerTemplates.Define">
            <summary>Create template property as.template.define</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblerTemplates.IncludeDir">
            <summary>Create template property as.template.includedir</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblerTemplates.SystemIncludeDir">
            <summary>Create template property as.template.system-includedir</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.AssemblerTask">
            <summary>Setup c/c++ assembler properties for used by the build optionsets.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblerTask.CommonDefines">
            <summary>Create readonly "as.common-defines" property indicating defines that will be applied to all c++ assembly compiles (optional).  Note that each define should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.AssemblerTask.SystemIncludeDirs">
            <summary>Create readonly "as.system-includedirs" property indicating system (SDK) include directories that will be applied to all assembly compiles (optional).  Note that each path should be separated by new line.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LibrarianTemplates">
            <summary>Setup c/c++ librarian (archiver) template information.  This block meant to be used under &lt;librarian&gt; block.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LibrarianTemplates.ObjectFile">
            <summary>Create template property lib.template.objectfile</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LibrarianTask">
            <summary>Setup c/c++ librarian (archiver) properties for used by the build optionsets.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LinkerTemplates">
            <summary>Setup c/c++ linker template information.  This block meant to be used under &lt;linker&gt; block.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LinkerTemplates.LibraryDir">
            <summary>Create template property link.template.librarydir</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LinkerTemplates.LibraryFile">
            <summary>Create template property link.template.libraryfile</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LinkerTemplates.ObjectFile">
            <summary>Create template property link.template.objectfile</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LinkerTask">
            <summary>Setup c/c++ linker properties for used by the build optionsets.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LinkerTask.SystemLibraryDirs">
            <summary>Create readonly "link.system-librarydirs" property indicating system (SDK) library directories that will be applied to all build (optional).  Note that each path should be separated by new line.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.LinkerTask.SystemLibs">
            <summary>
            Create readonly "linker.system-libs" property indicating system (SDK) libraries that will be applied to all builds (optional).  Note: Try not to use full path.  Just use library filename.  Each library should be separated by new line.
            Library path information should be setup in &lt;system-librarydirs&gt; block.
            </summary>
            <example>
             <para>Example PC style specification:</para>
             <code><![CDATA[
             <link ...>
               <system-libs>
                  kernel32.lib
                  User32.lib
               </system-libs>
             </link>
             ]]></code>
             <para>Example gcc style specification where -lXYZ stands for libXYZ.a, just use -lXYZ:</para>
             <code><![CDATA[
             <link ...>
               <system-libs>
                  -lpthread
               </system-libs>
             </link>
             ]]></code>
            </example>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpLibraryTask">
            <summary>A Module buildable as a C Sharp library.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpWindowsProgramTask">
            <summary>This task allows you to set attributes for a CSharp Program Task</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DeclarePublicPropertiesTask">
            <summary>
            Public property declaration allows to describe properties thatcan affect/control package build
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DeclarePublicPropertiesTask.PackageName">
            <summary>
            Name of the package this property affects.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DeclarePublicPropertiesTask.PropertyDeclaration">
            <summary>
            Public property declaration allows to describe properties
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DeclarePublicPropertiesTask.PublicPropertyDeclaration.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DeclarePublicPropertiesTask.PublicPropertyDeclaration.Description">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DynamicLibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.MakeStyleTask">
            <summary>MakeStyle modules are used to execute external build or clean commands</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeBuildCommand">
            <summary>A makestyle build command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeRebuildCommand">
            <summary>A makestyle rebuild command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeCleanCommand">
            <summary>A makestyle clean command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeOutput">
            <summary>A list of expected output files (separated by semi-colon.  Only used in setting up Visual Studio vcxproj file.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.TransitiveLink">
            <summary>Specified that any dependencies listed in this module will be propagated for transitive linking. Only use this if module is a wrapper for a static library.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.SourceFiles">
            <summary>Adds the list of sourcefiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.AsmSourceFiles">
            <summary>Adds the list of asmsourcefiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.HeaderFiles">
            <summary>Adds the list of headerfiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.ExcludedBuildFiles">
            <summary>Adds the list of excluded build files, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppAssemblyTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppWindowsProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ModulePublicData">
            <summary>A structured XML module information export specification to be used in Initialize.xml file (not to be confused with the &lt;Module&gt; task for the .build file)</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.ModuleName">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.OutputName">
            <summary>
            The default output name is based on the module name.  This attribute tells Framework to remap the output name to something different.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Processors">
             <summary>
             List of supported processors to be used in adding default include directories and libraries.
             <list type="table">
             <listheader> <term>Default include directories</term> </listheader>
             <item> <term>"${package.dir}}/include"</term> </item>
             <item> <term>"${package.dir}}/include_${processor}"</term> </item>
             </list>
            
             <list type="table">
             <listheader><term>Default libraries</term></listheader>
             <item><term>"${lib-prefix}${module}${lib-suffix}"</term></item>
             <item><term>"${lib-prefix}${module}_${processor}${lib-suffix}"</term></item>
             </list>
             </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.AddDefaults">
            <summary>
            (Deprecated) If set to true default values for include directories and libraries will be added to all modules. 
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.ExcludeFromSolution">
            <summary>
            If set to true the project will not be added to the solution during solution generation.  This will only really work for utility style modules since modules with actual build dependency requirements will fail visual studio build dependency requirements.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.LibNames">
            <summary>
            List of additional library names to be added to default set of libraries. Can be overwritten by 'libnames' attribute in 'module' task.
            See documentation on Modules for explanation when default values are used.
            <list type="table">
            <listheader><term>Default libraries</term></listheader>
            <item><term>"${lib-prefix}${module}${lib-suffix}"</term></item>
            <item><term>"${lib-prefix}${libname}${lib-suffix}"</term></item>
            </list>
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.BuildType">
            <summary>
            Sets the buildtype used by this module. If specified Framework will try to work out which outputs (libs, dlls, etc) to automatically export.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Defines">
            <summary>
            Set preprocessor defines exported by this module
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Includedirs">
            <summary>
            Set include directories exported by this module. Empty element will result in default include directories added.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.InternalIncludeDirs">
            <summary>
            Set internal include directories exported by this module.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.PublicDependencies">
            <summary>Declare packages or modules that modules which have an interface dependency on this module will also need to depend on.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.PublicBuildDependencies">
            <summary>Declare packages or modules that modules which have a build dependency on this module will also need to depend on.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.InternalDependencies">
            <summary>Declare packages or modules that modules which have an internal dependency on this module will also need to internally depend on.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Libdirs">
            <summary>
            Set library directories exported by this module
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Usingdirs">
            <summary>
            Set 'using' (/FU) directories exported by this module
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Libs">
            <summary>Set libraries exported by this module. If &lt;libs/&gt; is present and empty, default library values are added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.LibsExternal">
            <summary>Set libraries (external to current package) exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Dlls">
            <summary>Set dynamic libraries exported by this module. If &lt;dlls/&gt; is present and empty, default dynamic library values are added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.DllsExternal">
            <summary>Set dynamic libraries (external to current package) exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Assemblies">
            <summary>Set assemblies exported by this module. If &lt;assemblies/&gt; is present and empty, default assembly values are added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.AssembliesExternal">
            <summary>Set assemblies (external to current package) exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.NatvisFiles">
            <summary>Set natvis files exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.SnDbsRewriteRulesFiles">
            <summary>Set full path to rewrite rules ini files that provide computed-include-rules for SN-DBS. See SN-DBS help documentation regarding "Customizing dependency discovery."</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Programs">
            <summary>Set programs exported by this module. Unlike the above filesets, if &lt;programs/&gt; is present and empty, nothing will be added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Assetfiles">
            <summary>Set assetfiles exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.ContentFiles">
            <summary>Set content files exported by this module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.JavaArchives">
            <summary>set Java archive (.jar) files exported by this module. This is currently used on Android only. .</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.JavaClasses">
            <summary>set Java class files (compiled .java files) exported by this module. This is currently used on Android only. .</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModulePublicData.Resourcedir">
            <summary>Set Android resource directories exported by this module. This is often used in Android Extension Libraries </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PackagePublicData">
            <summary>
            Container task to declare module public data in Initialize.xml file.  Refer to the Module
            task for a full description of the NAnt script that may be placed inside the publicdata task.
            You can also look at the documentation for Initialize.xml (Reference/Packages/Initialize.xml file)
            for some examples of how to use the publicdata task.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagePublicData.PackageName">
            <summary>Name of the package.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagePublicData.Processors">
            <summary>
            List of supported processors to be used in adding default include directories and libraries.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagePublicData.LibNames">
            <summary>
            List of additional library names to be added to default set of libraries.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagePublicData.AddDefaults">
            <summary>
            (Deprecated) If set to true default values for include directories and libraries will be added to all modules. Can be overwritten by 'add-defaults' attribute in module.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagePublicData.ConfigBinDir">
            <summary>
            If your package overrides the "package.configbindir" property this should be set if you want public data paths to be auto resolved.
            </summary>
            <example>
            <para>If your package .build file modifies configbindir:
            <code><![CDATA[
            <property name="package.configbindir" value="${overridebindir}"/>
            ]]></code>
            Then publicdata task will not return correct default paths unless it is passed the new configbindir:
            <code><![CDATA[
            <publicdata packagename="MyPackage" configbindir="${overridebindir}">
            	<moddule name="MyAssembly">
            		<assemblies/> <!-- this will be able to resolve the correct default path -->
            	</module>
            </publicdata>
            ]]></code>
            </para>
            </example>
        </member>
        <member name="T:EA.Eaconfig.Structured.ProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PythonProgramTask">
            <summary>A program that runs through a python interpreter</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.StartupFile">
            <summary>The python file where the programs execution starts.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.WindowsApp">
            <summary>Is this project a windows application, defaults to false.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.WorkDir">
            <summary>Sets the working directory for this project.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.ProjectHome">
            <summary>The projects home directory, search paths and the startup file path
            need to be relative to this directory. By default it is the directory containing the
            visual studio project files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.Environment">
            <summary>Custom environment variable setup</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.SourceFiles">
            <summary>Adds the list of sourcefiles.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.ContentFiles">
            <summary>Adds the list of contentfiles.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.SearchPaths">
            <summary>A semicolon separated list of directories that will be added to the Search Path.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SharedPchTask">
            <summary>
            A special task to define a shared precompiled header module name in build file.  Note that to 
            use this task, people must first declare this module in Initialize.xml using 'sharedpchmodule' public data task.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SharedPchTask.ModuleName">
            <summary>The name of this shared precompiled header module.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SharedPchPublicData">
            <summary>A structured XML Shared PCH module information export specification to be used in Initialize.xml file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SharedPchPublicData.PchHeader">
            <summary>
            Precompile Header (.h)'s filename
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SharedPchPublicData.PchHeaderDir">
            <summary>
            Directory where the 'pchheader' is located.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SharedPchPublicData.PchSource">
            <summary>
            Full path to source file used to generate the pch
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SharedPchPublicData.PchFile">
            <summary>
            Full path to the pch binary output
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SolutionFolders">
            <summary>Define folders for Visual Studio Solutions </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolders.Append">
            <summary>Append this definition to existing definition. Default: 'true'.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolders.Folders">
            <summary>Folders.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolder.Append">
            <summary>Append this definition to existing definition. Default: inherits from 'SolutionFolders' element' or parent folder</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolder.FolderName">
            <summary>The name of the folder.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolder.Items">
            <summary>Items (files) to put in this folder</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolder.Projects">
            <summary>Packages and modules to include in the solution folders. Syntax is similar to dependency declarations.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolder.Folders">
            <summary>Subfolders.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolderCollection.WarnOnMultiple">
            <summary>Disabling warning about multiple folder elements, it is an incorrect warning in this case because it is parsed by the initialize element method rather than purely through reflection</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolderCollection.Append">
            <summary>Append this definition to existing definition. Default: inherits from 'SolutionFolders' element'</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.SolutionFolderCollection.DummyName">
            <summary>Items (files) to put in this folder</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SpuSubsystemGroupPublicData">
            <summary>
            (Deprecated) Contains public data declarations for ps3 'spu' modules in Initialize.xml.
             ps3 is no longer supported by Framework, this task will eventually be removed.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SPULibraryTask">
            <summary>(Deprecated) This is a ps3 specific module type, it is ignored by non-ps3 configs. ps3 is no longer supported by Framework, this task will eventually be removed.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SPUProgramTask">
            <summary>(Deprecated) This is a ps3 specific module type, it is ignored by non-ps3 configs. ps3 is no longer supported by Framework, this task will eventually be removed.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.UtilityTask">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.TransitiveLink">
            <summary>Specified that any dependencies listed in this module will be propagated for transitive linking. Only use this if module is a wrapper for a static library.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.OutputDir">
            <summary>Setup the location where &lt;copylocal&gt; of dependencies should copy the files to.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.CustomBuildFiles">
            <summary>Files with associated custombuildtools</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.ExcludedFiles">
            <summary>Files that are part of the project but are excluded from the build.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.FileCopySteps">
            <summary>Set up special step to do file copies.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.Config">
            <summary>Sets the configuration for a project</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.UtilityTask.UtilityConfigElement">
            <summary>Sets various attributes for a config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.UtilityConfigElement.Preprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.UtilityConfigElement.Postprocess">
            <summary>Preprocess step can be C# task derived from AbstractModuleProcessorTask class or a target. Multiple preprocess steps are supported</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.UtilityTask.FileCopyStepCollection">
            <summary>Setup a file copy step for a utility module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.FileCopyStepCollection.File">
            <summary>File to copy.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.FileCopyStepCollection.ToFile">
            <summary>Destination file. If this is specified, expects 'file' attribute to be specified.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.FileCopyStepCollection.ToDir">
            <summary>Destination directory. If this is specified, expects either 'file' attribute or 'fileset' inner element to be specified.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.VisualStudioProjectTask">
            <summary>Define a module that represents an existing visual studio project file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.Guid">
            <summary>A Visual Studio Project GUID which is inserted into the generated solution. </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.Managed">
            <summary>Set to true if the project is a managed project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.UnitTest">
            <summary>For unit test C# projects</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.ProjectFile">
            <summary>The full path to the Visual Studio Project File</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.ProjectConfig">
            <summary>The Visual Studio Project Configuration name that corresponds to the current Framework ${config} value</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.ProjectPlatform">
            <summary>The Visual Studio Project Platform name that corresponds to the current Framework ${config} value</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.ProjectOutput">
            <summary>The full path to the project's output assembly</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioProjectTask.ProjectDebugSymbols">
            <summary>The full path to the project's output symbols</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.WindowsProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.ClangCompilationDatabase">
            <summary>Generates a Clang Compilation Database</summary>
        </member>
        <member name="T:EA.Eaconfig.CollectMasterconfigPackagesTask">
            <summary>
            Gets a list of packages in a specific group in the masterconfig file and stores it in a property
            </summary>
        </member>
        <member name="P:EA.Eaconfig.CollectMasterconfigPackagesTask.GroupName">
            <summary>
            The name of a group in the masterconfig config file
            </summary>
        </member>
        <member name="P:EA.Eaconfig.CollectMasterconfigPackagesTask.TargetProperty">
            <summary>
            The name of a property where the list will be stored
            </summary>
        </member>
        <member name="T:EA.Eaconfig.ConsoleExecRunner">
            <summary>The common behavior shared between the kettle and capilano runner tasks</summary>
        </member>
        <member name="T:EA.Eaconfig.CreateBuildGraphForPackageTask">
            <summary>
            Create a build graph for a specific package instead of current package.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.CreateBuildGraphForPackageTask.BuildPackage">
            <summary>
            The package we want to create the build graph for.  If not specified, will create build graph for current package.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.CreateCustomBuildStepTask.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="P:EA.Eaconfig.EaconfigCustomBuildTask.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="T:EA.Eaconfig.GetModuleBaseType">
            <summary>
            Evaluates base buildtype name for the given buildtype optionset.
            </summary>
            <remarks>
            Base build type name can be one of the following
            <list type="bullet">
            <item>Library</item>
            <item>Program</item>
            <item>DynamicLibrary</item>
            <item>WindowsProgram</item>
            <item>CSharpLibrary</item>
            <item>CSharpProgram</item>
            <item>CSharpWindowsProgram</item>
            <item>ManagedCppAssembly</item>
            <item>ManagedCppProgram</item>
            <item>MakeStyle</item>
            <item>VisualStudioProject</item>
            <item>Utility</item>
            </list>
            </remarks>
        </member>
        <member name="P:EA.Eaconfig.GetModuleBaseType.BuildTypeName">
            <summary>Name of the buildtype optionset to examine</summary>
        </member>
        <member name="P:EA.Eaconfig.GetModuleBaseType.BuildTypeNameAlt">
            <summary>(deprecated) Duplicate of the buildtype-name field for backward compatibility</summary>
        </member>
        <member name="P:EA.Eaconfig.GetModuleBaseType.BaseBuildType">
            <summary>Evaluated buildtype. Saved in property "GetModuleBaseType.RetVal"</summary>
        </member>
        <member name="M:EA.Eaconfig.GetModuleBaseType.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.EchoFileSetTask">
            <summary>
            Prints the all of the files in a fileset.
            This task should only be used for debugging build scripts.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.EchoFileSetTask.FileSetName">
            <summary>
            The name of the fileset to print
            </summary>
        </member>
        <member name="T:EA.Eaconfig.EchoOptionSetTask">
            <summary>
            Prints the all of the options in an optionset.
            This task should only be used for debugging build scripts.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.EchoOptionSetTask.OptionSetName">
            <summary>
            The name of the optionset to print
            </summary>
        </member>
        <member name="T:EA.Eaconfig.ExcludeDirTask">
            <summary>Exclude a directory from an existing fileset</summary>
        </member>
        <member name="P:EA.Eaconfig.ExcludeDirTask.FilesetName">
            <summary>The name of the fileset that we want to exclude from</summary>
        </member>
        <member name="P:EA.Eaconfig.ExcludeDirTask.DirectoryName">
            <summary>The name of the directory that we want to exclude</summary>
        </member>
        <member name="T:EA.Eaconfig.GetAllDependentPackagesTask">
            <summary>
            Extract a list of dependent packages from build graph for all top modules in current package.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.GetAllDependentPackagesTask.OutProperty">
            <summary>Put the result this this property</summary>
        </member>
        <member name="P:EA.Eaconfig.GetModuleAssetFilesTask.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="T:EA.Eaconfig.RepeatExecifTask">
            <summary>Executes a system command. Repeats execution if condition is met</summary>
            
        </member>
        <member name="P:EA.Eaconfig.RepeatExecifTask.RepeatPatterns">
            <summary>List of patterns.</summary>
        </member>
        <member name="P:EA.Eaconfig.RepeatExecifTask.MaxCount">
            <summary>List of patterns.</summary>
        </member>
        <member name="M:EA.Eaconfig.RepeatExecifTask.LogStdOut(NAnt.Core.Util.OutputEventArgs)">
            <summary>Callback for procrunner stdout</summary>
        </member>
        <member name="M:EA.Eaconfig.RepeatExecifTask.LogStdErr(NAnt.Core.Util.OutputEventArgs)">
            <summary>Callback for procrunner stderr</summary>
        </member>
        <member name="T:EA.Eaconfig.ScriptInitTask">
            <summary>(Deprecated) Sets up a number of default public data properties. This is deprecated, use the 'publicdata' task instead.</summary>
        </member>
        <member name="P:EA.Eaconfig.ScriptInitTask.PackageName">
            <summary>The name of the package</summary>
        </member>
        <member name="P:EA.Eaconfig.ScriptInitTask.IncludeDirs">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.ScriptInitTask.Libs">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.SetConfigVisualStudioVersion">
            <summary>
            This task sets some properties that can be used if you need to execute your build
            differently depending on the version of Visual Studio that is being used.
            </summary>
            <remarks>
            <para>
            A property called config-vs-version is set to "14.0.0" if some variant of VisualStudio
            2015 is being used, "15.0.0" if some variant of VisualStudio 2017 is being used, or 
            "16.0.0" if some variant of VisualStudio 2019 is being used.
            </para>
            <para>
            In addition to the config-vs-version property, some legacy properties called
            package.eaconfig.isusingvc[8, 9, 10, 11] are also set to true.  They are cumulative, 
            meaning that if package.eaconfig.isusingvc11 is set, it means that the ones for versions
            8, 9, and 10 are also set to true.  We are 
            </para>
            </remarks>
        </member>
        <member name="T:EA.Eaconfig.UpdateManifestCompatibilityTask">
            <summary>
            Updates the compatibility element to match the version of the package
            </summary>
        </member>
        <member name="P:EA.Eaconfig.UpdateManifestCompatibilityTask.Version">
            <summary>Allows a build script write to specify a different/modified version to use for compatibility in place of the package version</summary>
        </member>
        <member name="M:EA.Eaconfig.UpdateManifestCompatibilityTask.RemoveSuffixes(System.String)">
            <summary>
            Remove certain common suffixes so that packages with the same version number are treated the same.
            For example we don't want the proxy suffix to affect version comparisons.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Validate_Visual_Studio_Components_Task">
            <summary>
            Ensures that the user's Visual Studio installation has the specified components.
            Determines the Visual Studio installation to check by using the vsversion and package.VisualStudio.AllowPreview properties
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Validate_Visual_Studio_Components_Task.Components">
            <summary>The components to ensure are part of the user's Visual Studio installation</summary>
        </member>
        <member name="P:EA.Eaconfig.Validate_Visual_Studio_Components_Task.FailOnMissing">
            <summary>If false, will not fail if Visual Studio is not installed. Default is true.</summary>
        </member>
        <member name="T:EA.Eaconfig.ViewBuildInfoTask">
            <summary>
            Show a simple GUI dialog box to allow user interactively view the build info of each build module.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.DAGNode`1.Sort(System.Collections.Generic.IEnumerable{EA.Eaconfig.DAGNode{`0}},System.Action{EA.Eaconfig.DAGNode{`0},EA.Eaconfig.DAGNode{`0},System.Collections.Generic.LinkedList{EA.Eaconfig.DAGNode{`0}}})">
            <summary>
            Returns a DAG flattened into a list of the order visited.
            </summary>
            <param name="dag">The directed acyclic graph</param>
            <param name="onCircular">A callback that is passed begin/end nodes of a cycle plus the complete cycle in a stack, of </param>
            <returns></returns>
        </member>
        <member name="M:EA.Eaconfig.VisualStudioUtilities.GetToolSetVersion(System.String)">
            <summary>
            Coerces the given Visual Studio version into the equivalent toolset version.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.VisualStudioUtilities.TryGetPathToVisualStudio(System.String@,System.String@,System.String,System.Boolean)">
            <summary>
            Finds an installed version of Visual Studio that matches the given parameters (the first match returned by vswhere.exe)
            and returns the version and path as out parameters.
            </summary>
            <returns>True if and only if a valid Visual Studio installation is found</returns>
        </member>
        <member name="M:EA.Eaconfig.VisualStudioUtilities.GetMissingVisualStudioComponents(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Boolean)">
            <summary>
            Finds an installed version of Visual Studio matching the given vsversion and checkForPreview parameters, and
            determines which of the specified required components are not installed. Useful for printing warnings to the user,
            to alert them to exactly which components are missing.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.VisualStudioUtilities.GetInstalledVisualStudioInfo(System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a list of dictionaries that contain the info returned by vswhere.exe for the installed versions of Visual Studio that match the given parameters.
            </summary>
        </member>
        <member name="T:EA.FrameworkTasks.Functions.PackageFunctions">
            <summary>
            A collection of package functions.
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.PackageGetPackageRoots(NAnt.Core.Project,System.String)">
            <summary>
            Gets a delimited list of all the package roots.
            </summary>
            <param name="project" />
            <param name="delimiter">The delimiter to use when separating the package roots.</param>
            <returns>The default package root or empty string if none exists.</returns>
            <example>
  <para>
  Returns a list of package roots delimited by a semi-colon.
  </para>
  <code>
<![CDATA[
<project xmlns="schemas/ea/framework3.xsd">
    <package name="PackageRootTest" targetversion="1.0.0"/>

    <echo message='@{PackageGetPackageRoots(";")}' />
</project>]]>
  </code>
</example>        
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.GetPackageVersion(NAnt.Core.Project,System.String)">
            <summary>
            Returns a version associated with a package within masterconfig.
            </summary>
            <param name="project"></param>
            <param name="packageName"></param>
            <returns>The version of package being used in masterconfig.</returns>
            <remarks>If package cannot be found, an empty string is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageBuildable(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is buildable as defined within its manifest.xml file.
            </summary>
            <param name="project"></param>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is buildable based on manifest.xml file.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageAutoBuildClean(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is autobuildclean within masterconfig.
            </summary>
            <param name="project"></param>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is autobuildclean or not in masterconfig.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageInMasterconfig(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is present in masterconfig.
            </summary>
            <param name="project"></param>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is in masterconfig or not.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.AreAllPackagesInMasterconfig(NAnt.Core.Project,System.String)">
            <summary>
            Returns true if all packages are present in the masterconfig.
            </summary>
            <param name="project"></param>
            <param name="packageNames">whitespace separated list of package names to check</param>
            <returns>true/false dependent on whether all packages are in masterconfig or not.</returns>
            <remarks>If any of packages cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.GetPackageMasterconfigGrouptypeName(NAnt.Core.Project,System.String)">
            <summary>
            Returns masterconfig grouptype name.
            </summary>
            <param name="project"></param>
            <param name="packageName">name of the package</param>
            <returns>grouptype name or empty string if package is not under a grouptype element in masterconfig.</returns>
            <remarks>If package cannot be found, empty string is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.ConfigExtensionEnabled(NAnt.Core.Project,System.String)">
            <summary>
            Indicates whether a config extension listed in the masterconfig is enabled.
            A config extension is a package that is listed in an extension element as a child of the config element in the masterconfig.
            A config extension is enabled as long as it does not have a condition on the extension element that currently evaluates to false.
            All enabled config extensions are applied all of the time, so even if you are not using an android config the android_config package will still be enabled.
            </summary>
            <param name="project"></param>
            <param name="configPackageName">name of the config package to check</param>
            <returns>true if the config package is enabled, false otherwise.</returns>
        </member>
        <member name="P:EA.FrameworkTasks.Model.BuildGraph.SortedActiveModules">
            <summary>
            List of modules sorted in a bottom-up fashion (i.e. leaf dependencies first followed by their immediate parents etc).
            This same order is also reflected in <see cref="!:ProcessableModule.GraphOrder"/>
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.BuildStep.Before">
            <summary>
            Name of the target a custom build step should run before (build, link, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.BuildStep.After">
            <summary>
            Name of the target a custom build step should run after (build, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Name">
            <summary>
            Full configuration name
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.System">
            <summary>
            pc, unix, capilano, android, etc 
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.SubSystem">
            <summary>
            Variation (spu, etc)
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Compiler">
            <summary>
            Compiler
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Platform">
            <summary>
            System+Compiler
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Type">
            <summary>
            debug, release, etc
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Processor">
            <summary>
            x86, x64, arm, arm64, (or empty for unsupported configs) etc
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.Model.IModule.CopyLocal">
            <summary>
            <para>
            Whether this module treats all transitive dependencies as copylocal automatically.
            </para>
            <para>
            Most module types set undefined (use copy local dependencies to determine copy local to this module).
            Some modules types set false (never copy local to this module).
            DotNet and Native modules allow users to control copy local types.
            </para>
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.Model.IModule.CopyLocalDelegate">
            <summary>
            Algorithm this module uses to gather copy local files from dependents.
            For example, most modules gather all exe or shared lib outputs but native modules only gather native exes or shared libs.
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.Model.IModule.CopyLocalUseHardLink">
            <summary>
            Whether post build copies should use hard links.
            Can be set to true by user for native modules, false otherwise.
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.Model.IModule.CopyLocalFiles">
            <summary>A list of all files that should be copied by this module as part of copy local feature</summary>
        </member>
        <member name="P:EA.FrameworkTasks.Model.IModule.RuntimeDependencyFiles">
            <summary>A set of files that should exist alongside the module output after the build either by being built directly to
            that location or via a copy (latter being from CopyLocalFiles)</summary>
        </member>
        <member name="T:EA.FrameworkTasks.DependentTask">
            <summary>This task indicates that another package needs to be loaded as a dependency</summary>
            <remarks>
              <para>
              This task looks in the named package's <b>scripts</b> folder 
              and executes the <b>Initialize.xml</b> if the package has one.
              The file is loaded the same as using a NAnt <b>include</b> Task.
              </para><para>
              The <c>initialize.xml</c> file is a mechanism to expose information
              about a package to other packages that are using it's contents.
              It does this by defining properties that describe itself.
              </para><para>
              Any code required for initializing a dependent package should also appear in the <b>Initialize.xml</b> file.
              </para><para>
              When NAnt executes the dependent task it will create these properties by default:
              <list type="table">
                <item>
                  <term>package.all</term>
                  <description>List of descriptive names of all the packages this build file depends on.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.dir</term>
                  <description>Base directory of package <i>name</i>.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.version</term>
                  <description>Specific version number of package <i>name</i>.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.frameworkversion</term>
                  <description>The version number of the Framework the given package is designed for, 
                  determined from the <b>&lt;frameworkVersion&gt;</b> of the package's Manifest.xml. 
                  Default value is 1 if Manifest.xml doesn't exist.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.sdk-version</term>
                  <description>Version of the SDK or third party files contained within the package. 
                  By default this is just the package version number up to the first dash character, 
                  unless it has been overridden in the package's initialize.xml file. 
                  Also, if the package's version starts with "dev" this property will be undefined. 
                  </description>
                </item>
              </list>
              </para><para>
              If you only want these default properties and don't want to load the rest of the package's initialize.xml file 
              you can set the attribute <b>initialize</b> to <b>false</b> when you call the dependent task.
              </para><para>
              By convention, packages should only define properties using
              names of the form <c>package.<i>name</i>.<i>property</i></c>
              Following this convention avoids namespace problems and makes
              it much easier for other people to use the properties your package sets.
              </para><para>
              One common use for the <b>Initialize.xml</b> file is for compiler packages to indicate where 
              the compiler is installed on the local machine by providing a property with the path.
              It is important to use these properties to compilers rather <c>package.<i>name</i>.dir</c> 
              because proxy SDK packages may point to a compiler installed elsewhere on the system.
              SDK packages typically define the property <c>package.<i>name</i>.appdir</c> 
              which is supposed to be the directory where the executable software resides.
              </para><para>
              This task must be embedded within a &lt;target&gt; with style 'build'
              or 'clean' if this dependent, <b>Framework 2</b> package is to autobuildclean.
              </para>
            </remarks>
            <example>
  <para>
  Declare an explicit dependency on the VisualStudio package.
  </para>
  <code>
<![CDATA[
<project xmlns="schemas/ea/framework3.xsd">
    <package name="HelloWorld"/>
    <dependent name="VisualStudio"/>
    <echo message="Visual Studio is installed at ${package.VisualStudio.appdir}"/>
</project>]]>
  </code>
</example>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.PackageName">
            <summary>The name of the package to depend on.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.PackageVersion">
            <summary>
            Deprecated (Used in Framework 1)
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.OnDemand">
            <summary>If true the package will be automatically downloaded from the package server. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.InitializeScript">
            <summary>If false the execution of the Initialize.xml script will be suppressed. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.Level">
            <summary>Warning level for missing or mismatching version. Default is NOTHING (0).</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.DropCircular">
            <summary>Drop circular build dependency. If false throw on circular build dependencies</summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes the task and checks for correctness.</summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.ValidatePackage(NAnt.Core.PackageCore.Release,System.Boolean)">
            <summary>
            Perform miscellaneous validity checks on the package we're depending on.
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.IsNestedUnderTarget">
            <summary>
            denote whether dependent is nested under a target task
            </summary>
        </member>
        <member name="T:EA.FrameworkTasks.ExecuteCustomBuildSteps">
            <summary>Executes a named custom build step.</summary>
            <remarks>
            <para>
            Note: This task is intended for internal use within eaconfig to allow 
            certain build steps to be called at the beginning or end of specific
            eaconfig targets.
            </para>
            <para>
            Executes a custom build step which may either consist of NAnt tasks or
            batch/shell script commands.
            </para>
            <para>
            The custom build step is defined using the property 
            runtime.[module].vcproj.custom-build-tool.
            </para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.ExecuteCustomBuildSteps.GroupName">
            <summary>The name of the module whose build steps we want to execute.</summary>
        </member>
        <member name="T:EA.FrameworkTasks.GenerateMasterPackagesOptionsetTask">
            <summary>
            creates optionset that contains all packages listed in masterconfig with key='package name', value='version'.
            
            </summary>
            <remarks>
            <para>Package version exceptions are evaluated against task Project instance.</para>
            <para>Has static C# interface: public static OptionSet Execute(Project project).</para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.GenerateMasterPackagesOptionsetTask.OptionsetName">
            <summary>Name of the optionset to generate</summary>
        </member>
        <member name="T:EA.FrameworkTasks.PackageTask">
            <summary>Declares a package and loads configuration. Also automatically loads the package's Initialize.xml.</summary>
            <remarks>
            <para>
            This task should be called only once per package build file.
            </para>
            <para>
            The task declares the following properties:
            </para>
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>${package.name}</term><description>The name of the package.</description></item>
            <item><term>${package.targetversion}</term><description>The version number of the package, determined from the <b>targetversion</b> attribute</description></item>
            <item><term>${package.version}</term><description>The version number of the package, determined from the <b>path</b> to the package</description></item>
            <item><term>${package.${package.name}.version}</term><description>Same as <b>${package.version}</b> but the property name includes the package name.</description></item>
            <item><term>${package.config}</term><description>The configuration to build.</description></item>
            <item><term>${package.configs}</term><description>For a Framework 1 package, it's a space delimited list 
            of all the configs found in the config folder.  For a Framework 2 package, this property excludes any configs
            specified by &lt;config excludes&gt; in masterconfig.xml</description></item>
            <item><term>${package.dir}</term><description>The directory of the package build file (depends on packageroot(s) but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${package.${package.name}.dir}</term><description>The directory of the package build file (depends on packageroot(s) but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${package.builddir}</term><description>The current package build directory (depends on <b>buildroot</b> but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${package.${package.name}.builddir}</term><description>Same as <b>${package.builddir}</b> but the property name includes the package name.</description></item>
            <item><term>${package.${package.name}.buildroot}</term><description>The directory for building binaries (can be set in masterconfig.xml via <b>buildroot</b> and <b>grouptype</b>) .</description></item>
            <item><term>${package.${package.name}.parent}</term><description>Name of this package's parent package (applies only when this package is set to autobuildclean).</description></item>
            </list>
            <para>
            Configuration properties are not loaded until this task has been executed in your .build file.
            </para>
            </remarks>
            <example>
  <para>
  Declares a package named EAThread with version number 1.24.05.
  </para>
  <code>
  <![CDATA[
  <project xmlns="schemas/ea/framework3.xsd">
      <package name="EAThread" targetversion="3.24.05"/>
      <echo message="Current package version: ${package.version}"/>
  </project>]]>
  </code>
</example>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.PackageName">
            <summary>Obsolete. Package name is now derived from the name of the .build file.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.TargetVersion">
            <summary>The version of the package in development. This parameter is optional.
            If it is not specified, Framework will use the actual version.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.InitializeSelf">
            <summary>Obsolete. Initialize</summary>
        </member>
        <member name="M:EA.FrameworkTasks.PackageTask.AddImplicitFrameworkDependency">
            <summary>Make an implicit dependency on the Framework package we are using to build with.</summary>
        </member>
        <member name="T:EA.FrameworkTasks.SignPackageTask">
            <summary>
            Creates package signature file
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.SignPackageTask.PackageFilesFilesetName">
            <summary>Name of the fileset containing all package files</summary>
        </member>
        <member name="T:EA.FrameworkTasks.VerifyVersionFileTask">
             <summary>Verifies package version info in version.h file.</summary>
             <remarks>
             <para>
             This task should be called by a package target.
             </para>
             <para>
             package task will verify that version information in the version.h file corresponds to the package version.
             This verification will apply to the packages that have 'include' directory to export header files. 
             Verification process will check that:
             * file 'version.h' or 'package_version.h" exists
             * version information inside 'version.h' file corresponds to the package version.
            
             Task assumes  that version information in the version.h file complies with the following convention:
             #define <name/>_VERSION_MAJOR   1
             #define <name/>_VERSION_MINOR   2
             #define <name/>_VERSION_PATCH   3
            
             Where <name/> is usually a package name but verification ignores content of <name/> 
             
             NOTE: This task will also check the Manifest.xml to make sure that it has a &lt;versionName&gt; entry and that
                   the version info matches as well.  If the entry is missing or incorrect, it will throw an error.
             </para>
             <para>
             The task declares the following properties:
             </para>
             <list type='table'>
             <listheader><term>Property</term><description>Description</description></listheader>
             <item><term>${test-version-file.packagename}</term><description>The name of the package.</description></item>
             <item><term>${test-version-file.targetversion}</term><description>The version number of the package</description></item>
             <item><term>${test-version-file.packagedir}</term><description>package directory: <b>path</b> to the package</description></item>
             </list>
             </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.PackageName">
            <summary>The name of a package comes from the directory name if the package is in the packages directory.  Use this attribute to name a package that lives outside the packages directory.</summary>
            <remarks>
              <para>The <c>name</c> attribute is used for packages that live outside of the packages directory.</para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.TargetVersion">
            <summary>The version of the package in development.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.PackageDir">
            <summary>The name of a package comes from the directory name if the package is in the packages directory.  Use this attribute to name a package that lives outside the packages directory.</summary>
            <remarks>
              <para>The <c>name</c> attribute is used for packages that live outside of the packages directory.</para>
            </remarks>
        </member>
        <member name="T:EA.FrameworkTasks.VerifyPackageSignatureTask">
            <summary>
            [Deprecated] Verify if package content matches signature
            </summary>
            <remarks>
            <para>This task is used to verify that the package has an up to date Signature File.
            This can also be done using the target "verify-signature", which is the recommended way to preform this action.
            The task version is mainly for internal use and should only be used if you are writing a custom target that needs to preform additional steps.</para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyPackageSignatureTask.PackageFilesFilesetName">
            <summary>Name of the fileset containing all package files</summary>
        </member>
        <member name="M:EA.Make.MakeTools.MakeBuildToolBase`1.GetQuietSymbol(NAnt.Core.Logging.Log.LogLevel)">
            <summary>Returns the @ symbol if the log level is at or below the level provided as the argument.</summary>
            <param name="level">The level at which to return the quite symbol. (Defaults to Minimal)</param>
        </member>
        <member name="T:EA.CallTargetIfOutOfDate.calltargetifoutofdate">
            <summary>
            Compares inputs against outputs to determine whether to execute specified target.
            Target is executed if any of input files is newer than any of output files, any of output files does not exist, 
            or list of input dependencies does not match input dependencies from previous run.
            </summary>
            <remarks>
            <para>
            When target does not produce any output files, DummyOutputFile can be specified.
            </para>
            <para>
            This task is similar to task "ExecuteIfOutOfDate" except it executes specified target instead of script.
            </para>
            </remarks>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.InputFileSetName">
            <summary>
            Input dependency files. 
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.OutputFileSetName">
            <summary>
            Output dependency files. If target does not produce any output files "DummyOutputFile" parameter can be specified.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.DummyOutputFileName">
            <summary>
            Contains file path. File is created automatically when task is executed and added to "output dependency files" list.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.DependencyFileName">
            <summary>
            File to store list of input dependency files from "InputFileset" parameter. 
            This list is used to check whether set of input dependencies changed from previous run. Target is executed when list changes.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.TargetName">
            <summary>
            Name of a target to execute
            </summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.ReadDependencyFile(System.IO.TextReader)">
            <summary>Reads list of files from dependency file</summary>
            <returns>A sorted List containing all files listed in the dependency file</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.WriteDependencyFile(System.IO.TextWriter,System.Collections.Generic.List{System.String})">
            <summary>Writes list of files to a dependency file</summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.InputDependencyListChanged(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the current and previous list of input files differ</summary>
            <returns><c>true</c> if the lists are not identical</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.TaskNeedsRunning(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the task needs to run.</summary>
            <returns><c>true</c> if we should run the program (dependents missing or not up to date), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate">
            <summary>
            Compares inputs against outputs to determine whether to execute specified target.
            Target is executed if any of input files is newer than any of output files, any of output files does not exist, 
            or list of input dependencies does not match input dependencies from previous run.
            </summary>
            <remarks>
            This task is similar to task "CallTargetIfOutOfDate" except it executes arbitrary script from "code" instead of target.
            </remarks>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Inputs">
            <summary>Set of input files to check against.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Outputs">
            <summary>Set of output files to check against.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.DummyOutputFileName">
            <summary>If specified, this file is added to the list of output dependencies. Timestamp of DummyOutputFile file is updated when this task code is executed.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.DependencyFileName">
            <summary>The list of "inputs" is stored in the file with this name. It is used to check for missing/added input files during consecutive runs.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Code">
            <summary>
            The NAnt script to execute.
            </summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.ReadDependencyFile(System.IO.TextReader)">
            <summary>Reads list of files from dependency file</summary>
            <returns>A sorted List containing all files listed in the dependency file</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.WriteDependencyFile(System.IO.TextWriter,System.Collections.Generic.List{System.String})">
            <summary>Writes list of files to a dependency file</summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.InputDependencyListChanged(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the current and previous list of input files differ</summary>
            <returns><c>true</c> if the lists are not identical</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.TaskNeedsRunning(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the task needs to run.</summary>
            <returns><c>true</c> if we should run the program (dependents missing or not up to date), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.AsTask">
            <summary>A generic assembler compiler task.</summary>
            <remarks>
            <para>The <c>as</c> task requires the following property to be set:</para>
            <list type='table'>
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${as}</term>
                    <description>The absolute pathname of the compiler executable.</description>
                </item>
                <item>
                    <term>${as.template.includedir}</term>
                    <description>The syntax template to transform <c>${as.includes}</c> into compiler flags.</description>
                </item>
            </list>
            
            <para>The task will make use of the following properties:</para>
            <list type='table'>
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${as.defines}</term>
                    <description>The defines for the compilation.</description>
                </item>
                <item>
                    <term>${as.includedirs}</term>
                    <description>The include directories for the compilation.</description>
                </item>
                <item>
                    <term>${as.options}</term>
                    <description>The options flags for the compilation.  All the files from the <c>source</c> file set will be compiled with the same options.  If you want different compile options, you must invoke the <c>as</c> task with those options.</description>
                </item>
            	<item>
            		<term>${as.template.commandline}</term>
            		<description>The template to use when creating the command line.  Default is %defines% %includedirs% %options%.</description>
                </item>
                <item>
                    <term>${as.template.define}</term>
                    <description>The syntax template to transform <c>${as.defines}</c> into compiler flags.</description>
                </item>
                <item>
            		<term>${as.template.sourcefile}</term>
                    <description>The syntax template to transform a <c>source file</c> into compiler source file.</description>
                </item>
                <item>      
                    <term>${as.template.responsefile}</term>
                    <description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description>
                </item>
                <item>
                    <term>${as.nodep}</term>
                    <description>If <c>true</c> dependency files will not be created.</description>
                </item>
                <item>
                    <term>${as.nocompile}</term>
                    <description>If <c>true</c> object files not be created.</description>
                </item>
                <item>
                    <term>${as.useresponsefile}</term>
                    <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description>
                </item>
                <item>
                    <term>${as.userelativepaths}</term>
                    <description>If <c>True</c> the working directory of the assembler will be set to the base directory of the <c>asmsources</c> fileset. All source and output files will then be made relative to this path. Default is <c>false</c>.</description>
                </item>
                <item>
                    <term>${as.threadcount}</term>
                    <description>The number of threads to use when compiling. Default is 1 per cpu.</description>
                </item>
                <item>
                    <term>${as.objfile.extension}</term>
                    <description>The file extension for object files.  Default is ".obj".</description>
                </item>
            	<item>      
            		<term>${as.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
            <item>      <term>${as.template.responsefile.commandline}</term><description>The template to use when creating the command line for response file. Default value is ${as.template.responsefile.commandline}</description></item>
            <item>      <term>${as.responsefile.separator}</term><description>Separator used in response files. Default is " ".</description></item>
            <item>      <term>${as.template.responsefile.objectfile}</term><description>The syntax template to transform the <term>objects</term> file set into compiler flags in response file. Default ${as.template.objectfile}</description></item>
            </list>
            
            <para>The task declares the following template items in order to help defining the above 
            properties:</para>
            <list type='table'>
                <listheader><term>Template item</term><description>Description</description></listheader>
                <item>      <term>%define%</term>     <description>Used by the <term>${as.template.define}</term> property to represent the current value of the <term>${as.defines}</term> property during template processing.</description></item>
                <item>      <term>%includedir%</term> <description>Used by the <term>${as.template.includedir}</term> property to represent the individual value of the <term>${as.includedirs}</term> property.</description></item>
                <item>      <term>%responsefile%</term> <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
                <item>      <term>%objectfile%</term> <description>Used by the <term>${as.options}</term> property to represent the object file name.  Object file names are formed by appending <c>".obj"</c> to the source file name.</description></item>
                <item>      <term>%outputdir%</term>  <description>Used by the <term>${as.options}</term> property to represent the actual values of the   <c>%outputdir%</c> attribute.</description></item>
                <item>      <term>%outputname%</term> <description>Used by the <term>${as.options}</term> property to represent the actual value of the   <c>%outputname%</c> attribute.</description></item>
                <item>      <term>%sourcefile%</term> <description>Used by the <term>${as.options}</term> property to represent the individual value of the <term>sources</term> file set.</description></item>
            </list>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals->Option Sets topic in help file.</para>
            </remarks>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsSources">
            <summary>The set of files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsIncludeDirectories">
            <summary>Custom include directories for this set files.  Use complete paths and place 
            each directory on it's own line.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsOptions">
            <summary>Custom program options for these files.  Options get appended to the end of 
            the options specified by the <c>${cc.options}</c> property.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsDefines">
            <summary>Custom #defines for these files.  Defines get appended to the end of the
            defines specified in the <c>${cc.defines}</c> property.  Place each define on it's own line.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.BuildTask">
            <summary>Builds C++ source files into a program or library.</summary>
            <remarks>
              <para>
              The <c>build</c> task combines the <see cref="T:EA.CPlusPlusTasks.CcTask" />, <see cref="T:EA.CPlusPlusTasks.AsTask" />, 
              <see cref="T:EA.CPlusPlusTasks.LibTask" />, and <see cref="T:EA.CPlusPlusTasks.LinkTask" />
              to provide an easy way to build a program or library.  The 
              <c>build</c> task expects
              the compiler, linker, and librarian properties to be set
              correctly before it is invoked.
              </para>
              <para>All the C++ tasks refer to the <c>build.pathstyle</c> property to determine how 
              format filename paths.  For Unix ('/') based SDK's this property should be set to <c>Unix</c>.
              For Windows ('\') based SDK's this property should be set to <c>Windows</c>.  If the
              property is not set no path conversions will take place.</para>
              <para>
              To compile individual files use the <c>build.sourcefile.X</c> property where <c>X</c> is a unique identifier. 
              This will let all subsequent <c>build</c> tasks know to only build these files from the given <c>build</c> tasks <c>sources</c> file set. 
              If any <c>build.sourcefile.X</c> properties are defined no linking or archiving will occur. 
              You may pass these values in through the command line using the <c>-D</c> argument for defining properties.
              For example the command <c>nant -D:build.sourcefile.0=src/test.c</c> will let all <c>build</c> tasks know to only compile the source file <c>src/test.c</c>.
              </para>
              <para>If the <c>outputdir</c> attribute is not specified the task will look for a property called 
              <c>build.outputdir</c>.  The value of the property may contain the term <c>%outputname%</c> which 
              will be replaced with value specified in the <c>name</c> attribute.  If the <c>build.outputdir</c>
              property is not defined and you are building a package the output directory will be either 1)
              <c>${package.builddir}/build/${package.config}/%outputname%</c> for a Framework 1 package, or
              2) <c>${package.builddir}/${package.config}/build/%outputname%</c> for a Framework 2 package.  
              If you are not building a package then
              the output directory will be the current directory.
              </para>
              <para><b>NOTE: </b> Empty outputdir will be treated as not specifying outputdir. If outputdir is specified,
              absolute path is recommended. Relative path such as "." or "temp" may have 
              unexpected result.
              </para>
              <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program using a single task.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    <property name="outdir" value="build"/>

    <target name="build">
        <build type="Program" outputdir="${outdir}" name="hello">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </build>
        <fail message="Program did not build" unless="@{FileExists('${outdir}/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>An example of compiling and linking using a fileset and optionset.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    <property name="outdir" value="build"/>

    <fileset name="MyFileSet">
        <includes name="hello.c"/>
    </fileset>

    <optionset name="MyOptionSet">
        <option name="build.tasks" value="cc lib link" /> 
        <option name="cc.threadcount" value="1" /> 
    </optionset>

    <target name="build">
        <build type="MyOptionSet" outputdir="${outdir}" name="hello">
            <sources>
                <includes fromfileset="MyFileSet" />
            </sources>
        </build>
        <fail message="Program did not build" unless="@{FileExists('${outdir}/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.LocalizePath(System.String,System.String)">
            <summary>Converts a path to the current style specified in the PathStyleProperty property.</summary>
            <remarks>If pathStyleValue is null or empty then the path will not be converted.</remarks>
            <param name="path">The path to localize.</param>
            <param name="pathStyleValue">The value of the PathStyleProperty property (build.pathstyle).</param>
            <returns>The localized path.</returns>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.LocalizePathInCommandLine(System.String,System.String)">
            <summary>Converts a path inside command line to the current style specified in the PathStyleProperty property. Leaves options starting with "/" unchanged</summary>
            <remarks>If pathStyleValue is null or empty then the path will not be converted.</remarks>
            <param name="path">The path to localize.</param>
            <param name="pathStyleValue">The value of the PathStyleProperty property (build.pathstyle).</param>
            <returns>The localized path.</returns>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.BuildDirectory">
            <summary>Directory where all output files are placed.  See task details for more information if this attribute is not specified.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.BuildName">
            <summary>The base name of any associated output files.  The appropriate extension will be added.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.OptionSetName">
            <summary>Type of the <c>build</c> task output.  Valid values are <c>Program</c>, <c>Library</c> or the name of an named option set.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Sources">
            <summary>The set of source files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Objects">
            <summary>Additional object files to link or archive with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.IncludeDirectories">
            <summary>Custom include directories.  New line <c>'\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.UsingDirectories">
            <summary>Custom using directories.  New line <c>'\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.ForceUsingAssemblies">
            <summary>Force using assemblies.  New line <c>'\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.CompilerOptions">
            <summary>Custom compiler options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Defines">
            <summary>Custom compiler defines.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmSources">
            <summary>The set of source files to assemble.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmIncludePath">
            <summary>Custom include directories for these files.  New line <c> '\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmOptions">
            <summary>Custom assembler options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmDefines">
            <summary>Custom assembler defines for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Libraries">
            <summary>The set of libraries to link with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Dependencies">
            <summary>Additional file dependencies of a build</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.PrimaryOutputExtension">
            <summary>primary output extension</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.PrimaryOutputPrefix">
            <summary>primary output prefix</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">XML node used to define this task instance.</param>
        </member>
        <member name="T:EA.CPlusPlusTasks.BuildTaskBase">
            <summary>
            A class from which all build tasks will derive.
            </summary>
        </member>
        <member name="F:EA.CPlusPlusTasks.BuildTaskBase._optionSetName">
            <summary>Global option set.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>Force initialization of global option set.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.SetOption(System.String,System.String)">
            <summary>Sets a global option to specified value.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.GetOption(System.String)">
            <summary>Returns the specified option value from the global set of options.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.GetOption(NAnt.Core.FileItem,System.String)">
            <summary>
            Returns the specified option value from the fileset items specified option set.
            If the given fileset item does not contain an optionset name the global property
            is returned.
            </summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.  Hack so that 
            the build task can initialize this task.</summary>
            <param name="taskNode">XML node used to define this task instance.</param>
        </member>
        <member name="T:EA.CPlusPlusTasks.CcTask">
            <summary>A generic C/C++ compiler task.</summary>
            <remarks>
            <para>The <c>cc</c> task requires the following property to be set:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${cc}</term>
                    <description>The absolute pathname of the compiler executable.</description>
                </item>
                <item>
                    <term>${cc.template.includedir}</term>
                    <description>The syntax template to transform <c>${cc.includes}</c> into compiler flags.</description>
                </item>
            </list>
            
            <para>The task will make use of the following properties:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${cc.defines}</term>
                    <description>The defines for the compilation.</description>
                </item>
            	<item>      
            		<term>${cc.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
                <item>
                    <term>${cc.includedirs}</term>
                    <description>The include directories for the compilation.</description>
                </item>
                <item>
                    <term>${cc.nodep}</term>
                    <description>If <c>true</c> dependency files will not be created.</description>
                </item>
                <item>
                    <term>${cc.nocompile}</term>
                    <description>If <c>true</c> object files not be created.</description>
                </item>
                <item>
                    <term>${cc.objfile.extension}</term>
                    <description>The file extension for object files.  Default is ".obj".</description>
                </item>
                <item>
                    <term>${cc.options}</term>
                    <description>The options flags for the compilation.  All the files from the <c>source</c> fileset will be compiled with the same options.  If you want different compile options, you must invoke the <c>cc</c> task with those options.</description>
                </item>
                <item>
                    <term>${cc.parallelcompiler}</term>
                    <description>If true, compilation will occur on parallel threads if possible
                    .  Default is false.</description>
                </item>
                <item>
                    <term>${cc.template.define}</term>
                    <description>The syntax template to transform <c>${cc.defines}</c> into compiler flags.</description>
                </item>
                <item>
                    <term>${cc.template.includedir}</term>
                    <description>The syntax template to transform <c>${cc.includedirs}</c> into compiler flags.</description>
                </item>
                <item>
                    <term>${cc.template.usingdir}</term>
                    <description>The syntax template to transform <c>${cc.usingdirs}</c> into compiler flags.</description>
                </item>
                <item>
                    <term>${cc.template.commandline}</term>
                    <description>The template to use when creating the command line.  Default is %defines% %includedirs% %options%.</description>
                </item>
                <item>
                    <term>${cc.template.sourcefile}</term>
                    <description>The syntax template to transform a <c>source file</c> into compiler source file.</description>
                </item>
                <item>
                    <term>${cc.template.responsefile}</term>
                    <description>The syntax template to transform the <c>responsefile</c> into a response file flag. Default is @"%responsefile%".</description>
                </item>
                <item>
                    <term>${cc.threadcount}</term>
                    <description>The number of threads to use when compiling. Default is 1 per cpu.</description>
                </item>
                <item>
                    <term>${cc.useresponsefile}</term>
                    <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description>
                </item>
                <item>
                    <term>${cc.userelativepaths}</term>
                    <description>If <c>True</c> the working directory of the compiler will be set to the base directory of the <c>sources</c> fileset. All source and output files will then be made relative to this path. Default is <c>false</c>.</description>
                </item>
                <item>
                    <term>${cc.usingdirs}</term>
                    <description>The using directories for managed C++, such as VC++. Compiler that support using directive should read this property.</description>
                </item>
                <item>      <term>${cc.template.responsefile.commandline}</term><description>The template to use when creating the command line for response file. Default value is ${cc.template.responsefile.commandline}</description></item>
                <item>      <term>${cc.responsefile.separator}</term><description>Separator used in response files. Default is " ".</description></item>
                <item>      <term>${cc.template.responsefile.objectfile}</term><description>The syntax template to transform the <c>objects</c> file set into compiler flags in response file. Default ${cc.template.objectfile}</description></item>
            </list>
            
            <para>The following terms can be used in the above properties:</para>
            <list type="table">
                <listheader><term>Term</term><description>Description</description></listheader>
                <item>      <term>%define%</term>     <description>Used by the <c>${cc.template.define}</c> property to represent the current value of the <c>${cc.defines}</c> property during template processing.</description></item>
                <item>      <term>%includedir%</term> <description>Used by the <c>${cc.template.includedir}</c> property to represent the individual value of the <c>${cc.includedirs}</c> property.</description></item>
                <item>      <term>%usingdir%</term> <description>Used by the <c>${cc.template.usingdir}</c> property to represent the individual value of the <c>${cc.usingdirs}</c> property.</description></item>
                <item>      <term>%responsefile%</term> <description>Used by the <c>${cc..template.responsefile}</c> property to represent the filename of the response file.</description></item>
                <item>      <term>%objectfile%</term> <description>Used by the <c>${cc.options}</c> property to represent the object file name.  Object file names are formed by appending <c>".obj"</c> to the source file name.</description></item>
                <item>      <term>%outputdir%</term>  <description>Used by the <c>${cc.options}</c> property to represent the actual values of the   <c>%outputdir%</c> attribute.</description></item>
                <item>      <term>%outputname%</term> <description>Used by the <c>${cc.options}</c> property to represent the actual value of the   <c>%outputname%</c> attribute.</description></item>
                <item>      <term>%sourcefile%</term> <description>Used by the <c>${cc.options}</c> property to represent the individual value of the <c>sources</c> fileset.</description></item>
            </list>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" />
    <dependent name="VisualStudio" version="7.1.1-4"/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project xmlns="schemas/ea/framework3.xsd">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcSources">
            <summary>The set of files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcForceUsingAssemblies">
            <summary>Force using assemblies for managed builds.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcIncludeDirectories">
            <summary>Custom include directories for this set files.  Use complete paths and place 
            each directory on it's own line.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcUsingDirectories">
            <summary>Custom using directories for this set files.  Use complete paths and place 
            each directory on it's own line. Only applied to managed C++ compiler, such as VC++.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcOptions">
            <summary>Custom program options for these files.  Options get appended to the end of 
            the options specified by the <c>${cc.options}</c> property.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcDefines">
            <summary>Custom #defines for these files.  Defines get appended to the end of the
            defines specified in the <c>${cc.defines}</c> property.  Place each define on it's own line.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CompilerBase.DependentDictionary">
            <summary>Used to map dependent header file paths to their last write time.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CompilerBase.FileToCompile">
            <summary>Used to store dependencies information for FileItem.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>cc.*</c> properties.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory 
            of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OutputName">
            <summary>The base name of any associated output files (e.g. the symbol table name).  
            Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.CollectCompilationTime">
            <summary>Collect compilation time. 
            Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.GenerateDependencyOnly">
            <summary>
            Doesn't actually do build.  Just create the dependency .dep file only for each source file.
            </summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.ShowAllOutput">
            <summary>Determines if compiler output should always be shown (true) or only shown if the
            compiler returns an error code (false).  Default is false.  (Depreciated)</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the cc.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.IsGenerateDependencyOn(NAnt.Core.FileItem)">
            <summary>True if we should generate a .dep file for each source file, otherwise false.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.IsGenerateObjectOn(NAnt.Core.FileItem)">
            <summary>True if we should generate an object file for each source file, otherwise false.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.NeedsCompiling(NAnt.Core.FileItem,System.String@)">
            <summary>Determines if the source file needs to be compiled.</summary>
            <param name="fileItem">The reference to the C/C++ source file.</param>
            <param name="reason">The reason why the source file needs compiling.  Empty if no reason given or file doesn't need compiling.</param>
            <returns><c>true</c> if the source file needs compiling, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:EA.CPlusPlusTasks.Dependency">
            <summary>Helper class for Link and Lib tasks to generate dependency information.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.IExternalBuildTask.ExecuteBuild(EA.CPlusPlusTasks.BuildTask,NAnt.Core.OptionSet)">
            <summary>Executed by the build target.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.LibTask">
             <summary>A generic C/C++ library manager tool.</summary>    
             <remarks>
             <para>
             The task requires the following properties:
             </para>
             <list type="table">
             <listheader><term>Property</term><description>Description</description></listheader>
             <item><term>${lib}</term><description>The absolute pathname of the librarian executable to be used with this invocation of the task.</description></item>
             <item><term>${lib.userresponsefile}</term><description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description></item>
             </list>
             <para>
             The task declares the following properties:
             </para>
             <list type="table">
             <listheader><term>Property</term>                    <description>Description</description></listheader>
             <item>      <term>${lib.options}</term>              <description>The options flags for the librarian.</description></item>
             <item>      <term>${lib.useresponsefile}</term>      <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the archiver. Default is false.</description></item>
             <item>      <term>${lib.userelativepaths}</term>     <description>If <c>true</c> the working directory of the archiver will be set to the <c>outputdir</c>. All object files will then be made relative to this path. Default is <c>false</c>.</description></item>
             <item>      <term>${lib.template.objectfile}</term>  <description>The syntax template to transform the <term>objects</term> file set into librarian flags.</description></item>
             <item>      <term>${lib.template.responsefile}</term><description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description></item>
             <item>      <term>${lib.template.commandline}</term><description>The template to use when creating the command line.  Default is %options% %objectfiles%.</description></item>
             <item>      <term>${lib.template.responsefile.commandline}</term><description>The template to use when creating the command line for response file. Default value is ${lib.template.responsefile.commandline}</description></item>
             <item>      <term>${lib.responsefile.separator}</term><description>Separator used in response files. Default is " ".</description></item>
             <item>      <term>${lib.template.responsefile.objectfile}</term><description>The syntax template to transform the <term>objects</term> file set into librarian flags in response file. Default ${lib.template.objectfile}</description></item>
             <item>      <term>%responsefile%</term>              <description>Used by the <term>${cc.template.responsefile}</term> property to represent the filename of the response file.</description></item>
            	<item>      
            		<term>${lib.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
             </list>
             <para>
             The task declares the following template items in order to help user defining the above properties:
             </para>
             <list type="table">
             <listheader><term>Template item</term><description>Description</description></listheader>
             <item>      <term>%outputdir%</term>  <description>Used in the <c>${lib.options}</c> property to represent the actual values of the <c>%outputdir%</c> attribute.</description></item>
             <item>      <term>%outputname%</term> <description>Used in the <c>${lib.options}</c> property to represent the actual value of the <c>%outputname%</c> attribute.</description></item>
             <item>      <term>%objectfile%</term> <description>Used in the <c>${lib.template.objectfile}</c> property to represent the individual value of the <c>objects</c> file set.</description></item>
             </list>
             <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
             </remarks>
             <example>
               <para>Archive the given object files into the specified library.</para>
               <code>
                 <![CDATA[
             <project>
                 <dependent name="VisualStudio" version="7.0.0"/>
            
                 <lib outputdir="lib" outputname="mylib">
                     <objects>
                         <includes name="obj/*.obj"/>
                     </objects>
                 </lib>
             </project>
                 ]]>
               </code>
             </example>
             <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project xmlns="schemas/ea/framework3.xsd">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>lib.*</c> properties.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OutputName">
            <summary>The base name of the library and any associated output files.  Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.Objects">
            <summary>The list of object files to combine into a library.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.Options">
            <summary>
            Custom program options for this task.  These get appended to the options specified in the <c>lib.options</c> property.
            </summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.LibraryExtension">
            <summary>library output extension</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.LibraryPrefix">
            <summary>library output prefix</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.LibTask.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the lib.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.LibTask.GetCommandLine(System.String@)">
            <summary></summary>
            <param name="responsefilecommand">The command line arguments to the library, if a response is being used, else null</param>
            <returns>The contents of the response file</returns>
        </member>
        <member name="T:EA.CPlusPlusTasks.LinkTask">
            <summary>A generic C/C++ linker task.</summary>
            <remarks>
            <para>The task requires the following properties:</para>
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>${link}</term><description>The absolute pathname of the linker executable.</description></item>
            </list>
            <para>
            The task will use the following properties:
            </para>
            <list type="table">
            <listheader><term>Property</term>                    <description>Description</description></listheader>
            <item>      <term>${link.options}</term>             <description>The option flags for the linker.</description></item>
            <item>      <term>${link.libraries}</term>           <description>The system libraries to link with.</description></item>
            <item>      <term>${link.librarydirs}</term>         <description>The library search paths for the linker.</description></item>
            <item>      <term>${link.threadcount}</term>         <description>The number of parallel linker processes. Default is 1 per cpu.</description></item>
            <item>      <term>${link.template.commandline}</term><description>The template to use when creating the command line.  Default is %options% %librarydirs% %libraryfiles% %objectfiles%.</description></item>
            <item>      <term>${link.template.librarydir}</term> <description>The syntax template to transform the <term>${link.librarydirs}</term> property into linker flags.</description></item>
            <item>      <term>${link.template.libraryfile}</term><description>The syntax template to transform the <term>libraries</term> file set into linker flags.</description></item>
            <item>      <term>${link.template.objectfile}</term> <description>The syntax template to transform the <term>objects</term> file set into linker flags.</description></item>
            <item>      <term>${link.postlink.program}</term>    <description>The path to program to run after linking.  If not defined no post link process will be run.</description></item>
            <item>      <term>${link.postlink.workingdir}</term> <description>The directory the post link program will run in.  Defaults to the program's directory.</description></item>
            <item>      <term>${link.postlink.commandline}</term><description>The command line to use when running the post link program.</description></item>
            <item>      <term>${link.postlink.redirect}</term>   <description>Whether to redirect output of postlink program.</description></item>
            <item>      <term>${link.useresponsefile}</term>     <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the linker. Default is false.</description></item>
            <item>      <term>${link.userelativepaths}</term>    <description>If <c>true</c> the working directory of the linker will be set to the <code>outputdir</code>. All object files will then be made relative to this path. Default is <c>false</c>.</description></item>
            <item>      <term>${link.template.responsefile}</term><description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description></item>
            <item>      <term>${link.template.responsefile.commandline}</term><description>The template to use when creating the command line for response file. Default value is ${link.template.responsefile.commandline}</description></item>
            <item>      <term>${link.responsefile.separator}</term><description>Separator used in response files. Default is " ".</description></item>
            <item>      <term>${link.template.responsefile.objectfile}</term><description>The syntax template to transform the <term>objects</term> file set into linker flags in response file. Default ${link.template.objectfile}</description></item>
            <item>      <term>${link.template.responsefile.libraryfile}</term><description>The syntax template to transform the <term>libraries</term> file set into linker flags in response file. Default ${link.template.libraryfile}</description></item>
            <item>      <term>${link.template.responsefile.librarydir}</term><description>The syntax template to transform the <term>${link.librarydirs}</term> property into linker flags in response file. Default ${link.template.librarydir}</description></item>
            <item>      
            	<term>${link.forcelowercasefilepaths}</term>      
            	<description>If <c>true</c> file paths (folder and file names) will be 
            	forced to lower case (useful in avoiding redundant NAnt builds 
            	between VS.net and command line environments in the case of capitalized
            	folder names when file name case is unimportant).  Default is false.</description>
            </item>
            
            </list>
            <para>
            The task declares the following template items in order to help user defining the above properties:
            </para>
            <list type="table">
            <listheader><term>Template item</term><description>Description</description></listheader>
            <item>      <term>%outputdir%</term>  <description>Used by the <term>${link.options}</term> property to represent the actual values of the <term>outputdir</term> attribute.</description></item>
            <item>      <term>%outputname%</term> <description>Used by the <term>${link.options}</term> property to represent the actual value of the <term>outputname</term> attribute.</description></item>
            <item>      <term>%librarydir%</term> <description>Used by the <term>${link.template.librarydir}</term> property to represent the individual value of the <term>${link.librarydirs}</term> property.</description></item>
            <item>      <term>%libraryfile%</term><description>Used by the <term>${link.template.libraryfile}</term> property to represent the individual value of the <term>libraries</term> file set.</description></item>
            <item>      <term>%objectfile%</term> <description>Used by the <term>${link.template.objectfile}</term> property to represent the individual value of the <term>objects</term> file set.</description></item>
            <item>      <term>%responsefile%</term> <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
            </list>
            <para>The post link program allows you to run another program after linking.  For example if you are
            building programs for the XBox you will know that you need to run the imagebld program in order to
            use the program on the xbox.  Instead of having to run a second task after each build task you can
            setup the properties to run imagebld each time you link.  Use the <c>%outputdir%</c> and <c>%outputname</c>
            template items in the <c>link.postlink.commandline</c> to generalize the task for all the components
            in your package.</para>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" />
    <dependent name="VisualStudio" version="7.1.1-4"/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project xmlns="schemas/ea/framework3.xsd">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
            <example>
<para>An example of to use the <c>${link.template.commandline}</c> property to customize the linker command line.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" />
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <property name="link.options">
        -subsystem:CONSOLE
    </property>

    <!-- 
        Notice how the -out: option has been removed from the link.options property and
        is now directly part of the link.commandline.  This is a made up example but with
        it shows you how you can wrap, say the libraries with options needed by gcc.
    -->
    <property name="link.template.commandline">
        %options% 
        -out:"%outputdir%/%outputname%.exe" 
        %librarydirs% 
        %libraryfiles% 
        %objectfiles%
    </property> '/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>link.*</c> properties.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OutputName">
            <summary>The base name of the library or program and any associated output files.  Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Objects">
            <summary>The set of object files to link.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Libraries">
            <summary>The list of libraries to link with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.LibraryPath">
            <summary>Directories to search for additional libraries.  New line <c>"\n"</c> or semicolon <c>";"</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Options">
            <summary>Custom program options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.LinkOutputExtension">
            <summary>library output extension</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.LinkTask.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the link.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.GenerateOutputFile">
            <summary>True if we should run the linker.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.GenerateDependencyFile">
            <summary>True if we should generate a .dep file for each source file, otherwise false.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.LinkTask.GetCommandLine(System.String@)">
            <summary></summary>
            <param name="responsefilecommand">The command line arguments to the library, if a response is being used, else null</param>
            <returns>The contents of the response file</returns>
        </member>
        <member name="M:EA.GenerateBulkBuildFiles.generatebulkbuildfiles.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.GetConfigPlatform.GetConfigPlatformTask">
            <summary>
            A Custom task which checks whether an existing solution file
            contains the given configuration and platform, and on missing
            platform in the solution, assign an existing platform with that config
            to that platform property in the calling project instance
            </summary>
        </member>
    </members>
</doc>
