/*!
\defgroup _mod_structure Organization of the Blaze SDK

This section provides 
\li Overall structure of the %Blaze SDK
\li A sense of the different styles of interfaces contained within the %Blaze SDK
\li The relationship between various components of the SDK

\section _section_SdkStructure Structure of the Blaze SDK

The %Blaze SDK is generally organized into a set of "Components", a set of "APIs", and a few core services associated with initialization, connection & authentication. The %BlazeHub is the access point for the entire SDK. The DirtySock SDK is used for network initialization, connections, and provides the default game networking.

\image html BlazeStructure.gif

A %Component, in the %Blaze SDK terminology, represents a service on the %Blaze server made accessible via remote procedure calls (RPCs) from the client. The %Blaze SDK offers methods and data objects to issue requests to and receive callback responses and asynchronous notifications from the %Blaze server. However, the %Blaze SDK does not store the resulting data or provide object-oriented actions.

In contrast, an %API in %Blaze SDK provides a client-side abstraction which handles caching of data retrieved from the server and usually offers a more intuitive object-oriented interface. Many APIs, such as the StatsApi, make it unnecessary for a title to interact with the corresponding component, StatComponent. The goal of %Blaze SDK is to cover most common use cases with the APIs, but the underlying component is always available for direct use should the %API not suit the needs for a specific title. However, where an %API exists, it is strongly recommended that titles use the %API as implementation using an %API requires less integration effort. Please communicate with %Blaze support and GOS Production if you believe the %API does not meet your needs and that use of the %Component directly is needed for your title.

In addition to feature-specific APIs and Components, %Blaze SDK contains additional functionality which are part of the %Blaze SDK core framework. The classes related to this functionality include the BlazeHub as well as ConnectionManager and LoginManager, which are used to establish an authenticated connection to the %Blaze servers.
 
*/

