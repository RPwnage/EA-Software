/*! ************************************************************************************************/
/*!
    \file gamereportingevents_server.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/
[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

[headername="gamereporting/tdf/gamereporting_server.h"]
#include "gamereporting/gen/gamereporting_server.tdf"

[headername="gamemanager/tdf/gamemanager.h"]
#include "gamemanager/gen/gamemanager.tdf"


namespace Blaze
{
namespace GameReporting
{

[
    description = "Game report rejected event object.",
    details = "Used when report is received from a player but the game of the report is not found.)."
]
class GameReportRejected
{
    [tag="pid", description="Blaze id of the player who sent report."]
    BlazeId mPlayerId;
    
    [tag="grpt", description="All report data sent by specific player."]
    GameReport mGameReport;
};

[
    description = "Invalid game report event object.",
    details = "Used when report received from a player is invalid)."
]
class GameReportInvalid
{
    [tag="pid", description="Blaze id of the player who sent report."]
    BlazeId mPlayerId;
    
    [tag="grpt", description="All report data sent by specific player.", allowref=true]
    GameReport mGameReport;
};

[
    description = "Game report discrepancy event object.",
    details = "Used when reports are thrown out because of conflicting reports)."
]
class GameReportDiscrepancy
{
    [tag="gmrp", allowref="true", description="All reports for a specific game."]
    GameReportsMap mGameReports;
};

[
    description = "Game report process or collate success event object.",
    details = "Used when a game report is processed or collated successfully."
]
class GameReportSucceeded
{
    [tag="dorp", description="Duration of the game."]
    uint32_t mDurationMsec;

    [tag="gmst", description="Setting of the game."]
    Blaze::GameManager::GameSettings mGameSettings; 

    [tag="ghid", description="Game history id."]
    GameHistoryId mGameHistoryId;

    [tag="roff", description="Flag to show if the report is an offline report."]
    bool mIsOfflineReport; 

    [tag="grpm", description="Custom TDF describing report."]
    GameReport mReport;
    
    [tag="flag", description="A collection of game report flag and reason."]
    ReportFlagInfo mReportFlag;
};

class GameReportOrphaned
{
    [tag="grid", description="The game reporting id."]
    GameManager::GameReportingId mGameReportingId;  
    
    [tag="pids", description="The player ids that participate the game."]
    list<GameManager::PlayerId> mPlayerIdList;  
};

[
    description = "Game report process fail event object.",
    details = "Used when a game report fails to be processed."
]
class GameReportProcessFailed
{
    [tag="grid", description="The game reporting id."]
    GameManager::GameReportingId mGameReportingId; 
    
    [tag="grpm", description="The collated game report."]
    GameReport mReport;
    
    [tag="dorp", description="Duration of the game."]
    uint32_t mDurationMsec;

    [tag="gmst", description="Setting of the game."]
    Blaze::GameManager::GameSettings mGameSettings; 

    [tag="roff", description="Flag to show if the report is an offline report."]
    bool mIsOfflineReport;
    
    [tag="flag", description="A collection of game report flag and reason."]
    ReportFlagInfo mReportFlag;
};

class GameReportCollationFailed
{
    [tag="grid", description="The game reporting id."]
    GameManager::GameReportingId mGameReportingId;  
    
    [tag="fare", allowref="true", descrption="A map of collected reports for a specific game."]
    GameReportsMap mReports;
};

} // GameReporting
} // Blaze
