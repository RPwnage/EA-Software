group configtdfdocbase :servercommon;

masterComponent(fileNode, component) ::= <<>>
slaveComponent(fileNode, component) ::= <<>>

file(fileNode, defTable) ::= <<>>

tocHelper(node) ::= <<
$if(node.ActualCategory)$
  $({toc$node.ActualCategory$})()$
$elseif(node.Category)$
  $({toc$node.Category$})()$
$else$
  $tocNAMESPACE()$
$endif$
>>

tocHelper2(node) ::= <<
$if(node.TypeRef.Symbol.ActualCategory)$
  $({toc$node.TypeRef.Symbol.ActualCategory$})()$
$elseif(node.TypeRef.Symbol.Category)$
  $({toc$node.TypeRef.Symbol.Category$})()$
$else$
  $tocNAMESPACE()$
$endif$
>>

tocVARIABLE() ::= <<>>  
tocGENERIC() ::= <<>>

tocCUSTOM_ATTRIBUTE() ::= <<>>  

tocNAMESPACE() ::= <<
>>

tocINT_PRIMITIVE() ::= <<
>>

tocFLOAT_PRIMITIVE() ::= <<
>>

tocBLOB() ::= <<
>>

tocSTRING() ::= <<
>>

tocMEMBER() ::= <<
>>

tocTIMEVALUE() ::= <<
>>

tocOBJECT_TYPE() ::= <<
>>

tocOBJECT_ID() ::= <<
>>

tocLIST() ::= <<
$tocHelper(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
>>

tocMAP() ::= <<
$tocHelper(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
>>

tocCONST() ::= <<>>

tocTYPEDEF() ::= <<>>

tocENUM() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$
<li class="toclevel-2"><a href="#$node.TypeRef.ActualSymbol.FullNameList;separator="_"$">
<span class="toctext">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$ (enum)</span></a></li>
$endif$
>>

tocBITFIELD() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$
<li class="toclevel-2"><a href="#$node.TypeRef.ActualSymbol.FullNameList;separator="_"$">
<span class="toctext">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$ (bitfield)</span></a></li>
$endif$
>>

tocCLASS() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$
<li class="toclevel-2"><a href="#$node.TypeRef.ActualSymbol.FullNameList;separator="_"$">
<span class="toctext">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$ (class)</span></a></li>
$node.TypeRef.ActualSymbol.Members:{$tocHelper2(node=it)$}$
$endif$
>>

tocUNION() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$
<li class="toclevel-2"><a href="#$node.TypeRef.ActualSymbol.FullNameList;separator="_"$">
<span class="toctext">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$ (union)</span></a></li>
$node.TypeRef.ActualSymbol.Members:{$tocHelper2(node=it)$}$
$endif$
>>

contentHelper(node) ::= <<

$if(node.ActualCategory)$
  $({content$node.ActualCategory$})()$
$elseif(node.Category)$
  $({content$node.Category$})()$
$else$
  $contentNAMESPACE()$
$endif$

>>

contentHelper2(node) ::= <<

$if(node.TypeRef.Symbol.ActualCategory)$
  $({content$node.TypeRef.Symbol.ActualCategory$})()$
$elseif(node.TypeRef.Symbol.Category)$
  $({content$node.TypeRef.Symbol.Category$})()$
$else$
  $contentNAMESPACE()$
$endif$

>>

contentVARIABLE() ::= <<>>  
contentGENERIC() ::= <<>>

contentCUSTOM_ATTRIBUTE() ::= <<>>  

contentNAMESPACE() ::= <<
>>

contentINT_PRIMITIVE() ::= <<
>>

contentFLOAT_PRIMITIVE() ::= <<
>>

contentBLOB() ::= <<
>>

contentSTRING() ::= <<
>>

contentMEMBER() ::= <<
>>

contentTIMEVALUE() ::= <<
>>

contentOBJECT_TYPE() ::= <<
>>

contentOBJECT_ID() ::= <<
>>

contentLIST() ::= <<
$contentHelper(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
>>

contentMAP() ::= <<
$contentHelper(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
>>

contentCONST() ::= <<>>

contentTYPEDEF() ::= <<>>

contentENUM() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$</span></h2>
$if(node.TypeRef.ActualSymbol.description)$
$node.TypeRef.ActualSymbol.description$
$else$
This enum does not have a description.
$endif$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$_Values"></a>
<h3><span class="mw-headline">Values</span></h3>
<ul>
$node.TypeRef.ActualSymbol.Members:{$enumMember(member=it); separator="\r\n"$}$
</ul>

$endif$
>>

enumMember(member) ::= <<
<li>$member.Name$$if(member.Value)$ ($member.Value$)$else$ ($i0$)$endif$$if(member.description)$ -- $member.description$$endif$</li>

>>

contentBITFIELD() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$</span></h2>
$if(node.TypeRef.ActualSymbol.description)$
$node.TypeRef.ActualSymbol.description$
$else$
This bitfield does not have a description.
$endif$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$_Values"></a>
<h3><span class="mw-headline">Values</span></h3>
<ul>
$node.TypeRef.ActualSymbol.Members:{$bitfieldMember(member=it); separator="\r\n"$}$
</ul>

$endif$
>>

bitfieldMember(member) ::= <<
<li>$member.Name$$if(member.Value)$ ($member.Value;format="hex"$)$else$ ($i0;format="hex"$)$endif$$if(member.description)$ -- $member.description$$endif$</li>
>>

contentCLASS() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$</span></h2>

$if(node.TypeRef.ActualSymbol.baseTdf)$

<h3><span class="mw-headline">BaseTDF</span></h3>
<a href="#$node.TypeRef.ActualSymbol.baseTdf.ActualSymbol.FullNameList;separator="_"$">$node.TypeRef.ActualSymbol.baseTdf.ActualSymbol.FullNameList;separator="::"$</a>
$contentHelper(node=node.TypeRef.ActualSymbol.baseTdf.ActualSymbol)$

$else$

$if(node.TypeRef.ActualSymbol.description)$
$node.TypeRef.ActualSymbol.description$
$else$
This class does not have a description.
$endif$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$_Members"></a>
<h3><span class="mw-headline">Members</span></h3>
$if(node.TypeRef.ActualSymbol.Members)$
<table>
<tbody>
<tr>
 <td><u>Name</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Default</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Reconfigurable</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Description</u>&nbsp;&nbsp;&nbsp;</td>
</tr>
$node.TypeRef.ActualSymbol.Members:{$memberHelper(member=it)$}$
</tbody>
</table>
$node.TypeRef.ActualSymbol.Members:{$contentHelper2(node=it)$}$
$else$
This class has no members.
$endif$

$endif$

$endif$
>>

contentUNION() ::= <<
$if(!fileNode.DefTable.(node.TypeRef.ActualSymbol.FullNameList))$
$fileNode.DefTable.Add.(node.TypeRef.ActualSymbol.FullNameList)$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$</span></h2>

$if(node.TypeRef.ActualSymbol.description)$
$node.TypeRef.ActualSymbol.description$
$else$
This union does not have a description.
$endif$

<a name="$node.TypeRef.ActualSymbol.FullNameList;separator="_"$_Members"></a>
<h3><span class="mw-headline">Members</span></h3>
Only one of the following members can be set at any given time for a union.
$if(node.TypeRef.ActualSymbol.Members)$
<table>
<tbody>
<tr>
 <td><u>Name</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Default</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Reconfigurable</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Description</u>&nbsp;&nbsp;&nbsp;</td>
</tr>
$node.TypeRef.ActualSymbol.Members:{$memberHelper(member=it)$}$
</tbody>
</table>
$node.TypeRef.ActualSymbol.Members:{$contentHelper2(node=it)$}$
$else$
This union has no members.
$endif$

$endif$
>>

memberHelper(member) ::= <<
<tr>
 <td>$member.Name$&nbsp;&nbsp;&nbsp;</td>
 <td>$getType(node=member)$&nbsp;&nbsp;&nbsp;</td>
$if(member.default)$
 <td>$member.default$&nbsp;&nbsp;&nbsp;</td>
$else$
 <td>&nbsp;&nbsp;&nbsp;</td>
$endif$
$if(member.reconfigurable)$
 <td>$member.reconfigurable$&nbsp;&nbsp;&nbsp;</td>
$else$
 <td>default&nbsp;&nbsp;&nbsp;</td>
$endif$
$if(member.description)$
 <td>$member.description$&nbsp;&nbsp;&nbsp;</td>
$else$
 <td>No description.&nbsp;&nbsp;&nbsp;</td>
$endif$
</tr>
>>

getType(node) ::= <<
$({getType$node.TypeRef.Symbol.ActualCategory$})()$
>>

getTypeCLASS() ::= <<
<a href="#$node.TypeRef.ActualSymbol.FullNameList;separator="_"$">$node.TypeRef.ActualSymbol.FullNameList;separator="::"$</a>
>>

getTypeENUM() ::= <<
enum (<a href="#$node.TypeRef.Symbol.FullNameList;separator="_"$">$node.TypeRef.Symbol.FullNameList;separator="::"$</a>)
>>

getTypeUNION() ::= <<
TdfUnion (<a href="#$node.TypeRef.Symbol.FullNameList;separator="_"$">$node.TypeRef.Symbol.FullNameList;separator="::"$</a>)
>>

getTypeBITFIELD() ::= <<
TdfBitfield (<a href="#$node.TypeRef.Symbol.FullNameList;separator="_"$">$node.TypeRef.Symbol.FullNameList;separator="::"$</a>)
>>

getTypeSTRING() ::= "string"
getTypeINT_PRIMITIVE() ::= <<
$({getTypeINT_PRIMITIVE_$node.TypeRef.ActualSymbol.Name$})()$
>>
getTypeINT_PRIMITIVE_bool8_t() ::= "bool8_t"
getTypeINT_PRIMITIVE_bool() ::= "bool"
getTypeINT_PRIMITIVE_char8_t() ::= "char8_t"
getTypeINT_PRIMITIVE_int8_t() ::= "int8_t"
getTypeINT_PRIMITIVE_uint8_t() ::= "uint8_t"
getTypeINT_PRIMITIVE_int16_t() ::= "int16_t"
getTypeINT_PRIMITIVE_uint16_t() ::= "uint16_t"
getTypeINT_PRIMITIVE_int32_t() ::= "int32_t"
getTypeINT_PRIMITIVE_uint32_t() ::= "uint32_t"
getTypeINT_PRIMITIVE_int64_t() ::= "int64_t"
getTypeINT_PRIMITIVE_uint64_t() ::= "uint64_t"
getTypeINT_PRIMITIVE_ComponentId() ::= "ComponentId"
getTypeINT_PRIMITIVE_EntityType() ::= "EntityType"
getTypeINT_PRIMITIVE_EntityId() ::= "EntityId"
getTypeFLOAT_PRIMITIVE() ::= "float"
getTypeBLOB() ::= "TdfBlob"
getTypeOBJECT_TYPE() ::= "ObjectType"
getTypeOBJECT_ID() ::= "ObjectId"
getTypeTIMEVALUE() ::= "TimeValue"

getTypeMAP() ::= <<
map&lt;
$node.TypeRef.ActualSymbol.KeyType.ActualSymbol.FullNameList; separator="::"$,&nbsp;
$getType2(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
&gt;
>>

getTypeLIST() ::= <<
list&lt;
$getType2(node=node.TypeRef.ActualSymbol.ValueType.ActualSymbol)$
&gt;
>>
getTypeVARIABLE() ::= "variable TDF"
getTypeGENERIC() ::= "generic value"

getType2(node) ::= <<
$({getType2$node.ActualCategory$})()$
>>

getType2CLASS() ::= <<
<a href="#$node.FullNameList;separator="_"$">$node.FullNameList;separator="::"$</a>
>>

getType2ENUM() ::= <<
enum (<a href="#$node.FullNameList;separator="_"$">$node.FullNameList;separator="::"$</a>)
>>

getType2UNION() ::= <<
TdfUnion (<a href="#$node.FullNameList;separator="_"$">$node.FullNameList;separator="::"$</a>)
>>

getType2BITFIELD() ::= <<
TdfBitfield (<a href="#$node.FullNameList;separator="_"$">$node.FullNameList;separator="::"$</a>)
>>

getType2STRING() ::= "string"
getType2INT_PRIMITIVE() ::= <<
$({getTypeINT_PRIMITIVE_$node.Name$})()$
>>
getType2FLOAT_PRIMITIVE() ::= "float"
getType2BLOB() ::= "TdfBlob"
getType2OBJECT_TYPE() ::= "ObjectType"
getType2OBJECT_ID() ::= "ObjectId"
getType2TIMEVALUE() ::= "TimeValue"

getType2MAP() ::= <<
map&lt;
$node.KeyType.ActualSymbol.FullNameList; separator="::"$,&nbsp;
$getType2(node=node.ValueType.ActualSymbol)$
&gt;
>>

getType2LIST() ::= <<
list&lt;
$getType2(node=node.ValueType.ActualSymbol)$
&gt;
>>
getType2VARIABLE() ::= "variable TDF"
getType2GENERIC() ::= "generic value"
