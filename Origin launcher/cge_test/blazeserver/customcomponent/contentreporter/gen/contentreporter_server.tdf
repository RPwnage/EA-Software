// Defines the TDF classes used in the fifacups component. This is for server side only data
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
namespace ContentReporter
{	
	class ContentReporterConfig
	{
		[tag="tagd", default="", reconfigurable="yes", description="Default Product Name"]
		string(64) mDefaultProduct;
		
		[tag="taga", default="", reconfigurable="yes", description="Api Key"]
		string(64) mApiKey;
		
		[tag="tage", default="", reconfigurable="yes", description="WAL Proxy Url Base"]
		string(256) mWalProxyUrlBase;

		[tag="tagu", default="", reconfigurable="yes", description="UTAS Url Base"]
		string(256) mUtasUrlBase;
		
		[tag="tags", default="", reconfigurable="yes", description="SSAS Url Base"]
		string(256) mSsasUrlBase;
		
		[tag="artn", default="", reconfigurable="yes", description="Abuse Reporting Default Team Name"]
		string(32) mDefaultSSFTeamName;
		
		[tag="aran", default="", reconfigurable="yes", description="Abuse Reporting Default Avatar Name"]
		string(32) mDefaultSSFAvatarName;
		
		[tag="argn", default="", reconfigurable="yes", description="Abuse Reporting FUT Default Game Name"]
		string(32) mDefaultFUTGameName;

		[tag="ardn", default="", description="Abuse Reporting Default Game Name"]
		string(32) mDefaultGameName;

		[tag="size", default=0, reconfigurable="yes", description="Max size for the petition body"]
        uint32_t mMaxAllowedBodySize;
	};

	class ErrorDetails
	{
		[tag="code", description="The error code"]
		string(64) mCode;
		
		[tag="fld", description="The request field that caused the error"]
		string(128) mField;
		
		[tag="msg", description="The error details."]
		string(-1) mMessage;
	};

	class ErrorResponse
	{
		[tag="errs", description="A list of errors returned."]
		list<ErrorDetails> mErrors;
	};
} // ContentReporter
} // Blaze



