// Defines the RPCs and async notifications used in the easfc component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="easfc/tdf/easfctypes.h" ]
#include "easfc/gen/easfctypes.tdf"

[ 
  client_include = false,
  headername="easfc/tdf/easfctypes_server.h" 
]
#include "easfc/gen/easfctypes_server.tdf"

namespace Blaze
{
namespace EASFC
{
[
  id = custom/29,
  description = "EASFC component for online purchasables",
  details = "EASFC allows users to purchases certain online items" 
]
component Easfc
{
	errors
	{
		[ description = "An error has occurred." ]
		EASFC_ERR_GENERAL =              1;
		[ description = "A database error has occurred." ]
		EASFC_ERR_DB      =              2;
		[ description = "Parameters are invalid." ]
		EASFC_ERR_INVALID_PARAMS =       3;
		[ description = "upgrade already applied." ]
		EASFC_ERR_UPGRADE_APPLIED =      4;
	}

	[ clientname = "EasfcComponent" ]
	slave
	{			
		methods
		{ 
              	[
                 id = 1,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS
                   }
               	]
		void purchaseGameWin(PurchaseGameRequest);

              	[
                 id = 2,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS
                   }
               	]
		void purchaseGameDraw(PurchaseGameRequest);

              	[
                 id = 3,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS
                   }
               	]
		void purchaseGameLoss(PurchaseGameRequest);

              	[
                 id = 4,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS
                   }
               	]
		void purchaseGameMatch(PurchaseGameRequest);
		              	
                [
                 id = 5,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS,
                       EASFC_ERR_UPGRADE_APPLIED
                   }
               	]
		void setSeasonsData(SetSeasonalPlayStatsRequest);

                [
                 id = 6,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS,
                       EASFC_ERR_UPGRADE_APPLIED
                   }
               	]
		void setVProStats(SetVProStatsRequest);

			    [
                 id = 7,
                 errors = {
                       EASFC_ERR_GENERAL,
                       EASFC_ERR_DB,
                       EASFC_ERR_INVALID_PARAMS,
                       EASFC_ERR_UPGRADE_APPLIED
                   }
               	]
		void overrideVProStats(OverrideVProStatsRequest);
		} // methods
	} // slave

	master
	{
	    methods
	    {
	    }
	
		replication
		{
		} // replication
		
		notifications
		{
		}
	} // master
}
}
}


