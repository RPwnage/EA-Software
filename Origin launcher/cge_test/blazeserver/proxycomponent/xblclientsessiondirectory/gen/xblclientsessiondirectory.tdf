/*! ************************************************************************************************/
/*!
    \file xblclientsessiondirectory.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/
[headername="framework/tdf/externalsessiontypes.h"]
#include "framework/gen/externalsessiontypes.tdf"

[ headername="xblserviceconfigs/tdf/xblsessiondirectorycommontypes.h" ]
#include "xblserviceconfigs/gen/xblsessiondirectorycommontypes.tdf"

namespace Blaze
{

namespace XBLServices
{

class ServerMultiplayerSessionHeader
{
    [tag="cvrn", description=""]
    string(MAX_XBLCONTRACTVERSION_CHAR_LEN) mContractVersion;

    [tag="mock", description="Sim outage header. Applicable only to mock services."]
    string(-1) mSimOutage;
};

typedef map<string(-1), char8_t> RemoveMembers;
class PutMultiplayerSessionLeaveGroupBody
{
    [tag="memb", description=""]
    RemoveMembers mMembers;
};

class PutMultiplayerSessionLeaveGroupRequest
{
    [tag="scid", description="The scid for the external session."]
    XblScid mScid;

    [tag="stnm", description="The template name for the external session."]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description="The name of the external session."]
    XblSessionName mSessionName;

    [tag="prjh", description="Request header"]
    ServerMultiplayerSessionHeader mHeader;

    [tag="prjb", description="Request body"]
    PutMultiplayerSessionLeaveGroupBody mBody;
};


class GetMultiplayerSessionRequest
{
    [tag="scid", description="The scid for the external session."]
    XblScid mScid;

    [tag="stnm", description="The template name for the external session."]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description="The name of the external session."]
    XblSessionName mSessionName;

    [tag="prjh", description="Request header"]
    ServerMultiplayerSessionHeader mHeader;
};

class PutMultiplayerSessionUpdateBody
{
    [tag="prop", description="The properties of the external session."]
    MultiplayerSessionProperties mProperties;
};

class PutMultiplayerSessionUpdateRequest
{
    [tag="scid", description="The scid for the external session."]
    XblScid mScid;

    [tag="stnm", description="The template name for the external session."]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description="The name of the external session."]
    XblSessionName mSessionName;

    [tag="prjh", description="Request header"]
    ServerMultiplayerSessionHeader mHeader;

    [tag="prjb", description="Request body"]
    PutMultiplayerSessionUpdateBody mBody;
};

class GetMultiplayerSessionTemplateRequest
{
    [tag="scid", description="The scid for the external session."]
    XblScid mScid;

    [tag="stnm", description="The template name for the external session."]
    XblSessionTemplateName mSessionTemplateName;

    [tag="prjh", description="Request header"]
    ServerMultiplayerSessionHeader mHeader;
};

//////
// GetMultiplayerSessionTemplateRequest response tdf's
[trackChanges = true]
class MultiplayerSessionTemplateSystemConstants
{
    [tag="maxm", description="The external session template's system constant's max members count."]
    uint16_t mMaxMembersCount;
};

[trackChanges = true]
class MultiplayerSessionTemplateConstants
{
    [tag="sysc", description="The external session template's system constants."]
    MultiplayerSessionTemplateSystemConstants mSystem;
};

[trackChanges = true]
class MultiplayerSessionTemplateFixed
{
    [tag="cons", description="The external session template's constants."]
    MultiplayerSessionTemplateConstants mConstants;
};

[trackChanges = true]
class MultiplayerSessionTemplateResponse
{
    [tag="cvrn", description="The external session template's contract version."]
    int64_t mContractVersion;

    [tag="fixd", description="The external session template's 'fixed' member."]
    MultiplayerSessionTemplateFixed mFixed;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Get Activity Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

class PostHandlesGetActivityRequestHeader
{
    [tag="cvrn", description="The handles service contract version."]
    string(MAX_XBLCONTRACTVERSION_CHAR_LEN) mContractVersion;
};

class PostHandlesGetActivityRequestBodyOwners
{
    [tag="xuid", description="The external id's of the members to fetch for."]
    list<string(Blaze::MAX_EXTERNAL_ID_CHAR_LEN)> mXuids;
};

class PostHandlesGetActivityRequestBody
{
    [tag="scid", description="The scid of the REST request"]
    XblScid mScid;

    [tag="ownr", description="The members to fetch for."]
    PostHandlesGetActivityRequestBodyOwners mOwners;
    
    [tag="type", description="Handle type. Possible values include 'activity' and 'invite'."]
    string(8) mType; //8 chars for "activity"
};

class PostHandlesGetActivityRequest
{
    [tag="prjh", description="REST request's headers"]
    PostHandlesGetActivityRequestHeader mHeader;

    [tag="body", description="REST request's body."]
    PostHandlesGetActivityRequestBody mBody;
};

class HandlesGetActivityResult
{
    [tag="sess", description="The response's external session reference."]
    MultiplayerSessionRef mSessionRef;
    
    [tag="hand", description="The response's external session activity handle id."]
    XblActivityHandleId mId;
};
typedef list<HandlesGetActivityResult> HandlesGetActivityResultList;

class PostHandlesGetActivityResponse
{
    [tag="rslt", description="results of the REST response"]
    HandlesGetActivityResultList mResults; //side: MS returns a list but it should only have one item in it
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Get User Multiplayer Sessions Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////
class GetMultiplayerSessionsForUserRequest
{
    [tag="scid", description="The scid for the multiplayer session."]
    XblScid mScid;

    [tag="xuid", description="The user's xuid to fetch for."]
    string(MAX_EXTERNAL_ID_CHAR_LEN) mXuid;

    [tag="prjh", description="Request header"]
    ServerMultiplayerSessionHeader mHeader;
};

class GetMultiplayerSessionsResponseResultsItem
{
    [tag="xuid", description="The user's xuid."]
    string(MAX_EXTERNAL_ID_CHAR_LEN) mXuid;
    [tag="sess", description="The multiplayer session reference."]
    MultiplayerSessionRef mSessionRef;
    [tag="stat", description="The status."]
    string(-1) mStatus;
    [tag="visb", description="multiplayer session's visibility. Possible values are 'open', 'visible', or 'private'."]
    string(7) mVisibility;
    [tag="clos", default=false, description="whether multiplayer session will be Closed."]
    bool mClosed;
    [tag="strt", description="The multiplayer session's start time."]
    UtcTimeString mStartTime;
    [tag="fxui", description="The first member's xuid."]
    string(MAX_EXTERNAL_ID_CHAR_LEN) mFirstMemberXuid;
};
typedef list<GetMultiplayerSessionsResponseResultsItem> GetMultiplayerSessionsResponseResults;

class GetMultiplayerSessionsResponse
{
    [tag="rslt", description="The results."]
    GetMultiplayerSessionsResponseResults mResults;
};


}
}
