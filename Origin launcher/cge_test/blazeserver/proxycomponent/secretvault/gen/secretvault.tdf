[headername="framework/tdf/entity.h"]
#include "framework/gen/entity.tdf"

namespace Blaze
{
namespace SecretVault
{

[description="List of Secret Vault error messages."]
typedef list<string(-1)> SecretVaultErrorMessages;

[description="List of Secret Vault warning messages."]
typedef list<string(-1)> SecretVaultWarningMessages;

[description="Secret Vault data map."]
typedef map<string(-1), string(-1), ignorecase> SecretVaultDataMap;

[description="Secret Vault data map from the renew token call."]
typedef map<string(-1), string(-1), ignorecase> AuthTokenMetadataMap;

[description="The Secret Vault namespace."]
typedef string(256) SecretVaultNamespace;

[description="The Secret Vault token id."]
typedef string(64) SecretVaultTokenId;

[description="The Secret Vault token accessor id. Used to reference the token id without exposing it."]
typedef string(64) SecretVaultTokenAccessorId;

[description="The Secret Vault lease id."]
typedef string(64) SecretVaultLeaseId;
   
class SecretVaultErrorResponse
{
    [tag="errs", description="The associated error messages."]
    SecretVaultErrorMessages mErrors;
};

typedef string(256) SecretVaultPolicy;

[description="Connection profiles data."]
typedef list<SecretVaultPolicy> SecretVaultPolicyList;

class RenewTokenAuth
{
    [tag="mtok", nameoverride="client_token", description="The client token used to authenticate.", printFormat="censor"]
    SecretVaultTokenId mClientToken;

    [tag="pol", description="The token's policies."]
    SecretVaultPolicyList mPolicies;

    [tag="mdta", description="The token metadata."]
    AuthTokenMetadataMap mMetadata;
    
    [tag="ldur", nameoverride="lease_duration", description="The duration of the lease."]
    uint32_t mLeaseDuration;

    [tag="rnew", description="If the token is renewable."]
    bool mRenewable; 
};

class SecretVaultWrapInfo
{
    [tag="ctim", nameoverride="creation_time", description="The id of the original request for which we received the response."]
    string(64) mCreationTime;

    [tag="mtok", description="The id of the original request for which we received the response."]
    SecretVaultTokenId mToken;

    [tag="ttl", description="The status code of the error."]
    uint32_t mTTL;

    [tag="mwra", nameoverride="wrapped_accessor", description="The id of the original request for which we received the response."]
    SecretVaultTokenAccessorId mWrappedAccessor;
};

class SecretVaultSecret
{
//    [tag="auth", description="The auth token.  (The varies depending on the Auth source, and cannot be reliably decoded.)"]
//    SecretVaultAuth mAuth;

    [tag="data", description="The map of secret values.", printFormat="censor"]
    SecretVaultDataMap mData;

    [tag="ldur", nameoverride="lease_duration", description="The length of the lease duration."]
    uint32_t mLeaseDuration;

    [tag="lid", nameoverride="lease_id", description="The lease id."]
    SecretVaultLeaseId mLeaseId;

    [tag="rnew", description="Returns if the secret is renewable."]
    bool mRenewable; 
};


[description="Secret Vault version metadata."]
class SecretVaultKv2Metadata   
{
    [tag="crtm", nameoverride="created_time", description="Time of creation of the data. (UTC)"]
    TimeValue mCreatedTime;

    [tag="dltm", nameoverride="deletion_time", description="Time of deletion of the data. Empty if not destroyed yet. (UTC)"]
    TimeValue mDeletionTime;

    [tag="dest", description="Was the data destroyed?"]
    bool mDestroyed;

    [tag="vers", description="Version of the data"]
    int32_t mVersion;
};

class SecretVaultKv2Data
{
    [tag="data", description="The secrets.", printFormat="censor"]
    SecretVaultDataMap mData;

    [tag="meta", description="The kv2 metadata."]
    SecretVaultKv2Metadata mMetadata;
};

class SecretVaultKv2Secret
{
    [tag="rid", nameoverride="request_id", description="The request id."]
    SecretVaultTokenId mRequestId;

    [tag="lid", nameoverride="lease_id", description="The lease id."]
    SecretVaultLeaseId mLeaseId;

    [tag="rnew", description="Returns if the secret is renewable."]
    bool mRenewable; 

    [tag="ldur", nameoverride="lease_duration", description="The length of the lease duration."]
    uint32_t mLeaseDuration;

    [tag="data", description="The data."]
    SecretVaultKv2Data mData;

    [tag="wrap", nameoverride="wrap_info", description="The wrapped results."]
    SecretVaultWrapInfo mWrapInfo;

    [tag="warn", description="Warning messages returned from the operation."]
    SecretVaultWarningMessages mWarnings;

//    [tag="auth", description="The auth token.  (The varies depending on the Auth source, and cannot be reliably decoded.)"]
//    SecretVaultAuth mAuth;
};

class SecretVaultReadRequest
{
    [tag="nmsp", description="The vault namespace."]
    SecretVaultNamespace mVaultNamespace;

    [tag="path", description="The path to query from the vault for secrets."]
    string(-1) mPath;
    
    [tag="tokn", description="The token for the vault session.", printFormat="censor"]
    SecretVaultTokenId mVaultToken;
};

class SecretVaultRenewTokenRequestBody
{
    [tag="incr", nameoverride="increment", description="An optional requested lease increment can be provided. This increment may be ignored."]
    string(-1) mIncrement;
};

class SecretVaultRenewTokenRequest
{
    [tag="nmsp", description="The vault namespace."]
    SecretVaultNamespace mVaultNamespace;

    [tag="tokn", description="The token for the vault session.", printFormat="censor"]
    SecretVaultTokenId mVaultToken;
    
    [tag="body", description="The data to be sent in the body of the request."]
    SecretVaultRenewTokenRequestBody mRequestBody;
};

class RenewTokenResponse
{
    [tag="auth", description="The auth token."]
    RenewTokenAuth mAuth;
};

class SecretVaultRenewLeaseRequestBody
{
    [tag="incr", nameoverride="increment", description="(Optional) Specifies the requested amount of time (in seconds) to extend the lease."]
    uint32_t mIncrement;
    
    [tag="lsid", nameoverride="lease_id", description="Specifies the ID of the lease to extend. This can be specified as part of the URL or as part of the request body."]
    SecretVaultLeaseId mLeaseId;
};

class SecretVaultRenewLeaseRequest
{
    [tag="nmsp", description="The vault namespace."]
    SecretVaultNamespace mVaultNamespace;

    [tag="tokn", description="The token for the vault session.", printFormat="censor"]
    SecretVaultTokenId mVaultToken;
    
    [tag="body", description="The data to be sent in the body of the request."]
    SecretVaultRenewLeaseRequestBody mRequestBody;
};

class RenewLeaseResponse
{
    [tag="lid", nameoverride="lease_id", description="The lease id."]
    SecretVaultLeaseId mLeaseId;

    [tag="rnew", description="Returns if the secret is renewable."]
    bool mRenewable; 

    [tag="ldur", nameoverride="lease_duration", description="The length of the lease duration."]
    uint32_t mLeaseDuration;
};

class SecretVaultApproleLoginRequestBody
{
    [tag="role", nameoverride="role_id", description="The role id (aka application's user name) to authenticate."]
    string(-1) mRoleId;
 
    [tag="secr", nameoverride="secret_id", description="The secret id (aka password) to authenticate.", printFormat="censor"]
    string(-1) mSecretId;
};

class SecretVaultApproleLoginRequest
{
    [tag="nmsp", description="The vault namespace."]
    SecretVaultNamespace mVaultNamespace;

    [tag="path", description="The path of the approle engine in Vault."]
    string(-1) mPath;

    [tag="body", description="The data to be sent in the body of the request."]
    SecretVaultApproleLoginRequestBody mRequestBody;
};

class ApproleLoginAuth
{
    [tag="rnew", description="If the token is renewable."]
    bool mRenewable; 
    
    [tag="ldur", nameoverride="lease_duration", description="The duration of the lease."]
    uint32_t mLeaseDuration;

    [tag="tpol", nameoverride="token_policies", description="The token's policies."]
    SecretVaultPolicyList mTokenPolicies;

    [tag="mdta", description="The token metadata."]
    AuthTokenMetadataMap mMetadata;

    [tag="acc", description="The accessor for the client token."]
    SecretVaultTokenAccessorId mAccessor;

    [tag="mtok", nameoverride="client_token", description="The client token used to authenticate.", printFormat="censor"]
    SecretVaultTokenId mClientToken;
};

class ApproleLoginResponse
{
    [tag="auth", description="The auth token."]
    ApproleLoginAuth mAuth;

    [tag="warn", description="Warning messages returned from the operation."]
    SecretVaultWarningMessages mWarnings;

    [tag="wrap", nameoverride="wrap_info", description="The wrapped results."]
    SecretVaultWrapInfo mWrapInfo;

    [tag="data", description="The map of secret values.", printFormat="censor"]
    SecretVaultDataMap mData;

    [tag="rid", nameoverride="request_id", description="The request id. May be missing"]
    SecretVaultTokenId mRequestId;

    [tag="lid", nameoverride="lease_id", description="The lease id."]
    SecretVaultLeaseId mLeaseId;

    [tag="rnew", description="Returns if the secret is renewable."]
    bool mRenewable; 

    [tag="ldur", nameoverride="lease_duration", description="The length of the lease duration."]
    uint32_t mLeaseDuration;
};

class SecretVaultUnwrapRequest
{
    [tag="nmsp", description="The vault namespace."]
    SecretVaultNamespace mVaultNamespace;

    [tag="tokn", description="The wrapping token.", printFormat="censor"]
    SecretVaultTokenId mVaultToken;
};

class SecretVaultSecretIdData
{
    [tag="sid", nameoverride="secret_id", description="The secret id.", printFormat="censor"]
    string(-1) mSecretId;

    [tag="acc", nameoverride="secret_id_accessor", description="The accessor for the secret id."]
    SecretVaultTokenAccessorId mAccessor;
};

class SecretVaultSecretIdResponse
{
    [tag="lid", nameoverride="lease_id", description="The lease id."]
    SecretVaultLeaseId mLeaseId;

    [tag="rnew", description="Returns if the secret is renewable."]
    bool mRenewable;

    [tag="ldur", nameoverride="lease_duration", description="The length of the lease duration."]
    uint32_t mLeaseDuration;

    [tag="data", description="The secret id and accessor."]
    SecretVaultSecretIdData mData;

    [tag="wrap", nameoverride="wrap_info", description="The wrapped results."]
    SecretVaultWrapInfo mWrapInfo;

    [tag="warn", description="Warning messages returned from the operation."]
    SecretVaultWarningMessages mWarnings;

    [tag="auth", description="The auth token."]
    ApproleLoginAuth mAuth;
};

} // namespace SecretVault
} // namespace Blaze
