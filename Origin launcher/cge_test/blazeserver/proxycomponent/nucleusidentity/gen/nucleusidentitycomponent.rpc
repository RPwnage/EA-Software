[ headername="nucleusidentity/tdf/nucleusidentity.h" ]
#include "nucleusidentity/gen/nucleusidentity.tdf"

namespace Blaze
{
namespace NucleusIdentity
{

[
    id = core/1002,
    description = "Component used for access to the Nucleus Identity 2.0 APIs",
    details = "NucleusIdentity supports RESTful APIs for communicating with the Nucleus Identity 2.0 system.",
    proxyOnly = true,
    http = {
        apiVersion = "",
        payloadEncoderSubType = "NORMAL"
    }
]
component NucleusIdentity
{
    errors
    {
        [ description = "Error returned if an entitlement is granted rather than found."]
        NUCLEUS_IDENTITY_ENTITLEMENT_GRANTED = 1;
        [ description = "The request is rejected by Nucleus with a 4xx error."]
        NUCLEUS_IDENTITY_INVALID_REQUEST = 2;
    }

    slave
    {
        methods
        {
            [
              id = 1,
              description = "Decrements the use count of an entitlement",
              details = "Decrements the use count of an entitlement",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/entitlements/{entitlementId}",
                method = "PUT",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                requestPayloadMember = "entitlementInfo"
              }
            ]
            UpsertEntitlementResponse updateEntitlement(UpdateEntitlementRequest);

            [
              id = 2,
              description = "Updates a persona",
              details = "Updates a persona for a given PID",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/personas/{personaId}",
                method = "PUT",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                requestPayloadMember = "personaInfo"
              }
            ]
            UpdatePersonaResponse updatePersona(UpdatePersonaRequest);

            [
              id = 3,
              description = "Gets a list of personas",
              details = "Gets a list of personas for a given PID",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/personas",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                url_params = {
                  "namespaceName" = "filter.namespaceName",
                  "status" = "filter.status",
                  "displayName" = "filter.displayName"
                },
                addEncodedPayload = false,
                urlParamEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            GetPersonaListResponse getPersonaList(GetPersonaListRequest);

            [
              id = 4,
              description = "Gets a persona",
              details = "Get details for a persona for a given PID",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/personas/{personaId}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            GetPersonaInfoResponse getPersonaInfo(GetPersonaInfoRequest);
            
            [
              id = 5,
              description = "Gets a persona",
              details = "Get details for a persona based on externalId",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                url_params = {
                  "externalRefType" = "filter.externalRefType",
                  "externalRefValue" = "filter.externalRefValue"
                },
                addEncodedPayload = false
              }
            ]
            GetPersonaListResponse getPersonaInfoByExtId(GetPersonaInfoExtIdRequest);

            [
              id = 6,
              description = "Deletes a persona",
              details = "Deletes a persona for a given PID",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/personas/{personaId}",
                method = "DELETE",
                contentType = "application/x-www-form-urlencoded",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            void deletePersona(DeletePersonaRequest);

            [
              id = 7,
              description = "Gets a user's email optins",
              details = "Gets a user's email optins",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/optins/{optinType}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            OptinResponse getOptin(OptinRequest);

            [
              id = 8,
              description = "Sets a user's email optins",
              details = "Sets a user's email optins",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/optins/{optinType}",
                method = "POST",
                contentType = "application/x-www-form-urlencoded",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            OptinResponse postOptin(OptinRequest);

            [
              id = 9,
              description = "Sets a user's email optins",
              details = "Sets a user's email optins",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/optins/{optinType}",
                method = "DELETE",
                contentType = "application/x-www-form-urlencoded",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            void deleteOptin(OptinRequest);

            [
              id = 10,
              description = "Gets a user's account info",
              details = "Gets a user's account info using the access token to identify the user",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/me",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            GetAccountResponse getAccount(GetAccountRequest);

            [
              id = 11,
              description = "Get's a set of entitlements",
              details = "Get's a set of entitlements for a specific account",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/entitlements",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults",
                  "X-Page-Size" = "pageSize",
                  "X-Page-Number" = "pageNumber",
                  "X-Recursive-Group-Search" = "recursiveSearch"
                },
                url_params = {
                  "productId" = "entitlementSearchParams.productId",
                  "entitlementTag" = "entitlementSearchParams.entitlementTag",
                  "status" = "entitlementSearchParams.status",
                  "statusReasonCode" = "entitlementSearchParams.statusReasonCode",
                  "startGrantDate" = "entitlementSearchParams.startGrantDate",
                  "endGrantDate" = "entitlementSearchParams.endGrantDate",
                  "startTerminationDate" = "entitlementSearchParams.startTerminationDate",
                  "endTerminationDate" =  "entitlementSearchParams.endTerminationDate",
                  "groupName" = "entitlementSearchParams.groupNames",
                  "productCatalog" = "entitlementSearchParams.productCatalog",
                  "entitlementType" = "entitlementSearchParams.entitlementType",
                  "projectId" = "entitlementSearchParams.projectId",
                  "hasAuthorizedPersona" = "entitlementSearchParams.hasAuthorizedPersona"
                },
                addEncodedPayload = false,
                urlParamEncoderSubType = "DEFAULTDIFFERNCE",
                headerEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            GetEntitlementsResponse getAccountEntitlements(GetEntitlementsRequest);

            [
              id = 12,
              description = "Get's a set of entitlements",
              details = "Get's a set of entitlements for a specific persona",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}/entitlements",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults",
                  "X-Page-Size" = "pageSize",
                  "X-Page-Number" = "pageNumber",
                  "X-Recursive-Group-Search" = "recursiveSearch"
                },
                url_params = {
                  "productId" = "entitlementSearchParams.productId",
                  "entitlementTag" = "entitlementSearchParams.entitlementTag",
                  "status" = "entitlementSearchParams.status",
                  "statusReasonCode" = "entitlementSearchParams.statusReasonCode",
                  "startGrantDate" = "entitlementSearchParams.startGrantDate",
                  "endGrantDate" = "entitlementSearchParams.endGrantDate",
                  "startTerminationDate" = "entitlementSearchParams.startTerminationDate",
                  "endTerminationDate" =  "entitlementSearchParams.endTerminationDate",
                  "groupName" = "entitlementSearchParams.groupNames",
                  "productCatalog" = "entitlementSearchParams.productCatalog",
                  "entitlementType" = "entitlementSearchParams.entitlementType",
                  "projectId" = "entitlementSearchParams.projectId"
                },
                addEncodedPayload = false,
                urlParamEncoderSubType = "DEFAULTDIFFERNCE",
                headerEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            GetEntitlementsResponse getPersonaEntitlements(GetEntitlementsRequest);

            [
              id = 13,
              description = "Get's an entitlement by ID",
              details = "Get's an entitlement by ID",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/entitlements/{entitlementId}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            GetEntitlementResponse getEntitlement(GetEntitlementsRequest);

            [
              id = 14,
              description = "Create a new entitlement",
              details = "Create a new entitlement for the given account",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/entitlements",
                method = "POST",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-ReleaseType" = "releaseType"
                },
                requestPayloadMember = "entitlementInfo",
                payloadEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            UpsertEntitlementResponse postEntitlement(PostEntitlementRequest);

            [
              id = 15,
              description = "Search or create a new entitlement",
              details = "Will first look for an entitlement matching the criteria, otherwise will create a new one",
              requires_authentication = false,
              client_export = true,
              errors = {
                NUCLEUS_IDENTITY_ENTITLEMENT_GRANTED
              },
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/entitlements/searchorcreate",
                method = "POST",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-ReleaseType" = "releaseType"
                },
                status_code_errors = {
                    201 = NUCLEUS_IDENTITY_ENTITLEMENT_GRANTED
                },
                requestPayloadMember = "entitlementInfo",
                payloadEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            UpsertEntitlementResponse searchOrPostEntitlement(PostEntitlementRequest);

            [
              id = 16,
              description = "Links an existing entitlement to a persona",
              details = "Links an existing entitlement to a persona",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/entitlements/{entitlementId}/personas/{personaId}",
                method = "POST",
                contentType = "application/x-www-form-urlencoded",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            PostEntitlementPersonaLinkResponse postEntitlementPersonaLink(PostEntitlementPersonaLinkRequest);

            [
              id = 17,
              description = "Creates a user profile",
              details = "Creates the profileinfo for a Nucleus account",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/profileinfo",
                method = "POST",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                requestPayloadMember = "pidProfilePostRequest"
              }
            ]
            void postProfileInfo(PostProfileInfoRequest);

            [
              id = 18,
              description = "Gets a user's profile",
              details = "Gets the profileinfo for a Nucleus account",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/profileinfo",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                addEncodedPayload = false
              }
            ]
            GetProfileInfoResponse getProfileInfo(GetProfileInfoRequest);
            
            [
              id = 19,
              description = "Gets an XBL token",
              details = "Exchanges a user's bearer token for a XBL token used for making server-to-server calls",
              requires_authentication = false,
              client_export = false,
              errors = {
                NUCLEUS_IDENTITY_INVALID_REQUEST
              },
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}/xbltoken",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId",
                  "X-Must-Revalidate" = "forceRefresh",
                  "X-Use-Mock" = "useMock"
                },
                url_params = {
                  "sandboxId" = "sandboxId",
                  "relyingParty" = "relyingParty"
                },
                status_code_errors = {
                  400 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  403 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  404 = NUCLEUS_IDENTITY_INVALID_REQUEST
                }
              }
            ]
            GetXBLTokenResponse getXBLToken(GetXBLTokenRequest);
            
            [
              id = 20,
              description = "Gets account information for specified pid",
              details = "Gets account information for specified pid",
              requires_authentication = false,
              client_export = true,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            GetAccountResponse getPid(GetPidRequest);

            [
              id = 21,
              description = "Gets the device profiles for the specified pid",
              details = "Gets the device profiles for the specified pid",
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/deviceprofile",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                url_params = {
                  platformType = "deviceProfileRequestData.platformType",
                  idType = "deviceProfileRequestData.idType",
                  idValue = "deviceProfileRequestData.idValue"
                },
                addEncodedPayload = false
              }
            ]
            GetDeviceProfileResponse getDeviceProfile(GetDeviceProfileRequest);

            [
              id = 22,
              description = "Posts the device profile for the specified pid",
              details = "Posts the device profile for the specified pid",
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/deviceprofile",
                method = "POST",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId"
                },
                url_params = {
                  platformType = "deviceProfileRequestData.platformType",
                  idType = "deviceProfileRequestData.idType",
                  idValue = "deviceProfileRequestData.idValue"
                },
                addEncodedPayload = false
              }
            ]
            PostDeviceProfileResponse postDeviceProfile(PostDeviceProfileRequest);

            [
              id = 23,
              description = "Gets the age requirements for a given country",
              details = "Gets the age requirements for a given country",
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/agerequirements/{countryCode}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress"
                },
                addEncodedPayload = false
              }
            ]
            GetAgeRequirementsResponse getAgeRequirements(GetAgeRequirementsRequest);

            [
              id = 24,
              description = "Gets a PSN token",
              details = "Exchanges a user's bearer token for a PSN token used for making server-to-server calls",
              requires_authentication = false,
              client_export = false,
              errors = {
                NUCLEUS_IDENTITY_INVALID_REQUEST
              },
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}/psnaccesstoken?ps4_ticket={ps4Ticket}{environmentQueryParam}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId",
                  "X-Must-Revalidate" = "forceRefresh"
                },
                status_code_errors = {
                  400 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  403 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  404 = NUCLEUS_IDENTITY_INVALID_REQUEST
                }
              }
            ]
            GetPSNTokenResponse getPSNToken(GetPSNTokenRequest);
            
            [
              id = 25,
              description = "Gets decrypted BlazeId for the encrypted BlazeId",
              details = "Gets decrypted BlazeId for the encrypted BlazeId string",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/decryption",
                method = "POST",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId"
                },
                requestPayloadMember = "body"
              }
            ]
            DecryptBlazeIdsResponse decryptBlazeIds(DecryptBlazeIdsRequest);

            [
              id = 26,
              description = "Gets a list of personas",
              details = "Gets a list of personas for given search criteria",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                url_params = {
                  "namespaceName" = "filter.namespaceName",
                  "status" = "filter.status",
                  "displayName" = "filter.displayName"
                },
                addEncodedPayload = false,
                urlParamEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            GetPersonaListResponse getPersonas(GetPersonaListRequest);

            [
              id = 27,
              description = "Gets a persona",
              details = "Get details for a persona",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "X-INCLUDE-UNDERAGE" = "authCredentials.includeUnderage",
                  "client_id" = "authCredentials.clientId"
                },
                addEncodedPayload = false
              }
            ]
            GetPersonaInfoResponse getPersona(GetPersonaInfoRequest);
            
            [
              id = 28,
              description = "Gets a list of accepted Terms of Service documents.",
              details = "Gets a list of accepted Terms of Service documents, optionally limited to a given search string.",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pid}/tos",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId",
                  "X-Expand-Results" = "expandResults"
                },
                addEncodedPayload = false,
                url_params = {
                  tosAccepted = "tosString"
                }
              }
            ]
            GetTosResponse getTos(GetTosRequest);
            
            [
              id = 29,
              description = "Get info sharing requirements for a given country.",
              details = "Get info sharing requirements for a given country.",
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/infosharingrequirements/{country}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress"
                },
                addEncodedPayload = false
              }
            ]
            GetInfoSharingRequirementsResponse getInfoSharingRequirements(GetInfoSharingRequirementsRequest);

            [
              id = 30,
              description = "Get geographic information about an IP address.",
              details = "Get geographic information about an IP address.",
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/ipgeolocations/{ipAddress}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress"
                },
                addEncodedPayload = false
              }
            ]
            GetIpGeoLocationResponse getIpGeoLocation(GetIpGeoLocationRequest);

            [
              id = 31,
              description = "Update a preference user by Nucleus user ID.",
              details = "Update a preference user by Nucleus user ID.",
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/pids/{pidId}/preferenceUser",
                method = "PUT",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress"
                },
                requestPayloadMember = "body"
              }
            ]
            PreferenceUserResponse updatePreferenceUser(PreferenceUserRequest);

            [
              id = 32,
              description = "Gets a PS5 online user token",
              details = "Get a PSN token used for making server-to-server calls for an online user",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}/ps5onlinetoken?{environmentQueryParam}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-NUCLEUS-USER-IP" = "authCredentials.ipAddress",
                  "client_id" = "authCredentials.clientId",
                  "X-Must-Revalidate" = "forceRefresh"
                }
              }
            ]
            GetPS5OnlineTokenResponse getPS5OnlineToken(GetPSNTokenRequest);
            
            [
              id = 33,
              description = "Get external refernce",
              details = "Get persona external reference details indirectly by personaId",
              requires_authentication = false,
              client_export = false,
              errors = {
                NUCLEUS_IDENTITY_INVALID_REQUEST
              },
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/personas/{personaId}/externalref",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "X-Expand-Results" = "expandResults"
                },
                status_code_errors = {
                  400 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  404 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  409 = NUCLEUS_IDENTITY_INVALID_REQUEST
                },
                addEncodedPayload = false
              }
            ]
            GetExternalRefResponse getExternalRef(GetExternalRefRequest);

            [
              id = 34,
              description = "Get refresh external entitlements",
              details = "Refresh the external entitlements of given pid account",
              requires_authentication = false,
              client_export = false,
              errors = {
                NUCLEUS_IDENTITY_INVALID_REQUEST
              },
              errortype = IdentityError,
              http = {
                resource = "/proxy/commerce/pids/{pidId}/refreshexternalentitlements",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken"
                },
                status_code_errors = {
                  400 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  403 = NUCLEUS_IDENTITY_INVALID_REQUEST,
                  404 = NUCLEUS_IDENTITY_INVALID_REQUEST
                },
                addEncodedPayload = false
              }
            ]
            GetRefreshExternalEntitlementsResponse getRefreshExternalEntitlements(GetRefreshExternalEntitlementsRequest);

            [
              id = 35,
              description = "Gets a PS5 server access token for PSN S2S",
              details = "Get the server to server (S2S) client credential PSN access token for PSN S2S.",
              requires_authentication = false,
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/identity/ps5s2stoken{environmentQueryParam}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken",
                  "client_id" = "authCredentials.clientId"
                }
              }
            ]
            GetPS5ClientCredentialTokenResponse getPS5ClientCredentialToken(GetPSNTokenRequest);

            [
              id = 36,
              description = "Retrieve settings for a player",
              details = "Retrieve settings for a player",
              client_export = false,
              errortype = IdentityError,
              http = {
                resource = "/proxy/settings/v1/{name}/nucleus/{accountId}",
                method = "GET",
                custom_request_headers = {
                  "Authorization" = "authCredentials.accessToken"
                },
                addEncodedPayload = false
              }
            ]
            GetPlayerSettingsResponse getPlayerSettings(GetPlayerSettingsRequest);
        }
    }
}

} // namespace NucleusIdentity
} // namespace Blaze
