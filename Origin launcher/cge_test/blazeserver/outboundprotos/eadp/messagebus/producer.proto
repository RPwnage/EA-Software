syntax = "proto3";

package eadp.messagebus;

import "eadp/messagebus/service_message.proto";
import "eadp/messagebus/topic_partition_message.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "eadp/annotations.proto";


option java_package = "com.ea.gs.messagebus.grpc";
option java_multiple_files = true;
option java_outer_classname = "ProducerProto";

service Producer {

    option (eadp.grpc.service_mapping) = {
        ports: [ S2S ]
        scopes: {
            key: "S2S"
            value: "gs_messagebus_producer"
        }
    };


    // Message Bus Kafka Producer: bidirectional streaming RPC.
    rpc PublishRecords(stream ProducerRecord) returns (stream ProducerResponse);

}

// The Producer payload to be sent to Kafka.
message ProducerRecord {
    // The topic's name the record will be appended to.
    string topic_name = 1;
    // The record contents (service message).
    ServiceMessage value = 2;
    // The timestamp of the record
    google.protobuf.Timestamp timestamp = 3;
    // Unique message (record) ID.
    string message_id = 4;
    // The resulting record status.
    google.rpc.Status status = 5;
}

// Producer response data.
message ProducerResponse {
    // The response status message.
    google.rpc.Status status = 1;
    // Unique message (record) ID.
    string message_id = 2;
    // Topic's metadata.
    TopicPartitionOffset topic_partition_offset = 3;
}

