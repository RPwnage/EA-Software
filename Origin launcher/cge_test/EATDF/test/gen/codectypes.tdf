[headername="test/tdf/alltypes.h"]
#include "test/gen/alltypes.tdf"

namespace EA
{

namespace TDF
{

namespace Test
{

[trackChanges=true]
class Foo
{
    [tag="fa"] int32_t mFooInt;
    [tag="clas"] map<int32_t, int32_t> mFoo;   // Same tag as Foo in TestSubfield
};

[trackChanges=true]
class Bar
{
    [tag="ba"] int32_t mBarInt;
    [tag="bb"] Foo mBarFoo;
};

[trackChanges=true]
class TestSubfield
{
    [tag="ba"] int32_t mBarInt;
    [tag="clas"] Foo mFoo;
    [tag="str"] string(32) mString;
};

union MyUnion
{
    [tag="foo"] Foo mFoo;
    [tag="bar"] Bar mBar;
    [tag="int"] uint32_t mInt;
    [tag="str"] string(32) mString;
};

[trackChanges=true]
class AllListOfUnionTest
{
    [tag="ulst"] list<MyUnion> mUnionList;
};

[trackChanges=true]
class AllPrimitivesClassSkipPrim
{   
    [tag="tagj"]
    bool mBool;

    [tag="taga"]
    uint8_t mUInt8;
    
    [tag="tagb"]
    uint16_t mUInt16;
    
    [tag="tage"]
    int8_t mInt8;
    
    [tag="tagf"]
    int16_t mInt16;
    
    [tag="tagg"]
    int32_t mInt32;
    
    [tag="tagh"]
    int64_t mInt64;

    [tag="flt"]
    float mFloat;

    [tag="tagi"]
    string(32) mString;

    [tag="oenu"]
    OutOfClassEnum mOutOfClassEnum;

    enum InClassEnum
    {
       IN_OF_CLASS_ENUM_VAL_1 = 1,
       IN_OF_CLASS_ENUM_VAL_2 = 2,
       IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="ienu"]
    InClassEnum mInClassEnum;    
};

[trackChanges=true]
class MalformedListClass
{
    [tag="taga"]
    list<uint8_t> mUInt8;
};

[trackChanges=true]
union AllPrimitivesUnionSkipPrim
{   

    [tag="tagj"]
    bool mBool;

    [tag="taga"]
    uint8_t mUInt8;
    
    [tag="tagb"]
    uint16_t mUInt16;
    
    [tag="tage"]
    int8_t mInt8;
    
    [tag="tagf"]
    int16_t mInt16;
    
    [tag="tagg"]
    int32_t mInt32;
    
    [tag="tagh"]
    int64_t mInt64;

    [tag="flt"]
    float mFloat;

    [tag="tagi"]
    string(32) mString;

    [tag="oenu"]
    OutOfClassEnum mOutOfClassEnum;
   
};

[trackChanges=true]
class AllComplexClassSkipMember
{
    [tag="clas"]
    AllPrimitivesClassSkipPrim mClass;

    [tag="unio"]
    AllPrimitivesUnion mUnion;

    [tag="bitf"]
    ABitField mBitField;

    [tag="blob"]
    blob mBlob;

    [tag="objt"]
    ObjectType mObjectType;

    [tag="obji"]
    ObjectId mObjectId;

    [tag="var"]
    variable mVariable;
};

[trackChanges=true]
union AllComplexUnionSkipMems
{
    [tag="clas"]
    AllPrimitivesClass mClass;

    [tag="bitf"]
    ABitField mBitField;

    [tag="blob"]
    blob mBlob;

    [tag="obji"]
    ObjectId mObjectId;
       
    [tag="time"]
    TimeValue mTime;
};

[trackChanges=true]
class AllListsPrimitivesClassSkipList
{   
    [tag="tagj"]
    list<bool> mBool;

    [tag="taga"]
    list<uint8_t> mUInt8;
    
    [tag="tagb"]
    list<uint16_t> mUInt16;
    
    [tag="tagc"]
    list<uint32_t> mUInt32;
        
    [tag="tage"]
    list<int8_t> mInt8;
    
    [tag="tagf"]
    list<int16_t> mInt16;
    
    [tag="tagg"]
    list<int32_t> mInt32;
    
    [tag="tagh"]
    list<int64_t> mInt64;

    [tag="flt"]
    list<float> mFloat;

    [tag="tagi"]
    list<string(32)> mString;

    [tag="oenu"]
    list<OutOfClassEnum> mOutOfClassEnum;

    enum InClassEnum
    {
       IN_OF_CLASS_ENUM_VAL_1 = 1,
       IN_OF_CLASS_ENUM_VAL_2 = 2,
       IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="ienu"]
    list<InClassEnum> mInClassEnum;    
};

[trackChanges=true]
class AllListsComplexClassSkipList
{
    [tag="unio"]
    list<AllPrimitivesUnion> mUnion;

    [tag="bitf"]
    list<ABitField> mBitField;

    [tag="blob"]
    list<blob> mBlob;

    [tag="objt"]
    list<ObjectType> mObjectType;

    [tag="obji"]
    list<ObjectId> mObjectId;
       
    [tag="time"]
    list<TimeValue> mTime;

    [tag="var"]
    list<variable> mVariable;
   
    [tag="lisp"]
    BoolListList mListBool;
    
    [tag="lisc"]
    ClassListList mListClass;
    
    [tag="mip"]
    IntBoolMapList mMapIntBool;

    [tag="msp"]
    StringBoolMapList mMapStringBool;

    [tag="mic"]
    IntClassMapList mMapIntClass;

    [tag="msc"]
    StringClassMapList mMapStringClass;

};

[trackChanges=true]
class AllMapsPrimitivesClassSkipMap
{   
    [tag="ib"]
    map<MapIntKey, bool> mIntBool;

    [tag="sb"]
    map<MapStringKey, bool> mStringBool;

    [tag="eb"]
    map<MapEnumKey, bool> mEnumBool;

    [tag="bb"]
    map<MapBlobKey, bool> mBlobBool;

    [tag="iui8"]
    map<MapIntKey, uint8_t> mIntUInt8;
    
    [tag="sui8"]
    map<MapStringKey, uint8_t> mStringUInt8;  

    [tag="eui8"]
    map<MapEnumKey, uint8_t> mEnumUInt8;
    
    [tag="bui8"]
    map<MapBlobKey, uint8_t> mBlobUInt8; 

    [tag="iui6"]
    map<MapIntKey, uint16_t> mIntUInt16;
    
    [tag="sui6"]
    map<MapStringKey, uint16_t> mStringUInt16;    

    [tag="eui6"]
    map<MapEnumKey, uint16_t> mEnumUInt16;
    
    [tag="bui6"]
    map<MapBlobKey, uint16_t> mBlobUInt16;   

    [tag="iui3"]
    map<MapIntKey, uint32_t> mIntUInt32;
    
    [tag="sui3"]
    map<MapStringKey, uint32_t> mStringUInt32;    

    [tag="eui3"]
    map<MapEnumKey, uint32_t> mEnumUInt32;
    
    [tag="bui3"]
    map<MapBlobKey, uint32_t> mBlobUInt32;   

    [tag="iui4"]
    map<MapIntKey, uint64_t> mIntUInt64;
    
    [tag="sui4"]
    map<MapStringKey, uint64_t> mStringUInt64;    

    [tag="eui4"]
    map<MapEnumKey, uint64_t> mEnumUInt64;
    
    [tag="bui4"]
    map<MapBlobKey, uint64_t> mBlobUInt64; 

    [tag="iii8"]
    map<MapIntKey, int8_t> mIntInt8;
    
    [tag="sii8"]
    map<MapStringKey, int8_t> mStringInt8;    

    [tag="eii8"]
    map<MapEnumKey, int8_t> mEnumInt8;
    
    [tag="bii8"]
    map<MapBlobKey, int8_t> mBlobInt8;    

    [tag="eii6"]
    map<MapEnumKey, int16_t> mEnumInt16;
    
    [tag="bii6"]
    map<MapBlobKey, int16_t> mBlobInt16;  

    [tag="iii3"]
    map<MapIntKey, int32_t> mIntInt32;
    
    [tag="sii3"]
    map<MapStringKey, int32_t> mStringInt32;    

    [tag="eii3"]
    map<MapEnumKey, int32_t> mEnumInt32;
    
    [tag="bii3"]
    map<MapStringKey, int32_t> mBlobInt32; 

    [tag="iii4"]
    map<MapIntKey, int64_t> mIntInt64;
    
    [tag="sii4"]
    map<MapStringKey, int64_t> mStringInt64;    

    [tag="eii4"]
    map<MapEnumKey, int64_t> mEnumInt64;
    
    [tag="bii4"]
    map<MapStringKey, int64_t> mBlobInt64;  

    [tag="if"]
    map<MapIntKey, float> mIntFloat;

    [tag="sf"]
    map<MapStringKey, float> mStringFloat;

    [tag="ef"]
    map<MapEnumKey, float> mEnumFloat;

    [tag="bf"]
    map<MapStringKey, float> mBlobFloat;

    [tag="is"]
    map<MapIntKey, string(32)> mIntString;

    [tag="ss"]
    map<MapStringKey, string(32)> mStringString;
    
    [tag="es"]
    map<MapEnumKey, string(32)> mEnumString;

    [tag="bs"]
    map<MapStringKey, string(32)> mBlobString;
    
    [tag="ioen"]
    map<MapIntKey, OutOfClassEnum> mIntOutOfClassEnum;

    [tag="soen"]
    map<MapStringKey, OutOfClassEnum> mStringOutOfClassEnum;

    [tag="eoen"]
    map<MapEnumKey, OutOfClassEnum> mEnumOutOfClassEnum;

    [tag="boen"]
    map<MapStringKey, OutOfClassEnum> mBlobOutOfClassEnum;
    
    enum InClassEnum
    {
       IN_OF_CLASS_ENUM_VAL_1 = 1,
       IN_OF_CLASS_ENUM_VAL_2 = 2,
       IN_OF_CLASS_ENUM_VAL_3 = 3
    };

    [tag="iien"]
    map<MapIntKey, InClassEnum> mIntInClassEnum;

    [tag="sien"]
    map<MapStringKey, InClassEnum> mStringInClassEnum;
    
    [tag="eien"]
    map<MapEnumKey, InClassEnum> mEnumInClassEnum;

    [tag="bien"]
    map<MapStringKey, InClassEnum> mBlobInClassEnum;
};

[trackChanges=true]
class AllMapsComplexClassSkipMap
{
    [tag="icls"]
    map<MapIntKey, AllPrimitivesClass> mIntClass;

    [tag="scls"]
    map<MapStringKey, AllPrimitivesClass> mStringClass;

    [tag="iuni"]
    map<MapIntKey, AllPrimitivesUnion> mIntUnion;

    [tag="sbit"]
    map<MapStringKey, ABitField> mStringBitField;

    [tag="iblb"]
    map<MapIntKey, blob> mIntBlob;

    [tag="sblb"]
    map<MapStringKey, blob> mStringBlob;

    [tag="iobt"]
    map<MapIntKey, ObjectType> mIntObjectType;

    [tag="sobt"]
    map<MapStringKey, ObjectType> mStringObjectType;

    [tag="ivar"]
    map<MapIntKey, variable> mIntVariable;

    [tag="sbar"]
    map<MapStringKey, variable> mStringVariable;
    
    [tag="imlb"]
    IntBoolListMap mIntBoolListMap;

    [tag="smlb"]
    StringBoolListMap mStringBoolListMap;

    [tag="imlc"]
    IntClassListMap mIntClassListMap;

    [tag="immc"]
    IntIntClassMapMap mIntIntClassMapMap;

    [tag="smmc"]
    StringIntClassMapMap mStringIntClassMapMap;

};

typedef list<list<int32_t>> ListOfListOfInt32;
[trackChanges=true]
class ListOfList
{
    [tag="llst", description="List of lists of int32_t's"]
    ListOfListOfInt32 mListOfLists;
};

[trackChanges=true]
union StringOrInt32
{
    [tag="int"] uint32_t mInt;
    [tag="str"] string(32) mString;
};

typedef list<list<StringOrInt32>> ListOfListOfUnions;
[trackChanges=true]
class ListOfUnionList
{
    [tag="llst", description="List of lists of unions"]
    ListOfListOfUnions mListOfLists;
};

typedef list<map<string(32),int32_t, ignorecase>> ListOfMapOfStringToInt32;
[trackChanges=true]
class ListOfMap
{
    [tag="lmap", description="List of maps of int32_t's", nameoverride="list-of-maps"]
    ListOfMapOfStringToInt32 mListOfMaps;
};

typedef map<string(32),StringOrInt32> MapOfUnionTest;
[trackChanges=true]
class MapofUnion
{
    [tag="umap", description="map of unions", nameoverride="map-of-union-test"]
    MapOfUnionTest mMapOfUnionTest;
};

typedef map<string(32),map<string(32),int32_t, ignorecase>, ignorecase> MapOfStringToMapOfStringToInt32;
[trackChanges=true]
class MapOfMap
{
    [tag="mmap", description="Map of maps of int32_t's"]
    MapOfStringToMapOfStringToInt32 mMapOfMaps;
};

typedef map<string(32),list<int32_t>, ignorecase> MapOfStringToListOfInt32;
[trackChanges=true]
class MapOfList
{
    [tag="mlst", description="Map of lists of int32_t's"]
    MapOfStringToListOfInt32 mMapOfLists;
};

[trackChanges=true]
class SimpleUnion
{
    [tag="unin", description="string or int32 union"]
    StringOrInt32 mStringOrInt32Union;
};

[trackChanges=true]
class AllMapsComplexClassTest
{
    [tag="emlc"]
    EnumClassListMap mEnumClassListMap;
};

[trackChanges=true]
class ListOfUnion
{
    [tag="luni", description="List of Unions"]
    list<StringOrInt32> mListofUnion;
};

[trackChanges=true]
class simpleVaribleTdf
{
    [tag="vtdf", description="variable tdf"]
    variable mVariableTdf;
};

[trackChanges=true]
class SimpleMap
{
    [tag="map", description="string integer map"]
    map<string(128),int32_t, ignorecase> mStringIntMap;
};

[trackChanges=true]
class simpleVariableMap
{
    [tag="vmap", description="Map of variable TDFs."]
    map<string(32), variable> mVariableMap;    
};

} // Test

} // TDF

} // EA

