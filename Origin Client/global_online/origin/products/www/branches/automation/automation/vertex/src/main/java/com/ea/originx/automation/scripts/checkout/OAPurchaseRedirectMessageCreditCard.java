package com.ea.originx.automation.scripts.checkout;import com.ea.originx.automation.lib.macroaction.MacroLogin;import com.ea.originx.automation.lib.pageobjects.dialog.CheckoutRedirectMessageThreeDSDialog;import com.ea.originx.automation.lib.pageobjects.dialog.CreditCardAdditionalAuthorizationDialog;import com.ea.originx.automation.lib.pageobjects.store.PaymentInformationPage;import com.ea.originx.automation.lib.pageobjects.store.ReviewOrderPage;import com.ea.originx.automation.lib.resources.OriginClientData;import com.ea.originx.automation.lib.resources.games.EntitlementId;import com.ea.originx.automation.lib.resources.games.EntitlementInfoHelper;import com.ea.originx.automation.scripts.EAXVxTestTemplate;import com.ea.vx.originclient.account.AccountManager;import com.ea.vx.originclient.account.UserAccount;import com.ea.vx.originclient.client.OriginClient;import com.ea.vx.originclient.client.OriginClientFactory;import com.ea.vx.originclient.resources.games.EntitlementInfo;import com.ea.vx.originclient.utils.Waits;import org.openqa.selenium.WebDriver;import org.testng.ITestContext;import org.testng.annotations.Test;/** * * Tests checkout redirect message for Credit Card payment flow * * NEEDS UPDATE TO GDP * * @author SeanLi * */public class OAPurchaseRedirectMessageCreditCard extends EAXVxTestTemplate {    //TODO add test rail case id if exists    @Test(groups = {"checkout", "browser_only"})    public void testPurchaseRedirectMessageCreditCard(ITestContext context) throws Exception {        final OriginClient client = OriginClientFactory.create(context);        final UserAccount userAccount = AccountManager.getInstance().createNewThrowAwayAccount();        EntitlementInfo game = EntitlementInfoHelper.getEntitlementInfoForId(EntitlementId.BF4_STANDARD);        logFlowPoint("Launch Origin and login as a newly registered user"); // 1        logFlowPoint("Navigate to an entitlement's PDP page, click 'Buy' CTA and verify checkout flow started"); // 2        logFlowPoint("Enter a credit card information"); // 3        logFlowPoint("Click on 'Proceed to Review Order' button"); // 4        logFlowPoint("Click on 'Pay Now' CTA and verify that an 'Additional Authorization' window opened in a new window/tab"); // 5        logFlowPoint("Navigate back to the main window and verify a dialog appears titled as 'Additional Authorization Required'"); // 6        // 1        WebDriver driver = startClientObject(context, client);        if (MacroLogin.startLogin(driver, userAccount)) {            logPass("Verified a newly registered user '" + userAccount.getUsername() + "' logged in");        } else {            logFailExit("Failed to logged in as a newly registered user");        }        // 2      //  MacroPDP.loadPdpPage(driver, game);        //  new PDPHeroActionCTA(driver).clickBuyButton();        PaymentInformationPage paymentPage = new PaymentInformationPage(driver);        paymentPage.waitForPaymentInfoPageToLoad();        if (paymentPage.verifyPaymentInformationReached()) {            logPass("Successfully navigated to " + game.getName() + "'s PDP and triggered the checkout flow");        } else {            logFailExit("Failed to navigate to to an entitlement's PDP and trigger the checkout flow");        }        // 3        // this credit card info will always trigger additional authorization pop up        paymentPage.enterCreditCardDetails(OriginClientData.THREEDS_CREDIT_CARD_NUMBER,                OriginClientData.THREEDS_CREDIT_CARD_EXPIRATION_MONTH,                OriginClientData.THREEDS_CREDIT_CARD_EXPIRATION_YEAR,                OriginClientData.CSV_CODE,                OriginClientData.THREEDS_COUNTRY,                OriginClientData.THREEDS_POSTAL_CODE,                userAccount.getFirstName(),                userAccount.getLastName());        if (Waits.pollingWait(paymentPage::isProceedToReviewOrderButtonEnabled)) {            logPass("Credit Card information entered successfully");        } else {            logFailExit("Credit Card information not entered properly");        }        // 4        paymentPage.clickOnProceedToReviewOrderButton();        ReviewOrderPage reviewOrderPage = new ReviewOrderPage(driver);        reviewOrderPage.waitForPageToLoad();        if (reviewOrderPage.verifyReviewOrderPageReached()) {            logPass("Verified a 'Review Order' page is reached");        } else {            logFailExit("'Review Order' page is not reached");        }        //5        reviewOrderPage.clickPayNow();        CreditCardAdditionalAuthorizationDialog dialog = new CreditCardAdditionalAuthorizationDialog(driver);        String mainPage = driver.getWindowHandle();        dialog.focusDialog();        String creditCardAdditionalAuthPage = driver.getWindowHandle();        if (mainPage != creditCardAdditionalAuthPage) {            logPass("Credit card 'Additional Authorization' window/tab is opened");        } else {            logFailExit("Credit card 'Additional Authorization' window/tab is not opened");        }        //6        driver.switchTo().window(mainPage);        CheckoutRedirectMessageThreeDSDialog redirectMessageDialog = new CheckoutRedirectMessageThreeDSDialog(driver);        if (redirectMessageDialog.verifyRedirectMessageType()) {            logPass("A dialog appears and titled 'Additional Authorization Required'");        } else {            logFail("A redirect message dialog that titled 'Additional Authorization Required' does not appear");        }        client.stop();        softAssertAll();    }}