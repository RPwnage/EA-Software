package com.ea.originx.automation.scripts.pdp;

import com.ea.originx.automation.lib.macroaction.*;
import com.ea.vx.annotations.TestRail;
import com.ea.vx.originclient.account.AccountManager;
import com.ea.vx.originclient.account.UserAccount;
import com.ea.vx.originclient.client.OriginClient;
import com.ea.vx.originclient.client.OriginClientFactory;
import com.ea.originx.automation.lib.pageobjects.store.PDPHeroActionDescriptors;
import com.ea.originx.automation.lib.pageobjects.store.PDPSections;
import com.ea.originx.automation.lib.resources.games.EntitlementId;
import com.ea.originx.automation.lib.resources.games.EntitlementInfoHelper;
import com.ea.vx.originclient.resources.games.EntitlementInfo;
import com.ea.originx.automation.scripts.EAXVxTestTemplate;
import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.annotations.Test;

/**
 * Test the game downgrade prevention flow
 *
 * @author mkalaivanan
 * @author jdickens
 */

public class OADowngradePrevention extends EAXVxTestTemplate {

    @TestRail(caseId = 12298)
    @Test(groups = {"pdp", "full_regression", "int_only"})
    public void testDowngradePrevention(ITestContext context) throws Exception {

        final OriginClient client = OriginClientFactory.create(context);
        EntitlementInfo premiumEntitlement = EntitlementInfoHelper.getEntitlementInfoForId(EntitlementId.BF4_PREMIUM);
        EntitlementInfo standardEntitlement = EntitlementInfoHelper.getEntitlementInfoForId(EntitlementId.BF4_STANDARD);
        UserAccount userAccount = AccountManager.getEntitledUserAccount(premiumEntitlement);

        logFlowPoint("Launch Origin and login with account with 'Premium' entitlement"); // 1
        logFlowPoint("Verify that the 'Buy $XX.XX' CTA doesn’t appear."); // 2
        logFlowPoint("Verify that the 'Owned' product status messaging appears"); // 3

        // 1
        WebDriver driver = startClientObject(context, client);
        if (MacroLogin.startLogin(driver, userAccount)) {
            logPass("Successfully logged in as user with 'Premium' entitlement");
        } else {
            logFailExit("Could not log in as user with 'Premium' entitlement");
        }

        // 2
        MacroPDP.loadPdpPage(driver, standardEntitlement);
        PDPSections pdpSections = new PDPSections(driver);
        boolean isStandardCTAButtonVisible = pdpSections.verifyEditionPurchasable("Standard Edition");
        boolean isDeluxeCTAButtonVisible = pdpSections.verifyEditionPurchasable("Digital Deluxe Edition");
        if (!isStandardCTAButtonVisible && !isDeluxeCTAButtonVisible) {
            logPass("The 'Buy $XX.XX' CTA doesn’t appear");
        } else {
            logFailExit("The 'Buy $XX.XX' CTA appears");
        }

        // 3
        PDPHeroActionDescriptors pdpHeroActionDescriptors = new PDPHeroActionDescriptors(driver);
        pdpHeroActionDescriptors.waitForPdpHeroToLoad();
        boolean isProductOwned = pdpHeroActionDescriptors.verifyOwnedProductStatusMessage();
        if (isProductOwned) {
            logPass("Verified that the 'Owned' product status message appears");
        } else {
            logFailExit("Failed to verify that the 'Owned' product status message appears");
        }

        softAssertAll();
    }

}