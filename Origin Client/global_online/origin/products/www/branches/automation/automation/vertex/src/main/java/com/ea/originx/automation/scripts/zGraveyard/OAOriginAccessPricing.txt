package com.ea.originx.automation.scripts.originaccess;

import com.ea.originx.automation.lib.helpers.StringHelper;
import com.ea.originx.automation.lib.macroaction.MacroLogin;
import com.ea.originx.automation.lib.macroaction.MacroOriginAccess;
import com.ea.originx.automation.lib.macroaction.MacroPurchase;
import com.ea.originx.automation.lib.pageobjects.common.NavigationSidebar;
import com.ea.originx.automation.lib.pageobjects.dialog.SelectOriginAccessPlanDialog;
import com.ea.originx.automation.lib.pageobjects.originaccess.OriginAccessPage;
import com.ea.originx.automation.lib.pageobjects.store.ReviewOrderPage;
import com.ea.originx.automation.lib.resources.OriginClientData;
import com.ea.originx.automation.scripts.EAXVxTestTemplate;
import com.ea.vx.annotations.TestRail;
import com.ea.vx.originclient.account.AccountManager;
import com.ea.vx.originclient.account.UserAccount;
import com.ea.vx.originclient.client.OriginClient;
import com.ea.vx.originclient.client.OriginClientFactory;
import com.ea.vx.originclient.resources.OSInfo;
import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.annotations.Test;

/**
 * Tests verifies the price displayed in 'Origin Access' landing page matches
 * the price in checkout
 * 
 * @author cbalea
 */
public class OAOriginAccessPricing extends EAXVxTestTemplate {

    @TestRail(caseId = 11049)
    @Test(groups = {"originaccess", "full_regression"})
    public void testOriginAccessPricing(ITestContext context) throws Exception {

        final OriginClient client = OriginClientFactory.create(context);
        final UserAccount userAccount = AccountManager.getRandomAccount();

        logFlowPoint("Log into Origin"); // 1
        logFlowPoint("Navigate to 'Origin Access Landing Page'"); // 2
        logFlowPoint("Verify dynamic pricing string loads a price below the CTA for the subscription offers available for that locale"); // 3
        logFlowPoint("Proceed to checkout and verify price is the same as on 'Origin Access Landing Page'"); // 4
        logFlowPoint("Close checkout, change country locale and verify price below CTA"); // 5
        logFlowPoint("Proceed to checkout and verify price is the same as on 'Origin Access Landing Page'"); // 6

        // 1
        WebDriver driver = startClientObject(context, client);
        logPassFail(MacroLogin.startLogin(driver, userAccount), true);

        // 2
        NavigationSidebar navigationSidebar = new NavigationSidebar(driver);
        navigationSidebar.gotoOriginAccessPage();
        OriginAccessPage originAccessPage = new OriginAccessPage(driver);
        logPassFail(originAccessPage.verifyPageReached(), true);

        // 3
        logPassFail(originAccessPage.verifyOriginAccessHeaderPrice(OriginClientData.ORIGIN_ACCESS_YEARLY_PLAN_PRICE), true);

        // 4
        MacroOriginAccess.openOriginAccessPlanSelectionDialog(driver);
        SelectOriginAccessPlanDialog selectOriginAccessPlanDialog = new SelectOriginAccessPlanDialog(driver);
        selectOriginAccessPlanDialog.selectPlan(SelectOriginAccessPlanDialog.ORIGIN_ACCESS_PLAN.YEARLY_PLAN);
        selectOriginAccessPlanDialog.clickNext();
        MacroPurchase.handlePaymentInfoPage(driver);
        ReviewOrderPage reviewOrderPage = new ReviewOrderPage(driver);
        boolean isPriceCorrect = StringHelper.containsIgnoreCase(reviewOrderPage.getBaseAmountAsString(), OriginClientData.ORIGIN_ACCESS_YEARLY_PLAN_PRICE);
        logPassFail(isPriceCorrect, true);

        // 5
        reviewOrderPage.clickCloseButton();
        driver.get(OSInfo.getXURL("SANDBOX_ADDRESS", "/fra/en-us", ""));
        navigationSidebar.gotoOriginAccessPage();
        logPassFail(originAccessPage.verifyOriginAccessHeaderPrice(OriginClientData.ORIGIN_ACCESS_YEARLY_PLAN_EU_PRICE), true);

        // 6
        MacroOriginAccess.openOriginAccessPlanSelectionDialog(driver);
        selectOriginAccessPlanDialog.selectPlan(SelectOriginAccessPlanDialog.ORIGIN_ACCESS_PLAN.YEARLY_PLAN);
        selectOriginAccessPlanDialog.clickNext();
        MacroPurchase.handlePaymentInfoPage(driver);
        boolean isEUPriceCorrect = StringHelper.containsIgnoreCase(new ReviewOrderPage(driver).getBaseAmountAsString(), OriginClientData.ORIGIN_ACCESS_YEARLY_PLAN_EU_PRICE);
        logPassFail(isEUPriceCorrect, true);

        softAssertAll();
    }
}
