package com.ea.originx.automation.lib.pageobjects.store;

import com.ea.originx.automation.lib.pageobjects.template.EAXVxSiteTemplate;
import java.lang.invoke.MethodHandles;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

/**
 * Page object that represents the information sections on the product display page.
 * These sections appear below the PDP Hero.
 * 
 * @author lscholte
 */
public class PDPSections extends EAXVxSiteTemplate {
    
    private static final Logger _log = LogManager.getLogger(MethodHandles.lookup().lookupClass());
    
    // Locators related to the 'Compare Editions' section
    protected static final String COMPARE_EDITIONS_SECTION_CSS = "origin-store-pdp-comparison-table-wrapper .origin-store-pdp-section-wrapper";
    protected static final By COMPARE_EDITIONS_SECTION_LOCATOR = By.cssSelector(COMPARE_EDITIONS_SECTION_CSS);
    protected static final String COMPARE_EDITIONS_TABLE_CSS = COMPARE_EDITIONS_SECTION_CSS + " .origin-store-pdp-comparison-table";
    protected static final By COMPARE_EDITIONS_TABLE_LOCATOR = By.cssSelector(COMPARE_EDITIONS_TABLE_CSS);
    protected static final String COMPARE_EDITIONS_TABLE_FOOTER_CSS = COMPARE_EDITIONS_TABLE_CSS + " tfoot";
    protected static final By COMPARE_EDITIONS_TABLE_FOOTER_LOCATOR = By.cssSelector(COMPARE_EDITIONS_TABLE_FOOTER_CSS);
    protected static final String COMPARE_EDITIONS_TABLE_FOOTER_HEADERS_CSS = COMPARE_EDITIONS_TABLE_FOOTER_CSS + " tr:nth-of-type(1) .origin-store-pdp-comparison-table-footer-header";
    protected static final By COMPARE_EDITIONS_TABLE_FOOTER_HEADERS_LOCATOR = By.cssSelector(COMPARE_EDITIONS_TABLE_FOOTER_HEADERS_CSS);
    protected static final String COMPARE_EDITIONS_TABLE_FOOTER_VALUES_CSS = COMPARE_EDITIONS_TABLE_FOOTER_CSS + " tr:nth-of-type(2) .origin-store-pdp-comparison-table-cta";
    protected static final By COMPARE_EDITIONS_TABLE_FOOTER_VALUES_LOCATOR = By.cssSelector(COMPARE_EDITIONS_TABLE_FOOTER_VALUES_CSS);
    protected static final By EDITION_OWNED_ICON_LOCATOR = By.cssSelector(".origin-store-pdp-comparison-info i");
    protected static final By EDITION_OWNED_TEXT_LOCATOR = By.cssSelector(".origin-store-pdp-comparison-info-text");
    protected static final By COMPARISON_TABLE_BUY_BUTTON_LOCATOR = By.cssSelector("origin-cta-purchase .otkbtn");
    
    /**
     * Constructor
     *
     * @param driver Selenium WebDriver
     */
    public PDPSections(WebDriver driver) {
        super(driver);
    }
    
    /**
     * Scroll to the 'Compare Editions' section.
     */
    public void scrollToCompareEditionsSection() {
        scrollToElement(waitForElementPresent(COMPARE_EDITIONS_SECTION_LOCATOR));
    }
    
    /**
     * Verify that the 'Edition Comparison' table is visible.
     * 
     * @return true if the 'Edition Comparison' table is visible,
     * false otherwise
     */
    public boolean verifyEditionComparisonTableVisible() {
        return waitIsElementVisible(COMPARE_EDITIONS_TABLE_LOCATOR);
    }
    
    /**
     * Verify that the edition comparison table indicates that the specified
     * edition is currently owned by the user.
     * 
     * @param edition The edition that is expected to be shown as owned
     * @return true if the specified edition is displayed as owned by the user,
     * false otherwise
     */
    public boolean verifyEditionOwned(String edition) {
        scrollToElement(waitForElementPresent(COMPARE_EDITIONS_TABLE_FOOTER_LOCATOR));
        
        int editionColumn = getEditionColumn(edition);
        if (editionColumn < 0) {
            return false;
        }
        
        //Look at the table cell that contains the info for the edition we want,
        //and see if it has a visible indicator that the edition is already
        //owned by the user
        List<WebElement> editionValues = waitForAllElementsVisible(COMPARE_EDITIONS_TABLE_FOOTER_VALUES_LOCATOR);
        try {
            waitForChildElementVisible(editionValues.get(editionColumn), EDITION_OWNED_ICON_LOCATOR);
            waitForChildElementVisible(editionValues.get(editionColumn), EDITION_OWNED_TEXT_LOCATOR);
        } catch (TimeoutException e) {
            return false;
        }
        return true;
    }
    
    /**
     * Verify that the edition comparison table indicates has a 'Buy' button
     * for a particular edition.
     * 
     * @param edition The edition that is expected to be purchasable
     * @return true if the specified edition has a 'Buy' button, false otherwise
     */
    public boolean verifyEditionPurchasable(String edition) {
        scrollToElement(waitForElementPresent(COMPARE_EDITIONS_TABLE_FOOTER_LOCATOR));

        int editionColumn = getEditionColumn(edition);
        if (editionColumn < 0) {
            return false;
        }
        
        //Look at the table cell that contains the info for the edition we want,
        //and see if it has a buy button for that edition
        List<WebElement> editionValues = waitForAllElementsVisible(COMPARE_EDITIONS_TABLE_FOOTER_VALUES_LOCATOR);
        try {
            String buttonText = waitForChildElementVisible(editionValues.get(editionColumn), COMPARISON_TABLE_BUY_BUTTON_LOCATOR).getText();
            return buttonText.contains("Buy");
        } catch (TimeoutException e) {
            return false;
        }
    }
    
    /**
     * Iterate through the table headers to find the column of the edition we 
     * are looking for.
     * 
     * @param edition The edition to look for in the comparison table
     * @return The column in the comparison table where this edition is located
     * or -1 if the edition was not found. Column indexing starts from 0.
     */
    private int getEditionColumn(String edition) {
        List<WebElement> editionNames = waitForAllElementsVisible(COMPARE_EDITIONS_TABLE_FOOTER_HEADERS_LOCATOR);
        for (int i = 0; i < editionNames.size(); ++i) {
            if (editionNames.get(i).getText().equals(edition)) {
                return i;
            }
        }
        _log.warn(String.format("The edition '%s' was not found in the edition comparison table", edition));
        return -1;
    }
    
    /**
     * Click comparison table 'Buy' button
     * for a particular edition.
     * 
     * @param edition The edition that is expected to be purchasable
     */
    public void clickPurchasableEditions(String edition){
        scrollToElement(waitForElementPresent(COMPARE_EDITIONS_TABLE_FOOTER_LOCATOR));
        
        //scroll up a little to be sure the button is visible and clickable every time
        //it's usable especially for web version
        scrollByVerticalOffset(-400);
        
        int editionColumn = getEditionColumn(edition);
        
        //Look at the table cell that contains the info for the edition we want,
        //and click the buy button for that edition
        List<WebElement> editionValues = waitForAllElementsVisible(COMPARE_EDITIONS_TABLE_FOOTER_VALUES_LOCATOR);
        waitForChildElementVisible(editionValues.get(editionColumn), COMPARISON_TABLE_BUY_BUTTON_LOCATOR).click();
    }
}