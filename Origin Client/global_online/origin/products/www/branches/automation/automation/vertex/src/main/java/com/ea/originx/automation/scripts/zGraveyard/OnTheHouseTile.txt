package com.ea.originx.automation.lib.pageobjects.store;

import com.ea.originx.automation.lib.pageobjects.template.EAXVxSiteTemplate;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

/**
 * Page object that represents a 'On the House' page tile.
 *
 * @author nvarthakavi
 */
public class OnTheHouseTile extends EAXVxSiteTemplate{

    WebElement rootElement;

    protected static final By GET_IT_NOW_BUTTON_LOCATOR = By.cssSelector("origin-cta-directacquisition .origin-cta-primary .otkbtn-primary-text");
    protected static final By PRICE_LOCATOR = By.cssSelector(".otkprice-free");
    protected static final By TILE_OFFER_ID_LOCATOR = By.cssSelector(".origin-store-program-offer");
    protected static final By TITLE_LOCATOR = By.cssSelector(".otktitle-2 .origin-store-program-offer-title");

    /**
     * Constructor
     *
     * @param driver      Selenium WebDriver
     * @param rootElement Root element of this 'On the House' tile
     */
    public OnTheHouseTile(WebDriver driver, WebElement rootElement){
        super(driver);
        this.rootElement = rootElement;
    }

    /**
     * Get the offer ID of the current 'On the House' tile.
     *
     * @return Offer ID of the current 'On the House' tile
     */
    public String getOfferId() {
        return rootElement.findElement(TILE_OFFER_ID_LOCATOR).getAttribute("offer-id");
    }

    /**
     * Get the entitlement name of the current 'On the House' tile.
     *
     * @return Entitlement/Display name of the current 'On the House' tile
     */
    public String getTrialEntitlementName() {
        return rootElement.findElement(TILE_OFFER_ID_LOCATOR).getAttribute("display-name");
    }

    /**
     * Verify the offer ID of the current 'On the House' tile matches the given offer ID.
     *
     * @param offerId Expected offer ID
     * @return true if this 'On the House' tile has matching offer ID, false otherwise
     */
    public boolean verifyOfferId(String offerId) {
        return getOfferId().equalsIgnoreCase(offerId);
    }

    /**
     * Get the child element, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'On the House' tile
     * @return child WebElement if found, or throw NoSuchElementException
     */
    private WebElement getChildElement(By childLocator) {
        return rootElement.findElement(childLocator);
    }

    /**
     * Get the child element's text, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'On the House' tile
     * @return Child WebElement text if found, or null if not found
     */
    private String getChildElementText(By childLocator) {
        try {
            return rootElement.findElement(childLocator).getAttribute("textContent");
        } catch (NoSuchElementException e) {
            return null;
        }
    }

    /**
     * Click child WebElement as specified by the child locator.
     *
     * @param childLocator Child locator within rootElement of this 'On the House' tile
     */
    private void clickChildElement(By childLocator) {
        waitForElementClickable(getChildElement(childLocator)).click();
    }

    /**
     * Verify the child element is visible, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'On the House' tile
     * @return true if childElement is visible, false otherwise
     */
    private boolean verifyChildElementVisible(By childLocator) {
        return waitIsElementVisible(getChildElement(childLocator));
    }

    /**
     * Scroll to child WebElement and hover on it.
     *
     * @param childLocator Child locator within rootElement of this 'On the House' tile
     */
    private void scrollToAndHoverOnChildElement(By childLocator) {
        WebElement childElement = waitForElementVisible(getChildElement(childLocator));
        scrollToElement(childElement);
        sleep(1000);
        hoverOnElement(childElement);
        sleep(1000);
    }

    /**
     * Verify the 'Get It Now' CTA is visible on the tile.
     *
     * @return true if visible, false otherwise
     */
    public boolean verifyGetItNowCTAVisible() {
        return waitIsElementVisible(GET_IT_NOW_BUTTON_LOCATOR);
    }

    /**
     * Click on the 'Get It Now' button in the 'On the House' tile.
     */
    public void clickGetItNowButton() {
        clickChildElement(GET_IT_NOW_BUTTON_LOCATOR);
    }

    /**
     * Hover on the 'Get It Now' button in the 'On the House' tile.
     */
    public void hoverOnGetItNowButton() { scrollToAndHoverOnChildElement(GET_IT_NOW_BUTTON_LOCATOR);}

    /**
     * Gets the price of the 'On the House' tile.
     *
     * @return The price if it exists
     */
    public String getPrice() {
        return getChildElementText(PRICE_LOCATOR);
    }

    /**
     * Gets the title of the tile.
     *
     * @return The title of the game in the tile
     */
    public String getTitle() {
        return getChildElementText(TITLE_LOCATOR);
    }

    /**
     * Clicks the title of the tile.
     */
    public void clickTitle() {
        WebElement titleLocator = waitForElementVisible(TITLE_LOCATOR);
        scrollElementToCentre(titleLocator);
        clickChildElement(TITLE_LOCATOR);
    }
}