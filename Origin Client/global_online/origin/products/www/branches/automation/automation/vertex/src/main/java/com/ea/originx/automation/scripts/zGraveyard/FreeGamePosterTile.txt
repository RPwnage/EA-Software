package com.ea.originx.automation.lib.pageobjects.store;

import com.ea.originx.automation.lib.pageobjects.template.EAXVxSiteTemplate;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

/**
 * Represents a poster on the 'Free Games' page. For example, the 'On the
 * House' box and the game tile inside it.
 *
 * @author nvarthakavi
 */
public class FreeGamePosterTile extends EAXVxSiteTemplate {

    final By FREE_PRICE_LOCATOR = By.cssSelector(".origin-storeprice .origin-storeprice-free");
    final By PRICE_LOCATOR = By.cssSelector(".origin-storeprice");
    final By OWNED_LOCATOR = By.cssSelector(".origin-storeprice .origin-storeprice-owned");
    final By PRIMARY_CTA_LOCATOR = By.cssSelector("origin-cta-directacquisition .origin-cta-primary .otkbtn-primary-text"); //'Add to Game Library'/'Get It Now'/'Play Now'/'Learn More' CTA
    final By TITLE_LOCATOR = By.cssSelector("h2 .otktitle-2");
    final By DESCRIPTION_LOCATOR = By.cssSelector(".otktitle-4.origin-store-freegames-offermodule-offer-description > span");
    final By LEARN_MORE_LOCATOR = By.cssSelector("origin-cta-pdp > div > button");

    final WebElement rootElement;

    /**
     * Constructor for 'FreeGamePosterTile'. Private so that the only way to build
     * one is to request it through the 'FreeGamesPage'.
     *
     * @param driver Selenium WebDriver
     * @param element The parent element of the poster
     */
    public FreeGamePosterTile(WebDriver driver, WebElement element) {
        super(driver);
        this.rootElement = element;
    }

    /**
     * Get the child element, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'Free Games Poster Tile' tile
     * @return Child WebElement if found, or throw NoSuchElementException
     */
    private WebElement getChildElement(By childLocator) {
        return rootElement.findElement(childLocator);
    }

    /**
     * Get the child element's text, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'Free Games Poster Tile' tile
     * @return Child WebElement text if found, or null if not found
     */
    private String getChildElementText(By childLocator) {
        try {
            return rootElement.findElement(childLocator).getAttribute("textContent");
        } catch (NoSuchElementException e) {
            return null;
        }
    }

    /**
     * Click child WebElement as specified by the child locator.
     *
     * @param childLocator Child locator within rootElement of this 'Free Games Poster Tile' tile
     */
    private void clickChildElement(By childLocator) {
        waitForElementClickable(getChildElement(childLocator)).click();
    }

    /**
     * Scroll to child WebElement and hover on it.
     *
     * @param childLocator Child locator within rootElement of this 'Free Games Poster Tile' tile
     */
    private void scrollToAndHoverOnChildElement(By childLocator) {
        WebElement childElement = waitForElementVisible(getChildElement(childLocator));
        scrollToElement(childElement);
        sleep(500); // To make sure the elements load
        hoverOnElement(childElement);
        sleep(500); // make sure the info bubble load
    }

    /**
     * Verify the child element is visible, given it's locator.
     *
     * @param childLocator Child locator within rootElement of this 'Free Games Poster Tile' tile
     * @return true if childElement is visible, false otherwise
     */
    private boolean verifyChildElementVisible(By childLocator) {
        return waitIsElementVisible(getChildElement(childLocator));
    }

    /**
     * Gets the title of the tile.
     *
     * @return The title of the game in the tile
     */
    public String getTitle() {
        return getChildElementText(TITLE_LOCATOR);
    }


    /**
     * Get the offer ID of the current 'Free Games Poster Tile' tile.
     *
     * @return Offer ID of the current 'Free Games Poster Tile' tile
     */
    public String getOfferId() {
        return getChildElement(PRICE_LOCATOR).getAttribute("offer-id");
    }

    /**
     * Verify price of the tile is 'Free'.
     *
     * @return true if the price is 'Free'
     */
    public boolean verifyPriceIsFree() {
        return verifyChildElementVisible(FREE_PRICE_LOCATOR);
    }

    /**
     * Gets the price of the tile if it exists.
     *
     * @return the price if it exists
     */
    public String getPrice() {
        return getChildElementText(PRICE_LOCATOR);
    }

    /**
     * Check if a game is owned.
     *
     * @return true if the game is owned, false otherwise
     */
    public boolean isOwned() {
        return this.verifyChildElementVisible(OWNED_LOCATOR);
    }

    /**
     * Click the 'Add to Game Library'/'Get It Now'/'Play Now'/'Learn More' button. If you are not logged in, Origin will
     * prompt you to log in, else it immediately entitles you to the game.
     */
    public void clickPrimaryCTA() {
        clickChildElement(PRIMARY_CTA_LOCATOR);
    }

    /**
     * Gets the description of the game.
     *
     * @return The game tile's description
     */
    public String getDescription() {
        return getChildElementText(DESCRIPTION_LOCATOR);
    }

    /**
     * Hover on the 'Add to Game Library'/'Get It Now'/'Play Now'/'Learn More' button in the 'Free Games Poster Tile' tile.
     */
    public void hoverOnPrimaryCTA() {
        scrollToAndHoverOnChildElement(PRIMARY_CTA_LOCATOR);
    }
}
