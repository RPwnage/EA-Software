<?xml version="1.0" encoding="utf-8"?><project default="build" xmlns="schemas/ea/framework3.xsd">

    <property name="Dll" value="${Dll??false}" />

    <optionset name="config.targetoverrides">
        <option name="test-build" value="include" />
        <option name="test-buildall" value="include" />
        <option name="test-run" value="include" />
        <option name="test-runall" value="include" />
    </optionset>

    <package name="EAIO" initializeself="true"/>

    <!-- Options -->
    <!-- To enable options put (e.g.) <globalproperties>EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED=1</globalproperties> -->
    <!-- in your masterconfig file or use -D:EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED=1 on the nant command line.     -->
    <!-- The EAIO.EAIO_XXX values here directly correspond to EAIO config #defines.                              --> 
    <property name="EATECH_WARNINGSASERRORS" value="0" unless="@{PropertyExists('EATECH_WARNINGSASERRORS')}" />
    <property name="EAIO.EAIO_FILEPATH_ENABLED" value="0" unless="@{PropertyExists('EAIO.EAIO_FILEPATH_ENABLED')}" />

    <!--
        EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED
        EAIO.EAIO_INIFILE_ENABLED
        EAIO.EAIO_64_BIT_SIZE_ENABLED
        EAIO.EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING
        EAIO.EAIO_BACKWARDS_COMPATIBILITY
        EAIO.EAIO_USE_CORESTREAM
        EAIO.EAIO_CPP_STREAM_ENABLED
        EAIO.EAIO_APPLE_USE_UNIX_IO
    -->

    <!-- If CoreStream is enabled, declare it as a dependent. We do this because it allows        -->
    <!-- us to import CoreStream's <CoreStream/scripts/initialize.xml declarations. This is       -->
    <!-- useful to us because it means that EAIO users automatically start seeing CoreStream's    -->
    <!-- headers without having to modify their build files. And this is useful because we are    -->
    <!-- introducing the usage of CoreStream in EAIO to users that probably don't have CoreStream -->
    <!-- already in their builds. See <EAIO/scripts/initialize.xml>                               -->
    <dependent name="CoreStream" if="${EAIO.EAIO_USE_CORESTREAM??0} == 1" />


    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->
    <runtime>
        <Library name="EAIO" buildtype="${EAIOBuildType}">
            <dependencies>
                <use>
                    EABase
                    coreallocator
                    <do if="${EAIO.EAIO_USE_CORESTREAM??0} == 1">
                        CoreStream
                    </do>
                </use>
                <auto>
                    EASTL
                    EAStdC
                    EAThread
                    EAAssert
                </auto>
            </dependencies>
            <includedirs>
                ${package.dir}/include
            </includedirs>
            <headerfiles>    
                <includes name="${package.dir}/include/EAIO/**.h" />
            </headerfiles>
            <sourcefiles>
                <includes name="source/*.cpp" />
                <includes name="source/internal/*.cpp" />
                <includes name="source/PS3/GameDataPS3.cpp" if="${config-system} == ps3" />
                <includes name="source/Apple/**.mm" if="${config-system} == iphone || ${config-system} == iphone-sim || ${config-system} == osx" optionset="ObjectiveCPPLibrary" />
                <includes name="source/compat/EAFilePath.cpp" if="${EAIO.EAIO_FILEPATH_ENABLED} == 1" />
            </sourcefiles>
            <bulkbuild enable="true" />
            <java>
                <sourcefiles if="${config-system} == android">
                    <includes name="source/Android/java_source/**.java" />
                </sourcefiles>
            </java>
            <config>
                <defines>
                    UTF_USE_EAASSERT=1
                    <do if="${Dll} and ${config-compiler} == 'vc'">
                        EAIO_API=__declspec(dllexport)
                        EAIO_TEMPLATE_API=__declspec(dllexport)
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_FILEPATH_ENABLED')}">
                        EAIO_FILEPATH_ENABLED=${EAIO.EAIO_FILEPATH_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED')}">
                        EAIO_DEFAULT_ALLOCATOR_ENABLED=${EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_INIFILE_ENABLED')}">
                        EAIO_INIFILE_ENABLED=${EAIO.EAIO_INIFILE_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_64_BIT_SIZE_ENABLED')}">
                        EAIO_64_BIT_SIZE_ENABLED=${EAIO.EAIO_64_BIT_SIZE_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING')}">
                        EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING=${EAIO.EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_BACKWARDS_COMPATIBILITY')}">
                        EAIO_BACKWARDS_COMPATIBILITY=${EAIO.EAIO_BACKWARDS_COMPATIBILITY}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_USE_CORESTREAM')}">
                        EAIO_USE_CORESTREAM=${EAIO.EAIO_USE_CORESTREAM}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_CPP_STREAM_ENABLED')}">
                        EAIO_CPP_STREAM_ENABLED=${EAIO.EAIO_CPP_STREAM_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_APPLE_USE_UNIX_IO')}">
                        EAIO_APPLE_USE_UNIX_IO=${EAIO.EAIO_APPLE_USE_UNIX_IO}
                    </do>
                    <do if="@{PropertyExists('EA_XBDM_ENABLED')}">
                        EA_XBDM_ENABLED=${EA_XBDM_ENABLED}
                    </do>
                </defines>
                <warningsuppression>
                    <do if="${config-compiler} == 'vc'">
                        -wd4917        <!-- disable warning: "OLE_HANDLE: a GUID can only be associated with a class, interface or namespace -->
                        -wd4217        <!-- disable warning: "member template functions cannot be used for copy-assignment or copy-construction" -->
                        -wd4530        <!-- disable warning: "C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc" -->
                        -wd4619        <!-- disable warning: "#pragma warning : there is no warning number 'xxxx'"  MS being silly here -->
                        -wd4548        <!-- disable warning: "expression before comma has no effect; expected expression with side-effect" -->
                        -wd4365        <!-- disable warning: "conversion from x to y, signed/unsigned mismatch" -->
                        -wd6011        <!-- disable warning: Dereferencing NULL pointer-->
                    </do>
                    <do if="${config-compiler} == 'gcc'">
                        <!-- -Wstrict-aliasing=3 Disabled because GCC 4.4's __may_alias__ is broken. --> 
                        -Wextra
                    </do>
                    <do if="${config-compiler} == 'sn'">
                        --diag_suppress=1669 <!-- disable warning: Potential uninitialized reference to "X" -->
                    </do>
                </warningsuppression>
                <buildoptions>
                  <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
                  <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
                  <option name="buildset.cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
                    ${option.value}
                    -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
                    -Xquit=2             <!-- Set it so that even remarks are considered errors. -->

                    --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
                    --diag_suppress=178  <!-- variable was declared but never referenced -->
                    --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
                    --diag_suppress=403  <!-- destructor for base class is not virtual. -->
                    --diag_suppress=481  <!-- function redeclared "inline" after being called -->
                    --diag_suppress=833  <!-- support for placement delete is disabled. -->
                    --diag_suppress=1236 <!-- invalid error number -->
                    --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
                    --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
                    --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
                    --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
                    --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
                  </option>
                  <option name="buildset.cc.options" if="${config-compiler} == 'gcc_disabled'">
                    -fstrict-aliasing
                  </option>
                </buildoptions>
                <remove>
                  <cc.options unless="${Dll}" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
                    -Xdiag=1  <!-- Remove any -Xdiag=1 present, as we already have -Xdiag=2 -->
                    -Xquit=1  <!-- Remove any -Xquit=1 present, as we already have -Xquit=2 -->
                  </cc.options>
                  <!-- Disabled because GCC 4.4 __may_alias__ is broken and generates bogus warnings. -->
                  <cc.options if="${config-compiler} == 'gcc_disabled'">
                    -fno-strict-aliasing
                  </cc.options>
                </remove>
            </config>
            <visualstudio>
                <excludedbuildfiles>
                    <includes name="${package.dir}/doc/**.html" />
                </excludedbuildfiles>
            </visualstudio>
        </Library>
    </runtime>


    <!-- ********************* -->
    <!-- Test configuration    -->
    <!-- ********************* -->
    <tests>
        <Program name="EAIOTest">
            <copylocal value="true" />
            <dependencies>
                <use>
                    EABase
                    coreallocator
                    <do if="${EAIO.EAIO_USE_CORESTREAM??0} == 1">
                        CoreStream
                    </do>
                </use>
                <build>
                    EASTL
                    EAStdC
                    EACOM
                    MemoryMan
                    PPMalloc
                    EAAssert
                    EAThread
                    EATest
                    EAMain
                    EAIO/runtime/EAIO
                </build>
            </dependencies>
            <includedirs>
                ${package.dir}/include
                ${package.dir}/test/include
            </includedirs>
            <libraries>
                <do if="${config-system} == 'ps3'">
                    <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsn.a" />
                    <includes name="${package.ps3sdk.appdir}/target/ppu/lib/librtc_stub.a" />
                    <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsysutil_stub.a" />
                    <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsysutil_game_stub.a" />
                </do>
                <do if="${config-system} == 'kettle'">
                    <includes name="${package.kettlesdk.libdir}/libSceAppContent_stub_weak.a" />
                    <includes name="${package.kettlesdk.libdir}/libSceSysmodule_stub_weak.a" />
                </do>
            </libraries>
            <sourcefiles>
                <includes name="${package.dir}/test/source/*.cpp" />
            </sourcefiles>
            <java>
                <sourcefiles basedir="${package.dir}/test/android/java_source" if="${config-system} == android">
                    <includes name="**.java" />
                </sourcefiles>
            </java>
            <config>
                <defines>
                    UTF_USE_EAASSERT=1
                    EA_MEMORY_LEAK_TRACE_ENABLED=1
                    <do if="@{PropertyExists('EAIO.EAIO_FILEPATH_ENABLED')}">
                        EAIO_FILEPATH_ENABLED=${EAIO.EAIO_FILEPATH_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED')}">
                        EAIO_DEFAULT_ALLOCATOR_ENABLED=${EAIO.EAIO_DEFAULT_ALLOCATOR_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_INIFILE_ENABLED')}">
                        EAIO_INIFILE_ENABLED=${EAIO.EAIO_INIFILE_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_64_BIT_SIZE_ENABLED')}">
                        EAIO_64_BIT_SIZE_ENABLED=${EAIO.EAIO_64_BIT_SIZE_ENABLED}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING')}">
                        EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING=${EAIO.EAIO_DIRECTORY_ITERATOR_USE_PATHSTRING}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_BACKWARDS_COMPATIBILITY')}">
                        EAIO_BACKWARDS_COMPATIBILITY=${EAIO.EAIO_BACKWARDS_COMPATIBILITY}
                    </do>
                    <do if="@{PropertyExists('EAIO.EAIO_USE_CORESTREAM')}">
                        EAIO_USE_CORESTREAM=${EAIO.EAIO_USE_CORESTREAM}
                    </do>
                    <do if="@{PropertyExists('EA_XBDM_ENABLED')}">
                        EA_XBDM_ENABLED=${EA_XBDM_ENABLED}
                    </do>
                </defines>
                <warningsuppression>
                    <do if="${config-compiler} == 'vc'">
                        -wd4217        <!-- disable warning: "member template functions cannot be used for copy-assignment or copy-construction" -->
                        -wd4530        <!-- disable warning: "C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc" -->
                        -wd4619        <!-- disable warning: "#pragma warning : there is no warning number 'xxxx'"  MS being silly here -->
                        -wd4548        <!-- disable warning: "expression before comma has no effect; expected expression with side-effect" -->
                        -wd6011        <!-- disable warning: Dereferencing NULL pointer-->
                    </do>
                    <do if="${config-compiler} == 'sn'">
                        --diag_suppress=1669 <!-- disable warning: Potential unitialized reference to "X" -->
                    </do>
                </warningsuppression>
            </config>
            <buildsteps>
                <packaging>
                    <assetfiles basedir="${package.dir}/test/android/assets" if="${config-system} == 'android'">
                        <includes name="**.*" />
                    </assetfiles>
                </packaging>
            </buildsteps>
        </Program>
    </tests>

    <fileset name="test.EAIOTest.deploy-contents-fileset" basedir="${package.configbindir}/test/">
        <includes name="**" />
    </fileset>

    <property name="test.EAIOTest.deploymentfiles">
        $(RemoteRoot)=$(ImageDir)
    </property>
  
</project>

