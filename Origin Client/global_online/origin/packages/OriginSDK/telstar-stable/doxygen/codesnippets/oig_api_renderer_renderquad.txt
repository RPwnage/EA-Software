	OriginErrorT OriginIGORenderer::renderQuad(const OriginIGORenderingQuad_T* input)
	{
		if (input != nullptr)
		{
			TextureMap::iterator it = m_textures.find(input->texID);
			if (it != m_textures.end())
			{
				/////////////////////////////////////////////////////////////////
				// IMPORTANT
				/////////////////////////////////////////////////////////////////
				// You must use this way of blending for the background effect!!!
				/////////////////////////////////////////////////////////////////
				
				if (input->effect == ORIGINIGOSHADER_BACKGROUND)
				{
					yourRenderer->setTexture(it->second);
					yourRenderer->setColorScale(Float4(0.0f, 0.0f, 0.0f, input->alpha));

					BlendState BlendAlpha
					{
						BlendEnable[0] = true;
						SrcBlendAlpha = INV_DEST_ALPHA;
						DestBlendAlpha = ONE;
						SrcBlend = SRC_ALPHA;
						DestBlend = INV_SRC_ALPHA;
					};
					
					yourRenderer->setBlendState(BlendAlpha);
				}
				else
				{
					/////////////////////////////////////////////////////////////////
					// IMPORTANT
					/////////////////////////////////////////////////////////////////
					// For normal OIG texture rendering we use a different blending!!!
					/////////////////////////////////////////////////////////////////
					
					yourRenderer->setTexture(it->second);
					yourRenderer->setColorScale(Float4(1.0f, 1.0f, 1.0f, input->alpha));

					BlendState BlendAlpha
					{
						BlendEnable[0] = true;
						SrcBlendAlpha = INV_DEST_ALPHA;
						DestBlendAlpha = ONE;
						SrcBlend = SRC_ALPHA;
						DestBlend = INV_SRC_ALPHA;
					};

					yourRenderer->setBlendState(BlendNoAlpha);
				}
				
				yourRenderer->DrawQuad(input->x, input->y, input->width, input->height);
			}
		}
		return ORIGIN_SUCCESS_IGOAPI;
	}