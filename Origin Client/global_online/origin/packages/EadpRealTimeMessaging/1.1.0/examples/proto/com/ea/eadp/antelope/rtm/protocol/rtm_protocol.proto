package com.ea.eadp.antelope.rtm.protocol;

import "common_protocol.proto";
import "presence_protocol.proto";
import "notification_protocol.proto";
import "chat_protocol.proto";
import "point_to_point.proto";
import "error_protocol.proto";
import "moderation_protocol.proto";
import "preference_protocol.proto";
import "config_protocol.proto";

option java_outer_classname = "RTMProtocol";

message Communication {
	oneof body {
		CommunicationV1 v1 = 1;
	}
}

message CommunicationV1 {

	optional string requestId = 1;

	oneof body {
		PresenceSubscribeV1 presenceSubscribe = 2;
		PresenceUnsubscribeV1 presenceUnsubscribe = 3;
		PresenceSubscriptionErrorV1 presenceSubscriptionError = 4;
		PresenceUpdateV1 presenceUpdate = 5;
		PresenceUpdateErrorV1 presenceUpdateError = 6;
		PresenceV1 presence = 7;
		NotificationV1 notification = 8;
		ChatInitiateV1 chatInitiate = 9;
		ChatLeaveV1 chatLeave = 10;
		ChatMembersRequestV1 chatMembersRequest = 11;
		ChatMembersV1 chatMembers = 12;
		ErrorV1 error = 13;
		ReconnectRequestV1 reconnectRequest = 14;
		SuccessV1 success = 15;
		PointToPointMessageV1 pointToPointMessage = 16;
		ChatChannelsRequestV1 chatChannelsRequest = 17;
		ChatChannelsV1 chatChannels = 18;
		LoginRequestV1 loginRequest = 19;
		HeartbeatV1 heartbeat = 20;
		WorldChatAssignV1 worldChatAssign = 21;
		WorldChatResponseV1 worldChatResponse = 22;
		MuteUserV1 muteUser = 23;
		UnmuteUserV1 unmuteUser = 24;
		UserMembershipChangeV1 userMembershipChange = 25;

		// World Chat requests & responses.
		WorldChatConfigurationRequestV1 worldChatConfigurationRequestV1 = 26;
		WorldChatConfigurationResponseV1 worldChatConfigurationResponse = 27;
		WorldChatChannelsRequestV1 worldChatChannelsRequestV1 = 28;
		WorldChatChannelsResponseV1 worldChatChannelsResponse = 29;

		// Sticky message requests & responses.
		PromoteStickyMessageRequestV1 promoteStickyMessageRequest = 30;
		RemoveStickyMessageRequestV1 removeStickyMessageRequest = 31;
		FetchStickyMessagesRequestV1 fetchStickyMessagesRequest = 32;
		StickyMessageResponseV1 stickyMessageResponse = 33;

		// Chat moderation requests & responses.
		GetRolesRequest rolesRequest = 34;
		GetRolesResponse rolesResponse = 35;

		// Update preference request, response will be SuccessV1 or ErrorV1
		UpdatePreferenceRequestV1 preferenceRequest = 36;

		// Fetch current preferences
		GetPreferenceRequestV1 getPreferenceRequest = 37;
		GetPreferenceResponseV1 getPreferenceResponse = 38;

		LoginRequestV2 loginRequestV2 = 39;

		SessionNotificationV1 sessionNotification = 40;

		ChatTypingEventRequestV1 chatTypingEventRequest = 41;

        ChatChannelsRequestV2 chatChannelsRequestV2 = 42;
        ChatChannelUpdateV1 chatChannelUpdate = 43;
		ServerConfigRequestV1 serverConfigRequest = 44;
		ServerConfigV1 serverConfig = 45;

		LoginRequestV3 loginRequestV3 = 46;
		SessionRequestV1 sessionRequestV1 = 47;
		SessionResponseV1 sessionResponseV1 = 48;
		SessionCleanupV1 sessionCleanupV1 = 49;
	}
}

message ReconnectRequestV1 {
	optional string sessionKey = 1; // unique identifier of a player session
}

message LoginRequestV1 {
	optional string token = 1;
	optional bool reconnect = 2 [default = false];
	optional bool heartbeat = 3 [default = false];
}

message LoginRequestV2 {
	optional string token = 1;
	optional bool reconnect = 2 [default = false];
	optional bool heartbeat = 3 [default = false];

	optional UserType userType = 4 [default = PERSONA];
	optional string productId = 5;

	optional bool singleSessionForceLogout = 6 [default = true];
}

message LoginRequestV3 {
	optional string token = 1;
	optional bool reconnect = 2 [default = false];
	optional bool heartbeat = 3 [default = false];
	optional UserType userType = 4 [default = PERSONA];
	optional string productId = 5;
	optional PlatformV1 platform = 6;
	// clientVersion lets the client uniquely identify the source of the request, eg., Juno web vs Juno client vs Origin client etc.
	optional string clientVersion = 7;
	optional string sessionKey = 8; // when doing reconnect, need to send session key along with it
	// we give the user an option to disconnect a particular session at login
	optional string forceDisconnectSessionKey = 9;
}
