<?xml version="1.0" encoding="utf-8"?>
<project name="EAPatchClient" default="build">

    <property name="Dll" value="false" unless="@{PropertyExists('Dll')}" />

    <optionset name="config.targetoverrides">
        <option name="test-build" value="include" />
        <option name="test-buildall" value="include" />
        <option name="test-run" value="include" />
        <option name="test-runall" value="include" />
    </optionset>


    <!-- Package declaration -->
    <!-- Get the version number from current directory -->
    <property name="currDir" value="@{PathGetFullPath('.')}" />
    <property name="currVer" value="@{PathGetFileName('${currDir}')}" />
    <package name="EAPatchClient" targetversion="${currVer}" />


    <!-- Dependent declarations, needed if you want to use scripts from within these packages. -->
    <dependent name="DirtySDK" />

    <!-- Default global properties        -->
    <!--   <globalproperties>             -->
    <!--       EATECH_WARNINGSASERRORS=1  -->
    <!--   </globalproperties>            -->
    <property name="EATECH_WARNINGSASERRORS" value="0" unless="@{PropertyExists('EATECH_WARNINGSASERRORS')}" />


    <!-- Create extra build types which simply add some additional compiler arguments -->
    <optionset name="config-options-library-extra" fromoptionset="config-options-library">
        <option name="buildset.name" value="LibraryExtra" />
        <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
        <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
    </optionset>
    <task name="GenerateBuildOptionset" configsetname="config-options-library-extra" />
    <optionset name="LibraryExtra">
        <option name="cc.options" if="${config-compiler} == 'gcc' and ${config-system} == 'ps3'"> <!-- GCC 4.4 generates troublesome strict aliasing warnings. -->
            @{StrReplace(${option.value}, '-fno-strict-aliasing', '-fstrict-aliasing')}
        </option>
        <option name="cc.options" if="${config-compiler} == 'mw'">
            @{StrReplace(@{StrReplace(${option.value}, '-w nofilecaps', '-w filecaps')}, '-w nosysfilecaps', '-w sysfilecaps')}
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            ${option.value}
            -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
            -Xquit=2             <!-- Set it so that even remarks are considered errors. -->

            --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
            --diag_suppress=178  <!-- variable was declared but never referenced -->
            --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
            --diag_suppress=403  <!-- destructor for base class is not virtual. -->
            --diag_suppress=481  <!-- function redeclared "inline" after being called -->
            --diag_suppress=833  <!-- support for placement delete is disabled. -->
            --diag_suppress=1236 <!-- invalid error number -->
            --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
            --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
            --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
            --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
            --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xdiag=1', '')} <!-- Remove any -Xdiag=1 present, as we already have -Xdiag=2 -->
        </option>
        <option name="cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
            @{StrReplace(${option.value}, '-Xquit=1', '')} <!-- Remove any -Xquit=1 present, as we already have -Xquit=2 -->
        </option>
        <option name="cc.options" if="${config-compiler} == 'vc'">
            @{StrReplace(${option.value}, '/wd4668', '/we4668')} <!-- Instead of disabling warning 4668, make it an error. -->
        </option>
    </optionset>

    <!-- Airplay is a mobile SDK which acts as a universal mobile platform. -->
    <property name="airplay.mkb.memsize" value="200000000" />
    <property name="airplay.mkb.memsizedebug" value="400000000" />


    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->

    <property name="runtime.buildmodules" value="${property.value} EAPatchClient" />
    <property name="runtime.EAPatchClient.buildtype" value="LibraryExtra" />
    <property name="runtime.EAPatchClient.buildtype" value="DynamicLibrary" if="${Dll}" />

    <!-- If CoreStream is enabled, declare it as a dependent. We do this because it allows        -->
    <!-- us to import CoreStream's <CoreStream/scripts/initialize.xml declarations. This is       -->
    <!-- useful to us because it means that EAIO users automatically start seeing CoreStream's    -->
    <!-- headers without having to modify their build files. And this is useful because we are    -->
    <!-- introducing the usage of CoreStream in EAIO to users that probably don't have CoreStream -->
    <!-- already in their builds. See <EAIO/scripts/initialize.xml>                               -->
    <dependent name="CoreStream" if="${EAIO.EAIO_USE_CORESTREAM??0} == 1"/>

    <fileset name="runtime.EAPatchClient.sourcefiles">    
        <includes name="${package.dir}/source/*.cpp" />
    </fileset>

    <fileset name="runtime.EAPatchClient.bulkbuild.sourcefiles" fromfileset="runtime.EAPatchClient.sourcefiles" />

    <property name="runtime.EAPatchClient.usedependencies">
        EABase
        coreallocator
    </property>
    <property name="runtime.EAPatchClient.usedependencies" if="${EAIO.EAIO_USE_CORESTREAM??0} == 1">
        ${property.value}
        CoreStream
    </property>

    <property name="runtime.EAPatchClient.usedependencies" unless="${Dll}">
        ${property.value}
        EAIO
        EASTL
        EAStdC
        EAThread
        EAAssert
        DirtySDK
        UTFXml
    </property>

    <property name="runtime.EAPatchClient.builddependencies" if="${Dll}">
        ${property.value}
        EAIO
        EASTL
        EAStdC
        EAThread
        EAAssert
        DirtySDK
        UTFXml
    </property>

    <property name="runtime.EAPatchClient.defines">
        ${property.value}
        UTF_USE_EAASSERT=1
        _GLIBCPP_USE_C99=1
        _GLIBCXX_USE_C99_MATH=1
    </property>
    <property name="runtime.EAPatchClient.defines" if="@{PropertyExists('EAPatch.EAPATCH_DEBUG')}">
        ${property.value}
        EAPATCH_DEBUG=${EAPatch.EAPATCH_DEBUG}
    </property>
    <property name="runtime.EAPatchClient.defines" if="@{PropertyExists('EAPatch.EAPATCH_ENABLE_ERROR_ASSERTIONS')}">
        ${property.value}
        EAPATCH_ENABLE_ERROR_ASSERTIONS=${EAPatch.EAPATCH_ENABLE_ERROR_ASSERTIONS}
    </property>
    <property name="runtime.EAPatchClient.defines" if="${Dll} and ${config-compiler} == 'vc'">
        ${property.value}
        EAPATCHCLIENT_API=__declspec(dllexport)
        EAPATCHCLIENT_API_LOCAL
    </property>
    <property name="runtime.EAPatchClient.defines" if="${Dll} and ${config-system} == 'cyg'">
        ${property.value}
        EAPATCHCLIENT_API=__attribute__((dllexport))
        EAPATCHCLIENT_API_LOCAL
    </property>
    <property name="runtime.EAPatchClient.defines" if="${Dll} and ${config-compiler} == 'gcc' and ${config-system} != 'cyg'">
        ${property.value}
        EAPATCHCLIENT_API=__attribute__ ((visibility("default")))
        EAPATCHCLIENT_API_LOCAL=__attribute__ ((visibility("hidden")))
    </property>
    <property name="runtime.EAPatchClient.defines" if="@{PropertyExists('EA_XBDM_ENABLED')}">
        ${property.value}
        EA_XBDM_ENABLED=${EA_XBDM_ENABLED}
    </property>


    <property name="runtime.EAPatchClient.warningsuppression" if="${config-compiler} == 'gcc'">
        -Wstrict-aliasing=3
        -Wextra
    </property>


    <fileset name="runtime.EAPatchClient.libs" if="${Dll}">
        <group if="${config-system} == pc or ${config-system} == pc64">
            <includes name="iphlpapi.lib" asis="true" />
            <includes name="winmm.lib" asis="true" />
            <includes name="ws2_32.lib" asis="true" />
        </group>
    </fileset>


    <!-- ********************* -->
    <!-- Test configuration    -->
    <!-- ********************* -->

    <property name="test.buildmodules" value="EAPatchClientTest" />
    <property name="test.buildmodules" value="${property.value} EAPatchClientApp" if="${config-system} != capilano"/>

    <property name="test.EAPatchClientApp.buildtype" value="Program"/>
    <property name="test.EAPatchClientTest.buildtype" value="Program" />

    <fileset name="test.EAPatchClientTest.deploy-contents-fileset" basedir="${package.configbindir}/test">
        <includes name="**" />
    </fileset>
    <fileset name="test.EAPatchClientTest.test-data-fileset" basedir="${package.dir}/test/data/">
		<includes name="**" />
	</fileset>

    <property name="test.EAPatchClientApp.usedependencies">
        ${property.value}
        EABase
        coreallocator
    </property>
    <property name="test.EAPatchClientTest.usedependencies" value="${test.EAPatchClientApp.usedependencies}"/>

    <property name="test.EAPatchClientApp.builddependencies">
        ${property.value}
        EAAssert
        EAIO
        EASTL
        EAStdC
        EAThread
        DirtySDK
        UTFXml

        <!-- Unit test dependencies-->
        EATest
        EAMain
        MemoryMan
        PPMalloc
        UTFInternet
        UTFSockets
        EACallstack
        ExceptionHandler
    </property>
    <property name="test.EAPatchClientTest.builddependencies" value="${test.EAPatchClientApp.builddependencies}"/>

    <property name="test.EAPatchClientApp.builddependencies.ps3">
        PlayStation3NPEx
    </property>
    <property name="test.EAPatchClientTest.builddependencies.ps3" value="${test.EAPatchClientApp.builddependencies.ps3}"/>

    <property name="test.EAPatchClientApp.runtime.moduledependencies">
        EAPatchClient
    </property>
    <property name="test.EAPatchClientTest.runtime.moduledependencies" value="${test.EAPatchClientApp.runtime.moduledependencies}"/>

    <property name="test.EAPatchClientApp.defines">
        ${property.value}
        UTF_USE_EAASSERT=1
        EA_MEMORY_LEAK_TRACE_ENABLED=1
    </property>
    <property name="test.EAPatchClientApp.defines" if="@{PropertyExists('EAPatch.EAPATCH_DEBUG')}">
        ${property.value}
        EAPATCH_DEBUG=${EAPatch.EAPATCH_DEBUG}
    </property>
    <property name="test.EAPatchClientApp.defines" if="@{PropertyExists('EA_XBDM_ENABLED')}">
        ${property.value}
        EA_XBDM_ENABLED=${EA_XBDM_ENABLED}
    </property>
    <property name="test.EAPatchClientTest.defines" value="${test.EAPatchClientApp.defines}"/>

    <property name="test.EAPatchClientApp.includedirs">
        ${package.dir}/include
        ${package.dir}/app/include
        ${package.dir}/app/source
    </property>
    <property name="test.EAPatchClientTest.includedirs">
        ${package.dir}/include
        ${package.dir}/test/include
    </property>

    
    <fileset name="test.EAPatchClientApp.sourcefiles">    
        <includes name="${package.dir}/app/source/*.cpp" />
    </fileset>
    <fileset name="test.EAPatchClientApp.sourcefiles" append="true" if="${config-system}==iphone and @{PropertyExists('package.iphonesdk.test.main')}">
        <includes name="${package.iphonesdk.test.main}" />
    </fileset>
    <fileset name="test.EAPatchClientTest.sourcefiles">    
        <includes name="${package.dir}/test/source/*.cpp" />
    </fileset>
    <fileset name="test.EAPatchClientTest.sourcefiles" append="true" if="${config-system}==iphone and @{PropertyExists('package.iphonesdk.test.main')}">
        <includes name="${package.iphonesdk.test.main}" />
    </fileset>


    <!-- xenon extra linker sections -->
    <do if="${config-system} == xenon">
        <!-- We want to trigger the execution of this:
             C:\Program Files (x86)\Microsoft Xbox 360 SDK\bin\win32\imagexex.exe 
                 -nologo 
                 -in:"C:\Projects\EAOS\UTF\build\EAPatchClient\dev\xenon-vc-dev-debug\bin\test\EAPatchClientTest.exe" 
                 -config:C:\Projects\EAOS\EAPatch\DL\EAPatchClient\dev\test\source\XBox360\EATechTestApp.gameconfig 
                 -out:"C:\Projects\EAOS\UTF\build\EAPatchClient\dev\xenon-vc-dev-debug\bin\test\EAPatchClientTest.xex" 
                 -titleid:0xEAEAEA01 
        -->
        <property name="test.EAPatchClientTest.imgbld.projectdefaults" value="${package.dir}\test\source\XBox360\EATechTestApp.gameconfig" />
        <property name="test.EAPatchClientTest.imgbld.options" >
            -titleid:0xEAEAEA01
        </property>
    </do>


    <!-- Libraries -->
	<task name="AddNetworkLibsToModule" module="test.EAPatchClientApp" />
    <task name="AddDirtySDKLibsToModule" module="test.EAPatchClientApp" if="false"/>

    <fileset name="test.EAPatchClientApp.libs" append="true">
        <group if="${config-system} == pc or ${config-system} == pc64">
            <includes name="iphlpapi.lib" asis="true" />
            <includes name="winmm.lib"    asis="true" />
        </group>
    </fileset>
	
	<fileset name="test.EAPatchClientTest.libs" fromfileset="test.EAPatchClientApp.libs"/>
	
</project>
















