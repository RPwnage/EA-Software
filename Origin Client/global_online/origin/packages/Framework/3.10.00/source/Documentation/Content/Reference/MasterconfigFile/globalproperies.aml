<?xml version="1.0" encoding="utf-8"?>
<topic id="90bd6eff-7623-4553-99b5-d67afa511219" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <autoOutline>2</autoOutline>
      <para>Global Properties definition, usage and examples </para>
    </introduction>

    <section address="Overvies">
      <title>Global Properties Overview</title>
      <content>
        <autoOutline>2</autoOutline>
      </content>
      <sections>
          <section address="SubSection1">
              <title>What is a Global Property?</title>
              <content>
                  <para>For each configuration for each <token>package</token> in the build Nant creates a separate context called Project. 
                  Package build script is loaded into this context, and <token>ConfigurationPackage</token> is loaded by a <codeInline>&lt;package&gt;</codeInline> task
                    in the package build script. As result each package has it's own data elements like 
                    <link xlink:href="361a891f-df73-8841-83d2-1eabf195266f">Properties</link>, 
                    <link xlink:href="be49d01d-d33d-1aa5-83f3-17c84aadc636">Filesets</link>,
                    and <link xlink:href="cd0caf92-75c3-73da-b1ee-3009140fed96">Optionsets</link>.
                    No data created in one package Project are shared with other package Projects except for Global Properties.
                  </para>
                
                <para>
                  Global Properties are normal NAnt Properties, there is no separate "globat property" type.
                  When properties are declared as global in masterconfig Framework adds these property names into a separate table. NAnt's  
                  <link xlink:href="e886d0d2-14fd-8495-33da-3941200a10af">&lt;nant/&gt;</link> task will take all properties in the current package Project 
                  which names appear in the global property table and copy these properties into dependent package context (Project) adding readonly attribute. 
              </para>
                <alert class="note">
                  <para>Global properties are not like static objects in C#, they aren't shared automatically between all Projects (package contexts).
                  Properties that appear on the global property list are propagated down the dependency chain. 
                  When propagated to dependent packages Global Properties are assigned the readonly attribute.
                </para>
                </alert>

                <para>
                  <legacyBold>Regular Nant properties will only exist in the package in which it was defined. 
                  When a Global Property is defined in a package build script it will only exist in this package and all dependent packages:</legacyBold>
                </para>
                <mediaLink>
                  <image placement="near" xlink:href="GlobalProperties_1"/>
                </mediaLink>

                <para>
                  <legacyBold>
                    Global Properties defined at the nant command line will propagate from top level package to all dependent packages, but regular Nant properties defined at the command line will only be defined in the top package:
                  </legacyBold>
                </para>
                <mediaLink>
                  <image placement="near" xlink:href="GlobalProperties_2"/>
                </mediaLink>

                <alert class="warning">
                  <para>
                    Nant ignores attempts to overwrite read-only properties. In <legacyBold>"-verbose"</legacyBold> mode each overwrite attempt will generate a warning message.
                  </para>
                </alert>

              </content>
          </section>
          <section address="DefaultGlobalProperties">
              <title>Default Global Properties</title>
              <content>
                  <para>Several property names are Global by default, i.e. they are always propagated to dependent packages as readonly properties:</para>

                <definitionTable>
                  <definedTerm>
                    config
                  </definedTerm>
                  <definition>
                    <para>current build configuration (see <token>config</token>).
                  </para>
                  </definition>
                  <definedTerm>
                    bulkbuild
                  </definedTerm>
                  <definition>
                    <para>
                      turns on[off] <link xlink:href="faef437d-9cf4-4a73-97ab-e6055a87b5dd">bulkbuild</link> functionality
                    </para>
                  </definition>


                  <definedTerm>
                    nant.project.masterconfigfile
                  </definedTerm>
                  <definition>
                    <para>
                      location of the masterconfig file used in the build
                    </para>
                  </definition>
                  
                  <definedTerm>
                    nant.project.buildroot
                  </definedTerm>
                  <definition>
                    <para>
                      Full path of the buildroot used in the current build
                    </para>
                  </definition>

                  <definedTerm>
                    nant.project.temproot
                  </definedTerm>
                  <definition>
                    <para>
                      Special directory under the buildroot where Framework puts temporary files
                    </para>
                  </definition>

                  <definedTerm>
                    bulkbuild.excluded
                  </definedTerm>
                  <definition>
                    <para>
                      Property allows writers to exclude subsets of packages or modules from bulkbuild (see <link xlink:href="e3c103f3-7176-4b4c-b700-9cd7687aceb0"/>).
                    </para>
                  </definition>

                  <definedTerm>
                    autobuilduse
                  </definedTerm>
                  <definition>
                    <para>
                      Turns on/off auto dependencies (see <link xlink:href="5c33f0e3-e892-43cd-a68c-4f88a1ab093b"/>).
                    </para>
                  </definition>

                  <definedTerm>
                    nant.transitive
                  </definedTerm>
                  <definition>
                    <para>
                      Turns on/off transitive dependency propagation (see <link xlink:href="3211305e-da2c-4e08-ac9f-bf09384081fc"/>).
                    </para>
                  </definition>

                  <definedTerm>
                    eaconfig.externalbuild
                  </definedTerm>
                  <definition>
                    <para>
                    </para>
                  </definition>

                  <definedTerm>
                    eaconfig.nantbuild
                  </definedTerm>
                  <definition>
                    <para>
                    </para>
                  </definition>

                  <definedTerm>
                    cmdtargets.name
                  </definedTerm>
                  <definition>
                    <para>
                      Names of all targets on the nant command line
                    </para>
                  </definition>

                  <definedTerm>
                    nant.commadline.properties
                  </definedTerm>
                  <definition>
                    <para>
                      This is an <legacyBold>optionset</legacyBold> containing all properties specified on the nant command line.
                    </para>
                  </definition>

                  <definedTerm>
                    nant.project.packageroots
                  </definedTerm>
                  <definition>
                    <para>
                      Property containing all package root paths (new line separated).
                    </para>
                  </definition>
                </definitionTable>
              </content>
          </section>
      </sections> 
    </section>
    <section address="Usage">
      <title>Usage</title>
      <content>
        <autoOutline>2</autoOutline>
        <para>Masterconfig file <codeInline>&lt;globalproperties&gt;</codeInline> element can be used to declare a property as global, i.e. add a property name to the global properties table.
        The global property can also be defined, which meand it is declared and an instance of the property is created.
      </para>
      </content>
      <sections>
        <section address="UsageDeclareGlobalProperty">
          <title>Declaring Global Properties</title>
          <content>
            <para>To declare a property as global, list property names as text within the <codeInline>&lt;globalproperties&gt;</codeInline> element:
          </para>
            <code language="xml" title="">
              
   .           &lt;globalproperties&gt;
   .
   .             &lt;!-- 
   .               properties MyProperty1 and MyProperty2 will be propagated by nant task
   .               when this properties exist in the calling context 
   .             --&gt;
   .
   .             MyProperty1
   .             MyProperty2
   .           &lt;/globalproperties&gt;
              
            </code>
          </content>
        </section>
        <section address="UsageDefineGlobalProperty">
          <title>Define Global Properties</title>
          <content>
            <para>
              Global Properties can be defined in the <codeInline>&lt;globalproperties&gt;</codeInline> element. 
              This means that in addition to declaring a property as global its instance is created right away. 
              This is equivalent to declaring property global and defining it in the top level package build script.
            </para>
            <alert class="note">
              <para>
                Global property is first created as writable, it gets 'readonly' attribute when propagated to dependent project by
                <link xlink:href="e886d0d2-14fd-8495-33da-3941200a10af">&lt;nant/&gt;</link> task.
              </para>
            </alert>
            <para>
            To define a Global property in the <codeInline>&lt;globalproperties&gt;</codeInline> element assign a value to it:
            </para>
            <para>
              <codeInline>&lt;globalproperty&gt;</codeInline> element can be used to define global property. It may be useful when
              global property value contains spaces, new line, quote symbols. <legacyBold>
                <codeInline>name</codeInline>
              </legacyBold> is a required attribute.
            </para>

            <code language="xml" title="">

              .           &lt;globalproperties&gt;
              .
              .             MyProperty1=true
              .
              .             <!-- When property value contains spaces - use quotes. quotes will not be part of the value.-->
              .             MyProperty2="Property value with spaces"
              .
              .             <!-- To create property which value is an empty string leave blank space after assignment operator -->
              .             MyProperty3=
              .
              .             &lt;globalproperty name="MyProperty3"&gt;
              .                    Property value with spaces
              .                    and multiple lines
              .             &lt;/globalproperty&gt;
              .
              .           &lt;/globalproperties&gt;

            </code>
          </content>
        </section>
        <section address="UsageConditionalGlobalProperties">
          <title>Conditional Definitions for Global Properties</title>
          <content>
            <para>
              Global Properties can be declared or defined conditionally. Conditions can contain regular nant expressions and are evaluated
              every time Framework accesses global property definitions (in <link xlink:href="e886d0d2-14fd-8495-33da-3941200a10af">&lt;nant/&gt;</link> task or
              <link xlink:href="be2bced2-11cc-b4f9-06bf-d393829c4e1a">&lt;dependent&gt;</link> task).
          </para>
            <para>
              To define conditions use <codeInline>&lt;if/&gt;</codeInline> element, or <legacyBold>
                <codeInline>condition</codeInline>
              </legacyBold> attribute in the <codeInline>&lt;globalproperty/&gt;</codeInline> element:
            </para>
            <alert class="note">
              <list class="bullet">
                <listItem>
                  <para>Conditions can be nested.</para>
                </listItem>
                <listItem>
                  <para>
                    If <codeInline>&lt;globalproperties/&gt;</codeInline> element contains multiple definitions of the same global property
                    the last definitions will be used. Global properties are processed in order they apear in masterconfig file.
                  </para>
                </listItem>
              </list>
            </alert>

            <alert class="caution">
              <para>Global properties are evaluated <legacyBold>before</legacyBold> configuration package is loaded. Properties defined in the configuration 
              package can not be used in the global property conditions.
            </para>
            </alert>

            <code language="xml" title="">

 .             &lt;globalproperties&gt;
 .               MyProperty1
 .               &lt;if condition="${my_condition}==true"&gt;
 .                 MyProperty2
 .                 MyProperty1="Value set_when_condition is true"
 .                 condition_1_global_prop_init="Test_init_value_cond1"
 .                 &lt;if condition="${my_other_condition}==true"&gt;
 .                   MyProperty3
 .                 &lt;/if&gt;
 .               &lt;/if&gt;
 .               &lt;globalproperty name="MyProperty3"&gt;
 .                 Value1
 .                 Value2
 .               &lt;/globalproperty&gt;
 .
 .               &lt;globalproperty name="MyProperty4" condition="${my_other_condition}==true"&gt;
 .                 Some Value
 .               &lt;/globalproperty&gt;
 .
 .             &lt;/globalproperties&gt;

            </code>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
