<?xml version="1.0" encoding="utf-8"?>
<topic id="c6b7dc39-6b07-481f-b3b3-02f4d795b89a" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>eaconfig - the standard configuration package for Framework</para>
    </introduction>

    <section address="EconfigStructure">
      <title>Eaconfig structure</title>
      <content>
        <para>To understand how eaconfig works let's see how this package is structured, and what the logical (functional) parts are.</para>
        <code language="none" title=" ">
.              /eaconfig
.                  /${version}
.                /config             - Configuration package scripts must be placed in the config directory
.                    ${config}.xml   - Configuartion specific script files (pc-vc-dev-debug.xml, ..., ps3-gcc-dev-opt.xml)
.                    /global         - Common scripts used by all configurations
.                    /configset      - Common settings and options
.                    /platform       - Platform specific configuration scripts
.                    /options        - Tasks that generate Specific compiler, linker, etc. option setting
.                    /targets        - Target definitions
.                    /tasks          - Task definitions
        </code>
      </content>
    </section>
    <section address="EconfigLoading">
      <title>How does loading a configuration package (eaconfig) work?</title>
      <content>
        <para>
          When Nant loads a configuration package it does not load all configurations, only the current configuration.
          Nant looks for a file with a name equal to the name of the configuration <legacyBold>
            <codeInline>${config}.xml</codeInline>
          </legacyBold>  in <legacyBold>
          <codeInline>/config</codeInline>
        </legacyBold> subfolder of the 
          configuration package.
        </para>
        <para>
          In eaconfig these files include sets of other files, here is an example of the top level eaconfig file for the <legacyBold>
          <codeInline>pc-vc-dev-debug</codeInline>
        </legacyBold> configuration.
        </para>
        <code language="xml" title=" ">
          
.            file: eaconfig/config/pc-vc-dev-debug.xml
.            
.            &lt;!-- 
.                 (c) Electronic Arts. All Rights Reserved.
.            --&gt;
.            &lt;project&gt;
.              &lt;include file="global/init.xml" /&gt;
.              &lt;include file="platform/pc-vc.xml" /&gt;
.              &lt;include file="configset/dev-debug.xml" /&gt;
.              &lt;include file="global/combine.xml" /&gt;
.              &lt;include file="targets/target-init.xml" /&gt;
.            &lt;/project&gt;
        </code>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>global/init.xml</legacyBold> - defines and intializes common eaconfig data.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>platform/pc-vc.xml</legacyBold> - defines and intializes data specific to the PC platform and Visual Studio (vc) toolchain.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>configset/dev-debug.xml</legacyBold> - a few properties and options that are used during target execution to identify which debug, optimization, and other options should be applied:
            </para>
            <code language="xml" title=" ">
.      file: eaconfig/config/pc-vc-dev-debug.xml
.      
.      &lt;!-- 
.          (c) Electronic Arts. All Rights Reserved.
.      --&gt;
.     &lt;project&gt;
.        &lt;property name="config-name" value="dev-debug"/&gt;
.        &lt;optionset name="config-options-common"&gt;
.          &lt;option name="debugflags"               value="on" /&gt;
.          &lt;option name="incrementallinking"       value="on" /&gt;
.          &lt;option name="iteratorboundschecking"   value="on" /&gt;
.          &lt;option name="optimization"             value="off" /&gt;
.          &lt;option name="runtimeerrorchecking"     value="on" /&gt;
.          &lt;option name="usedebuglibs"             value="on" /&gt;
.        &lt;/optionset&gt;
.     &lt;/project&gt;
            </code>
          </listItem>
          <listItem>
            <para>
              <legacyBold>global/combine.xml</legacyBold> and <legacyBold>targets/target-init.xml</legacyBold> - these files 
              define tasks and targets that are executed later during the build. 
              Tasks in the combine.xml create final build setting values. At load time nant stores definitions of 
              these tasks and targets but does not execute them. This allows writers to customize some default property and
              option values in the package build script and thus affect creation of the final build settings.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
