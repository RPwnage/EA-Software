<?xml version="1.0" encoding="utf-8"?>
<topic id="8d1c6c4c-01b1-4c08-b710-32197c7c95e0" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>Sections in this topic describe custom build files step usage and examples</para>
    </introduction>

    <section address="CustomBuildFiles">
      <title>
        Custom Build Steps On Individual Files
      </title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          Custom build files allow to attach a command with input and output dependencies to a file or collection of files.
          Custom build files are similar to the <link xlink:href="c5b47e6a-0ffd-46c2-be46-42c72cff4450">custom build step</link>
          but there can be many custom build files with different command attached to each file.
        </para>
        <para>
          Another difference is in execution order, custom build steps on individual files are invoked right after
          <link xlink:href="fe59f5f6-7eeb-497c-b934-19c39cc69199">Prebuild</link> step.
        </para>
        <para>
          To define <codeInline>Custom Build Steps On Individual Files</codeInline> in the package build script set
          following fileset
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <token>groupname</token><codeInline>.custombuildfiles</codeInline> - <token>fileset</token> that contains files with custombuildsteps, 
              <token>optionset</token> with cutom build step definitions must be attached to the files.
            </para>
          </listItem>
        </list>
      </content>
    </section>
    <section address="CustomBuildFileOptionset">
      <title>Custom Build File Optionset</title>
      <content>
        <para>
          To describe custom build command associated with files use optionset described below.
          If custom build step is used in many packages in a game build, this optionset can be defined in a game configuration package.
          Optionset can also be defined directly in a build script.
        </para>
        <para>Optionset definition</para>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>option</para>
              </entry>
              <entry>
                <para>required</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>build.tasks</para>
            </entry>
            <entry>
              <para>
                <mediaLinkInline>
                  <image xlink:href="requirements1a"/>
                </mediaLinkInline>
              </para>
            </entry>
            <entry>
              <para>List of logical command names(tasks). For each name(task) separate command can be defined.</para>
              <alert class="note">
                <para>build.tasks value can be empty. In this case there will be one command</para>
              </alert>
            </entry>
          </row>
          <row>
            <entry>
              <para>[task].command</para>
              <para>command</para>
            </entry>
            <entry>
                <para>
                  Either 'command' or 'executable' must be defined.
                </para>
            </entry>
            <entry>
              <para>Command that is executed</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>[task].executable</para>
              <para>executable</para>
            </entry>
            <entry>
              <para>
                Either 'command' or 'executable' must be defined.
              </para>
            </entry>
            <entry>
              <para>Instead of defining full command line it is possible to define executable name and options</para>
              <alert class="note">
                <para>The difference between defining command line and defining executable + options is in how nant will execute these commands</para>
                <para>In the case of 'command' definition nant will write command(s) into a script file (.bat or .sh) and execute this script file</para>
                <para>In the case of 'executable'+'options' nant will invoke executable directly</para>
                <para>For Visual Studio builds there is no differencve in how these two definitions will be executed.</para>
              </alert>
            </entry>
          </row>
          <row>
            <entry>
              <para>[task].options</para>
              <para>options</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>Instead of defining full command line it is possible to define executable name and options</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>description</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>Text that will be printed before executing this step. Default: empty string.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>name</para>
            </entry>
            <entry>
              <para>
                <mediaLinkInline>
                  <image xlink:href="requirements1a"/>
                </mediaLinkInline>
              </para>
            </entry>
            <entry>
              <para>Name of this tool. The name used internally by Framework. Name is also printed instead of description when description is not defined.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>outputs</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>List ou output files. Each file on a separate line.</para>
              <para>Output files are used to evaluate whether the step needs to be run.</para>
              <para>Visual Studio will also pipe output files to the tools that atre executed after this step,
              for example, if outputs contain object files, these files will be added to the Linker tool as an input.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>createoutputdirs</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>If set to <legacyBold>true</legacyBold> directories will be created for each file listed in 'outputs'. Default: false</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>treatoutputascontent</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>
                If set to <legacyBold>true</legacyBold> 'TreatOutputAsContent' element will be set in Visual Studio project for this Custom Build Step. 
                Default: false.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>inputs</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>List of additional input files. Each file on a separate line.</para>
              <para>Timestamps of input files and custom build file itself are ucompared against timestamps of output files to evaluate whether the step needs to be run.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>input-filesets</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>The same of inputs but using a fileset. Value of this option should contain the name of a fileset.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>sourcefiles</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>List of files. Each file on a separate line.</para>
              <para>
                These files will be added to the <link xlink:href="8c5e37f0-b684-4016-b143-5866d7984543">sourcefiles</link> fileset
              </para>
              <para>This option can be used when the step is generating source files that need to be added to the build</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>bulkbuild</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>
                If set to <legacyBold>true</legacyBold> files specified in 'sourcefiles' will be added to 
                <link xlink:href="faef437d-9cf4-4a73-97ab-e6055a87b5dd">builkbuild</link> fileset as well (if builkbuild is enabled), 
                otherwise these files will be built as loose files. Default: false.
              </para>
            </entry>
          </row>

          <row>
            <entry>
              <para>headerfiles</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
                <para>List of files. Each file on a separate line.</para>
                <para>
                  These files will be added to the <link xlink:href="b701990d-4dc5-444b-84be-f58d09e781b8">headerfiles</link> fileset
                </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>objectfiles</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
                <para>List of files. Each file on a separate line.</para>
                <para>
                  These files will be added to the <link xlink:href="dcdd29a4-761a-4c69-a98a-11d01a7327a33">objectfiles</link> fileset
                </para>
                <para>This option can be used when the step is generating object files that need to be added to link step</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>preprocess</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>Name of preprocess task or target. Preprocess is executed just before Framework starts to extract data
              for this step and create instance of the BuildTool object.</para>
              <para>
                For more info about pre/post process steps see <link xlink:href="35560473-93dd-4104-aa95-0ccc222c4fdf"/>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>postprocess</para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
            <entry>
              <para>
                Name of postprocess task or target. Postproces is executed right after Framework extracted data
                for this step and created instance of the BuildTool object.
              </para>
              <para>
                For more info about pre/post process steps see <link xlink:href="35560473-93dd-4104-aa95-0ccc222c4fdf"/>
              </para>
            </entry>
          </row>
        </table>
      </content>
    </section>
    <section address="TemplateParameters">
      <title>Template Parameters</title>
      <content>
        <para>Option values in the optionset can contain template parameters. For each file in the 
        <codeInline>custombuildfiles</codeInline> optionset template parameters are substituted using this file info:</para>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>
                  Template
                </para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>
                <codeInline>%filepath%</codeInline>
              </para>
            </entry>
            <entry>
              <para>Full path of the custombuildfile</para>
            </entry>
          </row>

          <row>
            <entry>
              <para>
                <codeInline>%filename%</codeInline>
              </para>
            </entry>
            <entry>
              <para>File name without extension for the custombuild file</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%fileext%</codeInline>
              </para>

            </entry>
            <entry>
              <para>File name extension for the custombuild file</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%filedir%</codeInline>
              </para>

            </entry>
            <entry>
              <para>Directory part of the path for the custombuildfile</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%filebasedir%</codeInline>
              </para>

            </entry>
            <entry>
              <para>Base directory for the custombuildfile. Base directory is a defined in the custombuildfiles <token>fileset</token></para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%filereldir%</codeInline>
              </para>

            </entry>
            <entry>
              <para>custombuildfile path relative to the base directory</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%intermediatedir%</codeInline>
              </para>

            </entry>
            <entry>
              <para>Module intermediate build directory</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>
                <codeInline>%outputdir%</codeInline>
              </para>

            </entry>
            <entry>
              <para>Module output build directory</para>
            </entry>
          </row>
        </table>
      </content>
    </section>
    <section address="Example">
      <title>Example</title>
      <content>
        <para>Example of using custombuildfiles to compile files with custom compiler and add objectfiles to the library</para>
        
        <code language="xml" title=" " source="ExampleFiles\Packages\CustomBuildFiles\CustomBuildCompile.xml"/>

        <para>Example of using custombuildfiles to generate sourcefiles and pass generated files to compiler</para>
        
        <code language="xml" title=" " source="ExampleFiles\Packages\CustomBuildFiles\CustomBuildGenerate.xml"/>

      </content>
    </section>

    <relatedTopics>
      <link xlink:href="c5b47e6a-0ffd-46c2-be46-42c72cff4450"/>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
