<?xml version="1.0" encoding="utf-8"?>
<topic id="b206a438-d1bc-4745-8e7c-6dfce40e8f64" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        This element allows to set up version and revision restrictions on dependent packages.
      </para>
      <para>
        Often packages require particular version (minimal version) of another dependent package to work properly. 
        NAnt has a function <codeInline>StrCompareVersions</codeInline> that can be used in the build scripts to test for package versions. 
        Framework 3 ofers simple standard way to put version restrictions on dependent packages through <codeInline>compatibility</codeInline> element in <token>ManifestFile</token>.
      </para>
      <para>
        When working with unreleased packages that are changing using version restrictions does not help. <codeInline>compatibility</codeInline> element allows to declare package revision string
        and set revision restrictions on dependent packages. Revision strings should follow same formatting conventions as package versions, function <codeInline>StrCompareVersions</codeInline>
        is used to compare revisions.
      </para>

    </introduction>
    <section>
      <title>Usage</title>
      <content>
        <para>
          Enter the element in the Manifest file and specify optional nested element <codeInline>dependent</codeInline>.
        </para>
        <definitionTable>
          <definedTerm>
            <codeInline>compatibility</codeInline>
          </definedTerm>
          <definition>
            <para>
              Root element for compatibility info. This element can declare package revision string and optionally restrictions on dependent packages.
            </para>
            <para>
              <codeInline>compatibility</codeInline> element can contain zero or more <codeInline>dependent</codeInline> elements.
            </para>
            <para>
              <legacyBold>Attributes:</legacyBold> 
            </para>
            <list class="nobullet">
              <listItem>
                <para>
                  <codeInline>revision</codeInline> - optional attribute defines this package reviosion string.
                  It is needed when other packages declare revision restrictions on this package.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>package</codeInline> - Not used in Framework 3, but it is a required attribute in Framework 1 and 2.
                </para>
                <alert class="tip">
                  <para>
                    When defining <codeInline>compatibility</codeInline> element define package attribute to make Manifest file compatible with both Framework2 and Framework 3.
                  </para>
                </alert>
              </listItem>
            </list>
          </definition>
          <definedTerm>
            <codeInline>dependent</codeInline>
          </definedTerm>
          <definition>
            <para>
              Specifies version or revision restrictions on dependent package.
            </para>
            <para>
              <legacyBold>Attributes:</legacyBold>
            </para>
            <list class="nobullet">
              <listItem>
                <para>
                  <codeInline>package</codeInline> - <legacyItalic>required</legacyItalic>. Name of the dependent package.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>minrevision</codeInline> - <legacyItalic>optional</legacyItalic>. minimal revision of dependent package requested.
              </para>
                <alert class="note">
                  <para>
                    Dependent package must have <codeInline>revision</codeInline> defined in <codeInline>compatibibilty</codeInline> element in its Manifest.xml file
                  </para>
                </alert>
              </listItem>
              <listItem>
                <para>
                  <codeInline>maxrevision</codeInline> - <legacyItalic>optional</legacyItalic>. maximal revision of dependent package compatible with this package.
              </para>
                <alert class="note">
                  <para>
                    Dependent package must have <codeInline>revision</codeInline> defined in <codeInline>compatibibilty</codeInline> element in its Manifest.xml file
                  </para>
                </alert>
              </listItem>
              <listItem>
                <para>
                  <codeInline>minversion</codeInline> - <legacyItalic>optional</legacyItalic>. minimal version of dependent package requested.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>maxversion</codeInline> - <legacyItalic>optional</legacyItalic>. maximal version of dependent package compatible with this package.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>fail</codeInline> - <legacyItalic>optional, boolean</legacyItalic>. If true, build will fail if condition is not met, 
                  otherwise waqrning message is printed. Default is <legacyItalic>false</legacyItalic>.
              </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>message</codeInline> - <legacyItalic>optional</legacyItalic>. Additional text included in the message printed by Framework when condition is not met.
                </para>
              </listItem>
            </list>
            <alert class="note">
              <para>
                For <codeInline>max</codeInline> or <codeInline>min</codeInline>  conditions either <legacyItalic>revision</legacyItalic> or <legacyItalic>version</legacyItalic> restrictions should be defined but not both.
              </para>
            </alert>
          </definition>
        </definitionTable>

        <alert class="note">
          <para>
            Version / revision restrictions are verified when dependency is actually used, i.e. &lt;dependent&gt; task is called, they aren't checked for all packages listed in masterconfig, only for packages that actually participate in the given build.
          </para>
        </alert>

      </content>
    </section>
    <section>
      <title>Example</title>
      <content>

        <para>Framework package declares revision restriction on eaconfig package</para>
        
        <code language="xml" title=" ">

          Framework\3.02.00\Manifest.xml:
          
            &lt;compatibility package="Framework"&gt;
                &lt;dependent package="eaconfig" minrevision="2.02.00.837635" fail="true" message="Framework 3 requires eaconfig with feature XYZ"/&gt;
            &lt;/compatibility&gt;
          
          eaconfig\2.02.00\Manifest.xml:

            &lt;compatibility package="eaconfig" revision="2.02.00.837640"/&gt;

        </code>

        <para>If masterconfig file specifies incompatible version of eaconfig following error message is printed:</para>


        <code language="none" title=" ">

          c:\packages\EAThread\dev>nant build
          
          Package 'Framework' requires minimal revision '2.02.00.837635' of package 'eaconfig', but package 'eaconfig-2.01.00' (c:\packages\eaconfig\2.01.00) has revision '2.01.00.00'
          Framework 3 requires eaconfig with feature XYZ
          Try 'nant -help' for more information
          
        </code>


        <para>Framework and configuration package can declare mutual version conditions</para>

        <code language="xml" title=" ">

          Framework\3.02.00\Manifest.xml:

            &lt;compatibility package="Framework" revision="3.02.00.00"&gt;
                &lt;dependent package="eaconfig" minrevision="2.02.00.00" fail="true" message="Framework 3 requires FW3 compatible version of eaconfig 2.02.00 or higher"/&gt;
            &lt;/compatibility&gt;

          eaconfig\2.02.00\Manifest.xml:

            &lt;compatibility package="eaconfig" revision="2.02.00.00"&gt;
                &lt;dependent package="Framework" minrevision="3.02.00.00" fail="false" message="This version of eaconfig requires Framework-3.02.00 or higher"/&gt;
            &lt;/compatibility&gt;

        </code>

        <para>Using version restrictions does not require revision attribute to be set in &lt;compatibility&gt; element of dependent package </para>

        <code language="xml" title=" ">

          EAthread\dev\masterconfig.xml:

            &lt;project&gt;
                &lt;masterversions&gt;
                    &lt;package name="EABase" version="2.00.31" /&gt;
                    . . . .
                &lt;/masterversions&gt;
            &lt;/project&gt;

          EAthread\dev\Manifest.xml:

            &lt;compatibility package="EAThread"&gt;
                &lt;dependent package="EABase" minversion="2.00.32" fail="false"/&gt;
            &lt;/compatibility&gt;

        </code>

        <code language="none" title=" ">

          c:\packages\EAThread\dev>nant test-build
          
          [package] EAThread-dev (pc-vc-dev-debug)  test-build
          6>        [package] EASTL-dev (pc-vc-dev-debug)  load-package
          2>        [package] MemoryMan-dev (pc-vc-dev-debug)  load-package
          5>        [package] PPMalloc-dev (pc-vc-dev-debug)  load-package
          3>        [package] EAStdC-dev (pc-vc-dev-debug)  load-package
          1>        [package] EAAssert-1.03.00 (pc-vc-dev-debug)  load-package
          4>        [package] EATest-dev (pc-vc-dev-debug)  load-package
          2>    [warning] Package 'EAThread' requires minimal version '2.00.32' of package 'EABase', but package 'EABase' (F:\packages\EABase\2.00.31) has version '2.00.31'
          3>    [warning] Package 'EAThread' requires minimal version '2.00.32' of package 'EABase', but package 'EABase' (F:\packages\EABase\2.00.31) has version '2.00.31'
          6>    [warning] Package 'EAThread' requires minimal version '2.00.32' of package 'EABase', but package 'EABase' (F:\packages\EABase\2.00.31) has version '2.00.31'
          [create-build-graph] test [Packages 13, modules 10, active modules 10]  (406 millisec)
          1>        [nant-build] building EAAssert-1.03.00 (pc-vc-dev-debug) 'runtime.EAAssert'
          3>        [nant-build] building EAStdC-dev (pc-vc-dev-debug) 'runtime.EAStdC'
          6>        [nant-build] building EASTL-dev (pc-vc-dev-debug) 'runtime.EASTL'
          4>        [nant-build] building EATest-dev (pc-vc-dev-debug) 'runtime.EATest'
          [nant-build] building EAThread-dev (pc-vc-dev-debug) 'runtime.EAThread'
          2>        [nant-build] building MemoryMan-dev (pc-vc-dev-debug) 'runtime.MemoryMan'
          5>        [nant-build] building PPMalloc-dev (pc-vc-dev-debug) 'runtime.PPMalloc'
          [nant-build] building EAThread-dev (pc-vc-dev-debug) 'test.EAThreadTest'
          [nant-build] finished target 'test-build' (7 modules) (173 millisec)
          [nant] BUILD SUCCEEDED (00:00:02)
          
        </code>

      </content>
    </section>

    <relatedTopics>
      <link xlink:href="764a7b6f-54ee-485c-b28a-630661a2b725" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>
