<?xml version="1.0" encoding="utf-8"?>
<topic id="f37789dd-0c99-456f-b4f9-78b72286a034" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        <newTerm>Master Configuration Files</newTerm> were introduced in Framework 2. 
        The primary purpose of the Master Configuration File is to define versions of the packages that will be used in a build, 
        define <token>ConfigurationPackage</token>, and a number of other configuration parameters that will be used in a build.
      </para>
    </introduction>

    <section address="MasterconfigSyntax">
      <title>Master Configuration File</title>
      <content>
        <para>
          Framework Master configuration files are written in XML. They list information of master configuration, including version numbers of packages:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Where to look for installed Packages on your machine
            </para>
          </listItem>
          <listItem>
            <para>
              The version of each package to build against
            </para>
          </listItem>
          <listItem>
            <para>
              The location of the build output
            </para>
          </listItem>
          <listItem>
            <para>
              The <link xlink:href="193bb2f4-fe6f-4268-a219-d7649904a5ee"/> to use
            </para>
          </listItem>
          <listItem>
            <para>
              Whether to download and install missing packages automatically
            </para>
          </listItem>
          <listItem>
            <para>
              Declare Global Properties, define default Configurations and several other options.
            </para>
          </listItem>
        </list>
        <alert class="note">
          <para>
            A Masterconfig File must be <link xlink:href="b3243e58-47f4-411d-86c2-79297b63d96c">well-formed XML</link> with <legacyBold>
              <codeInline>
                &lt;project&gt;
              </codeInline>
            </legacyBold>
            as the root (document) element. In spite of this, it is not a NAnt script; As a result, NAnt script elements
            (like <codeInline>&lt;if&gt;</codeInline>, <codeInline>&lt;do&gt;</codeInline>, and others) cannot be used in Masterconfig Files.
          </para>
        </alert>
        
        
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>
                <codeInline>
                  &lt;project&gt;
                </codeInline>
              </legacyBold>
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <link xlink:href="788bcc26-2989-43f1-bce4-4d65c6ce0de9" /> - required
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="36044a0a-ab66-4d89-ab3c-9993908c5857" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="51d1c80e-0c86-4dc9-bc05-3fe7f36ab53a" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="0dd3f87b-1f47-47af-a723-6d5416296035" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="0acc75e8-819f-4011-8ded-def96f7fa972" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="90bd6eff-7623-4553-99b5-d67afa511219" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="73224954-8454-4d39-9cc4-111a1d6a1a64" /> - required
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="30518755-66ed-45d5-aa64-db6e1fc5fedc" />
                </para>
              </listItem>
              <listItem>
                <para>
                  <link xlink:href="53463e92-bf47-4d46-831b-52ef8b791784" />
                </para>
              </listItem>
            </list>
          </listItem>
        </list>
      </content>
      <sections>
        <section address="Exceptions">
          <title>Exceptions</title>
          <content>
            <para>
              There may be cases where a setting may need alternate values depending on specific conditions. 
              For example, a package which needs to specify multiple versions for different conditions, eg. platforms.
              Framework supports this by exceptions, for example:
            </para>
            <code language="xml" title=" ">
              
  .            &lt;project&gt;
  .              &lt;masterversions&gt;
  .                &lt;package name="PackageB" version="2.03.00" autocleantarget="clean-me"&gt;
  .                  &lt;exception propertyname="prop1"&gt;
  .                    &lt;condition value="val1" version="2.03.01"/&gt;
  .                    &lt;condition value="val2" version="2.04.00"/&gt;
  .                  &lt;/exception&gt;
  .                &lt;/package&gt;
  .              &lt;/masterversions&gt;

  .              &lt;globalproperties&gt;prop1&lt;/globalproperties&gt;

  .              . . . .

  .            &lt;/project&gt;
              
            </code>
            <para>
              Normally, PackageB uses version 2.03.00; but in exceptional cases, it uses 2.03.01 if the condition of property "prop1" having value "val1" is met, and uses 2.04.00 if "prop1" has "val2".
            </para>
            <para>
              When NAnt sees a &lt;dependent name="PackageB"/&gt; in the build script, it checks if PackageB has exceptional versions. 
              If yes, it checks which condition is met first, based on the value of property "prop1". If it finds one, it'll use it as the version of PackageB; 
              or it'll use the normal version, 2.03.00. If property "prop1" isn't defined at this time, it just uses the normal version.
            </para>
            <alert class="note">
              <para>
                Properties other than those defined within configuration files are not passed to dependent packages automatically, 
                which will usually result in the silent drop-back behaviour described above. To ensure that dependent packages follow the 
                same exception conditions as the top-level package you need to explicitly specify any custom properties used in exception conditions 
                as the &lt;globalproperties&gt;. &lt;properties&gt; XML element nested within each package is deprecated. This pattern 
                is demonstrated for PackageB in the example above. Use the new &lt;groupproperties&gt; or &lt;globalproperties&gt;
                elements to ensure that these properties are defined correctly across a group of packages. 
                This is usually a much terser and more maintainable solution than adding per-package &lt;properties&gt; elements.
              </para>
            </alert>
            <alert class="note">
              <para>
                Simply adding "prop1" property to &lt;globalproperties&gt; is not fool proof if a value has not been pre-intiallized in the masterconfig. 
                If your package (or any dependent package)'s build script tries to spawn a command line nant.exe execution in any custom targets or 
                vcproj pre/post build step like the followings:
              </para>
            </alert>
            <code language="xml" title=" ">
 .             &lt;target name="custom"&gt;
 .               &lt;exec program="${nant.location}\nant.exe"
 .                     commandline="-masterconfigfile:${package.dir}\masterconfig.xml"/&gt;
 .             &lt;/target&gt;
            </code>
            <para>
              or
            </para>
            <code language="xml" title=" ">
 .             &lt;property name="runtime.SomeModule.vcproj.post-build-step"&gt;
 .               ${nant.location}\nant.exe -masterconfigfile:${package.dir}\masterconfig.xml
 .             &lt;/property&gt;
            </code>
            <alert class="note">
              <para>
                These scripts need to be updated to explicitly pass in the "prop1" property. Otherwise, those new nant instance will not know that "prop1" 
                property exists and PackageB version will be reverted to default version in this new nant instance.
              </para>
            </alert>
          </content>
        </section>
      </sections>
    </section>
    
    <section address="sample">
    	<title>Sample</title>
    	<content>
    		<para>
    		Here is a sample master config file containing the essentials one would need to build one of the example packages.
    		</para>
    		<code language="xml" title="A sample master config file">
&lt;project&gt;
  &lt;masterversions&gt;
    &lt;!-- CM Packages --&gt;
    &lt;package name="eaconfig"              version="2.04.03"          /&gt;

    &lt;!-- Compiler &amp; SDK packages--&gt;
    &lt;package name="VisualStudio"          version="10.0.40219-2-sp1" /&gt;
    &lt;package name="ps3sdk"                version="253.001-lite"     /&gt;
    &lt;package name="xenonsdk"              version="2.0.7978.3"       /&gt;
    &lt;package name="WindowsSDK" 		   version="8.0.50727-proxy"  /&gt;

    &lt;!-- Distributed build packages  --&gt;
    &lt;package name="IncrediBuild"          version="3.32.950"         /&gt;
    &lt;package name="sndbs"                 version="2.0.47.19"        /&gt;
    &lt;package name="snvsi"                 version="1.8.2"            /&gt;
    &lt;package name="vstomaketools"         version="2.02.00"          /&gt;
  &lt;/masterversions&gt;

  &lt;!-- Option to download packages specified in the above list if not found  --&gt;
  &lt;ondemand&gt;true&lt;/ondemand&gt;

  &lt;!-- A folder name within the built package where auto-generated and temp files will be placed --&gt;
  &lt;buildroot&gt;build&lt;/buildroot&gt;

  &lt;!-- Directories to look for the above packages in --&gt;
  &lt;packageroots&gt;
    &lt;packageroot&gt;${nant.location}\..\..\..&lt;/packageroot&gt;
    &lt;packageroot&gt;.\..\..&lt;/packageroot&gt;
  &lt;/packageroots&gt;

  &lt;!-- The platforms to build for unless specified on the commandline --&gt;
  &lt;config package="eaconfig" default="pc-vc-dev-debug" includes="pc-vc-dev-* ps3-gcc-dev-* xenon-vc-dev-*" /&gt;
&lt;/project&gt;
    		</code>

        <para>
          Properties may optionally be passed down to an autobuildclean dependent package via the <codeInline>&lt;properties&gt;</codeInline>,
          <codeInline>&lt;groupproperties&gt;</codeInline>, and <codeInline>&lt;globalproperties&gt;</codeInline>
          tags. Above, (if existing at the time of autobuilding) property123 and propertyABC will only be passed to
          <codeInline>&lt;dependent name="PackageA"&gt;</codeInline>, groupproperty1 and groupproperty2 will be passed to both
          <codeInline>&lt;dependent name="PackageA"&gt;</codeInline>  and <codeInline>&lt;dependent name="PackageB"&gt;</codeInline>
          because they both belong to the same group "buildable", and globalpropertyA and globalpropertyB will be passed to all packages within
          <codeInline>&lt;masterversions&gt;</codeInline>
          tag. Definition of the properties is the privilege of the higher level package that wants to autobuild a (lower)
          dependent package (e.g. gamepackage would define property123 and propertyABC via two <codeInline>&lt;property&gt;</codeInline> tasks, the same for both group/global properties).

        </para>

      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
