<?xml version="1.0" encoding="utf-8"?>
<topic id="d172c33b-e287-4a97-8b74-3a737ec00f6e" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">


    <introduction>
      <para>Setting compiler options for DotNet module</para>
    </introduction>

    <section address="Section1">
      <content>
        <autoOutline>2</autoOutline>
      </content>
      <sections>
          <section address="Defines">
            
              <title>Defines</title>
              <content>
                <definitionTable>
                  <definedTerm>
                    <token>groupname</token><codeInline>.defines</codeInline>
                  </definedTerm>
                  <definition>
                    <para>
                      Use this property to specify additional defines.
                    </para>
                    <para>
                      Each define should be on a separate line
                    </para>
                    <para>
                      <token>buildtype</token> option <legacyBold><codeInline>csc.defines</codeInline></legacyBold> 
                    (<legacyBold><codeInline>fsc.defines</codeInline></legacyBold> for F#) can also be used to set defines.
                    Values from option and property are merged.
                  </para>
                     </definition>
                </definitionTable>
                <alert class="note">
                  <para>Framework adds 'EA_DOTNET2' define, and in debug mode it will add 'TRACE DEBUG' defines.</para>
                  <para>To disable automatic addition of defines use property:</para>
                  <para>
                    <legacyBold><token>groupname</token><codeInline>.nodefaultdefines</codeInline></legacyBold> = true
                  </para>
                </alert>
              </content>
          </section>
          <section address="Warningsaserrors">
              <title>Warningsaserrors</title>
              <content>
                <definitionTable>
                  <definedTerm>
                    <token>groupname</token><codeInline>warningsaserrors</codeInline>
                  </definedTerm>
                  <definition>
                    <para>
                      Use boolean property to enable warningsaserrors (<codeInline>/warnaserror</codeInline>)
                    </para>
                    <para>
                      If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                      (<codeInline>csc.warningsaserrors</codeInline> or <codeInline>fsc.warningsaserrors</codeInline>for F#).
                    </para>
                  </definition>
                  <definedTerm>
                    <token>groupname</token><codeInline>warningsaserrors.list</codeInline>
                  </definedTerm>
                  <definition>
                    <para>
                      Use this property to enable specific warnings as errors:
                      <codeInline>/warnaserror:${[group].[module].warningsaserrors.list}</codeInline>
                    </para>
                    <para>
                      If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                      (<codeInline>csc.warningsaserrors.list</codeInline> or <codeInline>fsc.warningsaserrors.list</codeInline>for F#).
                    </para>
                  </definition>
                </definitionTable>
              </content>
          </section>
        <section address="Suppresswarnings">
          <title>Suppresswarnings</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token><codeInline>suppresswarnings</codeInline>
              </definedTerm>
              <definition>
                <para>
                  Use boolean property to supress specifig warnings:
                  <codeInline>/nowarn:${[group].[module].suppresswarnings}</codeInline>
                </para>
                <para>
                  If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                  (<codeInline>csc.suppresswarnings</codeInline> or <codeInline>fsc.suppresswarnings</codeInline>for F#).
                </para>
              </definition>
            </definitionTable>
          </content>
        </section>
        <section address="Debug">
          <title>Debug</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token>
                <codeInline>debug</codeInline>
              </definedTerm>
              <definition>
                <para>
                  Use this property to set 'Debug Info Level': <legacyBold>none</legacyBold>, <legacyBold>full</legacyBold>, <legacyBold>pdb-only</legacyBold>.
                  <codeInline>/debug:${[group].[module].debug}</codeInline>
                </para>
                <para>
                  If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                  (<codeInline>csc.debug</codeInline> or <codeInline>fsc.debug</codeInline>for F#).
                </para>
                <alert class="note">
                  <para>
                    <codeInline>[group].[module].debug</codeInline> property only uised when buildtype optionset has option <codeInline>debugflags='on'</codeInline>
                  </para>
                </alert>
              </definition>
            </definitionTable>
          </content>
        </section>

        <section address="Keyfile">
          <title>Keyfile</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token><codeInline>keyfile</codeInline>
              </definedTerm>
                <definition>
                  <para>
                    Use this property to set keyfile location:
                    <codeInline>/keyfile:${[group].[module].keyfile}</codeInline>
                  </para>
                  <para>
                    If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                    (<codeInline>csc.keyfile</codeInline> or <codeInline>fsc.keyfile</codeInline>for F#).
                  </para>
                </definition>
            </definitionTable>
          </content>
        </section>

        <section address="Platform">
          <title>Platform</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token>
                <codeInline>platform</codeInline>
              </definedTerm>
              <definition>
                <para>
                  Use this property to specify target platform:
                  <codeInline>/platform:${[group].[module].platform}</codeInline>
                </para>
                <para>
                  When <codeInline>platform</codeInline> property is not specified Framework will use value
                  <legacyBold>
                    <codeInline>anycpu</codeInline>
                  </legacyBold> for assemblies, unless property
                </para>
                <para>
                  <legacyBold>
                    <codeInline>eaconfig.use-exact-dotnet-platform</codeInline> or
                  </legacyBold>
                  <legacyBold>
                    <token>groupname</token>
                    <codeInline>.use-exact-dotnet-platform</codeInline>
                  </legacyBold>
                </para>
                <para>
                  is set to true or Module is an executable.
                </para>

                <para> When module is executable or <codeInline>'use-exact-dotnet-platform=true'</codeInline> 
                Framework will use <codeInline>${config-processor}</codeInline> property:</para>
                <list class="bullet">
                  <listItem>
                    <para>
                      <legacyBold>x86</legacyBold>   ==> <codeInline>/platform:x86</codeInline>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>x64</legacyBold>   ==> <codeInline>/platform:x64</codeInline>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>arm</legacyBold>   ==> <codeInline>/platform:ARM</codeInline>
                    </para>
                  </listItem>
                </list>
                <para>
                  When <codeInline>${config-processor}</codeInline> property is not specified Framework 
                  will use <codeInline>${config-system}</codeInline> property:
                </para>
                <list class="bullet">
                  <listItem>
                    <para>
                      <legacyBold>pc</legacyBold>   ==> <codeInline>/platform:x86</codeInline>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>pc64</legacyBold>   ==> <codeInline>/platform:x64</codeInline>
                    </para>
                  </listItem>
                  <listItem>
                    <para>
                      <legacyBold>any other case</legacyBold>   ==> <codeInline>/platform:anycpu</codeInline>
                    </para>
                  </listItem>
                </list>
              </definition>
            </definitionTable>
            <alert class="note">
              <para>
                If property [group].[module].platform does not exist Framework will look for corresponding option
                in the  <token>buildtype</token> optionset (<codeInline>csc.platform</codeInline> or <codeInline>fsc.platform</codeInline>for F#).
              </para>
            </alert>
          </content>
        </section>

        <section address="Allowunsafe">
          <title>Allowunsafe</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token>
                <codeInline>allowunsafe</codeInline>
              </definedTerm>
              <definition>
                <para>
                  Use this boolean property to set allowunsafe option:  <codeInline>/unsafe</codeInline>
                </para>
                <para>
                  If property do not exist Framework will look for corresponding option in the  <token>buildtype</token> optionset
                  (<codeInline>csc.allowunsafe</codeInline> or <codeInline>fsc.allowunsafe</codeInline>for F#).
                </para>
              </definition>
            </definitionTable>
          </content>
        </section>

        <section address="AdditionalArgs">
          <title>Additional Args</title>
          <content>
            <definitionTable>
              <definedTerm>
                <token>groupname</token><codeInline>csc-args</codeInline>  (<codeInline>.fsc-args</codeInline> for F#)
              </definedTerm>
              <definition>
                <para>
                  Use this property to pass additional options to compiler.
                </para>
              </definition>
            </definitionTable>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>

    </relatedTopics>
  </developerConceptualDocument>
</topic>
