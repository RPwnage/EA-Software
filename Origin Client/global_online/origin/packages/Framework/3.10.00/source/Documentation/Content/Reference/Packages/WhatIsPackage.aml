<?xml version="1.0" encoding="utf-8"?>
<topic id="3a086246-d425-43a6-8243-a50d0d9d2a64" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <autoOutline />
      <para>This topics explains what is a Framework Package and typical usage scenarios</para>
    </introduction>
    <section>
      <title>What Is Framework Package?</title>
      <content>
        <para>
          The simplest definition of a Framework Package is a directory with <token>ManifestFile</token> file.
          There is also a requirement on the folder structure:
        </para>
        <para>
          <phrase>
            Package should be located in the folder with name equal to the
            Package Name and subfolder with name equal to the Package version, names are case sensitive, even if underlying file system is not.
          </phrase>
        </para>
        <alert class="important">
          <para>
            The folder name specifies the Package's name and is restricted to the following characters:
          </para>
          <list class="bullet">
            <listItem>
              <para>alpha-numeric characters</para>
            </listItem>
            <listItem>
              <para>
                underscore character <literal>'_'</literal>
              </para>
            </listItem>
          </list>
          <para>
            Package names are case-sensitive.
          </para>
        </alert>
      </content>
    </section>
    <section>
      <title>Minimal Package content</title>
      <content>
        <mediaLink>
          <caption placement="before">Minimal structure of a Framework Package containing "My Files.txt" file</caption>
          <image xlink:href="MinimalPackage"/>
        </mediaLink>
        <para>
          How Package is useful in context of Framework?
        </para>
        <list class="bullet">
          <listItem>
            <para>
              A Framework script can access package content by executing <languageKeyword>dependent</languageKeyword> task.
            </para>
            <code language="none">
              <![CDATA[
                  <dependent name="MyPackage"/>
              ]]>
            </code>
            <para>
              <languageKeyword>dependent</languageKeyword> task will locate package in the <token>PackageRoots</token> or autodownload
              this package from <token>PackageServer</token>.
            </para>
          </listItem>
          <listItem>
            <para>
              NAnt property <codeInline>package.MyPackage.dir</codeInline> with value of the package directory path is set.
              The property can then be used in the script to access and manupulate files in the package folder.
            </para>
          </listItem>
          <listItem>
            <para>Packages can have much more complex interface to communicate with Framework to do code builds as described below in the next sections .</para>
          </listItem>
        </list>
      </content>
    </section>
    <section>
      <title>Framework Package Elements</title>
      <content>
        <para>
          Framework Package consists of a collection of files grouped into directory as well as a .build file and Manifest.xml file,
          and Framework Packages usually also contain an Initialize.xml file in a subdirectory named <localUri>scripts</localUri>.
          There are conventions and good practices in how to name various subdirectories, where to place source files,
          include files, binary etc.
        </para>
        <mediaLink>
          <caption placement="before">A typical Framework Package will look like this</caption>
          <image xlink:href="SimplePackageFolderLayout"/>
        </mediaLink>
        <para>
          Framework Package can contain following elements, where at least Manifest.xml or <literal>Package Name</literal>.build fle is required
          for arbitrary directory to be considered a package.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold><link xlink:href="764a7b6f-54ee-485c-b28a-630661a2b725">Manifest.xml</link></legacyBold> file - 
              defines meta information about the Package
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>
                <link xlink:href="c10319f4-648f-46e6-87dd-1c36e5eb9198">.build</link>
              </legacyBold>
               file - defines set of data used by Framework to perform a code build or other build action.
            </para>
            <alert class="note">
              <para>
                The name of the build file must be same as the name of the Package.
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              <legacyBold>
                <token>InitializeXml</token></legacyBold>
              file - defines public interface for the Package. During the build process other packages can access data defined in this file, 
              other packages have no visibility into the Package build script.
            </para>
            <alert class="note">
              <para>
                Initialize.xml must be in subfolder named <localUri>scripts</localUri>
              </para>
            </alert>
          </listItem>
          <listItem>
            <para>
              Optional <token>Masterconfig</token> file to define other required for build packages.
            </para>
          </listItem>
        </list>
        <alert class="note">
          <para>
            The sub folder name specifies the version number which allows different versions of a Package to co-exist.
            Formaly the name of the version subfolder can be arbitrary string, but it is strongly advised to follow the following convention accepted at EA:
          </para>
          <para>
            <phrase>
              The version number is comprised of three numeric components in the form of <application>xx.yy.zz</application> which are generally
              incremented between versions according to the following guidelines:
            </phrase>
          </para>
          <list class="bullet">
            <listItem>
              <para>
                <application>xx</application>: – The Package contains a major rewrite or architectural change
              </para>
            </listItem>
            <listItem>
              <para>
                <application>yy</application>: – Changes have been made to interfaces, new features have been added and/or changes have been made to how the code behaves
              </para>
            </listItem>
            <listItem>
              <para>
                <application>zz</application>: – Bug fixes have been made but there are no changes to interfaces or usage
              </para>
            </listItem>
          </list>
        </alert>
        <alert class="note">
          <para>
            <token>Framework1</token> style packages may contain no Manifest File, and at least require a <literal>Package Name</literal>.build script.
          </para>
        </alert>
      </content>
    </section>
    <section address="FrameworkPackageDirectory">
      <title>Framework Package Directory</title>
      <content>
        <para>
          Term <newTerm>Package Directory</newTerm> means <legacyItalic>release</legacyItalic> directory, i.e. <fictitiousUri>..../package name/version</fictitiousUri> directory
        </para>
        <para>
          In the  simple_program example above <newTerm>'Package Directory'</newTerm> is <fictitiousUri>C:\packages\simple_program\1.00.00</fictitiousUri>
        </para>
        <para>
          In the .build script file package directory can be accessed through property <codeInline>${package.dir}</codeInline>
        </para>
        <para>
          In other packages package directory can be accessed:
        </para>
        <list class="bullet">
          <listItem>
            <code language="xml" title="through property ${package.[package name].dir} after &lt;dependent&gt; task is executed">

              &lt;dependent name="simple_program" &gt;

              &lt;echo&gt;simple_program package directory = ${package.simple_program.dir}&lt;/echo&gt;

            </code>
          </listItem>
          <listItem>
            <code language="xml" title="Using NAnt function PackageGetMasterDir() or PackageGetMasterDirOrEmpty()">

              &lt;echo&gt;simple_program package directory = &amp;{PackageGetMasterDir('simple_program')}&lt;/echo&gt;

            </code>
            <para>Execution of &lt;dependent&gt; task is not needed in this case</para>

          </listItem>

        </list>

      </content>
    </section>

    <relatedTopics>
      <link xlink:href="764a7b6f-54ee-485c-b28a-630661a2b725"/>
      <link xlink:href="ed0d2418-859f-4e9c-8e09-f85e861e2e3d"/>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
