<?xml version="1.0" encoding="utf-8"?>
<topic id="973af4b5-a1df-42de-90d8-caafbbadeb20" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>This topic contains high level introduction into Framework 3</para>
    </introduction>
    <section address="Framework3Overview_Introduction">
      <title>Introduction</title>
      <content>
        <para>
          Framework 3 is further development of <token>Framework2</token>. Number of packages was significantly
          reworked to improve performance and usability. NAnt engine is optimized and it is now thread safe and parallel processing
          is used at several levels including parallel loading of package build scripts, parallel Visual Studio project generation,
          and parallel native nant builds.
        </para>
        <para>
          Framework 3 has the same interfaces as Framework-2 and it is highly backwards compatible, the differences and transition 
          from Framework 2 are described in detals <link  xlink:href="8790c2fb-bc08-4da1-b01b-17b045b006f6">here</link>.
        </para>
        <para>
          Framework 3 performs much faster than previos versions but equally, if not more, important is that internal re-architecture 
          of the build data processing results in more flexible, robust, and configurable build system for multiplatform environments 
          we have to deal these days. On some platforms only native NAnt builds are available, on others Solution generation is preferred way to build. 
          Framework-3 eliminates differences in targets and build data processing for native Nant builds and Solution generation.  
          It is not anymore necessary (but still possible) to provide different pre/post build targets and other input definitions in the build scripts 
          for native and generation targets.
        </para>
      </content>
    </section>
    <section address="Framework3Overview_Architecture">
      <title>Architecture Changes</title>
      <content>
        <para>
          Improving nant speed and introducing parallel processing into Framework 3 is only part of the changes. 
          To fulfill the need for build system better suited for complex build pipelines that we see on the mobile platforms 
          like Android, provide an easy way to  plug-in various output format generators (Xcode, and others) and allow more flexible 
          control over the build data eaconfig targets were re-architected. Below is the diagram demonstrating basic workflow of Framework 3.
        </para>
        <mediaLink>
          <image xlink:href="Framework_3_Intro"/>
        </mediaLink>
        <para>
          The goals of this re-architecture are the following:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Provide more flexible and solid platform for complex build pipelines. Many platforms require additional steps like building java code, 
              packaging, and others to be injected into Framework build targets execution. The traditional approach in Framework 2 was to modify 
              internal eaconfig properties, filesets, and options sets. These internal objects were short lived and created and consumed by 
              Framework at different stages of the build process.  Modification of these objects had to be done at proper time in the build process, 
              which resulted in introduction of multiple pre/post build targets in eaconfig. These targets are defined mostly by SDK and custom 
              configuration packages. This process is very fragile and unsustainable if more platforms with complex build processes are introduced. 
              In addition some of the build steps (Android) require access to the whole sub-tree of build Modules. Framework 2 did not provide easy 
              access to this information, which resulted in introduction of additional nant targets which significantly degrades build performance, 
              especially in distributed XGE builds.
              Framework 3 with access to the whole build graph information and powerful pre/post process tasks that can modify virtually 
              any aspect of the build data provides much more efficient, easy, and  flexible  platform.
            </para>
          </listItem>
          <listItem>
            <para>
              Increase speed of the Framework builds or solution generation.
            </para>
          </listItem>
          <listItem>
            <para>
              Eliminate the need for different data definitions in package build  scripts. Example: prebuild target vs vcproj.prebuild-step.
            </para>
          </listItem>
          <listItem>
            <para>
              Eliminate differences in data processing and preparation in different types of builds: nant build, Visual Studio solution generation, Xcode generation, etc.
            </para>
          </listItem>
          <listItem>
            <para>
              Allow for transitive operations. This includes, but not limited to, transitive dependencies.
            </para>
          </listItem>
          <listItem>
            <para>
              Allow for operations on the whole set of build data (build graph) before starting nant build or generating various output formats.
            </para>
          </listItem>
        </list>
        <para>
          Since we always use Framework 2 as a whole, and to simplify management of compatibility between different versions of Framework 2 components 
          all generic, platform-independent tasks from eaconfig and solution generation were merged into Framework package. 
          Eaconfig package now contains XML scripts with platform settings and very lightweight set of target definition. 
          This change also significantly improved eaconfig loading times.
        </para>
        <para>
          Visual Studio solution generation is significantly simpler now with availability of the build graph data, 
          there is no need any more for complex nantToVSTools package. Framework contains a number of base C# classes 
          that can be used to implement generation of various output formats. Visual Studio solution generation, 
          as most often use case, is also integrated into Framework package. It is not required to integrate generators
          in the Framework package. They can be implemented as nant tasks in separate packages.
        </para>
      </content>
    </section>
    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
