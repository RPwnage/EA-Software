<?xml version="1.0" encoding="utf-8"?>
<topic id="6e7efae2-2b91-4be3-bade-f98dee8c2a5f" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>This topic explains the purpose of modules in the Framework build system.</para>
    </introduction>

    <section address="Modules">
      <title>Module</title>
      <content>
        <para>
          Modules allow a framework user to put more than one build unit into a Package's build group.
          It is primarily a convenience feature that, for example, allows users to put several libraries into a single package.
        </para>
        <para>
          To define a new Module a framework user simply includes the Module's name after the build group's name when defining or
          refering to any properties specific to that module. The example below contains two modules named
          <newTerm>LibModule</newTerm> and <newTerm>ProgramModule</newTerm>. Framework users must also list the names of each module
          in each of a package's build groups by using the .buildmodules property <token>group</token>. The .buildmodules property
          lets Eaconfig know which modules were defined.
        </para>

        <code language="xml" title=" " source="ExampleFiles\Reference\Modules\ModulesDefinition1.xml" />

        <alert class="note">
          <para>
            Don't forget to list module names in the .buildmodules property <token>group</token> for each build group with modules.
        </para>
        </alert>

        <alert class="note">
          <para>
            When some or all of the build groups do not define modules, Framework assumes that such groups 
            contain a single module with name equal to the Package name.
          </para>
        </alert>
        <para>
          Dependencies between Modules can be defined for Modules within the same Package:
        </para>

        <code language="xml" title=" ">
          &lt;property name="runtime.ProgramModule.runtime.moduledependencies"&gt;
            LibModule
          &lt;/property&gt;
        </code>

        <para>
          Dependencies between different packages are defined on a package level:
        </para>

        <code language="xml" title=" " source="ExampleFiles\Reference\Modules\ModulesDefinitionPackageDependencies1.xml"/>

        <para>
          <newTerm>ProgramModule</newTerm> depends on <newTerm>LibModule</newTerm> from the same package, and it will depend on all 
          <newTerm>runtime</newTerm>  modules defined in the Package <newTerm>OtherPackageWithModules</newTerm> 
        </para>

        <para>
          As an example of a test module dependent on a runtime module building first:
        </para>

        <code language="xml" title=" " source="ExampleFiles\Reference\Modules\ModulesDefinitionGroupDependencies1.xml"/>

        <alert class="note">
          <para>
            It is possible to define a dependency on selected modules in another package. 
            For details see chapter Constraining dependencies on this page Modelling Dependencies.
          </para>
          
        </alert>

      </content>
    </section>

    <section address="ModuleGroupName">
      <title>Module Groupname</title>
      <content>
        <para>Most of the module related NAnt properties and filesets follow the following convention</para>
        <code language="none" title=" ">
           [group].[module].xxxx
        </code>
        <para>Where <codeInline>[group]</codeInline> means the name of the <link xlink:href="efabd9f3-1e0e-43de-b90d-9180c835b8af">build group</link>, 
        and <codeInline>[module]</codeInline> stands for the name of the module
      </para>
        <para>Property <codeInline>[group].buildmodules must also be defined when convention "with modules" is used.</codeInline>
      </para>
        <para>
          Old versions of Framework did not have any module support, i.e. they had one logical module in each group,
          but no explicit module name was assigned. WE will call such packages "package without modules".
          Convention for property and fileset names in package without modules is:
        </para>
        <code language="none" title=" ">
          [group].xxxx
        </code>
        <para>
          <legacyBold>
          To save explanations further in this documentation we will use convention <codeInline>[group].[module].xxxx</codeInline>, but for packages (groups) without modules
          it can mean <codeInline>[group].xxxx</codeInline>.
          </legacyBold>
        </para>

        <alert class="note">
          <para>
            Separate groups in the package can follow either convention, for example, runtime group with a single unit can use convention "without modules"
            and test group can convention "with modules"
          </para>
        </alert>
        <alert class="tip">
          <para>
            We recomment always use convention "with modules".
          </para>
        </alert>
        
        
      </content>
    </section>

    <relatedTopics>

    </relatedTopics>
  </developerConceptualDocument>
</topic>
