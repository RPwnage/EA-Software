using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using NAnt.Core;
using NAnt.Core.Util;
using NAnt.Core.Attributes;
using EA.Eaconfig.Core;
using EA.FrameworkTasks.Model;

namespace EA.Eaconfig.Backends
{
    /// <summary>
    /// Visual Studio Helper funtions
    /// </summary>
    [FunctionClass("Visual Studio Helper Functions")]
    public class VSNAntFunctions : FunctionClassBase
    {
        /// <summary>
        /// Returns path to the solutionfile generated ty 'slnruntime', 'slntest', etc targets.
        /// </summary>
        /// <param name="project"></param>
        /// <param name="buildgroup">The name of the buildgroup: 'runtime', 'test', 'example', or 'tool'</param>
        /// <param name="generateSingleConfig">If true, solution names generated by single config targets 'slnruntime-generate-single-config', 'slntest-generate-single-config' is evaluated. Default is "false"</param>
        /// <param name="splitByGroupNames">If true returns solution names split by groups. During solution generation property 'eaconfig.build.split-by-group-names' used to turn this functionality on. Default is "false".</param>
        /// <returns>Full Path to the solution file name.</returns>
        [Function()]
        public static string GetSolutionFileName(Project project, BuildGroups buildgroup, bool generateSingleConfig = false, bool splitByGroupNames = false)
        {
            var templates = GeneratorTemplatesData.CreateGeneratorTemplateData(project, buildgroup);
            var location = Generator.GetGeneratedLocation(project, buildgroup,  templates, generateSingleConfig, splitByGroupNames);

            return Path.Combine(location.Dir.Path, location.Name + ".sln");
        }

        /// <summary>
        /// Evaluates Visual Studio "Platform' name for the currently loaded configuration (${config}).
        /// </summary>
        /// <param name="project"></param>
        /// <returns>Name of the Visual Studio 'Platform'</returns>
        [Function()]
        public static string GetVisualStudioPlatformName(Project project)
        {
            if (!project.Properties.Contains("config-vs-version"))
            {
                SetConfigVisualStudioVersion.Execute(project);
            }

            var platformname = project.Properties["visualstudio." + project.Properties["config-vs-version"] + ".platform.name"] ?? (project.Properties["visualstudio.platform.name"] ?? project.Properties["eaconfig.visual-studio.platform-name"]);

            if (String.IsNullOrEmpty(platformname))
            {
                project.Log.Warning.WriteLine("Unable to determine Visual Studio Plafrom name for configuration {0}. Properties '{1}', '{2}' or '{3}' are not defined. Will use 'Win32' platform.", project.Properties["config"], "visualstudio." + project.Properties["config-vs-version"] + ".platform.name", "visualstudio.platform.name", "eaconfig.visual-studio.platform-name");

                platformname = "Win32";
            }
            return platformname;
        }


    }
}
