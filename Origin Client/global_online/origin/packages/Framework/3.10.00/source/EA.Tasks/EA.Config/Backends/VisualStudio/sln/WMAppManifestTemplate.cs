// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EA.Eaconfig.Backends.VisualStudio
{
    using System;
    
    
    #line 1 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class WMAppManifestTemplate : WMAppManifestTemplateBase
    {
        public virtual string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Deployment xmlns=\"http://schemas.microso" +
                    "ft.com/windowsphone/2012/deployment\" AppPlatformVersion=\"8.0\">\r\n  <DefaultLangua" +
                    "ge xmlns=\"\" code=\"en\"/>\r\n  <App xmlns=\"\" ProductID=\"{");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProductId));
            
            #line default
            #line hidden
            this.Write("}\" Title=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Title));
            
            #line default
            #line hidden
            this.Write("\" RuntimeType=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(RuntimeType));
            
            #line default
            #line hidden
            this.Write("\" Version=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AppVersion));
            
            #line default
            #line hidden
            this.Write("\" Genre=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AppGenre));
            
            #line default
            #line hidden
            this.Write("\"  Author=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Author));
            
            #line default
            #line hidden
            this.Write("\" Description=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AppDescription));
            
            #line default
            #line hidden
            this.Write("\" Publisher=\"");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Publisher));
            
            #line default
            #line hidden
            this.Write("\" PublisherID=\"{");
            
            #line 5 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PublisherId));
            
            #line default
            #line hidden
            this.Write("}\">\r\n    <IconPath IsRelative=\"true\" IsResource=\"false\">");
            
            #line 6 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IconPath));
            
            #line default
            #line hidden
            this.Write("</IconPath>\r\n    <Capabilities>\r\n");
            
            #line 8 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
    foreach(var capability in Capabilities)
      { 
            
            #line default
            #line hidden
            this.Write("      <Capability Name=\"");
            
            #line 10 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(capability));
            
            #line default
            #line hidden
            this.Write("\" />\r\n");
            
            #line 11 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
    } 
            
            #line default
            #line hidden
            this.Write("    </Capabilities>\r\n    <Tasks>\r\n      ");
            
            #line 14 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  if(IsDotNetProject)
      { 
            
            #line default
            #line hidden
            this.Write("        <DefaultTask Name=\"_default\" NavigationPage=\"");
            
            #line 16 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ImagePath));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 16 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
 if(!String.IsNullOrEmpty(ActivationPolicy)) { 
            
            #line default
            #line hidden
            this.Write(" ActivationPolicy=\"");
            
            #line 16 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ActivationPolicy));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 16 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  />\r\n        ");
            
            #line 17 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
    } 
      else
      {  
            
            #line default
            #line hidden
            this.Write("        <DefaultTask Name=\"_default\" ImagePath=\"");
            
            #line 20 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ImagePath));
            
            #line default
            #line hidden
            this.Write(".exe\" ImageParams=\"\"  ");
            
            #line 20 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
 if(!String.IsNullOrEmpty(ActivationPolicy)) { 
            
            #line default
            #line hidden
            this.Write(" ActivationPolicy=\"");
            
            #line 20 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ActivationPolicy));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 20 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("/>\r\n");
            
            #line 21 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
    } 
            
            #line default
            #line hidden
            this.Write("    </Tasks>\r\n    <Tokens>\r\n      <PrimaryToken TokenID=\"");
            
            #line 24 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TokenId));
            
            #line default
            #line hidden
            this.Write("\" TaskName=\"_default\">\r\n        <TemplateFlip>\r\n          <SmallImageURI IsRelati" +
                    "ve=\"true\" IsResource=\"false\">");
            
            #line 26 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SmallImageUri));
            
            #line default
            #line hidden
            this.Write("</SmallImageURI>\r\n          <Count>0</Count>\r\n          <BackgroundImageURI IsRel" +
                    "ative=\"true\" IsResource=\"false\">");
            
            #line 28 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(BackgroundImageUri));
            
            #line default
            #line hidden
            this.Write("</BackgroundImageURI>\r\n          <Title>");
            
            #line 29 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Title));
            
            #line default
            #line hidden
            this.Write(@"</Title>
          <BackContent></BackContent>
          <BackBackgroundImageURI></BackBackgroundImageURI>
          <BackTitle></BackTitle>
          <LargeBackgroundImageURI></LargeBackgroundImageURI>
          <LargeBackContent></LargeBackContent>
          <LargeBackBackgroundImageURI></LargeBackBackgroundImageURI>
          <DeviceLockImageURI></DeviceLockImageURI>
          <HasLarge></HasLarge>
        </TemplateFlip>
      </PrimaryToken>
    </Tokens>
");
            
            #line 41 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  if(!String.IsNullOrEmpty(ActivatableClasses)) { 
            
            #line default
            #line hidden
            this.Write("        <ActivatableClasses>\r\n            ");
            
            #line 43 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ActivatableClasses));
            
            #line default
            #line hidden
            this.Write("\r\n        </ActivatableClasses>\r\n");
            
            #line 45 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("    <ScreenResolutions>\r\n      <ScreenResolution Name=\"ID_RESOLUTION_WVGA\"/>\r\n   " +
                    "   <ScreenResolution Name=\"ID_RESOLUTION_WXGA\"/>\r\n      <ScreenResolution Name=\"" +
                    "ID_RESOLUTION_HD720P\"/>\r\n    </ScreenResolutions>\r\n");
            
            #line 51 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  if(FunctionalCapabilities.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("      <FunctionalCapabilities>\r\n        ");
            
            #line 53 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  foreach(var fcapability in FunctionalCapabilities)  
            { 
            
            #line default
            #line hidden
            this.Write("                  <FunctionalCapability Name=\"");
            
            #line 55 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fcapability));
            
            #line default
            #line hidden
            this.Write("\" />\r\n        ");
            
            #line 56 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("      </FunctionalCapabilities>\r\n");
            
            #line 58 "D:\packages\Framework\dev\source\EA.Tasks\EA.Config\Backends\VisualStudio\sln\WMAppManifestTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("  \r\n      </App>\r\n</Deployment>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class WMAppManifestTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
