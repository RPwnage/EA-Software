<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nant</name>
    </assembly>
    <members>
        <member name="T:NAnt.Console.ConsoleCtrl">
             <remarks>
             This class uses the .Net Runtime Interop Services to make a call to the 
             win32 API SetConsoleCtrlHandler function. 
             
             We need this class so that we can get callbacks when the main console process terminates.
             However, if a user decides to kill the process manually (ie from the task manager) we
             will not get an event and the process will be abrubtly terminated and results undefined.
             </remarks>
             <summary>
             Class to catch console control events (ie CTRL-C) in C#. 
             Calls SetConsoleCtrlHandler() in Win32 API
             </summary>
             <example>
            		public static void MyHandler(ConsoleCtrl.ConsoleEvent consoleEvent) { ... } 
            
            		ConsoleCtrl cc = new ConsoleCtrl();
            		cc.ControlEvent += new ConsoleCtrl.ControlEventHandler(MyHandler);
            </example>
        </member>
        <member name="M:NAnt.Console.ConsoleCtrl.#ctor">
            <summary>Create a new instance.</summary>
        </member>
        <member name="E:NAnt.Console.ConsoleCtrl.ControlEvent">
            <summary>Event fired when a console event occurs</summary>
        </member>
        <member name="T:NAnt.Console.ConsoleCtrl.ConsoleEvent">
            <summary>The event that occurred. From wincom.h</summary>
        </member>
        <member name="T:NAnt.Console.ConsoleCtrl.ControlEventHandler">
            <summary>Handler to be called when a console event occurs.</summary>
        </member>
    </members>
</doc>
