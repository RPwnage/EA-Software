<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EA.Tasks</name>
    </assembly>
    <members>
        <member name="T:EA.CPlusPlusTasks.AsTask">
            <summary>A generic assembler compiler task.</summary>
            <remarks>
            <para>The <c>as</c> task requires the following property to be set:</para>
            <list type='table'>
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${as}</term>
                    <description>The absolute pathname of the compiler executable.</description>
                </item>
                <item>
                    <term>${as.template.includedir}</term>
                    <description>The syntax template to transform <c>${as.includes}</c> into compiler flags.</description>
                </item>
            </list>
            
            <para>The task will make use of the following properties:</para>
            <list type='table'>
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${as.defines}</term>
                    <description>The defines for the compilation.</description>
                </item>
                <item>
                    <term>${as.includedirs}</term>
                    <description>The include directories for the compilation.</description>
                </item>
                <item>
                    <term>${as.gccdefines}</term>
                    <description>The defines flags to pass to gcc when analyzing the file dependencies.</description>
                </item>
                <item>
                    <term>${as.options}</term>
                    <description>The options flags for the compilation.  All the files from the <c>source</c> file set will be compiled with the same options.  If you want different compile options, you must invoke the <c>as</c> task with those options.</description>
                </item>
            	<item>
            		<term>${as.template.commandline}</term>
            		<description>The template to use when creating the command line.  Default is %defines% %includedirs% %options%.</description>
                </item>
                <item>
                    <term>${as.template.define}</term>
                    <description>The syntax template to transform <c>${as.defines}</c> into compiler flags.</description>
                </item>
                <item>
            		<term>${as.template.sourcefile}</term>
                    <description>The syntax template to transform a <c>source file</c> into compiler source file.</description>
                </item>
                <item>      
                    <term>${as.template.responsefile}</term>
                    <description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description>
                </item>
                <item>
                    <term>${as.nodep}</term>
                    <description>If <c>true</c> dependency files will not be created.</description>
                </item>
                <item>
                    <term>${as.nocompile}</term>
                    <description>If <c>true</c> object files not be created.</description>
                </item>
                <item>
                    <term>${as.useresponsefile}</term>
                    <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description>
                </item>
                <item>
                    <term>${as.userelativepaths}</term>
                    <description>If <c>True</c> the working directory of the assembler will be set to the base directory of the <c>asmsources</c> fileset. All source and output files will then be made relative to this path. Default is <c>false</c>.</description>
                </item>
                <item>
                    <term>${as.threadcount}</term>
                    <description>The number of threads to use when compiling. Default is 1 per cpu.</description>
                </item>
                <item>
                    <term>${as.objfile.extension}</term>
                    <description>The file extension for object files.  Default is ".obj".</description>
                </item>
            	<item>      
            		<term>${as.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
            </list>
            
            <para>The task declares the following template items in order to help defining the above 
            properties:</para>
            <list type='table'>
                <listheader><term>Template item</term><description>Description</description></listheader>
                <item>      <term>%define%</term>     <description>Used by the <term>${as.template.define}</term> property to represent the current value of the <term>${as.defines}</term> property during template processing.</description></item>
                <item>      <term>%includedir%</term> <description>Used by the <term>${as.template.includedir}</term> property to represent the individual value of the <term>${as.includedirs}</term> property.</description></item>
                <item>      <term>%responsefile%</term> <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
                <item>      <term>%objectfile%</term> <description>Used by the <term>${as.options}</term> property to represent the object file name.  Object file names are formed by appending <c>".obj"</c> to the source file name.</description></item>
                <item>      <term>%outputdir%</term>  <description>Used by the <term>${as.options}</term> property to represent the actual values of the   <c>%outputdir%</c> attribute.</description></item>
                <item>      <term>%outputname%</term> <description>Used by the <term>${as.options}</term> property to represent the actual value of the   <c>%outputname%</c> attribute.</description></item>
                <item>      <term>%sourcefile%</term> <description>Used by the <term>${as.options}</term> property to represent the individual value of the <term>sources</term> file set.</description></item>
            </list>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals->Option Sets topic in help file.</para>
            </remarks>
        </member>
        <member name="T:EA.CPlusPlusTasks.BuildTaskBase">
            <summary>
            A class from which all build tasks will derive.
            </summary>
        </member>
        <member name="F:EA.CPlusPlusTasks.BuildTaskBase._optionSetName">
            <summary>Global option set.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>Force initialization of global option set.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.SetOption(System.String,System.String)">
            <summary>Sets a global option to specified value.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.GetOption(System.String)">
            <summary>Returns the specified option value from the global set of options.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.GetOption(NAnt.Core.FileItem,System.String)">
            <summary>
            Returns the specified option value from the fileset items specified option set.
            If the given fileset item does not contain a optionset name the global property
            is returned.
            </summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTaskBase.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.  Hack so that 
            the build task can initialize this task.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.  Hack so that 
            the build task can initialize this task.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the cc.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.IsGenerateDependencyOn(NAnt.Core.FileItem)">
            <summary>True if we should generate a .dep file for each source file, otherwise false.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.IsGenerateObjectOn(NAnt.Core.FileItem)">
            <summary>True if we should generate an object file for each source file, otherwise false.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.CompilerBase.NeedsCompiling(NAnt.Core.FileItem,System.String@)">
            <summary>Determines if the source file needs to be compiled.</summary>
            <param name="fileItem">The reference to the C/C++ source file.</param>
            <param name="reason">The reason why the source file needs compiling.  Empty if no reason given or file doesn't need compiling.</param>
            <returns><c>true</c> if the source file needs compiling, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>cc.*</c> propertes.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory 
            of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.OutputName">
            <summary>The base name of any associated output files (e.g. the symbol table name).  
            Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CompilerBase.ShowAllOutput">
            <summary>Determines if compiler output should always be shown (true) or only shown if the
            compiler returns an error code (false).  Default is false.  (Depreciated)</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CompilerBase.DependentDictionary">
            <summary>Used to map dependent header file paths to their last write time.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CompilerBase.ThreadCollection">
            <summary>Used to mManage the thread pool when compiling files.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CompilerBase.FileToCompile">
            <summary>Used to store dependencies information for FileItem.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsSources">
            <summary>The set of files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsIncludeDirectories">
            <summary>Custom include directories for this set files.  Use complete paths and place 
            each directory on it's own line.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsOptions">
            <summary>Custom program options for these files.  Options get appended to the end of 
            the options specified by the <c>${cc.options}</c> property.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.AsTask.AsDefines">
            <summary>Custom #defines for these files.  Defines get appended to the end of the
            defines specified in the <c>${cc.defines}</c> property.  Place each define on it's own line.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.BuildTask">
            <summary>Builds C++ source files into a program or library.</summary>
            <remarks>
              <para>
              The <c>build</c> task combines the <see cref="T:EA.CPlusPlusTasks.CcTask"/>, <see cref="T:EA.CPlusPlusTasks.AsTask"/>, 
              <see cref="T:EA.CPlusPlusTasks.LibTask"/>, and <see cref="T:EA.CPlusPlusTasks.LinkTask"/>
              to provide an easy way to build a program or library.  The 
              <c>build</c> task expects
              the compiler, linker, and librarian properties to be set
              correctly before it is invoked.
              </para>
              <para>All the C++ tasks refer to the <c>build.pathstyle</c> property to deterine how 
              format filename paths.  For Unix ('/') based SDK's this property should be set to <c>Unix</c>.
              For Windows ('\') based SDK's this property should be set to <c>Windows</c>.  If the
              property is not set no path conversions will take place.</para>
              <para>
              To compile individual files use the <c>build.sourcefile.X</c> property where <c>X</c> is a unique identifier. 
              This will let all subsequent <c>build</c> tasks know to only build these files from the given <c>build</c> tasks <c>sources</c> file set. 
              If any <c>build.sourcefile.X</c> properties are defined no linking or archiving will occur. 
              You may pass these values in through the command line using the <c>-D</c> argument for defining properties.
              For example the command <c>nant -D:build.sourcefile.0=src/test.c</c> will let all <c>build</c> tasks know to only compile the source file <c>src/test.c</c>.
              </para>
              <para>If the <c>outputdir</c> attribute is not specified the task will look for a property called 
              <c>build.outputdir</c>.  The value of the property may contain the term <c>%outputname%</c> which 
              will be replaced with value specified in the <c>name</c> attribute.  If the <c>build.outputdir</c>
              property is not defined and you are building a package the output directory will be either 1)
              <c>${package.builddir}/build/${package.config}/%outputname%</c> for a Framework 1 package, or
              2) <c>${package.builddir}/${package.config}/build/%outputname%</c> for a Framework 2 package.  
              If you are not building a package then
              the output directory will be the current directory.
              </para>
              <para><b>NOTE: </b> Empty outputdir will be treated as not specifying outputdir. If outputdir is specified,
              absolute path is recommended, such as ${build.dir}/${config}. Relative path such as "." or "temp" may have 
              unexpected result.
              </para>
              <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program using a single task.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    <property name="outdir" value="build"/>

    <target name="build">
        <build type="Program" outputdir="${outdir}" name="hello">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </build>
        <fail message="Program did not build" unless="@{FileExists('${outdir}/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>An example of compiling and linking using a fileset and optionset.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <dependent name="VisualStudio" version="7.1.1-4"/>
    <property name="outdir" value="build"/>

    <fileset name="MyFileSet">
        <includes name="hello.c"/>
    </fileset>

    <optionset name="MyOptionSet">
        <option name="build.tasks" value="cc lib link" /> 
        <option name="cc.threadcount" value="1" /> 
    </optionset>

    <target name="build">
        <build type="MyOptionSet" outputdir="${outdir}" name="hello">
            <sources>
                <includes fromfileset="MyFileSet" />
            </sources>
        </build>
        <fail message="Program did not build" unless="@{FileExists('${outdir}/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.LocalizePath(System.String,System.String)">
            <summary>Converts a path to the current style specified in the PathStyleProperty property.</summary>
            <remarks>If pathStyleValue is null or empty then the path will not be converted.</remarks>
            <param name="path">The path to localize.</param>
            <param name="pathStyleValue">The value of the PathStyleProperty property (build.pathstyle).</param>
            <returns>The localized path.</returns>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.LocalizePathInCommandLine(System.String,System.String)">
            <summary>Converts a path inside command line to the current style specified in the PathStyleProperty property. Leaves options starting with "/" unchanged</summary>
            <remarks>If pathStyleValue is null or empty then the path will not be converted.</remarks>
            <param name="path">The path to localize.</param>
            <param name="pathStyleValue">The value of the PathStyleProperty property (build.pathstyle).</param>
            <returns>The localized path.</returns>
        </member>
        <member name="M:EA.CPlusPlusTasks.BuildTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.BuildDirectory">
            <summary>Directory where all output files are placed.  See task details for more information if this attribute is not specified.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.BuildName">
            <summary>The base name of any associated output files.  The appropiate extension will be added.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.OptionSetName">
            <summary>Type of the <c>build</c> task output.  Valid values are <c>Program</c>, <c>Library</c> or the name of an named option set.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Sources">
            <summary>The set of source files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Objects">
            <summary>Additional object files to link or archive with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.IncludeDirectories">
            <summary>Custom include directories.  New line <c>'\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.UsingDirectories">
            <summary>Custom using directories.  New line <c>'\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.CompilerOptions">
            <summary>Custom compiler options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Defines">
            <summary>Custom compiler defines.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmSources">
            <summary>The set of source files to assemble.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmIncludePath">
            <summary>Custom include directories for these files.  New line <c> '\n'</c> or semicolon <c>';'</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmOptions">
            <summary>Custom assembler options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.AsmDefines">
            <summary>Custom assembler defines for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Libraries">
            <summary>The set of libraries to link with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.Dependencies">
            <summary>Additional file dependencies of a build</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.BuildTask.PrimaryOutputExtension">
            <summary>primary output extension</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.CcTask">
            <summary>A generic C/C++ compiler task.</summary>
            <remarks>
            <para>The <c>cc</c> task requires the following property to be set:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${cc}</term>
                    <description>The absolute pathname of the compiler executable.</description>
                </item>
                <item>
                    <term>${cc.template.includedir}</term>
                    <description>The syntax template to transform <c>${cc.includes}</c> into compiler flags.</description>
                </item>
            </list>
            
            <para>The task will make use of the following properties:</para>
            <list type="table">
                <listheader>
                    <term>Property</term>
                    <description>Description</description>
                </listheader>
                <item>
                    <term>${cc.defines}</term>
                    <description>The defines for the compilation.</description>
                </item>
            	<item>      
            		<term>${cc.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
                <item>
                    <term>${cc.gccdefines}</term>
                    <description>The defines flags to pass to gcc when analyzing the file dependencies.</description>
                </item>
                <item>
                    <term>${cc.includedirs}</term>
                    <description>The include directories for the compilation.</description>
                </item>
                <item>
                    <term>${cc.nodep}</term>
                    <description>If <c>true</c> dependency files will not be created.</description>
                </item>
                <item>
                    <term>${cc.nocompile}</term>
                    <description>If <c>true</c> object files not be created.</description>
                </item>
                <item>
                    <term>${cc.objfile.extension}</term>
                    <description>The file extension for object files.  Default is ".obj".</description>
                </item>
                <item>
                    <term>${cc.options}</term>
                    <description>The options flags for the compilation.  All the files from the <c>source</c> fileset will be compiled with the same options.  If you want different compile options, you must invoke the <c>cc</c> task with those options.</description>
                </item>
                <item>
                    <term>${cc.parallelcompiler}</term>
                    <description>If true, compilation will occur on parallel threads if possible
                    .  Default is false.</description>
                </item>
                <item>
                    <term>${cc.template.define}</term>
                    <description>The syntax template to transform <c>${cc.defines}</c> into compiler flags.</description>
                </item>
                <item>
                    <term>${cc.template.includedir}</term>
                    <description>The syntax template to transform <c>${cc.includedirs}</c> into compiler flags.</description>
                </item>
                <item>
                    <term>${cc.template.usingdir}</term>
                    <description>The syntax template to transform <c>${cc.usingdirs}</c> into compiler flags.</description>
                </item>
                <item>
            		<term>${cc.template.commandline}</term>
            		<description>The template to use when creating the command line.  Default is %defines% %includedirs% %options%.</description>
                </item>
                <item>
            		<term>${cc.template.sourcefile}</term>
                    <description>The syntax template to transform a <c>source file</c> into compiler source file.</description>
                </item>
                <item>      
                    <term>${cc.template.responsefile}</term>
                    <description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description>
                </item>
                <item>
                    <term>${cc.threadcount}</term>
                    <description>The number of threads to use when compiling. Default is 1 per cpu.</description>
                </item>
                <item>
                    <term>${cc.useresponsefile}</term>
                    <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description>
                </item>
                <item>
                    <term>${cc.userelativepaths}</term>
                    <description>If <c>True</c> the working directory of the compiler will be set to the base directory of the <c>sources</c> fileset. All source and output files will then be made relative to this path. Default is <c>false</c>.</description>
                </item>
                <item>
                    <term>${cc.usingdirs}</term>
                    <description>The using directories for managed C++, such as VC++. Compiler that support using directive should read this property.</description>
                </item>
            </list>
            
            <para>The following terms can be used in the above properties:</para>
            <list type="table">
                <listheader><term>Term</term><description>Description</description></listheader>
                <item>      <term>%define%</term>     <description>Used by the <term>${cc.template.define}</term> property to represent the current value of the <term>${cc.defines}</term> property during template processing.</description></item>
                <item>      <term>%includedir%</term> <description>Used by the <term>${cc.template.includedir}</term> property to represent the individual value of the <term>${cc.includedirs}</term> property.</description></item>
                <item>      <term>%usingdir%</term> <description>Used by the <term>${cc.template.usingdir}</term> property to represent the individual value of the <term>${cc.usingdirs}</term> property.</description></item>
                <item>      <term>%responsefile%</term> <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
                <item>      <term>%objectfile%</term> <description>Used by the <term>${cc.options}</term> property to represent the object file name.  Object file names are formed by appending <c>".obj"</c> to the source file name.</description></item>
                <item>      <term>%outputdir%</term>  <description>Used by the <term>${cc.options}</term> property to represent the actual values of the   <c>%outputdir%</c> attribute.</description></item>
                <item>      <term>%outputname%</term> <description>Used by the <term>${cc.options}</term> property to represent the actual value of the   <c>%outputname%</c> attribute.</description></item>
                <item>      <term>%sourcefile%</term> <description>Used by the <term>${cc.options}</term> property to represent the individual value of the <term>sources</term> fileset.</description></item>
            </list>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" targetversion="1.0.0"/>
    <dependent name="VisualStudio" version="7.1.1-4"/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project>
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Define flags to pass to gcc when analyzing dependencies -->
    <property name="cc.gccdefines">
        _MSC_VER
        RC_INVOKED
        _WIN32
        WIN32
        __cplusplus
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcSources">
            <summary>The set of files to compile.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcIncludeDirectories">
            <summary>Custom include directories for this set files.  Use complete paths and place 
            each directory on it's own line.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcUsingDirectories">
            <summary>Custom using directories for this set files.  Use complete paths and place 
            each directory on it's own line. Only applied to managed C++ compiler, such as VC++.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcOptions">
            <summary>Custom program options for these files.  Options get appended to the end of 
            the options specified by the <c>${cc.options}</c> property.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CcDefines">
            <summary>Custom #defines for these files.  Defines get appended to the end of the
            defines specified in the <c>${cc.defines}</c> property.  Place each define on it's own line.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.CcTask.CompilerPath">
            <summary>The complete path to the compiler that will be used to compile the source files.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.Dependency">
            <summary>Helper class for Link and Lib tasks to generate dependency information.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.ExternalBuildTask">
            <summary>A class from which all external build tasks will derive.</summary>
            <remarks>
            This class is deprecated, please inherit from Task and implement IExternalBuildTask instead.
            </remarks>
        </member>
        <member name="M:EA.CPlusPlusTasks.ExternalBuildTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes the task.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.ExternalBuildTask.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.ExternalBuildTask.ExecuteBuild(EA.CPlusPlusTasks.BuildTask,NAnt.Core.OptionSet)">
            <summary>Executed by the build target.</summary>
        </member>
        <member name="M:EA.CPlusPlusTasks.IExternalBuildTask.ExecuteBuild(EA.CPlusPlusTasks.BuildTask,NAnt.Core.OptionSet)">
            <summary>Executed by the build target.</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.LibTask">
             <summary>A generic C/C++ library manager tool.</summary>    
             <remarks>
             <para>
             The task requires the following properties:
             </para>
             <list type="table">
             <listheader><term>Property</term><description>Description</description></listheader>
             <item><term>${lib}</term><description>The absolute pathname of the librarian executable to be used with this invocation of the task.</description></item>
             <item><term>${lib.userresponsefile}</term><description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the compiler. Default is false.</description></item>
             </list>
             <para>
             The task declares the following properties:
             </para>
             <list type="table">
             <listheader><term>Property</term>                    <description>Description</description></listheader>
             <item>      <term>${lib.options}</term>              <description>The options flags for the librarian.</description></item>
             <item>      <term>${lib.useresponsefile}</term>      <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the archiver. Default is false.</description></item>
             <item>      <term>${lib.userelativepaths}</term>     <description>If <c>true</c> the working directory of the archiver will be set to the <c>outputdir</c>. All object files will then be made relative to this path. Default is <c>false</c>.</description></item>
             <item>      <term>${lib.template.objectfile}</term>  <description>The syntax template to transform the <term>objects</term> file set into librarian flags.</description></item>
             <item>      <term>${lib.template.responsefile}</term><description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description></item>
             <item>      <term>${lib.template.commandline}</term><description>The template to use when creating the command line.  Default is %options% %objectfiles%.</description></item>
             <item>      <term>%responsefile%</term>              <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
            	<item>      
            		<term>${lib.forcelowercasefilepaths}</term>      
            		<description>If <c>true</c> file paths (folder and file names) will be 
            		forced to lower case (useful in avoiding redundant NAnt builds 
            		between VS.net and command line environments in the case of capitalized
            		folder names when file name case is unimportant).  Default is false.</description>
            	</item>
             </list>
             <para>
             The task declares the following template items in order to help user defining the above properties:
             </para>
             <list type="table">
             <listheader><term>Template item</term><description>Description</description></listheader>
             <item>      <term>%outputdir%</term>  <description>Used in the <c>${lib.options}</c> property to represent the actual values of the <c>%outputdir%</c> attribute.</description></item>
             <item>      <term>%outputname%</term> <description>Used in the <c>${lib.options}</c> property to represent the actual value of the <c>%outputname%</c> attribute.</description></item>
             <item>      <term>%objectfile%</term> <description>Used in the <c>${lib.template.objectfile}</c> property to represent the individual value of the <c>objects</c> file set.</description></item>
             </list>
             <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
             </remarks>
             <example>
               <para>Archieve the given object files into the specified library.</para>
               <code>
                 <![CDATA[
             <project>
                 <dependent name="VisualStudio" version="7.0.0"/>
            
                 <lib outputdir="lib" outputname="mylib">
                     <objects>
                         <includes name="obj/*.obj"/>
                     </objects>
                 </lib>
             </project>
                 ]]>
               </code>
             </example>
             <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project>
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Define flags to pass to gcc when analyzing dependencies -->
    <property name="cc.gccdefines">
        _MSC_VER
        RC_INVOKED
        _WIN32
        WIN32
        __cplusplus
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
        </member>
        <member name="M:EA.CPlusPlusTasks.LibTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.LibTask.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the lib.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>lib.*</c> propertes.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.OutputName">
            <summary>The base name of the library and any associated output files.  Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.Objects">
            <summary>The list of object files to combine into a library.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.Options">
            <summary>
            Custom program options for this task.  These get appended to the options specified in the <c>lib.options</c> property.
            </summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LibTask.LibraryExtension">
            <summary>library output extension</summary>
        </member>
        <member name="T:EA.CPlusPlusTasks.LinkTask">
            <summary>A generic C/C++ linker task.</summary>
            <remarks>
            <para>The task requires the following properties:</para>
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>${link}</term><description>The absolute pathname of the linker executable.</description></item>
            </list>
            <para>
            The task will use the following properties:
            </para>
            <list type="table">
            <listheader><term>Property</term>                    <description>Description</description></listheader>
            <item>      <term>${link.options}</term>             <description>The option flags for the linker.</description></item>
            <item>      <term>${link.libraries}</term>           <description>The system libraries to link with.</description></item>
            <item>      <term>${link.librarydirs}</term>         <description>The library search paths for the linker.</description></item>
            <item>      <term>${link.template.commandline}</term><description>The template to use when creating the command line.  Default is %options% %librarydirs% %libraryfiles% %objectfiles%.</description></item>
            <item>      <term>${link.template.librarydir}</term> <description>The syntax template to transform the <term>${link.librarydirs}</term> property into linker flags.</description></item>
            <item>      <term>${link.template.libraryfile}</term><description>The syntax template to transform the <term>libraries</term> file set into linker flags.</description></item>
            <item>      <term>${link.template.objectfile}</term> <description>The syntax template to transform the <term>objects</term> file set into linker flags.</description></item>
            <item>      <term>${link.postlink.program}</term>    <description>The path to program to run after linking.  If not defined no post link process will be run.</description></item>
            <item>      <term>${link.postlink.workingdir}</term> <description>The directory the post link program will run in.  Defaults to the program's directory.</description></item>
            <item>      <term>${link.postlink.commandline}</term><description>The command line to use when running the post link program.</description></item>
            <item>      <term>${link.postlink.redirect}</term>   <description>Whether to redirect output of postlink program.</description></item>
            <item>      <term>${link.useresponsefile}</term>     <description>If <c>true</c> a response file, containing the entire commandline, will be passed as the only argument to the linker. Default is false.</description></item>
            <item>      <term>${link.userelativepaths}</term>    <description>If <c>true</c> the working directory of the linker will be set to the <code>outputdir</code>. All object files will then be made relative to this path. Default is <c>false</c>.</description></item>
            <item>      <term>${link.template.responsefile}</term><description>The syntax template to transform the <term>responsefile</term> into a response file flag. Default is @"%responsefile%".</description></item>
            <item>      
            	<term>${link.forcelowercasefilepaths}</term>      
            	<description>If <c>true</c> file paths (folder and file names) will be 
            	forced to lower case (useful in avoiding redundant NAnt builds 
            	between VS.net and command line environments in the case of capitalized
            	folder names when file name case is unimportant).  Default is false.</description>
            </item>
            
            </list>
            <para>
            The task declares the following template items in order to help user defining the above properties:
            </para>
            <list type="table">
            <listheader><term>Template item</term><description>Description</description></listheader>
            <item>      <term>%outputdir%</term>  <description>Used by the <term>${link.options}</term> property to represent the actual values of the <term>outputdir</term> attribute.</description></item>
            <item>      <term>%outputname%</term> <description>Used by the <term>${link.options}</term> property to represent the actual value of the <term>outputname</term> attribute.</description></item>
            <item>      <term>%librarydir%</term> <description>Used by the <term>${link.template.librarydir}</term> property to represent the individual value of the <term>${link.librarydirs}</term> property.</description></item>
            <item>      <term>%libraryfile%</term><description>Used by the <term>${link.template.libraryfile}</term> property to represent the individual value of the <term>libraries</term> file set.</description></item>
            <item>      <term>%objectfile%</term> <description>Used by the <term>${link.template.objectfile}</term> property to represent the individual value of the <term>objects</term> file set.</description></item>
            <item>      <term>%responsefile%</term> <description>Used by the <term>${cc..template.responsefile}</term> property to represent the filename of the response file.</description></item>
            </list>
            <para>The post link program allows you to run another program after linking.  For example if you are
            building programs for the XBox you will know that you need to run the imagebld program in order to
            use the program on the xbox.  Instead of having to run a second task after each build task you can
            setup the properties to run imagebld each time you link.  Use the <c>%outputdir%</c> and <c>%outputname</c>
            template items in the <c>link.postlink.commandline</c> to generalize the task for all the components
            in your package.</para>
            <para>This task can use a named option set for specifying options for unique components.  For more information see the Fundamentals-&gt;Option Sets topic in help file.</para>
            </remarks>
            <example>
<para>An example of compiling and linking the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" targetversion="1.0.0"/>
    <dependent name="VisualStudio" version="7.1.1-4"/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
            <example>
<para>This is a complete configuration for setting up the C++ tasks to use Visual C++.  Use this example as
a guide for creating configurations for other compilers.</para>
<code>
<![CDATA[
<project>
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <!-- Location of the compiler -->
    <property name="cc" value="${package.VisualStudio.appdir}\VC7\BIN\cl.exe"/>
    <property name="link" value="${package.VisualStudio.appdir}\VC7\BIN\link.exe"/>
    <property name="lib" value="${package.VisualStudio.appdir}\VC7\BIN\lib.exe"/>

    <!-- Include search patsh for the compiler -->
    <property name="cc.includedirs">
        ${package.VisualStudio.appdir}\VC7\ATLMFC\INCLUDE
        ${package.VisualStudio.appdir}\VC7\INCLUDE
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include\prerelease
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\include
        ${package.VisualStudio.appdir}\FrameworkSDK\include
    </property>

    <!-- Library search paths for the linker -->
    <property name="link.librarydirs">
        ${property.value}
        ${package.VisualStudio.appdir}\VC7\ATLMFC\LIB
        ${package.VisualStudio.appdir}\VC7\LIB
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib\prerelase
        ${package.VisualStudio.appdir}\VC7\PlatformSDK\lib
        ${package.VisualStudio.appdir}\FrameworkSDK\lib
    </property>

    <!-- Define flags to pass to gcc when analyzing dependencies -->
    <property name="cc.gccdefines">
        _MSC_VER
        RC_INVOKED
        _WIN32
        WIN32
        __cplusplus
    </property>

    <!-- Option flags the compiler -->
    <property name="cc.options">
        -nologo         <!-- turn off MS copyright message -->
        -c              <!-- compile only -->
        -W4             <!-- warning level -->
        -Zi             <!-- enable debugging information (.pdb) -->

        <!-- program database -->
        -Fd"%outputdir%/%outputname%.pdb"

        <!-- object file name -->
        -Fo"%objectfile%"

        <!-- source file -->        
        "%sourcefile%"
    </property>

    <!-- Option flags the linker -->
    <property name="link.options">
        /NOLOGO
        /INCREMENTAL:YES
        /DEBUG
        /SUBSYSTEM:CONSOLE
        /MACHINE:IX86
        /OUT:"%outputdir%/%outputname%.exe"
    </property>

    <!-- Option flags the librarian -->
    <property name="lib.options">
        /nologo 
        /OUT:"%outputdir%/%outputname%.lib"
    </property>

    <!-- Templates to convert cc.includedirs and cc.defines properties into compiler flags -->
    <property name='cc.template.includedir'    value='-I "%includedir%"'/>
    <property name='cc.template.define'        value='-D %define%'/>

    <!-- Templates to convert the objects fileset into librarian flags -->
    <property name='lib.template.objectfile'   value='"%objectfile%"'/>

    <!-- Templates to convert the objects fileset into linker flags -->
    <property name='link.template.librarydir'  value='/LIBPATH:"%librarydir%"'/>
    <property name='link.template.libraryfile' value='"%libraryfile%"'/>
    <property name='link.template.objectfile'  value='"%objectfile%"'/>
</project>
]]>
</code>
</example>
            <example>
<para>An example of to use the <c>${link.template.commandline}</c> property to customize the linker command line.</para>
<code file="Hello.build">
<![CDATA[
<project default="build">
    <package name="Hello" targetversion="1.0.0"/>
    <dependent name="VisualStudio" version="7.1.1-4"/>
    
    <property name="link.options">
        -subsystem:CONSOLE
    </property>

    <!-- 
        Notice how the -out: option has been removed from the link.options property and
        is now directly part of the link.commandline.  This is a made up example but with
        it shows you how you can wrap, say the libraries with options needed by gcc.
    -->
    <property name="link.template.commandline">
        %options% 
        -out:"%outputdir%/%outputname%.exe" 
        %librarydirs% 
        %libraryfiles% 
        %objectfiles%
    </property> '/>

    <target name="build">
        <cc outputname="${package.name}" outputdir="${package.dir}/build">
            <sources>
                <includes name="hello.c"/>
            </sources>
        </cc>
        <link outputname="${package.name}" outputdir="${package.dir}/build">
            <objects>
                <includes name="${package.dir}/build/hello.c.obj"/>
            </objects>
        </link>
        <fail message="Program did not link" unless="@{FileExists('${package.dir}/build/hello.exe')}"/>
    </target>
</project>
]]>
</code>
<para>Where <c>hello.c</c> contains:</para>
<code file="hello.c">
<![CDATA[
#include <stdio.h>

void main()
{
    printf("Hello, World!\n");
}
]]>
</code>
</example>
        </member>
        <member name="M:EA.CPlusPlusTasks.LinkTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes task and ensures the supplied attributes are valid.</summary>
            <param name="taskNode">Xml node used to define this task instance.</param>
        </member>
        <member name="M:EA.CPlusPlusTasks.LinkTask.InitializeFromOptionSet(NAnt.Core.OptionSet)">
            <summary>
            Initialize the task first with the default global options in the link.*
            properties and then if from the options in the <c>specialOptions</c>.
            </summary>
            <param name="specialOptions">Special options for this task instance
            that will override any global options.</param>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OptionSetName">
            <summary>Name of option set to use for compiling options.  If null
            given values from the global <c>link.*</c> propertes.  Default is null.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OutputDir">
            <summary>Directory where all output files are placed.  Default is the base directory of the build file.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.OutputName">
            <summary>The base name of the library or program and any associated output files.  Default is an empty string.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Objects">
            <summary>The set of object files to link.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Libraries">
            <summary>The list of libraries to link with.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.LibraryPath">
            <summary>Directories to search for additional libraries.  New line <c>"\n"</c> or semicolon <c>";"</c> delimited.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.Options">
            <summary>Custom program options for these files.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.LinkOutputExtension">
            <summary>library output extension</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.GenerateOutputFile">
            <summary>True if we should run the linker.</summary>
        </member>
        <member name="P:EA.CPlusPlusTasks.LinkTask.GenerateDependencyFile">
            <summary>True if we should generate a .dep file for each source file, otherwise false.</summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.Generator.Name">
            <summary>
            Generator output name. 
            </summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.Generator.OutputDir">
            <summary>
            Full path to the solution file without solution file name. 
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.Generator.Initialize(NAnt.Core.Project,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{EA.FrameworkTasks.Model.IModule},System.Boolean,EA.Eaconfig.Core.GeneratorTemplatesData,System.Int32)">
            <summary>
            Populate module generators.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.GeneratedFiles">
            <summary>
            Generated files
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.GroupNumber">
            <summary>
            Sequential number of a group when solution files split based on output directory or file names. 
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.Generator.IsPortable">
            <summary>
            In portable mode SDK paths are replaced with environment variables and all other paths (including paths in tools optins) are made relative whenever possible.
            The goal is to have generated files that aren't tied to particular computer
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.ModuleGenerator.RelativeDir">
            <summary>
            module generator output directory relative to the to solution build root:
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.ModuleGenerator.PackageDir">
            <summary>
            Full path to package directory
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.NantBuildTask.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="F:EA.Eaconfig.Backends.VisualStudio.VSProjectBase.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.ExternalVSProject.RelativeDir">
            <summary>
            module generator output directory relative to the to solution build root:
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSDotNetProject.ConvertNamespaceToLinkPath(System.String)">
            <summary>
            Since LinkPath (the Link tag) is used by VS05 to construct the name of the global resources, so we need 
            to make the link path same as the namespace structure of the global resource designer file.
            For example:
            Resources.Designer.cs: namespace DefaultNameSpace.Properties { class Resources ... }
            LinkPath (designer): should be Properties\\Resources.Designer.cs (DefaultNameSpace is omitted)
            LinkPath (resx)    : should be Properties\\Resources.resx
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSCppProject.ProcessSwitches(System.Collections.Generic.List{EA.Eaconfig.Backends.VisualStudio.VSConfig.SwitchInfo},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            ProcessSwitches -	Takes a newline separated collection of command line switches; parses them according to
            					the parsing directives and then puts the translated result (XML attributes) into a hash
            					table.
            </summary>
            <param name="parseDirectives">An List of SwitchInfo's dictating the translation from command line to XML</param>
            <param name="nameToXMLValue">The hash table that contains values of the XML attributes (string->string map) that were obtained by the parsing</param>
            <param name="CMLString">The newline separated string of command line switches</param>
            <param name="taskNameClean">The name of the current task (used for errors)</param>
            <param name="errorIfUnrecognized"></param>
            <param name="nameToDefaultXMLValue"></param>
            <param name="options"></param>
            <param name="taskName"></param>
        </member>
        <member name="F:EA.Eaconfig.Backends.VisualStudio.VSSolutionBase.LogPrefix">
            <summary>The prefix used when sending messages to the log.</summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.AppXManifestTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Backends.VisualStudio.WMAppManifestTemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Backends.VSNAntFunctions">
            <summary>
            Visual Studio Helper funtions
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VSNAntFunctions.GetSolutionFileName(NAnt.Core.Project,EA.FrameworkTasks.Model.BuildGroups,System.Boolean,System.Boolean)">
            <summary>
            Returns path to the solutionfile generated ty 'slnruntime', 'slntest', etc targets.
            </summary>
            <param name="project"></param>
            <param name="buildgroup">The name of the buildgroup: 'runtime', 'test', 'example', or 'tool'</param>
            <param name="generateSingleConfig">If true, solution names generated by single config targets 'slnruntime-generate-single-config', 'slntest-generate-single-config' is evaluated. Default is "false"</param>
            <param name="splitByGroupNames">If true returns solution names split by groups. During solution generation property 'eaconfig.build.split-by-group-names' used to turn this functionality on. Default is "false".</param>
            <returns>Full Path to the solution file name.</returns>
        </member>
        <member name="M:EA.Eaconfig.Backends.VSNAntFunctions.GetVisualStudioPlatformName(NAnt.Core.Project)">
            <summary>
            Evaluates Visual Studio "Platform' name for the currently loaded configuration (${config}).
            </summary>
            <param name="project"></param>
            <returns>Name of the Visual Studio 'Platform'</returns>
        </member>
        <member name="T:EA.Eaconfig.Build.BuildFunctions">
            <summary>
            Collection of utility functions usually used in build, run and other targets.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.DistinctItems(NAnt.Core.Project,System.String)">
            <summary>
            Eliminates duplicates from the list of space separated items.
            </summary>
            <param name="project"></param>
            <param name="str">The string to process.</param>
            <returns>String containing distinct items.</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleOutputDir(NAnt.Core.Project,System.String,System.String)">
            <summary>
            Returns output directory for a given module. For programs and dlls it is usually 'bin' directory, for libraries 'lib'.
            This function takes into account output mapping.
            </summary>
            <param name="project"></param>
            <param name="type">type can be either "lib" or "bin"</param>
            <param name="packageName">name of the package</param>
            <returns>module output directory</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleOutputName(NAnt.Core.Project,System.String,System.String,System.String)">
            <summary>
            Returns outputname for a module. Takes into account output mapping. 
            </summary>
            <param name="project"></param>
            <param name="type">Can be either "lib" or "link"</param>
            <param name="packageName">name of a package</param>
            <param name="moduleName">name of a module in the package</param>
            <returns>outputname</returns>
        </member>
        <member name="M:EA.Eaconfig.Build.BuildFunctions.GetModuleGroupnames(NAnt.Core.Project,System.String)">
            <summary>
            Returns list of module groupmanes for modules defined in package loaded into the current Project.
            </summary>
            <param name="project"></param>
            <param name="groups">list of groups to examine. I.e. 'runtime', 'test', ...</param>
            <returns>module groupnames, new line separated.</returns>
        </member>
        <member name="T:EA.Eaconfig.Build.Task_InitBuildGraph">
            <summary>
            Verify whether we can reuse build graph or need to reset it. This is only needed when we are chaining targets.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.NantSchemaExtensionMethods.NantSafeSchemaKey(System.String)">
            <summary>Replaces characters in a tasks type name to remove characters that are illegal in xml,
            yet still keeps the typename unique.</summary>
        </member>
        <member name="M:EA.Eaconfig.NantSchemaGenerator.CreateXmlEnumTypeData(EA.Eaconfig.NantEnumType)">
            <summary>Creates simple xml data type nodes for representing enumerated types</summary>
        </member>
        <member name="M:EA.Eaconfig.NantSchemaGenerator.GenerateAttributeDocumentation(EA.Eaconfig.NantAttribute)">
            <summary>Generates some default documentation based on the type and
            adds this to the user provided documentation.</summary>
        </member>
        <member name="T:EA.Eaconfig.NAntSchemaInstallerTask">
            <summary>Copies xml schema file to the schema directory under the 
            visual studio install directory. Also, extends the visual studio 
            schema catalog to associate the new schema with the *.build extension.</summary>
        </member>
        <member name="M:EA.Eaconfig.NAntSchemaInstallerTask.CreateXmlSchemaCatalogDocument(System.String)">
            <summary>Creates a schema catalog file which is used to associate files with the 
            extension *.build with the xml schema file framework3.xsd</summary>
        </member>
        <member name="M:EA.Eaconfig.NAntSchemaInstallerTask.CopySchemaFile">
            <summary>Copies the schema file to all visual studio schema directories</summary>
        </member>
        <member name="P:EA.Eaconfig.NAntSchemaInstallerTask.Vs9Path">
            <summary>The install directory of visual studio 2008 (vs9) where the schema files will be copied.
            By default uses environment variable VS90COMNTOOLS.</summary>
        </member>
        <member name="P:EA.Eaconfig.NAntSchemaInstallerTask.Vs10Path">
            <summary>The install directory of visual studio 2010 (vs10) where the schema files will be copied.
            By default uses environment variable VS100COMNTOOLS.</summary>
        </member>
        <member name="P:EA.Eaconfig.NAntSchemaInstallerTask.Vs11Path">
            <summary>The install directory of visual studio 2012 (vs11) where the schema files will be copied.
            By default uses environment variable VS110COMNTOOLS.</summary>
        </member>
        <member name="P:EA.Eaconfig.NAntSchemaInstallerTask.InputFile">
            <summary>The name of the schema file. Should match the name of the output file of the nantschema task</summary>
        </member>
        <member name="T:EA.Eaconfig.NantSchemaToXmlTask">
            <summary>Generates XML file from NantSchema. </summary>
        </member>
        <member name="P:EA.Eaconfig.NantSchemaToXmlTask.OutputFile">
            <summary>The name of the output XML file.</summary>
        </member>
        <member name="P:EA.Eaconfig.NantSchemaToXmlTask.ExcludeComments">
            <summary>If true comments are not included in generated XML file.</summary>
        </member>
        <member name="M:EA.Eaconfig.XmlDocDataParser.SetXsltTransform(System.Xml.Xsl.XslCompiledTransform)">
            <summary>Provides an xslt file that gets applied to all parsed xml files</summary>
        </member>
        <member name="M:EA.Eaconfig.Backends.VisualStudio.VSMakeProject.ProcessSwitches(System.Collections.Generic.List{EA.Eaconfig.Backends.VisualStudio.VSConfig.SwitchInfo},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            ProcessSwitches -	Takes a newline separated collection of command line switches; parses them according to
            					the parsing directives and then puts the translated result (XML attributes) into a hash
            					table.
            </summary>
            <param name="parseDirectives">An List of SwitchInfo's dictating the translation from command line to XML</param>
            <param name="nameToXMLValue">The hash table that contains values of the XML attributes (string->string map) that were obtained by the parsing</param>
            <param name="CMLString">The newline separated string of command line switches</param>
            <param name="taskNameClean">The name of the current task (used for errors)</param>
        </member>
        <member name="T:EA.Eaconfig.GenerateOptionsSPU">
            <summary>
            Internal task used by eaconfig.
            </summary>
        </member>
        <member name="M:EA.Eaconfig.GenerateOptionsSPU.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildStepsElement">
            <summary>BuildStepsElement</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PrebuildTarget">
            <summary>Sets the prebuild steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PostbuildTarget">
            <summary>Sets the postbuild steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.CustomBuildStep">
            <summary>Defines a custom build step that may execute before or 
            after another target</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.PackagingData">
            <summary>Sets the packaging steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildStepsElement.RunData">
            <summary>Sets the run steps for a project</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTargetElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.TargetName">
            <summary>Sets the target name</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.NantBuildOnly">
            <summary>Autoconvert target to command when needed in case command is not defined. Default is 'true'</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.Target">
            <summary>Sets the target</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTargetElement.Command">
            <summary>Sets the comand</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.TargetElement">
            <summary>Create a dynamic target. This task is a Framework 2 feature</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.DependencyList">
            <summary>A space seperated list of target names that this target depends on.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Description">
            <summary>The Target description.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.IfDefined">
            <summary>If true then the target will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Hidden">
            <summary>Prevents the target from being listed in the projecthelp. Default is true.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.Style">
            <summary>Style can be 'use', 'build', or 'clean'.   See 'Auto Build Clean' 
            page in the Reference/NAnt/Fundamentals section of the help doc for details.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.TargetElement.UnlessDefined">
            <summary>Opposite of if.  If false then the target will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypePropertyElement">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ConditionalPropertyElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionalPropertyElement.IfDefined">
            <summary>If true then the task will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionalPropertyElement.UnlessDefined">
            <summary>Opposite of if.  If false then the task will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionalPropertyElement.AttrValue">
            <summary>Argument. Default is null.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionalPropertyElement.Append">
            <summary>Append new data to the current value. The current value may come from partial modules. Default: 'true'.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypePropertyElement.AttrValue">
            <summary>Argument. Default is null.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypeTask">
            <summary>Add Description</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeTask.FromBuildType">
            <summary>The name of a buildtype ('Library', 'Program', etc.) to derive new build type from.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeTask.BuildTypeName">
            <summary>Sets the name for the new buildtype</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BuildTypeElement">
            <summary></summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.BuildTypeElement.InitializeElement(System.Xml.XmlNode)">
            <summary>Add all the child option elements.</summary>
            <param name="elementNode">Xml node to initialize from.</param>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeElement.IfDefined">
            <summary>If true then the option will be included; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BuildTypeElement.UnlessDefined">
            <summary>Opposite of if.  If false then the option will be included; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.BulkBuildElement">
            <summary>Bulkbuild input</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.Enable">
            <summary>enable/disable bulkbuild generation.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.Partial">
            <summary>If patrial enabled source files with custom build settings are excluded from bulkbuild generation and compiled separately.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.MaxSize">
            <summary>If 'maxsize' is set generated bulkbuild files will contain no more than maxsize entries. I.e. They are split in several if number of files exceeds maxsize.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.LooseFiles">
            <summary>Files that are not included in the bulkbuild</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.SourceFiles">
            <summary>Groups of sourcefiles to be used to generate bulkbuild files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.BulkBuildElement.ManualSourceFiles">
            <summary>Manual bulkbuild files</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ConditionElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionElement.IfDefined">
            <summary>If true then the task will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConditionElement.UnlessDefined">
            <summary>Opposite of if.  If false then the task will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ConfigElement">
            <summary>Sets various attributes for a config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.BuildOptions">
            <summary>Gets the build options for this config.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Defines">
            <summary>Gets the macros defined for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.Warningsuppression">
            <summary>Gets the warning suppression property for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.PrecompiledHeader">
            <summary>Set up precompiled headers</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ConfigElement.RemoveOptions">
            <summary>Define options to removefrom the final optionset</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CustomBuildFilesElement">
            <summary>Sets custom build files</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredFileSet">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSet.AppendBase">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSet.Suffix">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CustomBuildStepElement">
            <summary>Defines a custom build step that may execute before or 
            after another target.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.Before">
            <summary>
            Name of the target a custom build step should run before (build, link, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.After">
            <summary>
            Name of the target a custom build step should run after (build, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.Script">
            <summary>The commands to be executed by the custom build step, 
            either nant tasks or os commands.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.OutputDependencies">
            <summary>A list of files that are added to the step's output dependencies.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CustomBuildStepElement.InputDependencies">
            <summary>A list of files that are added to the step's input dependencies.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DependenciesPropertyElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.Dependencies">
            <summary>Sets auto build/use dependencies</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.UseDependencies">
            <summary>Sets the dependencies to be used by the package</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.BuildDependencies">
            <summary>Sets the dependencies to be built by the package</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.InterfaceDependencies">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependenciesPropertyElement.LinkDependencies">
            <summary>Sets or gets the dependencies that needs to be used during the linking task for this package</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsInterface">
            <summary>Public include directories from dependent packages are added.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsLink">
            <summary>Public librariess from dependent packages are addedif this attrubute is true.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DependencyDefinitionPropertyElement.IsCopyLocal">
            <summary>Set copy local flag for this dependency output.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetDataElement">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask">
            <summary>A module buildable by the dot net framework</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Debug">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Comment">
            <summary></summary>       
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.ModuleName">
            <summary>The name of this module.</summary>       
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Group">
            <summary>The name of the build group this module is a part of. The default is 'runtime'.</summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.PartialModuleName">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.BuildType">
            <summary>Used to explicitly state the build type. By default 
            structured xml determines the build type from the structured xml tag.
            This field is used to override that value.</summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.PartialModuleNameProp">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.NantScript">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.BuildTypeProp">
            <summary></summary>        
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleBaseTask.Dependencies">
            <summary>Sets the dependencies for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.OutputDir">
            <summary>Overrides the default framework directory where built files are located.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.OutputName">
            <summary>Overrides the defualt name of built files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Workflow">
            <summary>Is this a Workflow module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.UnitTest">
            <summary>Is this a UnitTest module.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.WebApp">
            <summary>Indicates this is a web application project and enables web debugging.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RootNamespace">
            <summary>Specifies the Rootnamespace for a visual studio project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ApplicationManifest">
            <summary>Specifies the location of the Application manifest</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.AppdesignerFolder">
            <summary>Specifies the name of the App designer folder</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DisableVsHosting">
            <summary>used to enable/disable Visual Studio hosting process during debugging</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ImportMSBuildProjects">
            <summary>Additional MSBuild project imports</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RunPostbuildEvent">
            <summary>Postbuild event run condition</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ApplicationIcon">
            <summary>The location of the Application Icon file</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.GenerateDoc">
            <summary>property enables/disables generation of XML documentation files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.KeyFile">
            <summary>Key File</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.SourceFiles">
            <summary>Adds the list of sourcefiles</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Assemblies">
            <summary>A list of referenced assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ResourceFiles">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ResourceFilesNonEmbed">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ContentFiles">
            <summary>Adds a list of 'Content' files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.WebReferences">
            <summary>A list of webreferences for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Modules">
            <summary>Adds the list of modules</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.ComAssemblies">
            <summary>A list of COM assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.Config">
            <summary>Sets the configuration for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.PlatformExtensions">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.XbLiveServises">
            <summary>Indicates this application supports Xbox Live Services. WinPhone only</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.SpaFile">
            <summary>Adds a spa file for Xbox Live Services. WinPhone only</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement">
            <summary>Sets various attributes for a config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.BuildOptions">
            <summary>Gets the build options for this config.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Defines">
            <summary>Gets the macros defined for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.AdditionalOptions">
            <summary>Additional commandline options, new line separated (added to options defined through optionset</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.CopyLocal">
            <summary>Defines whether referenced assemblies are copied into the output folder of the module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Platform">
            <summary>Specifies the platform to build against</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.TargetFrameworkVersion">
            <summary>used to define target .Net framework version</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.GenerateSerializationAssemblies">
            <summary>Generate serialization assemblies:  None, Auto, On, Off</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Suppresswarnings">
            <summary>Gets the warning suppression property for this config</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.WarningsaserrorsList">
            <summary>List of warnings to treat as errors</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.Warningsaserrors">
            <summary>Treat warnings as errors</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.DotNetConfigElement.RemoveOptions">
            <summary>Define options to removefrom the final optionset</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions">
            <summary>Sets options to be removed from final configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions.Defines">
            <summary>Defines to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.RemoveDotNetBuildOptions.Options">
            <summary>Compiler options to be removed</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.PregenerateTarget">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.ExcludedBuildFiles">
            <summary>A list of files that are excluded from the build but are added to the visual studio
            project as non-buildable files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.DotNetModuleTask.VisualStudioDataElement.EnableUnmanaGeddebugging">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.JavaDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.SourceFiles">
            <summary>List of source files to be used</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.EntryPoint">
            <summary>Files to be used as an entry point</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.Archives">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.Classes">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.JniHeadersDir">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.JniClasses">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.ClassRoot">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.PrebuildTarget">
            <summary>Sets the prebuild steps for a java build</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.JavaDataElement.PostbuildTarget">
            <summary>Sets the postbuild steps for a java build</summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.NantScript.InitializeElement(System.Xml.XmlNode)">
            <summary>Add all the child option elements.</summary>
            <param name="elementNode">Xml node to initialize from.</param>
        </member>
        <member name="P:EA.Eaconfig.Structured.NantScript.ExecutionOrder">
            <summary>The directory to create.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ModuleTask">
            <summary>A standard structured xml Module with user specified buildtype</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.OutputDir">
            <summary>Overrides the default framework directory where built files are located.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.OutputName">
            <summary>Overrides the defualt name of built files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Libraries">
            <summary>Adds a set of libraries </summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ObjectFiles">
            <summary>Adds the list of objectfiles</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.SourceFiles">
            <summary>Adds the list of sourcefiles</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.AsmSourceFiles">
            <summary>Adds a list of assembly source files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ResourceFiles">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ResourceFilesNonEmbed">
            <summary>Adds a list of resource files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.CustomBuildFiles">
            <summary>Files with assocuated custombuildtools</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.RootNamespace">
            <summary>Specifies the Rootnamespace for a visual studio project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.IncludeDirs">
            <summary>Defines set of directories to search for header files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.HeaderFiles">
            <summary>Includes a list of header files for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.ComAssemblies">
            <summary>A list of COM assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Assemblies">
            <summary>A list of referenced assemblies for this module</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.AdditionalManifestFiles">
            <summary>Adds a list of assembly source files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.Config">
            <summary>Sets the configuration for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.BulkBuild">
            <summary>Sets the bulkbuild configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.DotNetDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.VisualStudioData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.JavaData">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ModuleTask.PlatformExtensions">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.NamedStructuredFileSets">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.NamedStructuredFileSets.FileSetName">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PackagingElement">
            <summary>PackagingElement</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.PackageName">
            <summary>Sets or gets the package name</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.Assets">
            <summary>Sets of gets the asset files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.AssetDependencies">
            <summary>Sets or gets the asset dependencies</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PackagingElement.ManifestFile">
            <summary>Gets the manifest file</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PartialModuleTask">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PartialModuleTask.ModuleName">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PartialModuleTask.Comment">
            <summary></summary>       
        </member>
        <member name="T:EA.Eaconfig.Structured.PrecompiledHeadersElement">
            <summary>Precompiled headers input</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.Enable">
            <summary>enable/disable using precompiled headers.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.PchFile">
            <summary>Name of output precompiled header</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PrecompiledHeadersElement.PchHeaderFile">
            <summary>Name of the precompiled header file</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.PythonProgramTask">
            <summary>A program that runs through a python interpreter</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.StartupFile">
            <summary>The python file where the programs execution starts.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.WindowsApp">
            <summary>Is this project a windows application, defaults to false.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.WorkDir">
            <summary>Sets the working directory for this project.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.ProjectHome">
            <summary>The projects home directory, search paths and the startup file path
            need to be relative to this directory. By default it is the directory containing the
            visual studio project files.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.SourceFiles">
            <summary>Adds the list of sourcefiles.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.ContentFiles">
            <summary>Adds the list of contentfiles.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.PythonProgramTask.SearchPaths">
            <summary>A semicolon separated list of directories that will be added to the Search Path.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RemoveBuildOptions">
            <summary>Sets options to be removed from final configuration</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.Defines">
            <summary>Defines to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.CcOptions">
            <summary>C/CPP compiler options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.AsmOptions">
            <summary>Assembly compiler options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.LinkOptions">
            <summary>Linker options to be removed</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RemoveBuildOptions.LibOptions">
            <summary>librarian options to be removed</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ResourceFilesElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.Prefix">
            <summary>Indicates the prefix to prepend to the actual resource.  This is usually the 
            default namspace of the assembly.</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.ResourceBasedir">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.ResourceFilesElement.ResourceIncludeDirs">
            <summary>Additional include directories to pass to the resource compiler</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RunDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.WorkingDir">
            <summary>Sets the current working directory from which the executeable needs to run</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.Args">
            <summary>Sets the command line arguments for an executeable</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.StartupProgram">
            <summary>Sets the startup program</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.WorkingDirProp">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.ArgsProp">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.RunDataElement.StartupProgramProp">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredFileSetCollection">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.AppendBase">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.Suffix">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.IfDefined">
            <summary>If true then the task will be executed; otherwise skipped. Default is "true".</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.StructuredFileSetCollection.UnlessDefined">
            <summary>Opposite of if.  If false then the task will be executed; otherwise skipped. Default is "false".</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.StructuredOptionSet">
            <summary></summary>
        </member>
        <member name="M:EA.Eaconfig.Structured.StructuredOptionSet.Initialize(System.Xml.XmlNode)">
            <summary>Optimization. Directly intialize</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.VisualStudioDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PregenerateTarget">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.ExcludedBuildFiles">
            <summary>A list of files that are excluded from the build but are added to the visual studio
            project as non-buildable files</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PreBuildStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.PostBuildStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.VcProj">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VisualStudioDataElement.CsProj">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.VcprojDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.PreLinkStep">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.InputResourceManifests">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.VcprojDataElement.AdditionalManifestFiles">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CsprojDataElement">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.CsprojDataElement.LinkNonembeddedResources">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.RuntimeTask">
            <summary>
            Contains 'runtime' modules in structured XML. Module definitions inside this tag will belong to 'runtime' group. 
            runtime group elent is optional, structured XML modules belong to 'runtime' group by default.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.TestsTask">
            <summary>
            Contains 'test' modules in structured XML. Module definitions inside this tag will belong to 'test' group.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ExamplesTask">
            <summary>
            Contains 'example' modules in structured XML. Module definitions inside this tag will belong to 'example' group.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ToolsTask">
            <summary>
            Contains 'tool' modules in structured XML. Module definitions inside this tag will belong to 'tool' group.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpLibraryTask">
            <summary>A Module buildable as a C Sharp library.</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.CSharpWindowsProgramTask">
            <summary>This task allows you to set attributes for a CSharp Program Task</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.Documentation.GenerateStructuredDocs">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.Documentation.GenerateStructuredDocs.OutputDir">
            <summary>Sets the output directory for the structured documents</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.DynamicLibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.EASharpLibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.FSharpLibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.FSharpProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.LibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.MakeStyleTask">
            <summary>MakeStyle modules are used to exectute external build or clean commands</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeBuildCommand">
            <summary>A makestyle build command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeRebuildCommand">
            <summary>A makestyle rebuild command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.MakeCleanCommand">
            <summary>A makestyle clean command, this should contain executable OS command(s)/script</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.SourceFiles">
            <summary>Adds the list of sourcefiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.AsmSourceFiles">
            <summary>Adds the list of asmsourcefiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.HeaderFiles">
            <summary>Adds the list of headerfiles, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.MakeStyleTask.ExcludedBuildFiles">
            <summary>Adds the list of excluded build files, does not participate directly in the 
            build but can be used in generation of projects for external build systems</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppAssemblyTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ManagedCppWindowsProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.ProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.SPULibraryTask">
            <summary></summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.UtilityTask">
            <summary></summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.CustomBuildFiles">
            <summary>Files with assocuated custombuildtools</summary>
        </member>
        <member name="P:EA.Eaconfig.Structured.UtilityTask.BuildSteps">
            <summary>Sets the build steps for a project</summary>
        </member>
        <member name="T:EA.Eaconfig.Structured.WindowsProgramTask">
            <summary></summary>
        </member>
        <member name="T:EA.CallTargetIfOutOfDate.calltargetifoutofdate">
            <summary>
            Compares inputs against outputs to determine whether to execute specifed target.
            Target is executed if any of input files is newer than any of output files, any of output files does not exist, 
            or list of input dependencies does not match input dependencies from previous run.
            </summary>
            <remarks>
            <para>
            When target does not produce any output files, DummyOutputFile can be specified.
            </para>
            <para>
            This task is similar to task "ExecuteIfOutOfDate" except it executes specified target instead of script.
            </para>
            </remarks>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.ReadDependencyFile(System.IO.TextReader)">
            <summary>Reads list of files from dependency file</summary>
            <returns>A sorted List containing all files listed in the dependency file</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.WriteDependencyFile(System.IO.TextWriter,System.Collections.Generic.List{System.String})">
            <summary>Writes list of files to a dependency file</summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.InputDependencyListChanged(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the current and previous list of input files differ</summary>
            <returns><c>true</c> if the lists are not identical</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.TaskNeedsRunning(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the task needs to run.</summary>
            <returns><c>true</c> if we should run the program (dependents missing or not up to date), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.calltargetifoutofdate.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.InputFileSetName">
            <summary>
            Input dependency files. 
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.OutputFileSetName">
            <summary>
            Output dependency files. If target does not produce any output files "DummyOutputFile" parameter can be specified.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.DummyOutputFileName">
            <summary>
            Contains file path. File is created automatically when task is executed and added to "output depency files" list.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.DependencyFileName">
            <summary>
            File to store list of input dependency files from "InputFileset" parameter. 
            This list is used to check whether set ofinput dependencies changed from previous run. Target is executed when list changes.
            </summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.calltargetifoutofdate.TargetName">
            <summary>
            Name of a target to execute
            </summary>
        </member>
        <member name="M:EA.GenerateBulkBuildFiles.generatebulkbuildfiles.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.GetModuleBaseType">
            <summary>
            Evaluates base buildtype name for the given buildtype optionset.
            </summary>
            <remarks>
            Base build type name can be one of the following
            <list type="bullet">
            <item>Library</item>
            <item>Program</item>
            <item>DynamicLibrary</item>
            <item>WindowsProgram</item>
            <item>CSharpLibrary</item>
            <item>CSharpProgram</item>
            <item>CSharpWindowsProgram</item>
            <item>FSharpLibrary</item>
            <item>FSharpProgram</item>
            <item>FSharpWindowsProgram</item>
            <item>ManagedCppAssembly</item>
            <item>ManagedCppProgram</item>
            <item>MakeStyle</item>
            <item>VisualStudioProject</item>
            <item>Utility</item>
            </list>
            </remarks>
        </member>
        <member name="M:EA.Eaconfig.GetModuleBaseType.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.Eaconfig.GetModuleBaseType.BuildTypeName">
            <summary>
            Name of the buildtype optionset to examine
            </summary>
        </member>
        <member name="P:EA.Eaconfig.GetModuleBaseType.BaseBuildType">
            <summary>
            Evaluated buildtype. Saved in property "GetModuleBaseType.RetVal"
            </summary>
        </member>
        <member name="T:EA.Eaconfig.RepeatExecifTask">
            <summary>Executes a system command. Repeats execution if condition is met</summary>
            
        </member>
        <member name="M:EA.Eaconfig.RepeatExecifTask.LogStdOut(NAnt.Core.Util.OutputEventArgs)">
            <summary>Callback for procrunner stdout</summary>
        </member>
        <member name="M:EA.Eaconfig.RepeatExecifTask.LogStdErr(NAnt.Core.Util.OutputEventArgs)">
            <summary>Callback for procrunner stderr</summary>
        </member>
        <member name="P:EA.Eaconfig.RepeatExecifTask.RepeatPatterns">
            <summary>List of patterns.</summary>
        </member>
        <member name="P:EA.Eaconfig.RepeatExecifTask.MaxCount">
            <summary>List of patterns.</summary>
        </member>
        <member name="M:EA.Eaconfig.SortBuildModules.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.LoadPlatformConfigTask">
            <summary>
            Loads platform specific configuration package
            </summary>
        </member>
        <member name="T:EA.Eaconfig.NAntSchemaTask">
            <summary>Generates an xml schema file (*.xsd) based on task source files. This file
            can be used by visual studio to provide intellisense for editing build files.</summary>
        </member>
        <member name="P:EA.Eaconfig.NAntSchemaTask.OutputFile">
            <summary>The name of the output schema file.</summary>
        </member>
        <member name="M:EA.Eaconfig.Combine.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="T:EA.Eaconfig.GenerateBuildOptionset">
            <summary>
            Creates <token>buildtype</token> optionset from a meta build optionset. 
            </summary>
            <example>
             &lt;optionset name="config-options-library-custom" fromoptionset="config-options-library"&gt;
               &lt;option name="buildset.name" value="Library-Custom" /&gt;
               &lt;option name="optimization" value="off"/&gt;
             &lt;/optionset&gt;
             &lt;GenerateBuildOptionset configsetname="config-options-library-custom"/&gt;
            </example>
        </member>
        <member name="M:EA.Eaconfig.GenerateBuildOptionset.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateBuildOptionset.ConfigSetName">
            <summary>
            The name of the meta optionset. 
            The name of the target <token>buildtype</token> optionset is provided by 'buildset.name' option
            </summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateBuildOptionset.ControllingProperties">
            <summary>
            List of the controlling properties. Intended to be used in the cofiguration packages to override default list of controlling properties like 
            'eaconfig.debugflags", eaconfig.optimization, etc.
            </summary>
        </member>
        <member name="T:EA.Eaconfig.GenerateBuildOptionsetSPU">
            <summary>
            Creates <token>buildtype</token> optionset from a meta build optionset for PS3 SPU. 
            The name of the target optionset is provided by 'buildset.name' option.
            </summary>
            <example>
             &lt;optionset name="config-options-spu-library-custom" fromoptionset="config-options-library"&gt;
               &lt;option name="buildset.name" value="Library-CustomSPU" /&gt;
               &lt;option name="optimization" value="off"/&gt;
             &lt;/optionset&gt;
             &lt;GenerateBuildOptionsetSPU configsetname="config-options-library-custom"/&gt;
            </example>
        </member>
        <member name="M:EA.Eaconfig.GenerateBuildOptionsetSPU.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.Eaconfig.GenerateBuildOptionsetSPU.ConfigSetName">
            <summary>
            The name of the meta optionset. 
            The name of the target <token>buildtype</token> optionset is provided by 'buildset.name' option
            </summary>
        </member>
        <member name="M:EA.Eaconfig.MergeOptionset.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="M:EA.Eaconfig.StringUtil.ValueAt(System.String,System.Int32)">
            Helper function for StrCompareVersions. Returns character value at position pos, 
            or '\0' if index is outside the string
            <param name="str"> string</param>
            <param name="pos">position in the string</param>        
        </member>
        <member name="T:EA.FrameworkTasks.CheckDependentsTask">
            <summary>
            Checks compatibility among all dependent packages (listed in &lt;masterversions> section
            of masterconfig.xml). <b>This task is a Framework 2 feature.</b>
            </summary>
            <remarks>
             <para>
             It uses package versions listed in master config file to check package compatibility. A Framework 2.0
             package may list its package compatibility, in its Manifest.xml file, using &lt;compatibility&gt;.
             </para>
            </remarks>
        </member>
        <member name="T:EA.FrameworkTasks.DependentTask">
            <summary>Makes this package dependent on another.</summary>
            <remarks>
              <para>
              This task must be embedded within a &lt;target&gt; with style 'build'
              or 'clean' if this dependent, <b>Framework 2</b> package is to autobuildclean.
              </para>
              <para>
              This task reaches into the named package's <b>scripts</b>
              folder and executes the <b>Initialize.xml</b> (as a NAnt <b>include</b>).
              This file is optional and does not need to exist.
              </para><para>
              <c>Intialize.xml</c> is the mechanism to make any property
              from your package available to users of your package's
              contents.
              </para><para>
              By default, NAnt will create the properties
              <list type="table">
                <item>
                  <term>package.all</term>
                  <description>List of descriptive names of all the packages this build file depends on.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.dir</term>
                  <description>Base directory f package <i>name</i>.</description>
                </item>
                <item>
                  <term>package.<i>name</i>.version</term>
                  <description>Specific version number of package <i>name</i>.</description>
                </item>
            	<item><term>package.<i>name</i>.frameworkversion</term><description>The version number of the Framework the given package is designed for, determined from the <b>&lt;frameworkVersion&gt;</b> of the package's Manifest.xml.  Default value is 1 if Manifest.xml doesn't exist.</description></item>
              </list>
              </para><para>
              By convention, packages should only define properties using
              names of the form <c>package.<i>name</i>.<i>property</i></c>
              Following the convention avoids namespace problems and makes
              it much easier for other people to use the properties your
              package sets.
              </para><para>
              The value of <c>package.<i>name</i>.dir</c> isn't
              interesting in the case of a proxy package; proxy packages
              should use <c>Initialize.xml</c> to set <c>package.<i>name</i>.appdir</c> to the directory where the executable for the software proxied by the package resides.
              </para><para>
              Any required initialization code to use the dependent package should appear
              in the <b>Initialize.xml</b> file.
              </para><para>
              One use for the <b>Initialize.xml</b> file is for compiler packages to find where 
              the compiler is installed on the local machine and set a property.
              </para>
            </remarks>
            <example>
  <para>
  Makes this package dependent on the VisualStudio 7.1.1-4 package.
  </para>
  <code>
<![CDATA[
<project>
    <package name="DependentTest" targetversion="1.0.0"/>
    <dependent name="VisualStudio" version="7.1.1-4"/>
    <echo message="Visual Studio is installed at ${package.VisualStudio.appdir}"/>
</project>]]>
  </code>
</example>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.InitializeTask(System.Xml.XmlNode)">
            <summary>Initializes the task and checks for correctness.</summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.DownloadFromPackageServerIfNecessary">
            <summary>
            If the package we're depending on isn't found and download-on-demand is enabled
            then attempt to download the missing package from the package server.
            Here are the rules of using which OnDemand:
            Top-Level	2nd-Level	Which OnDemand
            1.x			1.x			DependenTask
            1.x			2.x			DependenTask
            2.x			1.x			PackageMap
            2.x			2.x			PackageMap
            
            It doesn't download 3rd level packages. The top level package doesn't know if a 2nd level package
            is Framework 1.x or 2.x if it's missing.
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.ValidatePackage(EA.FrameworkTasks.DependentTask.DependentPackageInfo,System.Boolean)">
            <summary>
            Perform miscellaneous validity checks on the package we're depending on.
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.IsNestedUnderTarget">
            <summary>
            denote whether dependent is nested under a target task
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.IsReleaseSatisfied(NAnt.Core.PackageCore.Release)">
            <summary>Checks if dependent has already been executed with exact package name and version.</summary>
            <param name="info">Release info of the package depending on.</param>
            <returns><c>true</c> if already executed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EA.FrameworkTasks.DependentTask.IsPackageSatisfied(NAnt.Core.PackageCore.Release)">
            <summary>Checks if dependent has already been executed with exact package name.</summary>
            <param name="info">Release info of the package depending on.</param>
            <returns><c>true</c> if already executed, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.PackageName">
            <summary>The name of the package to depend on.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.PackageVersion">
            <summary>The version of the package (eg. 1.02.03). 
            Not applicable to a Framework 2 package</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.PackageConfig">
            <summary>The value of the config property to use when initializing this package.
            Not applicable to a (buildable) Framework 2 package using &lt;config> in 
            masterconfig.xml.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.OnDemand">
            <summary>If true the package will be automatically downloaded from the package server. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.InitializeScript">
            <summary>If false the execution of the Initialize.xml script will be suppressed. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.GetDependentDependents">
            <summary>When package context is Framework 1, setting this to false 
            prevents the installation of the package release's "Required Packages", 
            only as specified on the release's web page on packages.ea.com.  
            Default is true.  When package context is Framework 2, the value is
            ALWAYS false and its setting by user is deprecated.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.Level">
            <summary>Warning level for missing or mismatching version. Default is NOTHING (0).</summary>
        </member>
        <member name="P:EA.FrameworkTasks.DependentTask.DropCircular">
            <summary>Drop circular build dependencie. If false throw on circulatr build dependencies</summary>
        </member>
        <member name="T:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate">
            <summary>
            Compares inputs against outputs to determine whether to execute specifed target.
            Target is executed if any of input files is newer than any of output files, any of output files does not exist, 
            or list of input dependencies does not match input dependencies from previous run.
            </summary>
            <remarks>
            This task is similar to task "CallTargetIfOutOfDate" except it executes arbitrary script from "code" instead of target.
            </remarks>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.ReadDependencyFile(System.IO.TextReader)">
            <summary>Reads list of files from dependency file</summary>
            <returns>A sorted List containing all files listed in the dependency file</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.WriteDependencyFile(System.IO.TextWriter,System.Collections.Generic.List{System.String})">
            <summary>Writes list of files to a dependency file</summary>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.InputDependencyListChanged(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the current and previous list of input files differ</summary>
            <returns><c>true</c> if the lists are not identical</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.TaskNeedsRunning(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>Determine if the task needs to run.</summary>
            <returns><c>true</c> if we should run the program (dependents missing or not up to date), otherwise <c>false</c>.</returns>
        </member>
        <member name="M:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.ExecuteTask">
            <summary>Execute the task.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Inputs">
            <summary>Set of input files to check against.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Outputs">
            <summary>Set of output files to check against.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.DummyOutputFileName">
            <summary>If specified, this file is added to the list of output dependencies. Timestamp of DummyOutputFile file is updated when this task code is executed.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.DependencyFileName">
            <summary>If DependencyFile is specified, the list of "inputs" is stored in the file with this name. It is used to check for missing/added input files during consequtive runs.</summary>
        </member>
        <member name="P:EA.CallTargetIfOutOfDate.ExecuteIfOutOfDate.Code">
            <summary>
            The Nant script to execute.
            </summary>
        </member>
        <member name="T:EA.FrameworkTasks.ExecuteCustomBuildSteps">
            <summary>Executes a named custom build step.</summary>
            <remarks>
            <para>
            Note: This task is intended for internal use within eaconfig to allow 
            certain build steps to be called at the beginning or end of specific
            eaconfig targets.
            </para>
            <para>
            Executes a custom build step which may either consist of nant tasks or
            batch/shell script commands.
            </para>
            <para>
            The custom build step is defined using the property 
            runtime.[module].vcproj.custom-build-tool.
            </para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.ExecuteCustomBuildSteps.GroupName">
            <summary>The name of the module whose build steps we want to execute.</summary>
        </member>
        <member name="T:EA.FrameworkTasks.Functions.PackageFunctions">
            <summary>
            A collection of package functions.
            </summary>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.PackageGetDefaultPackageRoot(NAnt.Core.Project)">
            <summary>
            Gets the directory of the default package root, which only exists for
            a Framework 1 package.
            </summary>
            <param name="project"></param>
            <returns>The default package root or empty string if none exists.</returns>
            <example>
  <para>
  The default package root is the package root to which all automatically downlaoded packages will be placed. By 
  default this is equal to the Framework package root. However, it may be overriden by the &lt;packageroot&gt; task.
  </para>
  <code>
<![CDATA[
<project>
    <package name="PackageRootTest" targetversion="1.0.0"/>

    <echo message='@{PackageGetDefaultPackageRoot()}' />
</project>]]>
  </code>
</example>        
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.PackageGetFrameworkPackageRoot(NAnt.Core.Project)">
            <summary>
            Gets the directory of the Framework package root, which is where missing
            dependent packages may get auto downloaded and installed to.  
            </summary>
            <param name="project"></param>
            <returns>For a Framework 1 package, 
            or a Framework 2 package lacking &lt;packageroot&gt; in
            its masterconfig.xml, this returns the package root
            containing the executing Framework.  For a Framework 2 package with 1 or more
            &lt;packageroot&gt; in its masterconfig.xml, this returns the FIRST &lt;packageroot&gt;
            listed.</returns>
            <example>
  <para>
  The Framework package root is the package root which contains the currently executing Framework package.
  </para>
  <code>
<![CDATA[
<project>
    <package name="PackageRootTest" targetversion="1.0.0"/>

    <echo message='@{PackageGetFrameworkPackageRoot()}' />
</project>]]>
  </code>
</example>        
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.PackageGetPackageRoots(NAnt.Core.Project,System.String)">
            <summary>
            Gets a delimited list of all the package roots.
            </summary>
            <param name="project"></param>
            <param name="delimiter">The delimiter to use when seperating the package roots.</param>
            <returns>The default package root or empty string if none exists.</returns>
            <example>
  <para>
  Returns a list of package roots delimited by a semi-colon.
  </para>
  <code>
<![CDATA[
<project>
    <package name="PackageRootTest" targetversion="1.0.0"/>

    <echo message='@{PackageGetPackageRoots(";")}' />
</project>]]>
  </code>
</example>        
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.GetPackageVersion(NAnt.Core.Project,System.String)">
            <summary>
            Returns a version associated with a package within masterconfig.
            </summary>
            <param name="packageName"></param>
            <returns>The version of package being used in masterconfig.</returns>
            <remarks>If package cannot be found, an empty string is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageBuildable(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is buildable as defined within its manifest.xml file.
            </summary>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is buildable based on manifest.xml file.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageAutoBuildClean(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is autobuildclean within masterconfig.
            </summary>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is autobuildclean or not in masterconfig.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.IsPackageInMasterconfig(NAnt.Core.Project,System.String)">
            <summary>
            Returns true/false whether package is present in masterconfig.
            </summary>
            <param name="packageName"></param>
            <returns>true/false dependent on whether package is in masterconfig or not.</returns>
            <remarks>If package cannot be found, false is returned.</remarks>
        </member>
        <member name="M:EA.FrameworkTasks.Functions.PackageFunctions.GetPackageMasterconfigGrouptypeName(NAnt.Core.Project,System.String)">
            <summary>
            Returns masterconfig grouptype name.
            </summary>
            <param name="packageName">name of the package</param>
            <returns>grouptype name or empty string if package is not under a grouptype element in masterconfig.</returns>
            <remarks>If package cannot be found, empty string is returned.</remarks>
        </member>
        <member name="T:EA.FrameworkTasks.GenerateMasterPackagesOptionsetTask">
            <summary>
            creates optionset that contains all packages listed in masterconfig with key='package name', value='version'.
            
            </summary>
            <remarks>
            <para>Package version exceptions are evaluated agaings task Project instance.</para>
            <para>Has static C# interface: public static OptionSet Execute(Project project).</para>
            </remarks>
            <param name="optionsetname">Name of the optionset to generate.</param>
        </member>
        <member name="P:EA.FrameworkTasks.GenerateMasterPackagesOptionsetTask.OptionsetName">
            <summary>Name of the optionset.</summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.BuildStep.Before">
            <summary>
            Name of the target a custom build step should run before (build, link, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.BuildStep.After">
            <summary>
            Name of the target a custom build step should run after (build, run).
            Supported by native NAnt and MSBuild.
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Name">
            <summary>
            Full configuration name
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.System">
            <summary>
            pc, ps3, etc 
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.SubSystem">
            <summary>
            Variation (spu, etc)
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Compiler">
            <summary>
            Compiler
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Platform">
            <summary>
            System+Compiler
            </summary>
        </member>
        <member name="F:EA.FrameworkTasks.Model.Configuration.Type">
            <summary>
            debug, release, etc
            </summary>
        </member>
        <member name="T:EA.FrameworkTasks.PackageRootTask">
            <summary>
            Declares a directory as a new package root.  This function is DEPRECATED for
            the entire build tree if the top level project is marked as Framework 2 
            in its manifest.xml.
            </summary>
            <remarks>
            <para>
            Packages are searched for in the following order of sources: 
            <list type="bullet">
                <item>Default package root (initially set by searching from the current directory; will coincide with framework root below if you have only one package root)</item>
                <item>Other package roots (excluding the default and framework roots) specified via &lt;packageroot> AS WELL AS optional "package directories" specified by &lt;packageDirs> contained in known packageroot.xml files (i.e. any packageroot.xml belonging to one of the following package root types:  default, framework, or &lt;packageroot>). </item>
                <item>Framework package root (package root which contains the currently executing framework package and defines where packages get downloaded/installed).</item>
            </list>
            If the same package release is found in two package roots, the first one found will be used.
            </para>
            <para>
            To define a folder as a package root it must contain a valid 
            <see href="../../../Resources/PackageRoot.xml.txt">PackageRoot.xml</see> file.
            </para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.PackageRootTask.PackageRoot">
            <summary>
            The directory to set as the new package root.
            </summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageRootTask.Default">
            <summary>
            If true the directory specified by the 'dir' attribute will be set
            as the default package root. Default is "false".
            </summary>
        </member>
        <member name="T:EA.FrameworkTasks.PackageTask">
            <summary>Declares a package.</summary>
            <remarks>
            <para>
            This task should be called only once per package build file.
            </para>
            <para>
            The package specifies a version number evolution scheme.
            In the <b>dev</b> branch this should be of the form <b>major.minor</b>, indicating
            the number of the next major/minor release expected (the one you are working on).  
            In the <b>version</b> branches
            the number should be in the form <b>major.minor</b> reflecting the major/minor release 
            number of this release candidate.  The <b>targetversion</b> attribute is used (and required) by the system when
            the package is zipped up.
            </para>
            <para>The package specifies a default configuration. 
            You may override the default configuration on the command line by specifying
            <b>-D:config=configname</b> where configname is the name of the configuration to use.
            </para>
            <para>
            The task declares the following properties:
            </para>
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>${package.name}</term><description>The name of the package.</description></item>
            <item><term>${package.targetversion}</term><description>The version number of the package, determined from the <b>targetversion</b> attribute</description></item>
            <item><term>${package.version}</term><description>The version number of the package, determined from the <b>path</b> to the package</description></item>
            <item><term>${package.${package.name}.version}</term><description>Same as <b>${package.version}</b> but the property name includes the package name.</description></item>
            <item><term>${package.config}</term><description>The configuration to build.</description></item>
            <item><term>${package.configs}</term><description>For a Framework 1 package, it's a space delimited list 
            of all the configs found in the config folder.  For a Framework 2 package, this property excludes any configs
            specified by &lt;config excludes&gt; in masterconfig.xml</description></item>
            <item><term>${package.dir}</term><description>The directory of the package build file (depends on packageroot(s) but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${package.${package.name}.dir}</term><description>The directory of the package build file (depends on packageroot(s) but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${build.dir}</term><description>The build directory of the package (depends on <b>buildroot</b> but path should end in <b>/${package.name}/${package.version}/build</b>.</description></item>
            <item><term>${package.builddir}</term><description>The parent directory of ${build.dir} (depends on <b>buildroot</b> but path should end in <b>/${package.name}/${package.version}</b>.</description></item>
            <item><term>${package.${package.name}.builddir}</term><description>Same as <b>${package.builddir}</b> but the property name includes the package name.</description></item>
            <item><term>${package.${package.name}.buildroot}</term><description>The directory for building binaries (can be set in masterconfig.xml via <b>buildroot</b> and <b>grouptype</b>) .</description></item>
            <item><term>${package.frameworkversion}</term><description>The version number of the Framework the package is designed for, determined from the <b>&lt;frameworkVersion&gt;</b> of the package's manifest.</description></item>
            <item><term>${package.${package.name}.parent}</term><description>Name of this package's parent package (applies only when this package is set to autobuildclean).</description></item>
            </list>
            <para>
            For Framework 1.x packages, the task declares the following standard targets, unless the <b>nostandardtargets="true"</b> attribute is used:
            </para>
            <list type="table">
            <listheader><term>Target</term><description>Description</description></listheader>
            <item><term>cleanall</term><description>Remove the <b>${build.dir}</b> directory.</description></item>
            <item><term>clean</term><description>Remove the <b>${build.dir}/${package.config}</b> directory.</description></item>
            <item><term>publish</term><description>Copy exported files from the export filesets.</description></item>
            <item><term>package</term><description>Create a zip file under the build folder for distribution.</description></item>
            <item><term>configure</term><description>Generate a visual studio (VS) makefile project using <b>generateproject</b> task. VS version depends on <b>generateproject</b> task's <b>version</b> attribute.</description></item>
            <item><term>configure70</term><description>Generate a visual studio 7.0 makefile project using <b>generateproject</b> task.</description></item>
            <item><term>configure71</term><description>Generate a visual studio 7.1 makefile project using <b>generateproject</b> task</description></item>
            
            </list>
            <para>
            For Framework 2.x, standard targets are declared by standard packages such as eaconfig. For details of standard
            targets, please refer to documentation of the standard package.
            </para>
            <para>
            Package names cannot have a '-' character.  This is to prevent ambiguity when extracting 
            the name of the package and version from a <c>&lt;PackageName&gt;-&lt;Version&gt;</c> string.
            </para>
            <para>
            If the package you are building is outside of your packages folder, then the package version
            will be <b>private</b>.  No other packages will be able to depend on this package but
            it can depend on other packages in your packages folder.
            </para>
            </remarks>
            <example>
  <para>
  Declares a package that is working towards a 1.0 release.
  </para>
  <code>
  <![CDATA[
  <project>
      <package name="PackageTest" targetversion="1.0"/>
      <echo message="Current package version: ${package.version}"/>
  </project>]]>
  </code>
</example>
            <example>
<para>
    Declares a package that overrides a default target.
    This is also a description of the default <b>configure</b> target.   
</para>
<code>
<![CDATA[
<project>
    <package name="PackageTest" targetversion="1.0" excludetargets="configure" />

    <target name='configure' description='Setup package for initial use. Default is to generate a visual studio project.'>
        <!-- generate a visual studio project -->
        <generateproject>
            <fileset sort='true'>
                <!-- includes -->
                <includes name='**'/>

                <!-- excludes -->
                <excludes name='build\**'/>
                <excludes name='bin\**'/>
                <excludes name='*.vcproj'/>
                <excludes name='*.sln'/>
                <excludes name='*.suo'/>
                <excludes name='*.ncb'/>
            </fileset>
        </generateproject>
    </target>
</project>]]>
</code>
</example>
        </member>
        <member name="M:EA.FrameworkTasks.PackageTask.AddImplicitFrameworkDependency">
            <summary>Make an implicit dependency on the Framework package we 
            are using to build with.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.PackageName">
            <summary>The name of a package comes from the directory name if the package is in the packages directory.  Use this attribute to name a package that lives outside the packages directory.</summary>
            <remarks>
              <para>The <c>name</c> attribute is used for packages that live outside of the packages directory.</para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.TargetVersion">
            <summary>The version of the package in development.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.ExcludeTargets">
            <summary> If <c>excludetargets</c> contains target names (delimited by spaces), we will exclude all 
            of those targets from the list of standard targets. Ignored for Framework 2.x packages.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.NoStandardTargets">
            <summary> If true then exclude all standard targets.  Default is "false". Ignored for Framework 2.x 
            packages.</summary>        
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.DefaultConfiguration">
            <summary>The name of the default configuration. No longer supported for Framework 2.x packages.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.FromFileSet">
            <summary>The name of fileset to package.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.FileSet">
            <summary>A fileset to package. Ignored for Framework 2.x packages.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.ConfigDirectoryName">
            <summary>The directory containing the configuration files. Default is 'config'. Ignored for Framework 2.x 
            packages.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.PackageTask.InitializeSelf">
            <summary>If true the packages own Initialize.xml script will be loaded. Default is false.</summary>
        </member>
        <member name="T:EA.FrameworkTasks.RequiresTask">
            <summary>For a Framework 1 package, make this package require another package.
            <b>This task is DEPRECATED for a Framework 2 package.</b></summary>
            <remarks>
              <para>
              Provide an expression inside the tag elements using the keyword <c>version</c> 
              to represent the package version.  The task will start with the highest version and
              work down stopping when it finds the first match.  The sort order uses a method where
              it has a basic understanding of numbers.  As long as your version system makes reasonable
              sense it should work.  The same algorithm is used on the Package Server to sort releases.
              </para><para>
              This task reaches into the named package's <b>scripts</b>
              folder and executes the <b>Initialize.xml</b> (as a NAnt <b>include</b>).
              This file is optional and does not need to exist.
              </para><para>
              <c>Intialize.xml</c> is the mechanism to make any property
              from your package available to users of your package's
              contents.
              </para><para>
              By default, NAnt will create the following properties:
              </para><para>
              <list type="table">
              <item><term>package.all</term><description>List of descriptive names of all the packages this build file depends on.</description></item>
              <item><term>package.<i>name</i>.dir</term><description>Base directory f package <i>name</i>.</description></item>
              <item><term>package.<i>name</i>.version</term><description>Specific version number of package <i>name</i>.</description></item>
              </list>
              </para><para>
              By convention, packages should only define properties using
              names of the form <c>package.<i>name</i>.<i>property</i></c>
              Following the convention avoids namespace problems and makes
              it much easier for other people to use the properties your
              package sets.
              </para><para>
              The value of <c>package.<i>name</i>.dir</c> isn't
              interesting in the case of a proxy package; proxy packages
              should use <c>Initialize.xml</c> to set <c>package.<i>name</i>.appdir</c> to the directory where the executable for the software proxied by the package resides.
              </para><para>
              Any required initialization code to use the dependent package should appear
              in the <b>Initialize.xml</b> file.
              </para><para>
              One use for the <b>Initialize.xml</b> file is for compiler packages to find where 
              the compiler is installed on the local machine and set a property.
              </para>
            </remarks>
            <example>
  <para>
  Makes this package require the VisualStudio-7.0.0 or greater package.  
  If the package doesn't exist it will be downloaded.  To prevent this behaviour
  set the <c>ondemand</c> attribe to false.  If no matching package can found
  on the package server or on your system the task will fail.
  </para>
  <code>
<![CDATA[
<project>
    <requires package="VisualStudio">
        version gte 7.0.0 and version lt 8
    </requires>
    <echo message="VisualStudio-${package.VisualStudio.version} is installed at ${package.VisualStudio.appdir}"/>
    <fail message="Incorrect version" if="${package.VisualStudio.version} lt 7"/>
    <fail message="Incorrect version" if="${package.VisualStudio.version} gt 8"/>
</project>]]>
  </code>
</example>
            <example shouldfail="true">
  <para>Provides a contradictory version expression that cannot be true.</para>
  <code>
  <![CDATA[
<project>
    <requires package="Framework">
        version gte 0.6.0 and 
        version lt  0.5.0
    </requires>
</project>]]>
  </code>
</example>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.PackageName">
            <summary>The name of the required package without a version.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.PackageVersion">
            <summary>The version for which the specified expression evaluates too.</summary>
            <returns>The matching version number, or null if none found.</returns>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.OnDemand">
            <summary>If true the package will be automatically downloaded from the package server. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.InitializeScript">
            <summary>If false the execution of the Initialize.xml script will be suppressed. Default is true.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.PackageConfig">
            <summary>The value of the config property to use when initializing this package.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.RequiresTask.GetDependents">
            <summary>Setting this to false prevents the installation of the package release's "Required Packages", only as specified on the release's web page on packages.ea.com.  Default is true.</summary>
        </member>
        <member name="T:EA.FrameworkTasks.VerifyVersionFileTask">
             <summary>Verifies package version info in version.h file.</summary>
             <remarks>
             <para>
             This task should be called by a package target.
             </para>
             <para>
             package task will verify that version information in the version.h file corresponds to the package version.
             This verification will apply to the packages that have 'include' directory to export header files. 
             Verification process will check that:
             * file 'version.h' or 'package_version.h" exists
             * version information inside 'version.h' file corresponds to the package version.
            
             Task assumes  that version information in the version.h file complies with the following convention:
             #define <name/>_VERSION_MAJOR   1
             #define <name/>_VERSION_MINOR   2
             #define <name/>_VERSION_PATCH   3
            
             Where <name/> is usually a package name but verification ignores content of <name/> 
             </para>
             <para>
             The task declares the following properties:
             </para>
             <list type='table'>
             <listheader><term>Property</term><description>Description</description></listheader>
             <item><term>${test-version-file.packagename}</term><description>The name of the package.</description></item>
             <item><term>${test-version-file.targetversion}</term><description>The version number of the package</description></item>
             <item><term>${test-version-file.packagedir}</term><description>package directory: <b>path</b> to the package</description></item>
             </list>
             </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.PackageName">
            <summary>The name of a package comes from the directory name if the package is in the packages directory.  Use this attribute to name a package that lives outside the packages directory.</summary>
            <remarks>
              <para>The <c>name</c> attribute is used for packages that live outside of the packages directory.</para>
            </remarks>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.TargetVersion">
            <summary>The version of the package in development.</summary>
        </member>
        <member name="P:EA.FrameworkTasks.VerifyVersionFileTask.PackageDir">
            <summary>The name of a package comes from the directory name if the package is in the packages directory.  Use this attribute to name a package that lives outside the packages directory.</summary>
            <remarks>
              <para>The <c>name</c> attribute is used for packages that live outside of the packages directory.</para>
            </remarks>
        </member>
        <member name="T:EA.JavaTasks.CompilerBase">
            <summary>Provides the abstract base class for a java compiler task.</summary>
        </member>
        <member name="M:EA.JavaTasks.CompilerBase.WriteOptions">
            <summary>Allows derived classes to provide compiler-specific options.</summary>
        </member>
        <member name="M:EA.JavaTasks.CompilerBase.WriteOption(System.String)">
            <summary>Write an option using the default output format.</summary>
        </member>
        <member name="M:EA.JavaTasks.CompilerBase.WriteFile(System.String)">
            <summary>Write </summary>
        </member>
        <member name="M:EA.JavaTasks.CompilerBase.WriteOption(System.String,System.String)">
            <summary>Write an option and its value using the default output format.</summary>
        </member>
        <member name="M:EA.JavaTasks.CompilerBase.NeedsCompiling">
            <summary>Determines whether compilation is needed.</summary>
        </member>
        <member name="P:EA.JavaTasks.CompilerBase.OutputDir">
            <summary>Output directory to put generated class files.</summary>
        </member>
        <member name="P:EA.JavaTasks.CompilerBase.Verbose">
            <summary>Enable verbose output. Default: false</summary>
        </member>
        <member name="P:EA.JavaTasks.CompilerBase.ClassPath">
            <summary>Specify where to find user class files and annotation processors.</summary>
        </member>
        <member name="P:EA.JavaTasks.CompilerBase.BootClassPath">
            <summary>location of bootstrap class files.</summary>
        </member>
        <member name="P:EA.JavaTasks.CompilerBase.Compiler">
            <summary>
            The full path to the compiler. 
            </summary>
        </member>
        <member name="T:EA.JavaTasks.JarTask">
            <summary>Generates JNI headers using javah.</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Verbose">
            <summary>Enable verbose output. Default: false</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Mode">
            <summary>mode: create/update/extract</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Archive">
            <summary>archive file</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Manifest">
            <summary>manifest file</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Entrypoint">
            <summary>manifest file</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.InputDir">
            <summary>The set of source files to archive.</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.Inputs">
            <summary>The set of source files to archive.</summary>
        </member>
        <member name="P:EA.JavaTasks.JarTask.JarTool">
            <summary>
            The full path to the compiler. 
            </summary>
        </member>
        <member name="T:EA.JavaTasks.JavacTask">
            <summary>Compiles Java.</summary>
        </member>
        <member name="P:EA.JavaTasks.JavacTask.Debug">
            <summary>Generate debug output (<c>true</c>/<c>false</c>). Default is false.</summary>
        </member>
        <member name="P:EA.JavaTasks.JavacTask.Target">
            <summary>Generate class files for specific VM version.</summary>
        </member>
        <member name="P:EA.JavaTasks.JavacTask.SourcePath">
            <summary>New line or semicolon separated list of source directories.</summary>
        </member>
        <member name="P:EA.JavaTasks.JavacTask.Encoding">
            <summary>Specify character encoding used by source files. Default: 'ascii'</summary>
        </member>
        <member name="P:EA.JavaTasks.JavacTask.Sources">
            <summary>The set of source files for compilation.</summary>
        </member>
        <member name="T:EA.JavaTasks.JavahTask">
            <summary>Generates JNI headers using javah.</summary>
        </member>
        <member name="P:EA.JavaTasks.JavahTask.Jni">
            <summary>Generate JNI-style header file (default)</summary>
        </member>
        <member name="P:EA.JavaTasks.JavahTask.Classes">
            <summary>New line or semicolon separated list of source directories.</summary>
        </member>
    </members>
</doc>
