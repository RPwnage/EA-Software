<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NAnt.Tasks</name>
    </assembly>
    <members>
        <member name="T:NAnt.DotNetTasks.AlTask">
            <summary>
                Wraps <c>al</c>, the assembly linker for the .NET Framework.
            </summary>
            <remarks>
              <para>All specified sources will be embedded using the <c>/embed</c> flag.  Other source types are not supported.</para>
            </remarks>
            <example>
              <para>Create a library containing all icon files in the current directory.</para>
              <code>
            <![CDATA[
            <project>
                <al output="MyIcons.dll" target="lib">
                    <sources>
                        <includes name="*.ico"/>
                    </sources>
                </al>
            </project>
            ]]>
              </code>
            </example>
        </member>
        <member name="P:NAnt.DotNetTasks.AlTask.Output">
            <summary>The name of the output file for the assembly manifest.
                This attribute corresponds to the <c>/out</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.AlTask.OutputTarget">
            <summary>The target type (one of "lib", "exe", or "winexe").
                This attribute corresponds to the <c>/t[arget]:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.AlTask.Culture">
            <summary>The culture string associated with the output assembly.
                The string must be in RFC 1766 format, such as "en-US".
                This attribute corresponds to the <c>/c[ulture]:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.AlTask.Template">
            <summary>Specifies an assembly from which to get all options except the culture field.
                The given filename must have a strong name.
                This attribute corresponds to the <c>/template:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.AlTask.Sources">
            <summary>The set of source files to embed.</summary>
        </member>
        <member name="T:NAnt.DotNetTasks.CompilerBase">
            <summary>Provides the abstract base class for a Microsoft compiler task.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.WriteOptions(System.IO.TextWriter)">
            <summary>Allows derived classes to provide compiler-specific options.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.WriteOption(System.IO.TextWriter,System.String)">
            <summary>Write an option using the default output format.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.WriteOption(System.IO.TextWriter,System.String,System.String)">
            <summary>Write an option and its value using the default output format.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.GetOutputPath">
            <summary>Gets the complete output path.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.NeedsCompiling">
            <summary>Determines whether compilation is needed.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.GetExtension">
            <summary>
            To be overidden by derived classes. Used to determine the file Extension required by the current compiler
            </summary>
            <returns></returns>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.GetFormClassName(System.String)">
            <summary>
            Open matching source file to find the name of the correct form or user control class.
            </summary>
            <param name="resxPath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.GetFormNamespace(System.String)">
            <summary>
            Open matching source file to find the correct namespace. This may need to be overidden by 
            the particular compiler if the namespace syntax is different for that language 
            </summary>
            <param name="resxPath"></param>
            <returns></returns>
        </member>
        <member name="M:NAnt.DotNetTasks.CompilerBase.CompileResxResources(NAnt.Core.FileSet)">
            <summary>
            Compile the resx files to temp .resources files
            </summary>
            <param name="resourceFileSet"></param>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Output">
            <summary>Output file name.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.OutputTarget">
            <summary>Output type (<c>library</c> for dll's, <c>winexe</c> for GUI apps, <c>exe</c> for console apps, or <c>module</c> for, well, modules).</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Debug">
            <summary>Generate debug output (<c>true</c>/<c>false</c>). Default is false.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Define">
            <summary>Define conditional compilation symbol(s). Corresponds to <c>/d[efine]:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Win32Icon">
            <summary>Icon to associate with the application. Corresponds to <c>/win32icon:</c> flag.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.References">
            <summary>Reference metadata from the specified assembly files.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Resources">
             <summary>Set resources to embed.</summary>
            <remarks>This can be a combination of resx files and file resources. .resx files will be compiled by resgen and then embedded into the 
            resulting executable. The Prefix attribute is used to make up the resourcename added to the assembly manifest for non resx files. For resx files the namespace from the matching source file is used as the prefix. 
            This matches the behaviour of Visual Studio </remarks>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Modules">
            <summary>Link the specified modules into this assembly.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Sources">
            <summary>The set of source files for compilation.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Compiler">
            <summary>
            The full path to the C# compiler. 
            Default is to use the compiler located in the current Microsoft .Net runtime directory.
            </summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CompilerBase.Resgen">
            <summary>
            The full path to the resgen .Net SDK compiler. This attribute is required 
            only when compiling resources.
            </summary>
        </member>
        <member name="T:NAnt.DotNetTasks.CscTask">
            <summary>Compiles C# programs using csc, Microsoft's C# compiler.
            <para>
            Command line switches are passed using this syntax: <b>&lt;arg value=""/&gt;</b>.
            See examples below to see how it can be used outside OR inside the <b>&lt;args&gt;</b> tags.
            </para>
            </summary>
            <example>
<para>An example of building the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project>
    <csc target="exe" output="hello.exe" debug="true">
        <sources basedir="source">
            <includes name="hello.cs"/>
        </sources>
    </csc>
    <exec program="hello"/>
</project>
]]>
</code>
<para>Where <c>source/hello.cs</c> contains:</para>
<code file="source/hello.cs">
<![CDATA[
using System;

class HelloWorld {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
]]>
</code>
</example>
            <example>
<para>An example of passing arguments to csc.</para>
<code file="HelloArgs.build">
<![CDATA[
<project>
    <csc target="exe" output="helloArgs.exe" debug="true">
        <args>
          <arg value="/nologo"/>
          <arg value="/recurse:hello.cs"/>
        </args>
    </csc>
    <exec program="helloArgs"/>
</project>
]]>
</code>

<para>Where <c>source/hello.cs</c> contains:</para>
<code file="source/hello.cs">
<![CDATA[
using System;
class HelloWorld {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
]]>
</code>
</example>
            <example>
<para>An example of building an application which includes embedded resources.</para>
<code file="restest.build">
<![CDATA[
<project>
    <fail message="Resource file not in a sub directory." unless="@{FileExists('resources/resource.txt')}"/>
    <csc target="exe" output="restest.exe" debug="true">
        <sources>
            <includes name="restest.cs"/>
        </sources>
        <resources basedir="resources">
            <includes name="resource.txt"/>
        </resources>
    </csc>
    <exec program="restest.exe"/>
</project>
]]>
</code>
<para>Where <c>restest.cs</c> contains:</para>
<code file="restest.cs">
<![CDATA[
using System;
using System.IO;
using System.Reflection;

class ResourceTest {
    static void Main() {
        Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("resource.txt");
        StreamReader reader = new StreamReader(stream);
        Console.WriteLine(reader.ReadToEnd());
        reader.Close();
        stream.Close();
    }
}
]]>
</code>
<para>And <c>resources/resource.txt</c> contains:</para>
<code file="resources/resource.txt">Hello, World!</code>
</example>
            <example>
<para>An example of building a Windows Forms application using the <c>prefix</c> attribute of the <c>resources</c> file set to prefix .resx files.</para>
<code>
<![CDATA[
<project>
    <csc target="winexe" output="About.exe" debug="false">
        <sources>
            <includes name="AboutForm.cs"/>
        </sources>
        <resources prefix="About">
            <includes name="AboutForm.resx"/>
            <includes name="App.ico"/>
        </resources>
        <references>
            <includes name="System.dll"                 asis="true"/>
            <includes name="System.Data.dll"            asis="true"/>
            <includes name="System.Xml.dll"             asis="true"/>
            <includes name="System.Windows.Forms.dll"   asis="true"/>
            <includes name="System.Drawing.dll"         asis="true"/>
        </references>
    </csc>
</project>
]]>
</code>
</example>
        </member>
        <member name="P:NAnt.DotNetTasks.CscTask.Doc">
            <summary>The name of the XML documentation file to generate.  This attribute 
            corresponds to the <c>/doc:</c> flag.  By default, documentation is not 
            generated.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.CscTask.ArgSet">
            <summary>A set of command line arguments.</summary>
            note this method exists solely for auto doc generation (nant.documenter)
        </member>
        <member name="T:NAnt.DotNetTasks.FscTask">
            <summary>Compiles C# programs using csc, Microsoft's C# compiler.
            <para>
            Command line switches are passed using this syntax: <b>&lt;arg value=""/&gt;</b>.
            See examples below to see how it can be used outside OR inside the <b>&lt;args&gt;</b> tags.
            </para>
            </summary>
            <example>
<para>An example of building the proverbial "Hello World" program.</para>
<code file="Hello.build">
<![CDATA[
<project>
    <csc target="exe" output="hello.exe" debug="true">
        <sources basedir="source">
            <includes name="hello.cs"/>
        </sources>
    </csc>
    <exec program="hello"/>
</project>
]]>
</code>
<para>Where <c>source/hello.cs</c> contains:</para>
<code file="source/hello.cs">
<![CDATA[
using System;

class HelloWorld {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
]]>
</code>
</example>
            <example>
<para>An example of passing arguments to csc.</para>
<code file="HelloArgs.build">
<![CDATA[
<project>
    <csc target="exe" output="helloArgs.exe" debug="true">
        <args>
          <arg value="/nologo"/>
          <arg value="/recurse:hello.cs"/>
        </args>
    </csc>
    <exec program="helloArgs"/>
</project>
]]>
</code>

<para>Where <c>source/hello.cs</c> contains:</para>
<code file="source/hello.cs">
<![CDATA[
using System;
class HelloWorld {
    static void Main() {
        Console.WriteLine("Hello, World!");
    }
}
]]>
</code>
</example>
            <example>
<para>An example of building an application which includes embedded resources.</para>
<code file="restest.build">
<![CDATA[
<project>
    <fail message="Resource file not in a sub directory." unless="@{FileExists('resources/resource.txt')}"/>
    <csc target="exe" output="restest.exe" debug="true">
        <sources>
            <includes name="restest.cs"/>
        </sources>
        <resources basedir="resources">
            <includes name="resource.txt"/>
        </resources>
    </csc>
    <exec program="restest.exe"/>
</project>
]]>
</code>
<para>Where <c>restest.cs</c> contains:</para>
<code file="restest.cs">
<![CDATA[
using System;
using System.IO;
using System.Reflection;

class ResourceTest {
    static void Main() {
        Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream("resource.txt");
        StreamReader reader = new StreamReader(stream);
        Console.WriteLine(reader.ReadToEnd());
        reader.Close();
        stream.Close();
    }
}
]]>
</code>
<para>And <c>resources/resource.txt</c> contains:</para>
<code file="resources/resource.txt">Hello, World!</code>
</example>
            <example>
<para>An example of building a Windows Forms application using the <c>prefix</c> attribute of the <c>resources</c> file set to prefix .resx files.</para>
<code>
<![CDATA[
<project>
    <csc target="winexe" output="About.exe" debug="false">
        <sources>
            <includes name="AboutForm.cs"/>
        </sources>
        <resources prefix="About">
            <includes name="AboutForm.resx"/>
            <includes name="App.ico"/>
        </resources>
        <references>
            <includes name="System.dll"                 asis="true"/>
            <includes name="System.Data.dll"            asis="true"/>
            <includes name="System.Xml.dll"             asis="true"/>
            <includes name="System.Windows.Forms.dll"   asis="true"/>
            <includes name="System.Drawing.dll"         asis="true"/>
        </references>
    </csc>
</project>
]]>
</code>
</example>
        </member>
        <member name="M:NAnt.DotNetTasks.FscTask.WriteOption(System.IO.TextWriter,System.String)">
            <summary>Write an option using the default output format.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.FscTask.WriteOption(System.IO.TextWriter,System.String,System.String)">
            <summary>Write an option and its value using the default output format.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.FscTask.Doc">
            <summary>The name of the XML documentation file to generate.  This attribute 
            corresponds to the <c>/doc:</c> flag.  By default, documentation is not 
            generated.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.FscTask.ArgSet">
            <summary>A set of command line arguments.</summary>
            note this method exists solely for auto doc generation (nant.documenter)
        </member>
        <member name="T:NAnt.DotNetTasks.JscTask">
            <summary>Compiles Microsoft JScript.NET programs using jsc.</summary>
        </member>
        <member name="T:NAnt.DotNetTasks.ResGenTask">
            <summary>Converts files from one resource format to another (wraps Microsoft's resgen.exe).</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.ResGenTask.RemoveOutputs">
            <summary>
            Clean up generated files
            </summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.Input">
            <summary>Input file to process.  It is required if the <c>resources</c> fileset is empty.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.Output">
            <summary>Name of the resource file to output.  Default is the input file name replaced by the target type extension.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.TargetExt">
            <summary>The target type extension (usually resources).  Default is "resources".</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.ToDirectory">
            <summary>The directory to which outputs will be stored.  Default is the input file directory.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.Resources">
            <summary>Takes a list of .resX or .txt files to convert to .resources files.</summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResGenTask.Compiler">
            <summary>The full path to the resgen compiler.</summary>
        </member>
        <member name="T:NAnt.DotNetTasks.ResourceFileSet">
            <summary>Specialized fileset class for managing resources. Has an additional namespace </summary>
        </member>
        <member name="P:NAnt.DotNetTasks.ResourceFileSet.Prefix">
            <summary>Indicates the prefix to prepend to the actual resource.  This is usually the 
            default namspace of the assembly.</summary>
        </member>
        <member name="T:NAnt.DotNetTasks.VbcTask">
            <summary>Compiles Microsoft Visual Basic.NET programs using vbc.exe.</summary>
        </member>
        <member name="M:NAnt.DotNetTasks.VbcTask.WriteOptions(System.IO.TextWriter)">
            <summary>
            Writes the compiler options to the specified TextWriter.
            </summary>
            <param name="writer"></param>
            <remarks></remarks>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.BaseAddress">
            <summary>Specifies whether <c>/baseaddress</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfbaseaddressspecifybaseaddressofdll.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this property is a string that makes up a 32bit hexidecimal number.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.Imports">
            <summary>Specifies whether the <c>/imports</c> option gets passed to the compiler</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfImportImportNamespaceFromSpecifiedAssembly.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute is a string that contains one or more namespaces separated by commas.</value>
            <example>Example of an imports attribute
            <code><![CDATA[imports="Microsoft.VisualBasic, System, System.Collections, System.Data, System.Diagnostics"]]></code></example>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.OptionCompare">
            <summary>Specifies whether <c>/optioncompare</c> option gets passed to the compiler</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptioncompareSpecifyHowStringsAreCompared.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this property must be either <c>text</c>, <c>binary</c>, or an empty string.  If the value is <c>false</c> or empty string, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.OptionExplicit">
            <summary>Specifies whether the <c>/optionexplicit</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptionexplicitRequireExplicitDeclarationOfVariables.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.OptionOptimize">
            <summary>Specifies whether the <c>/optimize</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfoptimizeenabledisableoptimizations.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.OptionStrict">
            <summary>Specifies whether the <c>/optionstrict</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfOptionstrictEnforceStrictTypeSemantics.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.RemoveIntChecks">
            <summary>Specifies whether the <c>/removeintchecks</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfRemoveintchecksRemoveInteger-OverflowChecks.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute must be either <c>true</c> or <c>false</c>.  If <c>false</c>, the switch is omitted.</value>
        </member>
        <member name="P:NAnt.DotNetTasks.VbcTask.RootNamespace">
            <summary>Specifies whether the <c>/rootnamespace</c> option gets passed to the compiler.</summary>
            <remarks><a href="ms-help://MS.NETFrameworkSDK/vblr7net/html/valrfRootnamespace.htm">See the Microsoft.NET Framework SDK documentation for details.</a></remarks>
            <value>The value of this attribute is a string that contains the root namespace of the project.</value>
        </member>
        <member name="T:NAnt.PerforceTasks.P4">
            <summary>
            This task allows you to pass arbitrary simple commands to
            Perforce.  Used when no predefined task exists for that
            Perforce command.
            </summary>
            <remarks>
            It will not work well with tasks that require Perforce 'form' data 
            input or output.
            <para>See the
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            To view all the changelists in the depot:
            <para>Perforce command:</para>
            <code><![CDATA[
            p4 changes]]></code> 
            Equivalent NAnt task:
            <code><![CDATA[
            <p4 command="changes" />]]></code>
            </example>
        </member>
        <member name="T:NAnt.PerforceTasks.P4Base">
            <summary>
            This class serves as a base class for other Perforce classes.  
            It provides Global Options services.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Client">
            <summary>
            Overrides P4CLIENT with this client name.
            Can also be set via the ${p4.client} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Dir">
            <summary>
            Overrides PWD with the specified directory.
            Can also be set via the ${p4.pwd} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Host">
            <summary>
            Overrides P4HOST with specified hostname.
            Can also be set via the ${p4.host} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Port">
            <summary>Overrides P4PORT with specified hostname.
            Can also be set via the ${p4.port} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Pass">
            <summary>
            Overrides P4PASSWD with specified hostname.
            Can also be set via the ${p4.passwd} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.User">
            <summary>
            Overrides P4USER|USER|USERNAME with specified hostname.
            Can also be set via the ${p4.user} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.Charset">
            <summary>
            Overrides P4CHARSET with specified charset.
            Can also be set via the ${p4.charset} property.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.GlobalOptions">
            <summary>
            Returns a formatted command line version for the global options.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.ProgramFileName">
            <summary>
            Gets the name of the application to start.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Base.ProgramArguments">
            <summary>
            Gets the command line arguments for the application.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4.Command">
            <summary>Allows any p4 command to be entered as a command line.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4AddTask">
            <summary>
            Open file(s) from the local workspace for addition to the depot.
            </summary>
            <remarks>
            See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.
            </remarks>
            <example>
            Add all the files found in <c>//depot/test/</c> and below as 
            <c>binary</c> files and place them on changelist <c>10101</c>.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 add -t binary -c 10101 //depot/test/...]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4add type="binary" change="10101" files="//depot/test/text.txt" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4AddTask.Files">
            <summary>
            A Perforce file specification for the files to add.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4AddTask.Type">
            <summary>
            Overrides the default type of the files to this type.
            Legal values: 'text', 'binary', 'symlink', 'apple', 'resource', 'unicode'.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4AddTask.Change">
            <summary>
            Assign these files to this pre-existing changelist.  
            If not specified, files will belong to the 'default' changelist.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4AddTask.ProgramArguments">
            <summary>
            Returns the command line arguments for the application.
            </summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4ChangeTask">
            <summary>
            Creates a new Perforce changelist or edits an existing one.
            </summary>
            <remarks>
            Files to be added to a changelist must already be opened for
            'add' or for 'edit' on the perforce server or this
            command will fail.
            <para>This task sets the <c>${p4.change}</c> property which can be used with 
            the <c>P4Submit</c>, <c>P4Edit</c>, or <c>P4Add</c> tasks.
            </para>
            If the <c>files</c> parameter is not specified, all files from the default changelist will be 
            moved to the new changelist.
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Create a new changelist with the given description.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 change "This is a new changelist created by NAnt"]]></code>
            Equivalent NAnt Task:<code><![CDATA[
            <p4change desc="This is a new changelist created by NAnt"/>]]></code>
            </example>
        </member>
        <member name="M:NAnt.PerforceTasks.P4ChangeTask.ExecuteTask">
            <summary>
            Executes the P4Change task
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangeTask.Desc">
            <summary>Textual description of the changelist.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangeTask.Files">
            <summary>
            A Perforce file specification for the files to add to the changelist.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangeTask.Change">
            <summary>Changelist to modify.  Required for delete.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangeTask.Delete">
            <summary>Delete the named changelist.  This only works for empty changelists.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangeTask.Type">
            <summary>Set change list type to be restricted or public. This only works starting with P4 2012.1.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4ChangesTask">
            <summary>
            This task lists submitted and pending changelists.
            </summary>
            <remarks>
            If no parameters are given, this task 
            reports the list of all pending and submitted changelists currently known to the perforce system.
            The parameters serve to filter the output down to a manageable level.
            <para>See the
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            List the last 3 submitted changelists in <c>//sandbox/...</c>
            <para>Perforce Command:</para><code><![CDATA[
            p4 changes -m 3 //sandbox/...]]></code>
            Equivalent NAnt Task:<code><![CDATA[
            <p4changes maxnum=3 files="//sandbox/..." />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangesTask.Files">
            <summary>Optional Perforce file spec to limit the output to the given files.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangesTask.Integrated">
            <summary>Include changelists that were integrated with the specified files.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangesTask.Maxnum">
            <summary>Lists only the highest maxnum changes.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangesTask.Status">
            <summary>
            Limit the list to the changelists with the given status (pending or submitted).
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4ChangesTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.Task_P4Counter">
            <summary>
            Obtain or set the value of a Perforce counter.
            </summary>
            <remarks>
            NOTE: The user performing this task must have Perforce 'review' permision in order for this 
            task to succeed. 
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            The first command prints the value of the counter <c>last-clean-build</c>.
            <para>The second sets the value to <c>999</c>.</para>
            <para>The third sets the nant property value <c>${p4.LastCleanBuild}</c> based on the value retrieved 
            from Perforce.</para>
            <para>Perforce Commands:</para><code><![CDATA[
            p4 counter last-clean-build
            p4 counter last-clean-build 999
            [no real equivalent command]]]></code>
            Equivalent NAnt Tasks:<code><![CDATA[
            <p4counter counter="last-clean-build" />
            <p4counter counter="last-clean-build" value="${TSTAMP}" />
            <p4counter counter="last-clean-build" property="p4.LastCleanBuild" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.PerforceTasks.Task_P4Counter.ExecuteTask">
            <summary>
            Executes the P4Counter task
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_P4Counter.Counter">
            <summary>The name of the counter.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_P4Counter.Value">
            <summary>The new value for the counter.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_P4Counter.Property">
            <summary>The property to set with the value of the counter.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4DeleteTask">
            <summary>
            Open file(s) in a client workspace for deletion from the depot.
            </summary>
            <remarks>
            This command marks files for deletion.  
            To actually delete the files, you must submit the changelist using the <c>p4submit</c> command.
            <para>See the 
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Mark <c>//sandbox/Test.cs</c> for delete on changelist <c>12345</c>. 
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 delete -c 12345 //sandbox/Test.cs]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4delete change="12345" files="//sandbox/Test.cs" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4DeleteTask.Files">
            <summary>Files to mark for delete.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4DeleteTask.Change">
            <summary>
            Attach the given files to this changelist. 
            If not specified, the files get attached to the default changelist.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4DeleteTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4EditTask">
            <summary>
            Open file(s) for edit in the local workspace.
            </summary>
            <remarks>
            The specified files will be linked to the a changelist, but changes to the depot will not 
            occur until a <c>p4submit</c> has been completed.  
            <para>If the <c>change</c> parameter is not specified, the files will go onto the <c>default</c> changelist.
            If the files were already open for edit and the <c>change</c> parameter is given, the files will be moved from their current changelist to the specified chagelist. 
            </para>
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Open the files in <c>//depot/test/...</c> for edit and place them on changelist <c>12345</c>.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 edit -c 12345 //depot/test/...]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4edit change="12345" files="//depot/test/..."/>]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4EditTask.Files">
            <summary>The files to edit.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4EditTask.Change">
            <summary>Assign these files to this pre-existing changelist.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4EditTask.Type">
            <summary>Overrides the default type of the files to this type.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4EditTask.ProgramArguments">
            <summary>
            Returns the command line arguments for the application.
            </summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4Form">
            <summary>
            TODO: This provides helper functions to interface with Perforce.
            </summary>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.GetForm(System.String)">
            <summary>
            This routine executes P4 with the given command and saves the stdout in 'Form'.
            It is meant to be used to retrieve form data from Perforce.
            </summary>
            <param name="command">Command line to be sent to Perforce.</param>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.PutForm(System.String)">
            <summary>
            This routine executes P4 with the given command to write form data to Perforce.
            It is meant to be used to write form data to Perforce.
            </summary>
            <param name="command">Command line to be sent to Perforce.</param>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.DoP4Command(System.String,System.Boolean)">
            <summary>
            This routine executes P4 with the given command and redirects the stdin
            to be the input form.
            </summary>
            <param name="commandLine">Command line to be sent to Perforce.</param>
            <param name="redirect">If true, redirects the standard input stream.</param>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.StdOut">
            <summary>
            This function will capture the stdout from the process and save it in
            a string.
            </summary>		
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.StdErr">
            <summary>
            This function captures the stderr from the process and send it to the log.
            </summary>		
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.ReplaceField(System.String,System.String)">
            <summary>
            Finds the named field in the form and sets it to 'value'.
            </summary>
            <param name="field">The name of the field to replace.</param>
            <param name="newValue">The new value for the field.</param>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.GetField(System.String)">
            <summary>
            Locates the named field and returns it's value.
            </summary>
            <param name="field">The name of the field to locate.</param>
            <returns>The value of the field within the form, or null if field is not found.</returns>
        </member>
        <member name="M:NAnt.PerforceTasks.P4Form.FilterComments">
            <summary>Removes all comments from the form.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Form.ProgramName">
            <summary>Returns the name of the program to execute.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Form.WorkDir">
            <summary>The working directory that the program executes in.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Form.FailOnError">
            <summary>Determines if task failure stops the build, or is just reported. Default is "true".</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Form.TimeOut">
            <summary>The maximum amount of time the application is allowed to execute, expressed in milliseconds.  Defaults to no time-out.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4Form.Form">
            <summary>The form we are operating on.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4HaveTask">
            <summary>
            This task lists files and revisions that have been copied to the client workspace.
            </summary>
            <remarks><para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>	
            <example>
            Display the files that match <c>//depot/test/...</c>.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 have //depot/test/...]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4have files="//depot/test/..."/>]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4HaveTask.Files">
            <summary>Optional Perforce file spec to limit the output to the given files.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4HaveTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4LabelTask">
            <summary>
            Creates a new label and associates that label with the current revisions of a list of files on the Perforce depot.
            </summary>
            <remarks>
            Note: This command only creates a label and associates files with it.  Use <c>p4labelsync</c>
            to make the label permanent.
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Create a label named <c>Nightly build</c>, with description <c>Built on ${TIMESTAMP}</c>.  
            Lock the label once created, and associate the files in <c>//sandbox/...</c> with the label.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 label -o "Nightly build" 
            [edit the form put out by the previous command to include the description, lock and file list data].
            p4 label -i
            p4 labelsync]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4label label="Nightly build" files="//sandbox/..." desc="Built on ${TIMESTAMP}" lock="true"/>
            <p4labelsync />]]></code>
            </example>
        </member>
        <member name="M:NAnt.PerforceTasks.P4LabelTask.ExecuteTask">
            <summary>
            Executes the P4Change task
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Label">
            <summary>Name to use for the label (required).</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Desc">
            <summary>Description of the label.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Lock">
            <summary>Lock the label once created.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Files">
            <summary>Optional Perforce file spec to limit the output to the given files.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Delete">
            <summary>Deletes an existing label.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelTask.Force">
            <summary>For delete, force delete even if locked.  Ignored otherwise.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4LabelsyncTask">
            <summary>
            This task causes the named label to reflect the current contents of the client workspace.
            </summary>
            <remarks>
            A label records the last revision of each file it contains and can subsequently be used in 
            a revision specification as <c>@label</c>.
            <para>
            If the files parameter is ommitted, the sync will cause the label to reflect the entire 
            contents of the client by adding, deleting and updating the list of files in the label.
            If the file parameter is included, the sync updates only the named files.
            </para><para>
            NOTE: You can only update labels you own, and labels that are locked cannot be updated 
            with <c>p4labelsync</c>.
            </para>
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            The first command lists what would happen if it were to add the files in <c>//sandbox/...</c> to the label <c>labelName</c>.
            <para>The second deletes files matching <c>//sandbox/*.txt</c> from label <c>labelName2</c>.</para>
            <para>Perforce Commands:
            </para><code><![CDATA[
            p4 labelsync -a -n -l labelName //sandbox/...
            p4 labelsync -d -l labelName2 //sandbox/*.txt]]></code>
            Equivalent NAnt Tasks:<code><![CDATA[
            <p4labelsync  label="labelName" files="//sandbox/..." add="true" execute="false" />
            <p4labelsync  label="labelName2" files="//sandbox/*.txt" delete="true"  />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.Label">
            <summary>Name to use for the label (required).</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.Files">
            <summary>Optional Perforce file spec to limit the operation to the given files.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.Delete">
            <summary>Deletes the named files from the label.  Defaults false.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.Add">
            <summary>
            Adds the named files to the label without deleting any files, 
            even if some of the files have been deleted at the head revision.  Defaults false.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.Exec">
            <summary>
            If false, displays the results of this sync without actually executing it.  
            Defaults true.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4LabelsyncTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.Task_Reopen">
            <summary>
            Moves opened files between changelists.
            </summary>
            <remarks>
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Move the file <c>//sandbox/testFile.cs</c> from the default changelist to changelist <c>605040</c>.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 reopen -c 605040 //sandbox/testFile.cs]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4reopen change="605040" files="//sandbox/testFile.cs" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_Reopen.Files">
            <summary>The files to operate on.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_Reopen.Change">
            <summary>Revert only the files in the specified changelist.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.Task_Reopen.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4RevertTask">
            <summary>
            Discard changes made to open files.
            </summary>
            <remarks>
            <para>
            <c>revert</c> causes perforce to discard all changes including checked-in changes made after the revision to which the reverted files are returned.  These changes are lost, and cannot be recovered in any way.
            </para>
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Revert all unchanged files from changelist <c>12345</c> that match the filter <c>//depot/test/...</c>.
            <para>Perforce Command:</para>
            <code><![CDATA[
            p4 revert -a -c 12345 //depot/test/...]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4revert onlyUnchanged="true" change="12345" files="//depot/test/..." />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4RevertTask.Files">
            <summary>The files to revert.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4RevertTask.Change">
            <summary>Revert only the files in the specified changelist.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4RevertTask.Unchanged">
            <summary>Revert only unchanged files (open for edit, but not altered).</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4RevertTask.ProgramArguments">
            <summary>
            Returns the command line arguments for the application.
            </summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4SubmitTask">
            <summary>
            Submit a changelist to the depot.
            </summary>
            <remarks>
            When a file has been opened by <c>p4add, p4edit, p4delete,</c> or <c>p4integrate</c>, the file is
            ladded to a changelist.  The user's changes to the file are made only within in the client
            workspace until the changelist is sent to the depot with <c>p4submit</c>.
            
            If the <c>change</c> parameter is not specified, the default changelist will be used.
            
            After task is executed the <c>change</c> parameter will contain actual submitted changelist.
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            The first command submits all the files from changelist <c>2112</c>, then reopens them for edit.
            <para>The second submits all files that match <c>//sandbox/*.txt</c>.</para>
            <para>Perforce Commands:</para>
            <code><![CDATA[
            p4 submit -r -c 2112
            p4 submit //sandbox/*.txt]]></code>
            Equivalent NAnt Tasks:
            <code><![CDATA[
            <p4submit reopen="true" change="2112" />
            <p4submit files="//sandbox/*.txt" />]]></code>
            </example>
        </member>
        <member name="M:NAnt.PerforceTasks.P4SubmitTask.ExecuteTask">
            <summary>
            Executes the P4Submit task
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SubmitTask.Files">
            <summary>
            A single file pattern may be specified as a parameter to a p4 submit of the 
            default changelist. This file pattern limits which files in the default changelist are 
            included in the submission; files that don't match the file pattern are moved to the 
            next default changelist.
            The file pattern parameter to p4submit may not be used if <c>change</c> is specified.
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SubmitTask.Change">
            <summary>Changelist to modify. After task is executed it contains actual submitted changelist</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SubmitTask.Reopen">
            <summary>Reopens the submitted files for editing after submission.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SubmitTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4SyncTask">
            <summary>
            Synchronize files between the depot and the workspace.
            </summary>
            <remarks>
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            The first command brings the entire workspace into sync with the depot.  
            <para>The second command merely lists the files that are out of sync with the label <c>labelname</c>.</para>
            <para>Perforce Commands:</para>
            <code><![CDATA[
            p4 sync
            p4 sync -f -n @labelname.]]></code>
            Equivalent NAnt Tasks:
            <code><![CDATA[
            <p4sync />
            <p4sync files="@labelname" force="true" execute="false" />]]></code>
            </example>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SyncTask.Files">
            <summary>The files to sync.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SyncTask.Force">
            <summary>Perform the sync even if files are not writeable or are already in sync.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SyncTask.Exec">
            <summary>If false, displays the results of this sync without actually executing it (defaults true).</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4SyncTask.ProgramArguments">
            <summary>Gets the command line arguments for the application.</summary>
        </member>
        <member name="T:NAnt.PerforceTasks.P4WhereTask">
            <summary>
            Return the file name in the local view of the client given the name in the depot.
            </summary>
            <remarks>
            NOTE: If verbose is true and the local file (or directory) doesn't exist,
            a warning will be printed. 
            <para>See the 		
            <a href="http://www.perforce.com/perforce/doc.021/manuals/cmdref/where.html#1040665">Perforce User's Guide</a> 
            for more information.</para>
            </remarks>
            <example>
            Print the local file name which is identified in the depot as <c>//depot/orca/bob.txt</c>.
            <para>Perforce Command (the third line in the output):</para>
            <code><![CDATA[
            p4 -ztag where //depot/orca/bob.txt]]></code>
            Equivalent NAnt Task:
            <code><![CDATA[
            <p4where filespec="//depot/orca/bob.txt" property="p4.where"/>
            <echo message="Local path is: ${p4.where}"/>]]></code>
            </example>
        </member>
        <member name="M:NAnt.PerforceTasks.P4WhereTask.InitializeTask(System.Xml.XmlNode)">
            <summary>
            Initializes the P4Where task
            </summary>
        </member>
        <member name="M:NAnt.PerforceTasks.P4WhereTask.ExecuteTask">
            <summary>
            Executes the P4Where task
            </summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4WhereTask.FileSpec">
            <summary>Perforce file spec in depot syntax.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4WhereTask.ToProperty">
            <summary>The property to set with the required path.</summary>
        </member>
        <member name="P:NAnt.PerforceTasks.P4WhereTask.Type">
            <summary>The type of path required Can be one of these: Local, Depot or Client..</summary>
        </member>
        <member name="M:EA.SharpZipLib.ZipLib.UnzipFile(System.String,System.String)">
            <summary>
            Unzip a file.
            </summary>
            <param name="zipFileName">The full path to the zip file.</param>
            <param name="targetDir">The full path to the destination folder.</param>
        </member>
        <member name="M:EA.SharpZipLib.ZipLib.UnzipStream(System.IO.Stream,System.String)">
            <summary>
            Unzip an input stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="targetDir">The full path to the destination folder.</param>
        </member>
        <member name="M:EA.SharpZipLib.ZipLib.UnzipStream(System.IO.Stream,System.String,System.Int32)">
            <summary>
            Unzip an input stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="targetDir">The full path to the destination folder.</param>
            <param name="entryCount">The total number of entries.</param>
        </member>
        <member name="M:EA.SharpZipLib.ZipLib.ZipFile(System.Collections.Specialized.StringCollection,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Create a zip file.
            </summary>
            <param name="fileNames">The collection of files to add to the zip file.</param>
            <param name="baseDirectory">The full path to the basedirectory from which each zipentry will be made relative to.</param>
            <param name="zipFileName">The full path to the zip file.</param>
            <param name="zipEntryDir">The base path to append to each zip entry, should be relative. May be null for none.</param>
            <param name="zipLevel">Compression level. May be 0 for default compression.</param>
            <param name="useModTime">Preserve last modified timestamp of each file.</param>
        </member>
        <member name="T:NAnt.Win32Tasks.Functions.RegistryFunctions">
            <summary>
            Collection of windows registry manipulation routines. 
            </summary>
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.GetRegistryKey6432(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Retrieves registry key object. If object is not found in the regular location it tries to 
            to test Wow6432Node subtree (the latter is for 64 bit systems).
            </summary>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <returns>The specified key or null.</returns>
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.RegistryGetValue(NAnt.Core.Project,Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Get the specified value of the specified key in the windows registry.
            </summary>
            <param name="project"></param>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <param name="value">The name of the windows registry key value.</param>
            <returns>The specified value of the specified key in the windows registry.</returns>
            <example>
<code>
<![CDATA[
<project>
    <!-- HKEY_LOCAL_MACHINE\SOFTWARE\Electronic Arts\Framework -->
    <echo message="@{RegistryGetValue('LocalMachine', 'SOFTWARE\Electronic Arts\Framework', 'Path')}" />
</project>
]]>
</code>
</example>        
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.RegistryGetValue(NAnt.Core.Project,Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Get the default value of the specified key in the windows registry.
            </summary>
            <param name="project"></param>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <returns>The default value of the specified key in the windows registry.</returns>
            <example>
<code>
<![CDATA[
<project>
    <!-- HKEY_LOCAL_MACHINE\SOFTWARE\Electronic Arts\Framework -->
    <echo message="@{RegistryGetValue('LocalMachine', 'SOFTWARE\Electronic Arts\Framework')}" />
</project>
]]>
</code>
</example>        
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.RegistryKeyExists(NAnt.Core.Project,Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Checks that the specified key exists in the windows registry.
            </summary>
            <param name="project"></param>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <returns>True if the specified registry key exists, otherwise false.</returns>
            <example>
<code>
<![CDATA[
<project>
    <!-- HKEY_LOCAL_MACHINE\SOFTWARE\Electronic Arts\Framework -->
    <echo message="@{RegistryKeyExists('LocalMachine', 'SOFTWARE\Electronic Arts\Framework')}" />
</project>
]]>
</code>
</example>        
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.RegistryValueExists(NAnt.Core.Project,Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Checks that the specified value of the specified key exists in the windows registry.
            </summary>
            <param name="project"></param>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <param name="value">The name of the windows registry key value.</param>
            <returns>True if the value exists, otherwise false.</returns>
            <example>
<code>
<![CDATA[
<project>
    <!-- HKEY_LOCAL_MACHINE\SOFTWARE\Electronic Arts\Framework -->
    <echo message="@{RegistryValueExists('LocalMachine', 'SOFTWARE\Electronic Arts\Framework', 'Path')}" />
</project>
]]>
</code>
</example>        
        </member>
        <member name="M:NAnt.Win32Tasks.Functions.RegistryFunctions.RegistryValueExists(NAnt.Core.Project,Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Checks that the default value of the specified key exists in the windows registry.
            </summary>
            <param name="project"></param>
            <param name="hive">
            The top-level node in the windows registry. Possible values are: LocalMachine, Users, 
            CurrentUser, and ClassesRoot.
            </param>
            <param name="key">The name of the windows registry key.</param>
            <returns>True if the default value exists, otherwise false.</returns>
            <example>
<code>
<![CDATA[
<project>
    <!-- HKEY_LOCAL_MACHINE\SOFTWARE\Electronic Arts\Framework -->
    <echo message="@{RegistryValueExists('LocalMachine', 'SOFTWARE\Electronic Arts\Framework')}" />
</project>
]]>
</code>
</example>        
        </member>
        <member name="T:NAnt.ZipTasks.UnZipTask">
            <summary>
            Unzip the contents of a zip file to a specified directory.
            </summary>
            <example>
<para>Zip and UnZip files to a directory.</para>
<code>
<![CDATA[
<project>
    <zip zipfile="backup.zip">
        <fileset basedir=".">
            <includes name="*.*"/>
            <excludes name="backup.zip"/>
        </fileset>
    </zip>
    
    <unzip zipfile="backup.zip" outdir="backup" />
</project>
]]>
</code>
</example>
        </member>
        <member name="P:NAnt.ZipTasks.UnZipTask.ZipFileName">
            <summary>The full path to the zip file.</summary>
        </member>
        <member name="P:NAnt.ZipTasks.UnZipTask.OutDir">
            <summary>The full path to the destination folder.</summary>
        </member>
        <member name="T:NAnt.ZipTasks.ZipTask">
            <summary>
            Creates a zip file from a specified fileset.
            </summary>
            <remarks>
              <para>Uses <a href="http://www.icsharpcode.net/OpenSource/NZipLib/">NZipLib</a>, an open source Zip/GZip library written entirely in C#.</para>
            <para>Full zip functionality is not available; all you can do
            is to create a zip file from a fileset.</para>
            </remarks>
            <example>
<para>Zip all files in the subdirectory <c>build</c> to <c>backup.zip</c>.</para>
<code>
<![CDATA[
<project default="DoZip">
    <target name="DoZip">
        <zip zipfile="backup.zip">
            <fileset basedir=".">
                <includes name="*.*"/>
                <excludes name="backup.zip"/>
            </fileset>
        </zip>
    </target>
</project>
]]>
</code>
</example>
        </member>
        <member name="P:NAnt.ZipTasks.ZipTask.ZipFileName">
            <summary>The zip file to create. Use a qualified name to create the zip file in a 
            location which is different than the current working directory.</summary>
        </member>
        <member name="P:NAnt.ZipTasks.ZipTask.ZipLevel">
            <summary>Desired level of compression Default is 6.</summary>
            <value>0 - 9 (0 - STORE only, 1-9 DEFLATE (1-lowest, 9-highest))</value>
        </member>
        <member name="P:NAnt.ZipTasks.ZipTask.ZipEntryDir">
            <summary>Prepends directory to each zip file entry.</summary>
        </member>
        <member name="P:NAnt.ZipTasks.ZipTask.ZipFileSet">
            <summary>The set of files to be included in the archive.</summary>
        </member>
        <member name="P:NAnt.ZipTasks.ZipTask.UseModTime">
            <summary>Preserve last modified timestamp of each file.</summary>
        </member>
    </members>
</doc>
