<!-- 
     (c) Electronic Arts. All Rights Reserved.
==============================================================================

targets-init.xml

API Information

All targets
  ${package.configs}                           Property containing the list of configurations for the project
  ${package.usedependencies}                   Property containing the list of any use dependent packages by name (must be placed before the package command)
  ${package.usedependencies.${config-system}}  Property containing the list of any system specific use dependent packages by name (must be placed before the package command)

All build style targets
  ${package.buildtype}                          Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.builddependencies}                  Property containing the list of any build dependent packages by name (not required)
  ${package.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.headerfiles}                        Fileset containing the header files for the project (default provided)
  ${package.headerfiles.${config-system}}       System specifc headeer files
  ${package.sourcefiles}                        Fileset containing the source files for the project (default provided)
  ${package.sourcefiles.${config-system}}       System specific source files, if necessary
  ${package.defines}                            Property containing the list of any build defines needed for the builds (not required)
  ${package.defines.${config-system}}           System specific defines (May not need this long term)

  ${package.includedirs}                        Property containing the list of any include direcotires needed for the builds (not required)
                                                Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.includedirs.${config-system}}       System specific includedirs, if necessary
  ${package.libs}                               Property containing the list of any build defines needed for the builds (not required)
                                                Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.libs.${config-system}}              System specifc libraries, if necessary

  ${pacakge.buildmodules}
  ${package.${module}.buildtype}                     Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.${module}.builddependencies}             Property containing the list of any build dependent packages by name (not required)
  ${package.${module}.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.${module}.headerfiles}                   Fileset containing the header files for the project (default provided)
  ${package.${module}.headerfiles.${config-system}}  System specifc headeer files
  ${package.${module}.sourcefiles}                   Fileset containing the source files for the project (default provided)
  ${package.${module}.sourcefiles.${config-system}}  System specific source files, if necessary
  ${package.${module}.defines}                       Property containing the list of any build defines needed for the builds (not required)
  ${package.${module}.defines.${config-system}}      System specific defines (May not need this long term)

  ${package.${module}.includedirs}                   Property containing the list of any include direcotires needed for the builds (not required)
                                                     Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.includedirs.${config-system}}  System specific includedirs, if necessary
  ${package.${module}.libs}                          Property containing the list of any build defines needed for the builds (not required)
                                                     Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.libs.${config-system}}         System specifc libraries, if necessary


doxygen target
  ${package.doxygenfiles}            Fileset containing the doxygen files for the project (default provided)

==============================================================================
-->

<project>

  <!-- This defines the default behavior if the user does not specify anything -->

  <TargetInit />

  <!--

  <do if="${nant.verbose}" >
    <echo message="eaconfig.targets (after):" />
    <foreach item="OptionSet" in="eaconfig.targets" property="option">
      <echo message="'${option.name} = '${option.value}'" />
    </foreach>
  </do>

-->

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Do some common set up for all targets -->

  <property name="package.configbuilddir" value="${package.builddir}/${config}/build"/>
  <property name="package.configbindir" value="${package.builddir}/${config}/bin"/>
  <property name="package.configlibdir" value="${package.builddir}/${config}/lib"/>

  <property name="package.buildtype" value="none" unless="@{PropertyExists('package.buildtype')}"/>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <!-- This is a temp solution to help pass properties when invoking a new nant instance. -->
  
  <include file="target-persistent-property-passing.xml" />
  

  <include file="target-build.xml" />
  <include file="target-build-custom.xml" />
  <include file="target-embed.xml" />
  <include file="target-build-res.xml" />
  <include file="target-clean.xml" />
  <include file="target-codewizard.xml" />
  <include file="target-doc.xml" />
  <include file="target-example.xml" />
  <include file="target-lint.xml" />
  <include file="target-package.xml" />
  <include file="target-test.xml" />
  <include file="target-tool.xml" />
  <include file="target-deploy.xml" />
  <include file="target-run.xml" />
  <include file="target-vcproj.xml" />

  <include file="target-standard.xml" />
  <include file="target-additional.xml" />

</project>

