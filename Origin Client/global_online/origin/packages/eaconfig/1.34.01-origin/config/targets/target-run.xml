<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project>

  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'run')}' == 'exclude'">
    <target name="run" description="Runs the executables for a specific configuration" depends="build">
      <property name="eaconfig.build.group" value="runtime" />
      <property name="eaconfig-run-target-name" value="eaconfig-run" />
      <call target="eaconfig-run-caller" force="true" />
    </target>
  </do>

  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'runall')}' == 'exclude' AND '@{OptionSetGetValue('eaconfig.targets', 'run')}' == 'exclude'">
    <target name="runall" description="Run the program for each configuration">
      <property name="eaconfig.buildall.target" value="run" />
      <property name="eaconfig-run-target-name" value="eaconfig-run" />
      <call target="eaconfig-buildall-caller" force="true" />
    </target>
  </do>

  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'run-fast')}' == 'exclude' AND '@{OptionSetGetValue('eaconfig.targets', 'run')}' == 'exclude'">
    <target name="run-fast" description="Runs the executables for a specific configuration">
      <property name="eaconfig.build.group" value="runtime" />
      <property name="eaconfig-run-target-name" value="eaconfig-run" />
      <call target="eaconfig-run-caller" force="true" />
    </target>
  </do>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.pc')}">
    <target name="eaconfig-run.pc" description="Run the current component on PC" hidden="true">
      <property name="pc-timeout" value="@{MathMul('${eaconfig-run-timeout}', '1000')}"/>
      <exec
        workingdir="${eaconfig-run-workingdir}"
        program="@{PathCombine('${eaconfig-run-programfolder}', '${eaconfig-run-programname}')}${eaconfig-run-programextension}"
        timeout="${pc-timeout}"
        >
        <arg value="${eaconfig-run-args}"/>
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.pc64')}">
    <target name="eaconfig-run.pc64" description="Run the current component on PC" hidden="true">
      <property name="pc64-timeout" value="@{MathMul('${eaconfig-run-timeout}', '1000')}"/>
      <exec unless="${eaconfig-run-PROCESSOR_ARCHITECTURE}==x86"
        workingdir="${eaconfig-run-workingdir}"
        program="@{PathCombine('${eaconfig-run-programfolder}', '${eaconfig-run-programname}')}${eaconfig-run-programextension}"
        timeout="${pc64-timeout}"
        >
        <args>
          <arg value="${eaconfig-run-args}"/>
        </args>
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.xbox')}">
    <target name="eaconfig-run.xbox" description="Run the current component on Xbox" hidden="true">
      <dependent name="Xdk" />

      <property name="eaconfig-run-datafileexts"  value="${${groupname}.run.datafileexts}" if="@{PropertyExists('${groupname}.run.datafileexts')}" />
      <property name="eaconfig-run-datafileexts"  value="*.xbo *.xfn *.xsh *.ebo *.txt *.ttf *.fx *.rx2"  unless="@{PropertyExists('${groupname}.run.datafileexts')}" />

      <property name="xbox-outputfolder" value="xe:\${modulename}\${config}"/>

      <!-- Copy data files to the Xbox -->
      <exec
        workingdir="${eaconfig-run-workingdir}"
        program="${package.Xdk.appdir}/xbox/bin/xbcp"
        unless="@{StrIsEmpty('${eaconfig-run-workingdir}')}"
      >
        <arg value="/y /t /f /r /s /q /d"/>
        <arg value="${eaconfig-run-datafileexts}"/>
        <arg value="${xbox-outputfolder}"/>
      </exec>

      <!-- Copy program files to the Xbox -->
      <exec
        workingdir="${eaconfig-run-programfolder}"
        program="${package.Xdk.appdir}/xbox/bin/xbcp"
      >
        <arg value="/y /t /f"/>
        <arg value="*${eaconfig-run-programextension}"/>
        <arg value="*.xbo"/>
        <arg value="${xbox-outputfolder}"/>
      </exec>

      <!-- Execute the program on the Xbox -->
      <exec program="${package.Xdk.appdir}/xbox/bin/xbreboot">
        <arg value="@{PathCombine('${xbox-outputfolder}', '${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>
        <arg value="${eaconfig-run-args}"/>
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.xenon')}">
    <target name="eaconfig-run.xenon" description="Run the current component on Xenon" hidden="true">
      <dependent name="xenonsdk" />
      <dependent name="EARunner" />

      <property name="eaconfig-run-datafileexts"  value="${${groupname}.run.datafileexts}" if="@{PropertyExists('${groupname}.run.datafileexts')}" />
      <property name="eaconfig-run-datafileexts"  value="*.xbo *.xfn *.xsh *.ebo *.txt *.ttc *.ffs *.inl *.ttf *.fx *.rx2 *.json *.xml"  unless="@{PropertyExists('${groupname}.run.datafileexts')}" />

      <property name="eaconfig-run-bindir" value="${package.xenonsdk.appdir}/bin/win32" />
      <property name="xenon-outputfolder" value="xe:\${modulename}\${config}"/>

      <trycatch>
        <try>
          <!-- copy the data files over to the xenon (this could probably read directly off of the test.${package.name}.test-data-fileset 
       object to avoid the ambiguity... -->
          <exec
            workingdir="${eaconfig-run-workingdir}"
            program="${eaconfig-run-bindir}/xbcp"
            unless="@{StrIsEmpty('${eaconfig-run-workingdir}')}"
          >
            <arg value="/y /t /f /r /s /q /d"/>
            <arg value="/X:${eaconfig-run-console}" unless="@{StrIsEmpty('${eaconfig-run-console}')}" />
            <arg value="${eaconfig-run-datafileexts}"/>
            <arg value="${xenon-outputfolder}"/>
          </exec>
        </try>
        <catch>
          <echo message="No data files to copy"/>
        </catch>
      </trycatch>

      <!-- Copy program files to the Xenon -->
      <exec
        workingdir="${eaconfig-run-programfolder}"
        program="${eaconfig-run-bindir}/xbcp"
      >
        <arg value="/y /t /f"/>
        <arg value="/X:${eaconfig-run-console}" unless="@{StrIsEmpty('${eaconfig-run-console}')}" />
        <arg value="*.exe"/>
        <arg value="*${eaconfig-run-programextension}"/>
        <arg value="${xenon-outputfolder}"/>
      </exec>

      <!-- Execute the program on the Xenon -->
      <exec
          program="${package.EARunner.dir}\bin\Win32\Release\EARunner_Xenon.exe"
          workingdir="${eaconfig-run-programfolder}" >
        <env>
          <option name="PATH" value="${sys.env.PATH};${eaconfig-run-bindir};"/>
        </env>
        <args>
          <arg value="-x ${eaconfig-run-console}" unless="@{StrIsEmpty('${eaconfig-run-console}')}" />
          <arg value="-tr ${eaconfig-run-response-timeout}" unless="@{StrIsEmpty('${eaconfig-run-response-timeout}')}" />
          <arg value="-tu ${eaconfig-run-timeout}" unless="@{StrIsEmpty('${eaconfig-run-timeout}')}" />
          <arg value="@{PathCombine('${xenon-outputfolder}', '${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>
          <arg value="${eaconfig-run-args}"/>
        </args>
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.ps2')}">
    <target name="eaconfig-run.ps2" description="Run the current component on PS2" hidden="true">
      <dependent name="PlayStation2SN" />

      <!-- Execute the program on the PS2 -->
      <exec
        workingdir="${eaconfig-run-workingdir}"
        program="${package.PlayStation2SN.appdir}/sce/ee/gcc/bin/ps2run.exe"
      >
        <arg value="-r-1,-1" />
        <arg value="-p" />
        <arg value="-h${eaconfig-run-homedir}" unless="@{StrIsEmpty('${eaconfig-run-homedir}')}" />
        <arg value="-f${eaconfig-run-workingdir}" unless="@{StrIsEmpty('${eaconfig-run-workingdir}')}"/>
        <arg value="@{PathToWindows('${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>
        <arg value="${eaconfig-run-args}"/>
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.ps3')}">
    <target name="eaconfig-run.ps3" description="Run the current component on PS3" hidden="true">
      <property name="eaconfig-run-console" value="" unless="@{PropertyExists('eaconfig-run-console')}" />

      <!-- Dependant on EARunner to run the tests for this platform -->
      <dependent name="EARunner" />

      <exec
          program="${package.EARunner.dir}\bin\Win32\Release\EARunner_PS3.exe"
          workingdir="${eaconfig-run-programfolder}" >
        <args>
          <arg value="-x ${eaconfig-run-console}" unless="@{StrIsEmpty('${eaconfig-run-console}')}" />
          <arg value="-fdt" />
          <arg value="-it ${eaconfig-run-console}" unless="@{StrIsEmpty('${eaconfig-run-console}')}" />
          <arg value="-tr ${eaconfig-run-response-timeout}" unless="@{StrIsEmpty('${eaconfig-run-response-timeout}')}" />
          <arg value="-tu ${eaconfig-run-timeout}" unless="@{StrIsEmpty('${eaconfig-run-timeout}')}" />
          <arg value="-hd ${eaconfig-run-homedir}" unless="@{StrIsEmpty('${eaconfig-run-homedir}')}" />
          <arg value="-fd ${eaconfig-run-workingdir}" unless="@{StrIsEmpty('${eaconfig-run-workingdir}')}"/>
          <arg value="@{PathToWindows('${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}')}" />
          <arg value="${eaconfig-run-args}"/>
        </args>
      </exec>

    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.iphone')}">
    <target name="eaconfig-run.iphone" description="Run the current component on iphone (device)" hidden="true">
      <fail message="IPhoneRunner does not support simulation runs" if="@{PropertyTrue('config.iphone-sim')}"/>

      <dependent name="IPhoneRunner"/>
      <dependent name="iphonesdk"/>

      <property name="xcodeprojectname" value="${eaconfig-run-programname}"/>
      <property name="xcodeprojectext" value=".xcodeproj"/>
      <property name="xcodeprojectfullpath" value="${package.builddir}/${xcodeprojectname}${xcodeprojectext}"/>

      <delete dir="${xcodeprojectfullpath}" failonmissing="false" failonerror="false"/>
 
      <task name="CallPrebuildStep" group="${eaconfig.build.group}"/>
      <task name="XCodeProjectGenerateForModule" 
          Group="${eaconfig.build.group}"
          Module="${modulename}" 
          Target="${eaconfig.build.group}-build" 
          OutputFolder="/${eaconfig.build.group}" 
          unless="'${eaconfig.build.group}'=='runtime'"/>
      <task 
          name="XCodeProjectGenerateForModule" 
          Group="${eaconfig.build.group}" 
          Module="${modulename}" 
          Target="build" 
          OutputFolder="" 
          if="'${eaconfig.build.group}'=='runtime'"/>

      <!-- XCode projects are in fact directories -->
      <fail unless="@{DirectoryExists('${xcodeprojectfullpath}')}"
            message="ERROR: '${xcodeprojectfullpath}' does not exist. Make sure to call xcode generation target."/>

      <property name="IPhoneRunner" value="${package.IPhoneRunner.dir}/bin/Debug/IPhoneRunner.exe"/>
      
      <sleep seconds="5"/>
      <exec program="chmod" commandline="a=rx ${IPhoneRunner}"/>
      <exec program="${IPhoneRunner}">
        <args>
          <arg value="-p ${xcodeprojectfullpath}"/>
          <arg value="-d ${eaconfig-run-console}"/>
          <arg value="-i"/>
        </args>
      </exec>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.palm')}">
    <target name="eaconfig-run.palm" description="Run the current component on Palm (device)" hidden="true">
      <dependent name="palmpdk" />

      <property name="eaconfig-run-bindir" value="${package.palmpdk.dir}/installed/bin" />
      <property name="palm-timeout" value="@{MathMul('${eaconfig-run-timeout}', '1000')}"/>

      <property name="local-executable" value="@{PathToWindows('${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>
      <property name="palm-workingdir" value="/media/internal/${eaconfig-run-programname}.app"/>
      <property name="palm-executable" value="${palm-workingdir}/${eaconfig-run-programname}"/>

      <echo>Kill running processes &amp; make directories on palm device &amp; clean tmp dir...</echo>
      <exec
        workingdir="${eaconfig-run-programfolder}"
        program="${eaconfig-run-bindir}/plink.exe"
          >
        <arg value="-load NONE"/>
        <arg value="-P 10022"/>
        <arg value="-pw &quot;&quot;"/>
        <arg value="root@localhost"/>
        <arg value='killall "${eaconfig-run-programname}" | echo; mkdir -p "${palm-workingdir}"; cd /tmp &amp;&amp; rm -R -f *'/>
      </exec>

      <echo>Copy bin directory to palm device...</echo>
      <task name="CallPscp"
            SourceDir="${eaconfig-run-workingdir}\**"
            DestinationDir="${palm-workingdir}"
            Recursive="true"/>

      <trycatch>
        <try>
          <echo>Starting executable...</echo>

          <!-- 
                If we don't attempt to cd into the working directory,
                will start out at /var/home/...
                In addition, plink was modified to allow for keepalive via command line,
                which prevent annoying arbitrary disconnects for long tests.
                -->
          <exec
            workingdir="${eaconfig-run-programfolder}"
            program="${eaconfig-run-bindir}/plink.exe"
            timeout="${palm-timeout}"
            >
            <arg value="-load NONE"/>
            <arg value="-P 10022"/>
            <arg value="-pw &quot;&quot;"/>
            <!-- Following option is only available with custom plink -->
            <arg value="-ka 90"/>
            <arg value="root@localhost"/>
            <arg value="cd ${palm-workingdir} &amp;&amp; ${palm-executable}"/>
          </exec>
        </try>
        <catch>
          <!-- Kill running processes due to timeouts etc.-->
          <exec
            workingdir="${eaconfig-run-programfolder}"
            program="${eaconfig-run-bindir}/plink.exe"
            >
            <arg value="-load NONE"/>
            <arg value="-P 10022"/>
            <arg value="-pw &quot;&quot;"/>
            <arg value="root@localhost"/>
            <arg value='killall "${eaconfig-run-programname}" | echo;'/>
          </exec>
          <throw/>
        </catch>
      </trycatch>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.android')}">
    <target name="eaconfig-run.android" style="build" description="Run the current component on Android devices" hidden="true">
      <dependent name="AndroidSDK"/>
      <dependent name="ActivePython"/>

      <property name="eaconfig-run-programname" value="@{StrReplace('${eaconfig-run-programname}', '-', 'X')}"/>

      <property name="android-workingdir" value="@{PathToWindows('${package.configbindir}/${module}')}"/>
      <property name="android-apk" value="@{PathToWindows('${android-workingdir}/${eaconfig-run-programname}-${config-name}.apk')}"/>
       
      <!-- Add 20 seconds if python runner doesn't terminate -->
      <property name="android-timeout" value="@{MathMul('${eaconfig-run-timeout}', '1000')}"/>
      <property name="android-timeout" value="@{MathAdd('${property.value}', '20000')}"/>

      <property name="android-logfile" value="@{PathToWindows('${android-workingdir}\test-runner.txt')}"/>

      <echo>Deploying ${android-apk} to emulator...</echo>
      <task name="DeployAndroidPackage"
        PackageFile="${android-apk}"
        Verbose="false"/>

      <task name="DeployToSdCard"
        GroupName="${groupname}"
        ModuleName="${modulename}"
        Verbose="false"/>

      <exec program="${package.ActivePython.exe}" 
            workingdir="${android-workingdir}"
            redirectout="false"
            timeout="${android-timeout}"
            failonerror="false">
        <args>
          <arg value="${package.AndroidSDK.dir}/scripts/test-runner.py"/>
          <arg value="--skipdumplog"/>
          <arg value="--logfile ${android-logfile}"/>
          <arg value="--timeout ${eaconfig-run-timeout}"/>
          <arg value="--sdkdir ${package.AndroidSDK.dir}/installed"/>
          <arg value="${eaconfig-run-programname}"/>
        </args>
      </exec>

      <property name="exitcode" value="${exec.exitcode}"/>

      <!-- 
      We do this because we can't attach to stdout in exec task above because androids lousy adb 
      starts a daemon process that lingers and stalls the exec task if we attach to stdout.
      -->
      <script language="C#">
        <code>
          <![CDATA[
            public static void ScriptMain(Project project) {
                string logFile = project.Properties["android-logfile"];
                if(File.Exists(logFile))
                {
                    string[] lines = File.ReadAllLines(logFile);
                    foreach(string line in lines)
                    {
                        NAnt.Core.Logging.Log.WriteLine(line);
                    }
                }
            }
        ]]>
        </code>

        <fail unless="'${exitcode}' == '0'"/>
      </script>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.rev')}">
    <target name="eaconfig-run.rev" description="Run the current component on Wii devices" hidden="true">
      <!-- Dependant on EARunner to run the tests for this platform -->
      <dependent name="EARunner" />

      <!-- this should take care of the nintendo dependencies -->
      <dependent name="RevolutionNDev" />
      <dependent name="RevolutionSDK" />
      <dependent name="RevolutionCodeWarrior" />

      <property name="__private_NDEV" value="${package.RevolutionNDev.dir}\installed\NDEV" />
      <property name="__private_RVL_SDK" value="${package.RevolutionSDK.dir}\installed\RVL_SDK" />

      <!-- By default use COM1 unless the user specified 'pacakge.run.comport' -->
      <property name="__private_rev_com_port" value="${package.run.comport}" if="@{PropertyExists('package.run.comport')}" />
      <property name="__private_rev_com_port" value="COM1" unless="@{PropertyExists('package.run.comport')}" />

      <exec
          workingdir="${eaconfig-run-workingdir}"
          program="${package.EARunner.dir}\bin\Win32\Release\EARunner_Wii.exe" >
        <arg value="-port ${__private_rev_com_port}" unless="@{StrIsEmpty('${__private_rev_com_port}')}" />
        <arg value="-ndev ${__private_NDEV}" unless="@{StrIsEmpty('${__private_NDEV}')}" />
        <arg value="-rsdk ${__private_RVL_SDK}" unless="@{StrIsEmpty('${__private_RVL_SDK}')}" />
        <arg value="-tr ${eaconfig-run-response-timeout}" unless="@{StrIsEmpty('${eaconfig-run-response-timeout}')}" />
        <arg value="-tu ${eaconfig-run-timeout}" unless="@{StrIsEmpty('${eaconfig-run-timeout}')}" />
        <arg value="-fd ${eaconfig-run-workingdir}" unless="@{StrIsEmpty('${eaconfig-run-workingdir}')}" />
        <arg value="${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}" />
        <arg value="${eaconfig-run-args}" unless="@{StrIsEmpty('${eaconfig-run-args}')}" />
      </exec>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.unix')}">
    <target name="eaconfig-run.unix" description="Run the current component on UNIX" hidden="true">
      <property name="local-workingdir" value="@{PathToUnix('${eaconfig-run-workingdir}')}"/>
      <property name="local-executable" value="@{PathToUnix('${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>

      <property name="eaconfig.use_valgrind" value="false" unless="@{PropertyExists('eaconfig.use_valgrind')}"/>

      <choose>
        <do if="${eaconfig.use_valgrind}">
          <exec
            workingdir="${local-workingdir}"
            program="valgrind">
            <arg value="-v --leak-check=full --show-reachable=yes --track-origins=yes ${local-executable} ${eaconfig-run-args}"/>
          </exec>
        </do>
        <do>
          <exec
            workingdir="${local-workingdir}"
            program="${local-executable}">
            <arg value="${eaconfig-run-args}"/>
          </exec>
        </do>
      </choose>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="@{TargetExists('eaconfig-run.unix64')}">
    <target name="eaconfig-run.unix64" description="Run the current component on 64 bit UNIX" hidden="true">
      <property name="local-workingdir" value="@{PathToUnix('${eaconfig-run-workingdir}')}"/>
      <property name="local-executable" value="@{PathToUnix('${eaconfig-run-programfolder}/${eaconfig-run-programname}${eaconfig-run-programextension}')}"/>

      <property name="eaconfig.use_valgrind" value="false" unless="@{PropertyExists('eaconfig.use_valgrind')}"/>

      <choose>
        <do if="${eaconfig.use_valgrind}">
          <exec
            workingdir="${local-workingdir}"
            program="valgrind">
            <arg value="-v --leak-check=full --show-reachable=yes --track-origins=yes ${local-executable} ${eaconfig-run-args}"/>
          </exec>
        </do>
        <do>
          <exec
            workingdir="${local-workingdir}"
            program="${local-executable}">
            <arg value="${eaconfig-run-args}"/>
          </exec>
        </do>
      </choose>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="eaconfig-run" description="Run the current component" hidden="true">
    <!-- set default values if any properties are undefined -->
    <property name="eaconfig-run-args"      value="${${groupname}.run.args}"  if="@{PropertyExists('${groupname}.run.args')}" />
    <property name="eaconfig-run-args"      value=""  unless="@{PropertyExists('${groupname}.run.args')}"/>

    <property name="eaconfig-run-workingdir"  value="${${groupname}.run.workingdir}" if="@{PropertyExists('${groupname}.run.workingdir')}" />
    <do unless="@{PropertyExists('${groupname}.run.workingdir')}" >
      <property name="eaconfig-run-workingdir"  value="${package.configbindir}${eaconfig.${eaconfig.build.group}.outputfolder}"/>
    </do>

    <do if="${config-system}==ps3 or ${config-system}==ps2" >
      <property name="eaconfig-run-homedir"  value="${${groupname}.run.homedir}" if="@{PropertyExists('${groupname}.run.homedir')}" />
      <property name="eaconfig-run-homedir"  value="${eaconfig-run-workingdir}"  unless="@{PropertyExists('${groupname}.run.homedir')}" />
    </do>

    <!-- IN SECONDS -->
    <property name="eaconfig-run-timeout" value="${${eaconfig.${eaconfig.build.group}.groupname}.run.timeout}" if="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}.run.timeout')}"/>
    <property name="eaconfig-run-timeout" value="${${groupname}.run.timeout}" if="@{PropertyExists('${groupname}.run.timeout')}" />
    <property name="eaconfig-run-timeout" value="1200" unless="@{PropertyExists('eaconfig-run-timeout')}"/>

    <property name="eaconfig-run-response-timeout" value="${${eaconfig.${eaconfig.build.group}.groupname}.run.response.timeout}" if="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}.run.response.timeout')}"/>
    <property name="eaconfig-run-response-timeout" value="${${groupname}.run.response.timeout}" if="@{PropertyExists('${groupname}.run.response.timeout')}" />
    <property name="eaconfig-run-response-timeout" value="300" unless="@{PropertyExists('eaconfig-run-response-timeout')}"/>
    
    <choose>
      <do if="@{PropertyExists('package.run.console')}">
        <property name="eaconfig-run-console" value="${package.run.console}" />
      </do>
      <do if="@{PropertyExists('${config-system}target')}">
        <property name="eaconfig-run-console" value="${${config-system}target}" />
      </do>
      <do>
        <property name="eaconfig-run-console"  value="" />
      </do>
    </choose>

    <choose>
      <do if="@{PropertyExists('package.run.password')}">
        <property name="eaconfig-run-password" value="${package.run.password}" />
      </do>
      <do if="@{PropertyExists('${config-system}password')}">
        <property name="eaconfig-run-password" value="${${config-system}password}" />
      </do>
      <do>
        <property name="eaconfig-run-password"  value="" />
      </do>
    </choose>

    <!-- start with the folder specified by the build type -->
    <!-- this property is only being used by xenon and xbox as the output path on the console. -->
    <property name="eaconfig-run-outputfolder" value="${eaconfig.${eaconfig.build.group}.outputfolder}" />

    <!-- remove leading slash or backslash from the path name -->
    <do if="@{StrStartsWith(${eaconfig-run-outputfolder}, '/')}">
      <property name="eaconfig-run-outputfolder" value="@{StrRemove(${eaconfig-run-outputfolder}, '0', '1')}" />
    </do>

    <call target="eaconfig-run.${config-system}" force="true" if="@{TargetExists('eaconfig-run.${config-system}')}" />
    <fail message="Running tests on platform '${config-system}' is not supported" unless="@{TargetExists('eaconfig-run.${config-system}')}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

  <target name="eaconfig-run-caller" hidden="true" >
    <sysinfo/>

    <property name="eaconfig-run-target-name" value="eaconfig-run" unless="@{PropertyExists('eaconfig-run-target-name')}"/>

    <do if="@{StrStartsWith('${config-system}', 'pc')}" >
      <property name="eaconfig-run-PROCESSOR_ARCHITECTURE" value="${sys.env.PROCESSOR_ARCHITECTURE}" readonly="true" />
    </do>

    <property name="eaconfig-run-default-programfolder" value="${package.configbindir}${eaconfig.${eaconfig.build.group}.outputfolder}"/>

    <do if="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}.buildmodules')}">
      <property name="eaconfig-run-modules" value="${${eaconfig.${eaconfig.build.group}.groupname}.buildmodules}"/>
      <property name="eaconfig-run-modules" value="${${eaconfig.${eaconfig.build.group}.groupname}.run.modules}" if="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}.run.modules')}"/>
    </do>

    <!-- If the package has dependent data files, copy them over to the working directory -->
    <do if="@{FileSetExists('${eaconfig.${eaconfig.build.group}.groupname}.${package.name}.test-data-fileset')}">
      <copy todir="${eaconfig-run-default-programfolder}">
        <fileset fromfileset="${eaconfig.${eaconfig.build.group}.groupname}.${package.name}.test-data-fileset" basedir="@{FileSetGetBaseDir('${eaconfig.${eaconfig.build.group}.groupname}.${package.name}.test-data-fileset')}"/>
      </copy>
    </do>

    <choose>
      <do if="${config-system}=='ps3'">
        <property name="eaconfig-run-default-programextension" value="${secured-exe-suffix}"/>
      </do>
      <do if="${config-system}=='xbox'">
        <property name="eaconfig-run-default-programextension" value=".xex"/>
      </do>
      <do if="${config-system}=='rev'">
        <property name="eaconfig-run-default-programextension" value=".elf"/>
      </do>
      <do if="@{PropertyExists('exe-suffix')}">
        <property name="eaconfig-run-default-programextension" value="${exe-suffix}"/>
      </do>
      <do>
        <property name="eaconfig-run-default-programextension" value=""/>
      </do>
    </choose>

    <do if="@{PropertyExists('eaconfig-run-modules')}" >
      <foreach item="String" in="${eaconfig-run-modules}" delim=" " property="module">
        <property name="groupname" value="${eaconfig.${eaconfig.build.group}.groupname}.${module}" />
        <property name="modulename" value="${module}"/>

        <!-- If the module has dependant data files, copy them over to the working directory -->
        <!-- Eventually, this might be better to roll into the core eaconfig build call -->
        <do if="@{FileSetExists('${groupname}.test-data-fileset')}">
          <copy todir="${eaconfig-run-default-programfolder}">
            <fileset fromfileset="${groupname}.test-data-fileset" basedir="@{FileSetGetBaseDir('${groupname}.test-data-fileset')}"/>
          </copy>
        </do>

        <!-- Default build type if not specified is Program -->
        <property name="${groupname}.buildtype" value="Program" unless="@{PropertyExists('${groupname}.buildtype')}" />
        <property name="__temp.buildtype" value="${${groupname}.buildtype}" />
        <do if="'${__temp.buildtype}' == 'Program'" >
          <property name="__temp.buildtype" value="StdProgram" />
        </do>

        <task name="GetModuleBaseType" Name="${${groupname}.buildtype}" />
        <property name="build-base" value="${GetModuleBaseType.RetVal}" />
        <do if="${build-base} != StdLibrary and ${build-base} != DynamicLibrary and
                        ${build-base} != ManagedCppAssembly and ${build-base} != CSharpLibrary">
          <property name="eaconfig-run-programname" value="${module}" />
          <!-- Some modules have a custom defined output name. -->
          <do if="@{PropertyExists('${groupname}.outputname')}">
            <property name="eaconfig-run-programname" value="${${groupname}.outputname}" />
          </do>
          <property name="eaconfig-run-programfolder" value="${eaconfig-run-default-programfolder}" />
          <property name="eaconfig-run-programextension" value="${eaconfig-run-default-programextension}" />
          <!--
                     Some game team has custom config and re-defined the link output dir/name/extension here with extra stuff like ${config-type}.
                     We do the followings to try to conserve the extra info.
                    -->
          <property name="temp_linkoutput_rootname" />
          <property name="temp_linkoutput_dir" />
          <property name="temp_linkoutput_ext" />
          <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'linkoutputname')}">
            <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'linkoutputname')}"/>
            <do unless="@{StrIsEmpty('${temp_linkoutput_name}')}">
              <!-- Now strip out the path and extension and then replace the token with the actual filename -->
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>
          <do if="'${config-system}'=='xenon'">
            <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'imgbldoutputname')}">
              <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'imgbldoutputname')}"/>
              <!-- Now strip out the path and extension and then replace the token with the actual filename -->
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>
          <do if="'${config-system}'=='ps3'">
            <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'linkoutputnameself')}">
              <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'linkoutputnameself')}"/>
              <!-- Now strip out the path and extension and then replace the token with the actual filename -->
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>

          <property name="eaconfig-run-programname" value="${temp_linkoutput_rootname}" unless="@{StrIsEmpty('${temp_linkoutput_rootname}')}"/>
          <property name="eaconfig-run-programfolder" value="${temp_linkoutput_dir}" unless="@{StrIsEmpty('${temp_linkoutput_dir}')}"/>
          <property name="eaconfig-run-programextension" value="${temp_linkoutput_ext}" unless="@{StrIsEmpty('${temp_linkoutput_ext}')}"/>

          <!-- Some modules have a custom defined output dir.  
                         (This overrides everything even if there are custom modified relative path info in linkoutputname.  This is how the build is setup.) -->
          <do if="@{PropertyExists('${groupname}.outputdir')}">
            <property name="eaconfig-run-programfolder" value="${${groupname}.outputdir}" />
          </do>

          <!-- Now actually do the run -->
          <call target="${eaconfig-run-target-name}" force="true"/>
        </do>
      </foreach>
    </do>
    <do unless="@{PropertyExists('eaconfig-run-modules')}" >
      <property name="groupname" value="${eaconfig.${eaconfig.build.group}.groupname}" />
      <!-- Default build type if not specified is Program -->
      <property name="${groupname}.buildtype" value="Program" unless="@{PropertyExists('${groupname}.buildtype')}" />
      <property name="__temp.buildtype" value="${${groupname}.buildtype}" />
      <do if="'${__temp.buildtype}' == 'Program'" >
        <property name="__temp.buildtype" value="StdProgram" />
      </do>

      <do if="@{PropertyExists('${groupname}.buildtype')}" >
        <task name="GetModuleBaseType" Name="${${groupname}.buildtype}" />
        <property name="build-base" value="${GetModuleBaseType.RetVal}" />
        <do if="${build-base} != StdLibrary and ${build-base} != DynamicLibrary">
          <property name="eaconfig-run-programname" value="${package.name}" />
          <!-- Some modules have a custom defined output name. -->
          <do if="@{PropertyExists('${groupname}.outputname')}">
            <property name="eaconfig-run-programname" value="${${groupname}.outputname}" />
          </do>
          <property name="modulename" value="${eaconfig-run-programname}"/>
          <property name="eaconfig-run-programfolder" value="${eaconfig-run-default-programfolder}" />
          <property name="eaconfig-run-programextension" value="${eaconfig-run-default-programextension}" />
          <!--
                     Some game team has custom config and re-defined the link output dir/name/extension here with extra stuff like ${config-type}.
                     We do the followings to try to conserve the extra info.
                    -->
          <property name="temp_linkoutput_rootname" />
          <property name="temp_linkoutput_dir" />
          <property name="temp_linkoutput_ext" />
          <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'linkoutputname')}">
            <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'linkoutputname')}"/>
            <do unless="@{StrIsEmpty('${temp_linkoutput_name}')}">
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>
          <do if="'${config-system}'=='xenon'">
            <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'imgbldoutputname')}">
              <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'imgbldoutputname')}"/>
              <!-- Now strip out the path and extension and then replace the token with the actual filename -->
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>
          <do if="'${config-system}'=='ps3'">
            <do if="@{OptionSetOptionExists('${__temp.buildtype}', 'linkoutputnameself')}">
              <property name="temp_linkoutput_name" value="@{OptionSetGetValue('${__temp.buildtype}', 'linkoutputnameself')}"/>
              <!-- Now strip out the path and extension and then replace the token with the actual filename -->
              <property name="temp_linkoutput_rootname" value="@{PathGetFileNameWithoutExtension('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_rootname" value="@{StrReplace('${property.value}','%outputname%','${eaconfig-run-programname}')}"/>
              <property name="temp_linkoutput_dir" value="@{PathGetDirectoryName('${temp_linkoutput_name}')}"/>
              <property name="temp_linkoutput_dir" value="@{StrReplace('${property.value}','%outputdir%','${eaconfig-run-programfolder}')}"/>
              <property name="temp_linkoutput_ext" value="@{PathGetExtension('${temp_linkoutput_name}')}"/>
            </do>
          </do>
          <property name="eaconfig-run-programname" value="${temp_linkoutput_rootname}" unless="@{StrIsEmpty('${temp_linkoutput_rootname}')}"/>
          <property name="eaconfig-run-programfolder" value="${temp_linkoutput_dir}" unless="@{StrIsEmpty('${temp_linkoutput_dir}')}"/>
          <property name="eaconfig-run-programextension" value="${temp_linkoutput_ext}" unless="@{StrIsEmpty('${temp_linkoutput_ext}')}"/>

          <!-- Some modules have a custom defined output dir.  
                         (This overrides everything even if there are custom modified relative path info in linkoutputname.  This is how the build is setup.) -->
          <do if="@{PropertyExists('${groupname}.outputdir')}">
            <property name="eaconfig-run-programfolder" value="${${groupname}.outputdir}" />
          </do>

          <!-- Now actually do the run -->
          <call target="${eaconfig-run-target-name}" force="true"/>
        </do>
      </do>
    </do>
  </target>

</project>

