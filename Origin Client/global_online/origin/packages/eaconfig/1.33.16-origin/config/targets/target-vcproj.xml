<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojallexample')}' == 'exclude'">

    <target name="vcprojallexample" style="use" description="Generate a VCPROJ containing all configs for example code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojallexample' is deprecated and will be removed in a future release.  Please use 'vsprojexample' instead.

        "/>
      <call target="__private__vcprojallexample" />
    </target>
    <target name="__private__vcprojallexample" style="use" description="Generate a VCPROJ containing all configs for example code">
      <!-- Check for an empty list of 'package.configs' -->
      <property name="local-packageconfigs" value="@{StrTrim('${package.configs}')}" />
      <fail message="ERROR[${package.name}-${package.version}]: Calling 'vcprojallexample' with an empty list of 'package.configs'." if="@{StrIsEmpty('${local-packageconfigs}')}"/>

      <!-- Temp solution to help pass properties when invoking a new nant instance. -->
      <call target="eaconfig-construct-persistent-properties"/>

      <!-- Don't do this in eaconfig-vcprojall, because it'll run the for loop for each module!!! -->
      <foreach item="string" in="${package.configs}" property="vcproj-config-name">
        <nant buildfile="${package.dir}\${package.name}.build" target="__private__vcprojexample"  optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
        </nant>
        <nant buildfile="${package.dir}\${package.name}.build" target="eaconfig-build-caller" optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
          <property name="package.configs" value="${package.configs}"/>
          <property name="eaconfig.build.target" value="eaconfig-vcprojall"/>
          <property name="eaconfig.build.group" value="example"/>
        </nant>
      </foreach>

    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojalltest')}' == 'exclude'">
    <target name="vcprojalltest" style="use" description="Generate a VCPROJ containing all configs for test code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojalltest' is deprecated and will be removed in a future release.  Please use 'vsprojtest' instead.

      "/>
      <call target="__private__vcprojalltest" />
    </target>
    <target name="__private__vcprojalltest" style="use" description="Generate a VCPROJ containing all configs for test code">
      <!-- Check for an empty list of 'package.configs' -->
      <property name="local-packageconfigs" value="@{StrTrim('${package.configs}')}" />
      <fail message="ERROR[${package.name}-${package.version}]: Calling 'vcprojalltest' with an empty list of 'package.configs'." if="@{StrIsEmpty('${local-packageconfigs}')}"/>

      <!-- Temp solution to help pass properties when invoking a new nant instance. -->
      <call target="eaconfig-construct-persistent-properties"/>

      <!-- Don't do this in eaconfig-vcprojall, because it'll run the for loop for each module!!! -->
      <foreach item="string" in="${package.configs}" property="vcproj-config-name">
        <nant buildfile="${package.dir}\${package.name}.build" target="__private__vcprojtest"  optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
        </nant>
        <nant buildfile="${package.dir}\${package.name}.build" target="eaconfig-build-caller" optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
          <property name="package.configs" value="${package.configs}"/>
          <property name="eaconfig.build.target" value="eaconfig-vcprojall"/>
          <property name="eaconfig.build.group" value="test"/>
        </nant>
      </foreach>

    </target>

  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojalltool')}' == 'exclude'">
    <target name="vcprojalltool" style="use" description="Generate a VCPROJ containing all configs for tool code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojalltool' is deprecated and will be removed in a future release.  Please use 'vsprojtool' instead.

      "/>
      <call target="__private__vcprojalltool" />
    </target>
    <target name="__private__vcprojalltool" style="use" description="Generate a VCPROJ containing all configs for tool code">
      <!-- Check for an empty list of 'package.configs' -->
      <property name="local-packageconfigs" value="@{StrTrim('${package.configs}')}"/>
      <fail message="ERROR[${package.name}-${package.version}]: Calling 'vcprojalltool' with an empty list of 'package.configs'." if="@{StrIsEmpty('${local-packageconfigs}')}"/>

      <!-- Temp solution to help pass properties when invoking a new nant instance. -->
      <call target="eaconfig-construct-persistent-properties"/>

      <!-- Don't do this in eaconfig-vcprojall, because it'll run the for loop for each module!!! -->
      <foreach item="string" in="${package.configs}" property="vcproj-config-name">
        <nant buildfile="${package.dir}\${package.name}.build" target="__private__vcprojtool"  optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
        </nant>
        <nant buildfile="${package.dir}\${package.name}.build" target="eaconfig-build-caller" optionset="package-eaconfig-persistent-properties">
          <property name="config" value="${vcproj-config-name}"/>
          <property name="package.configs" value="${package.configs}"/>
          <property name="eaconfig.build.target" value="eaconfig-vcprojall"/>
          <property name="eaconfig.build.group" value="tool"/>
        </nant>
      </foreach>

    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojexample')}' == 'exclude'">
    <target name="vcprojexample" style="use" description="Generate a VCPROJ containing given config for example code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojexample' is deprecated and will be removed in a future release.  Please use 'vsprojexample' instead.

      "/>
      <call target="__private__vcprojexample" />
    </target>
    <target name="__private__vcprojexample" style="use" description="Generate a VCPROJ containing given config for example code">
      <property name="eaconfig.build.target" value="eaconfig-vcproj" />
      <property name="eaconfig.build.group" value="example" />
      <call target="eaconfig-build-caller"/>
    </target>

  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojtest')}' == 'exclude'">
    <target name="vcprojtest" style="use" description="Generate a VCPROJ containing given config for test code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojtest' is deprecated and will be removed in a future release.  Please use 'vsprojtest' instead.

        "/>
      <call target="__private__vcprojtest" />
    </target>
    <target name="__private__vcprojtest" style="use" description="Generate a VCPROJ containing given config for test code">
      <property name="eaconfig.build.target" value="eaconfig-vcproj" />
      <property name="eaconfig.build.group" value="test" />
      <call target="eaconfig-build-caller"/>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojtool')}' == 'exclude'">
    <target name="vcprojtool" style="use" description="Generate a VCPROJ containing given config for tool code">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojtool' is deprecated and will be removed in a future release.  Please use 'vsprojtool' instead.

      "/>
      <call target="__private__vcprojtool" />
    </target>
    <target name="__private__vcprojtool" style="use" description="Generate a VCPROJ containing given config for tool code">
      <property name="eaconfig.build.target" value="eaconfig-vcproj" />
      <property name="eaconfig.build.group" value="tool" />
      <call target="eaconfig-build-caller"/>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private_Framework_version_check" hidden="true">

    <!-- Do a version check on the Framework version we're using.  The automated SLN workflow introduced
            in eaconfig-1.22.00 depends on having Framework-2.11.00 or newer installed, so it can call the
            "ExecuteTaskNoDispose" method to execute a NAnt sub-build, then slurp the properties back out
            of that NAnt Project instance.  That's the reason for this version-check.
           
           The check requires some nasty string-manipulation, because 'nant.version' doesn't pad the
           version component numbers with leading zeroes. -->
    <property name="private-first-dot-index" value="@{StrIndexOf('${nant.version}', '.')}"/>
    <property name="private-first-number" value="@{StrSubstring('${nant.version}', '0', ${private-first-dot-index})}"/>
    <property name="private-first-dot-index" value="@{MathAdd('${private-first-dot-index}', '1')}"/>
    <property name="private-rest" value="@{StrSubstring('${nant.version}', '${private-first-dot-index}')}"/>
    <property name="private-second-dot-index" value="@{StrIndexOf('${private-rest}', '.')}"/>
    <property name="private-second-number" value="@{StrSubstring('${private-rest}', '0', ${private-second-dot-index})}"/>

    <do unless="(${private-first-number} gt 2)">
      <do unless="(${private-second-number} gte 11)">
        <fail message="ERROR:  eaconfig requires Framework-2.11.00 or newer.  Found ${nant.version}."/>
      </do>
    </do>

  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private_nantToVSTools_version_check" hidden="true">
    <property name="nantToVSTools_minVersion" value="3.17.01" readonly="true" />
    <do unless="@{StrStartsWith('${package.nantToVSTools.version}', 'dev')} or @{StrStartsWith('${package.nantToVSTools.version}', 'work')}">
      <fail message="ERROR: eaconfig requires nantToVSTools-${nantToVSTools_minVersion} or newer.  Please update your masterconfig.xml."
            unless="${package.nantToVSTools.version} gte '${nantToVSTools_minVersion}'"/>
    </do>
    <do if="${config-system}==pc64">
      <!-- we are building 64 bit config -->
      <fail unless="@{PropertyExists('package.nantToVSTools.support64bit')}"
            message="nantToVSTools-${package.nantToVSTools.version} does not support 64 bit configurations."/>
      <fail unless="${package.nantToVSTools.support64bit}"
            message="nantToVSTools-${package.nantToVSTools.version} does not support 64 bit configurations."/>
    </do>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="vcproj-build-nantToVSTools" style="build" hidden="true" depends="__private_Framework_version_check">
    <dependent name="nantToVSTools"/>
    <call target="__private_nantToVSTools_version_check"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="vcproj-use-nantToVSTools" style="use" hidden="true" depends="__private_Framework_version_check">
    <dependent name="nantToVSTools"/>
    <call target="__private_nantToVSTools_version_check"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcproj')}' == 'exclude'">
    <target name="vcproj" style="use" description="Generate a VCPROJ for a given config">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcproj' is deprecated and will be removed in a future release.  Please use 'vsprojruntime' instead.

      "/>
      <call target="__private__vcproj" />
    </target>
    <target name="__private__vcproj" style="use" description="Generate a VCPROJ for a given config">
      <!-- Hook to allow users to do a "pre-build" step for vcproj. -->
      <do if="@{PropertyExists('vcproj.prebuildtarget')}">
        <do if="@{TargetExists('${vcproj.prebuildtarget}')}">
          <call target="${vcproj.prebuildtarget}" force="true"/>
        </do>
      </do>

      <!-- Temp solution to help pass properties when invoking a new nant instance. -->
      <call target="eaconfig-construct-persistent-properties"/>

      <property name="eaconfig.build.target" value="eaconfig-vcproj" />
      <property name="eaconfig.build.group" value="runtime" />
      <!-- It runs eaconfig.build.target for each module! -->
      <call target="eaconfig-build-caller" force="true" />

      <!-- Run vcproj for build dependents if specified -->
      <do if="@{PropertyExists('${groupname}.vcproj.build-dependents')}">
        <do if="${${groupname}.vcproj.build-dependents}">
          <foreach item="String" in="${build.builddependencies.all}" property="dependent">
            <nant buildfile="${package.${dependent}.dir}/${dependent}.build" target="__private__vcproj" optionset="package-eaconfig-persistent-properties">
              <property name="config" value="${config}"/>
            </nant>
          </foreach>
        </do>
      </do>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="eaconfig-vcproj" style="use" hidden="true">

        <EaconfigVcproj groupname="${groupname}" buildmodule="${build.module}" />

    </target>

    <target name="eaconfig-vcproj-nanttovcproj-invoker" style="use" hidden="true">

        <!-- Invoke nanttovcproj -->

        <nanttovcproj postbuildstep="${post-build-step}" type="build.buildtype.vcproj" prebuildstep="${pre-build-step}" prelinkstep="${pre-link-step}"
            name="${vcproj-name}" configname="${config}" configplatform="${config-system}"
            projectroot="${package.configbuilddir}${eaconfig.${eaconfig.build.group}.outputfolder}"
            perforce="${package.perforceintegration}"
            consoledeployment="${package.consoledeployment}"
            outputbinary="${outputbinary}" outputdir="${finalPath}"
            dvdemulationroot="${__private.dvdemulationroot}"
                    deploymentfiles="${__private.deploymentfiles}"
            custombuildtool="${custom-build-tool}"  custombuildoutputs="${custom-build-outputs}"
            customvcprojremoteroot="${__private.customvcprojremoteroot}"
            imgbldoptions="${build.imgbldoptions}"
            workingdir="${workingdir}"
            remotemachine="${remotemachine}"
            commandprogram="${commandprogram}"
            commandargs="${commandargs}"
            uselibrarydependencyinputs="${__private.uselibrarydependencyinputs}"
            keyfile="${keyfilename}">
            <defines>
                ${build.defines.all}
            </defines>
            <includedirs>
                ${build.includedirs.all}
            </includedirs>
            <ccoptions>
              ${build.warningsuppression.all}
              ${__private_sdata_option}
            </ccoptions>
            <sources failonmissing="false">
                <includes fromfileset="build.vcproj.sourcefiles.all"/>
            </sources>
            <bulkbuildfiles failonmissing="false">
                <includes fromfileset="build.bulkbuild.sourcefiles.all"/>
            </bulkbuildfiles>
            <asmsources fromfileset="build.asmsourcefiles.all"/>
            <excludedfiles failonmissing="false">
                <includes fromfileset="build.vcproj.excludedbuildfiles.all"/>
            </excludedfiles>
            <resources fromfileset="build.resourcefiles.all" basedir="${build.resourcefiles.basedir}"/>
            <libraries fromfileset="build.libs.all" failonmissing="false"/>
            <objects fromfileset="build.objects.all" failonmissing="false"/>
            <references fromfileset="__private_references" failonmissing="false"/>
            <comreferences failonmissing="false" >
                <includes fromfileset="build.comassemblies.all" />
            </comreferences>
            <copylocalreferences fromfileset="__private_copylocal_references" failonmissing="false"/>
            <additional-manifest-files fromfileset="__private_vcproj.additional-manifest-files.all" failonmissing="false"/>
            <input-resource-manifests fromfileset="__private_vcproj.input-resource-manifests.all" failonmissing="false"/>
            <projectreferences fromoptionset="__private_${groupname}_projectreferences" failonmissing="false"/>
            <copylocalprojectreferences fromoptionset="__private_${groupname}_copylocal_projectreferences" failonmissing="false"/>
            <custombuilddependencies fromfileset="${groupname}.vcproj.custom-build-dependencies" failonmissing="false"/>
            <custombuildrules fromfileset="${groupname}.vcproj.custom-build-rules" failonmissing="false"/>
            <custombuildrulesoptions fromoptionset="${groupname}.vcproj.custom-build-rules-options" failonmissing="false"/>
        </nanttovcproj>
    </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="eaconfig-vcproj-and-merge" hidden="true">

    <!-- Hook to allow users to do a module-specific "pre-build" step for vcproj. -->
    <do if="@{PropertyExists('${groupname}.vcproj.prebuildtarget')}">
      <do if="@{TargetExists('${${groupname}.vcproj.prebuildtarget}')}">
        <call target="${${groupname}.vcproj.prebuildtarget}"/>
      </do>
    </do>

    <call target="__private_set_up_variables"/>

    <!-- Generate the single configuration VCPROJ. -->
    <call target="eaconfig-vcproj"/>

    <!-- Merge the vcproj into itself - basically copy the vcproj from the
         config-name directory to the builddir, where it's expected by
         slnmaker.  Use merge in order to adjust the relative paths in
         the vcproj.  A raw file copy would leave the VCPROJ with invalid
         relative paths. -->
    <do unless="@{StrStartsWith(${${groupname}.buildtype}, 'CSharp')}">
      <property name="vcproj-fname" value="${vcproj-name}.vcproj"/>
      <property name="vcproj-fname" value="${vcproj-name}.vcxproj" if="@{PropertyExists('package.eaconfig.isusingvc10')}"/>
      
      <mergemyvcproj>
        <inputs basedir="${package.builddir}/${config}/build">
          <includes name="${vcproj-fname}"/>
        </inputs>
      </mergemyvcproj>
    </do>

  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vcprojall')}' == 'exclude'">
    <target name="vcprojall" style="use" description="Generate VCPROJ for VC configs">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'vcprojall' is deprecated and will be removed in a future release.  Please use 'vsprojruntime' instead.

      "/>
      <call target="__private__vcprojall" />
    </target>
    <target name="__private__vcprojall" style="use" description="Generate VCPROJ for VC configs">
      <!-- Call prebuild target once if necessary-->
      <do if="@{PropertyExists('vcproj.prebuildtarget')}">
        <do if="@{TargetExists('${vcproj.prebuildtarget}')}">
          <call target="${vcproj.prebuildtarget}" force="true"/>
        </do>
      </do>

      <!--
      package.configs is passed on the command line as -D:, which makes it read-only.
      Define a local property which can be modified.
      NB:   VERY IMPORTANT!!!!!  Append a ' ' so that we can search for full words.
      Without the trailing 'space' the string replace lower-down will match substrings too.
      -->
      <property name="local-packageconfigs" value="@{StrTrim('${package.configs}')} "/>
      <fail message="ERROR[${package.name}-${package.version}]: Calling 'vcprojall' with an empty list of 'package.configs'." if="@{StrIsEmpty('${local-packageconfigs}')}"/>

      <foreach item="String" in="${local-packageconfigs}" property="vcproj-config-name">
        <do if="'${vcproj-config-name}' == '${config}'" >
          <!--
            if we're already in the context of a required config, then just call the vcproj target in the
            package's build file directly, without going through the <nant> task.
            <nant .build> will execute the <package> statement which takes around 0.5 s
            (it involves reading masterconfig, eaconfig, etc.)            
          -->
          <!-- remove this config from the list, so that we can loop on the remaining package-configs -->
          <property name="local-packageconfigs" value="@{StrReplace('${local-packageconfigs}', '${config} ', '')}"/>
          <property name="config"          value="${config}"/>
          <property name="eaconfig.build.group"  value="runtime" />
          <property name="eaconfig.build.target"  value="eaconfig-vcproj" />
          <do if="'${local-packageconfigs}' == ''">
            <!-- if it's the only config, do the merge step as well, to place the vcproj in the proper location -->
            <property name="eaconfig.build.target"  value="eaconfig-vcproj-and-merge" />
          </do>
          <call target="eaconfig-build-caller"/>
        </do>
      </foreach>

      <!-- If there are still other configs other than the current one, generate vcprojs for them and merge everything-->
      <property name="local-packageconfigs" value="@{StrTrim('${local-packageconfigs}')}" />
      <do unless="'${local-packageconfigs}' == ''">

        <!-- Temp solution to help pass properties when invoking a new nant instance. -->
        <call target="eaconfig-construct-persistent-properties"/>

        <foreach item="string" in="${local-packageconfigs}" property="vcproj-config-name">
          <nant buildfile="${package.dir}\${package.name}.build" target="eaconfig-build-caller" optionset="package-eaconfig-persistent-properties">
            <property name="config" value="${vcproj-config-name}"/>
            <property name="eaconfig.build.group"  value="runtime" />
            <!--calling eaconfig-vcproj instead of vcproj to avoid calling prebuild target multiple times-->
            <property name="eaconfig.build.target"  value="eaconfig-vcproj" />
          </nant>
        </foreach>

        <!-- Merge vcprojs for all configs to one final vc project file-->
        <property name="eaconfig.build.target" value="eaconfig-vcprojall" />
        <property name="eaconfig.build.group" value="runtime" />
        <call target="eaconfig-build-caller"/>

        <!-- Then run the merger again for each of the configurations, to ensure that
                     we pick up any configuration-specific modules.  Merging the same
                     configurations multiple times is safe, is somewhat time-consuming.-->
        <foreach item="string" in="${local-packageconfigs}" property="vcproj-config-name">
          <nant buildfile="${package.dir}\${package.name}.build" target="eaconfig-build-caller" optionset="package-eaconfig-persistent-properties">
            <property name="config" value="${vcproj-config-name}"/>
            <property name="package.configs" value="${package.configs}"/>
            <property name="eaconfig.build.target" value="eaconfig-vcprojall"/>
            <property name="eaconfig.build.group" value="runtime"/>
          </nant>
        </foreach>
      </do>
      <eval code="@{PropertyUndefine('local-packageconfigs')}" type="Function"/>

      <!-- Run vcprojall for build dependents if specified -->
      <do if="@{PropertyExists('runtime.vcproj.build-dependents')}">
        <do if="${runtime.vcproj.build-dependents}">
          <!-- Temp solution to help pass properties when invoking a new nant instance. -->
          <call target="eaconfig-construct-persistent-properties"/>

          <!-- pass the right ${package.configs} when calling vcprojall below (check whether ${package.configs} exists first) -->
          <do unless="@{OptionSetOptionExists('package-eaconfig-persistent-properties', 'package.configs')}">
            <optionset name="package-eaconfig-persistent-properties" append="true">
              <option name="package.configs" value="${package.configs}" />
            </optionset>
          </do>
          <foreach item="String" in="${build.builddependencies.all}" property="dependent">
            <nant buildfile="${package.${dependent}.dir}/${dependent}.build" target="__private__vcprojall" optionset="package-eaconfig-persistent-properties">
              <property name="config" value="${config}"/>
            </nant>
          </foreach>
        </do>
      </do>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="eaconfig-vcprojall" style="use" description="Generate a VCPROJ containing all configs" hidden="true">

    <call target="__private_set_up_variables"/>

    <!-- Filter out C# modules -->
    <do unless="@{StrStartsWith(${${groupname}.buildtype}, 'CSharp')}">
      <fileset name="input-vcproj-files"/>

      <foreach item="string" in="${package.configs}" property="vcproj-config-name">

        <property name="eaconfig.is-clear-vcproj-name" value="true"/>
        <property name="eaconfig.is-clear-vcproj-name" value="false" if="@{PropertyExists('vcproj-name')}"/>
        <property name="vcproj-name" value="${build.module}" unless="@{PropertyExists('vcproj-name')} and ${eaconfig.is-clear-vcproj-name}"/>
        <property name="vcproj-name" value="${${build.module}.vcproj-name-cross}" if="@{PropertyExists('${build.module}.vcproj-name-cross')}"/>
        <!-- To avoid single module name clashes, prefix the project name with groupname if it is not a runtime module -->
        <do unless="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}.buildmodules')}">
          <choose>
            <do if="@{PropertyExists('${eaconfig.${eaconfig.build.group}.groupname}-${package.name}.vcproj-name-cross')}">
              <property name="vcproj-name" value="${${eaconfig.${eaconfig.build.group}.groupname}-${package.name}.vcproj-name-cross}" unless="'${eaconfig.${eaconfig.build.group}.groupname}' == 'runtime'"/>
            </do>
            <do>
              <property name="vcproj-name" value="${eaconfig.${eaconfig.build.group}.groupname}-${package.name}" unless="'${eaconfig.${eaconfig.build.group}.groupname}' == 'runtime'"/>
            </do>
          </choose>
        </do>
        <property name="vcproj-filename" value="${package.builddir}/${vcproj-config-name}/build${eaconfig.${eaconfig.build.group}.outputfolder}/${vcproj-name}.vcproj"/>
        <property name="vcproj-filename" value="${package.builddir}/${vcproj-config-name}/build${eaconfig.${eaconfig.build.group}.outputfolder}/${vcproj-name}.vcxproj" if="@{PropertyExists('package.eaconfig.isusingvc10')}"/>

        <do if="@{FileExists('${vcproj-filename}')}">
          <fileset name="input-vcproj-files" append="true">
            <includes name="${vcproj-filename}"/>
          </fileset>
        </do>
      </foreach>

      <choose>
        <do unless="@{PropertyExists('package.eaconfig.isusingvc10')}">
          <mergemyvcproj>
            <inputs>
              <includes fromfileset="input-vcproj-files"/>
            </inputs>
          </mergemyvcproj>
        </do>
        <do>
          <mergemyvcproj_msbuild>
            <inputs>
              <includes fromfileset="input-vcproj-files"/>
            </inputs>
          </mergemyvcproj_msbuild>
        </do>
      </choose>

    </do>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="eaconfig-csproj" style="use" hidden="true">
        <EaconfigCsproj groupname="${groupname}" buildmodule="${build.module}" />
    </target>

    <target name="eaconfig-csproj-nanttocsproj-invoker" style="use" hidden="true">
        <nanttocsproj
          target="${cscTarget}"
          projroot="${___private_${package.name}.${build.module}.csproj_projroot}"
          name="${csproj-name}"
          output="${__private_output_filename}"
          debug="${build.debug}"
          define="${cscDefinesAll}"
          win32icon="${build.win32icon}"
          doc="${build.doc}"
          prebuildevent="${pre-build-step}"
          postbuildevent="${post-build-step}"
          runpostbuildevent="${runpostbuildevent}"
          rootnamespace="${rootnamespace}"
          perforce="${package.perforceintegration}"
          allowunsafe="${__private_allowunsafe}"
          targetframeworkversion="${__private_targetframeworkversion}"
          enableunmanageddebugging="${__private_enableunmanageddebugging}"
          disablevshosting="${__private_disablevshosting}"
          workingdir="${workingdir}"
          remotemachine="${remotemachine}"
          commandprogram="${commandprogram}"
          commandargs="${commandargs}"
          warningsaserrors="${__private_csproj_warnaserrors}"
          warningsaserrors.list="${__private_csproj_warnaserrors.list}"
          nowarn="${__private_csproj_suppresswarnings}"
          cscargs="${build.args}"
          keyfile="${keyfilename}"
          configplatform="${cscPlatform}"
          application-manifest="${application-manifest}"
        >
        <references fromfileset="__private_references" failonmissing="false">
            <!-- When compile by Nant, these set of system assemblies seems to be added by default -->
        </references>
        <copylocalreferences fromfileset="__private_copylocal_references" failonmissing="false"/>
        <projectreferences fromoptionset="__private_${groupname}_projectreferences" failonmissing="false"/>
        <copylocalprojectreferences fromoptionset="__private_${groupname}_copylocal_projectreferences" failonmissing="false"/>
        <resources fromfileset="build.resourcefiles.all" basedir="${build.resourcefiles.basedir}" failonmissing="false"/>
        <sources fromfileset="build.sourcefiles.all" basedir="@{FileSetGetBaseDir('build.sourcefiles.all')}" failonmissing="false"/>
        <excludedfiles failonmissing="false">
            <includes fromfileset="build.csproj.excludedbuildfiles.all"/>
        </excludedfiles>
        </nanttocsproj>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private__csproj" style="use" description="Generate a CSPROJ for a given config">
    <!-- Hook to allow users to do a "pre-build" step for csproj. -->
    <do if="@{PropertyExists('csproj.prebuildtarget')}">
      <do if="@{TargetExists('${csproj.prebuildtarget}')}">
        <call target="${csproj.prebuildtarget}" force="true"/>
      </do>
    </do>
    <property name="eaconfig.build.target" value="eaconfig-csproj" />
    <property name="eaconfig.build.group" value="runtime" />
    <!-- It runs eaconfig.build.target for each module! -->
    <call target="eaconfig-build-caller" force="true" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private__csprojexample" style="use" description="Generate an example CSPROJ for a given config">
    <property name="eaconfig.build.target" value="eaconfig-csproj" />
    <property name="eaconfig.build.group" value="example" />
    <call target="eaconfig-build-caller" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private__csprojtest" style="use" description="Generate a test CSPROJ for a given config">
    <property name="eaconfig.build.target" value="eaconfig-csproj" />
    <property name="eaconfig.build.group" value="test" />
    <call target="eaconfig-build-caller"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="__private__csprojtool" style="use" description="Generate a tool CSPROJ for a given config">
    <property name="eaconfig.build.target" value="eaconfig-csproj" />
    <property name="eaconfig.build.group" value="tool" />
    <call target="eaconfig-build-caller"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'csproj')}' == 'exclude'">

    <target name="csproj" style="use" description="Generate a CSPROJ for a given config">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'csproj' is deprecated and will be removed in a future release.  Please use 'vsprojruntime' instead.

      "/>
      <call target="__private__csproj" />
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'csprojexample')}' == 'exclude'">
    <target name="csprojexample" style="use" description="Generate an example CSPROJ for a given config">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'csprojexample' is deprecated and will be removed in a future release.  Please use 'vsprojexample' instead.

      "/>
      <call target="__private__csprojexample" />
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'csprojtest')}' == 'exclude'">
    <target name="csprojtest" style="use" description="Generate a test CSPROJ for a given config">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'csprojtest' is deprecated and will be removed in a future release.  Please use 'vsprojtest' instead.

      "/>
      <call target="__private__csprojtest" />
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'csprojtool')}' == 'exclude'">
    <target name="csprojtool" style="use" description="Generate a tool CSPROJ for a given config">
      <!-- TODO: DEPRECATED, remove all the cspoj* and vcproj* later -->
      <echo message="

      WARNING: Target 'csprojtool' is deprecated and will be removed in a future release.  Please use 'vsprojtool' instead.

      "/>
      <call target="__private__csprojtool" />
    </target>
  </do>

    <!--**********************************FSProj**********************************************-->

    <target name="eaconfig-fsproj" style="use" hidden="true">

        <EaconfigFsproj groupname="${groupname}" buildmodule="${build.module}" />

    </target>

    <target name="eaconfig-fsproj-nanttofsproj-invoker" style="use" hidden="true">
        <nanttofsproj
          target="${fscTarget}"
          projroot="${___private_${package.name}.${build.module}.fsproj_projroot}"
          name="${fsproj-name}"
          output="${__private_output_filename}"
          debug="${build.debug}"
          define="${fscDefinesAll}"
          win32icon="${build.win32icon}"
          doc="${build.doc}"
          prebuildevent="${pre-build-step}"
          postbuildevent="${post-build-step}"
          runpostbuildevent="${runpostbuildevent}"
          rootnamespace="${rootnamespace}"
          perforce="${package.perforceintegration}"
          allowunsafe="${__private_allowunsafe}"
          targetframeworkversion="${__private_targetframeworkversion}"
          enableunmanageddebugging="${__private_enableunmanageddebugging}"
          disablevshosting="${__private_disablevshosting}"
          workingdir="${workingdir}"
          remotemachine="${remotemachine}"
          commandprogram="${commandprogram}"
          commandargs="${commandargs}"
          warningsaserrors="${__private_fsproj_warnaserrors}"
          warningsaserrors.list="${__private_fsproj_warnaserrors.list}"
          nowarn="${__private_fsproj_suppresswarnings}"
          fscargs="${build.args}"
          keyfile="${keyfilename}"
          configplatform="${fscPlatform}"
        >
            <references fromfileset="__private_references" failonmissing="false">
                <!-- When compile by Nant, these set of system assemblies seems to be added by default -->
            </references>
            <copylocalreferences fromfileset="__private_copylocal_references" failonmissing="false"/>
            <projectreferences fromoptionset="__private_${groupname}_projectreferences" failonmissing="false"/>
            <copylocalprojectreferences fromoptionset="__private_${groupname}_copylocal_projectreferences" failonmissing="false"/>
            <resources fromfileset="build.resourcefiles.all" basedir="${build.resourcefiles.basedir}" failonmissing="false"/>
            <sources fromfileset="build.sourcefiles.all" basedir="@{FileSetGetBaseDir('build.sourcefiles.all')}" failonmissing="false"/>
            <excludedfiles failonmissing="false">
                <includes fromfileset="build.fsproj.excludedbuildfiles.all"/>
            </excludedfiles>
        </nanttofsproj>
    </target>

    <target name="__private__fsproj" style="use" description="Generate a FSPROJ for a given config">
        <!-- Hook to allow users to do a "pre-build" step for fsproj. -->
        <do if="@{PropertyExists('fsproj.prebuildtarget')}">
            <do if="@{TargetExists('${fsproj.prebuildtarget}')}">
                <call target="${fsproj.prebuildtarget}" force="true"/>
            </do>
        </do>
        <property name="eaconfig.build.target" value="eaconfig-fsproj" />
        <property name="eaconfig.build.group" value="runtime" />
        <!-- It runs eaconfig.build.target for each module! -->
        <call target="eaconfig-build-caller" force="true" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="__private__fsprojexample" style="use" description="Generate an example fsproj for a given config">
        <property name="eaconfig.build.target" value="eaconfig-fsproj" />
        <property name="eaconfig.build.group" value="example" />
        <call target="eaconfig-build-caller" />
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="__private__fsprojtest" style="use" description="Generate a test fsproj for a given config">
        <property name="eaconfig.build.target" value="eaconfig-fsproj" />
        <property name="eaconfig.build.group" value="test" />
        <call target="eaconfig-build-caller"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <target name="__private__fsprojtool" style="use" description="Generate a tool fsproj for a given config">
        <property name="eaconfig.build.target" value="eaconfig-fsproj" />
        <property name="eaconfig.build.group" value="tool" />
        <call target="eaconfig-build-caller"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnexample" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="example"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'slnexample-slnmaker')}' == 'exclude'">
    <target name="slnexample-slnmaker" depends="vcproj-use-nantToVSTools">
      <slnmaker>
        <project group="runtime"/>
        <project group="example"/>
      </slnmaker>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnruntime" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="runtime"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'slnruntime-slnmaker')}' == 'exclude'">
    <target name="slnruntime-slnmaker" depends="vcproj-use-nantToVSTools">
      <slnmaker>
        <project group="runtime" />
      </slnmaker>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntest" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="test"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'slntest-slnmaker')}' == 'exclude'">
    <target name="slntest-slnmaker" depends="vcproj-use-nantToVSTools">
      <slnmaker>
        <project group="runtime"/>
        <project group="test"/>
      </slnmaker>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntool" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="tool"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'slntool-slnmaker')}' == 'exclude'">
    <target name="slntool-slnmaker" depends="vcproj-use-nantToVSTools">
      <slnmaker>
        <project group="runtime"/>
        <project group="tool"/>
      </slnmaker>
    </target>
  </do>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vsprojexample')}' == 'exclude'">
    <!-- Override this target if you need to build your own example FSPROJ/CSPROJ/VCPROJ files differently. -->
    <target name="vsprojexample">
      <call target="__private__fsprojexample"/>
      <call target="__private__csprojexample"/>
      <call target="__private__vcprojallexample"/>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vsprojruntime')}' == 'exclude'">
    <!-- Override this target if you need to build your own runtime FSPROJ/CSPROJ/VCPROJ files differently. -->
    <target name="vsprojruntime">
      <call target="__private__fsproj"/>
      <call target="__private__csproj"/>
      <call target="__private__vcprojall"/>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vsprojtest')}' == 'exclude'">
    <!-- Override this target if you need to build your own test FSPROJ/CSPROJ/VCPROJ files differently. -->
    <target name="vsprojtest">
      <call target="__private__fsprojtest"/>
      <call target="__private__csprojtest"/>
      <call target="__private__vcprojalltest"/>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <do unless="'@{OptionSetGetValue('eaconfig.targets', 'vsprojtool')}' == 'exclude'">

    <!-- Override this target if you need to build your own tool FSPROJ/CSPROJ/VCPROJ files differently. -->
    <target name="vsprojtool">
      <call target="__private__fsprojtool"/>
      <call target="__private__csprojtool"/>
      <call target="__private__vcprojalltool"/>
    </target>
  </do>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroup" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="all"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroupall" style="use" depends="vcproj-build-nantToVSTools">
    <slngenerator group="allall"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnruntime-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="runtime"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntest-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="test"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnexample-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="example"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntool-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="tool"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroup-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="all"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroupall-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="generate-single-config" value="true" readonly="true"/>
    <slngenerator group="allall"/>
  </target>

  <target name="__private_get_module_basetype">
    <task name="GetModuleBaseType" Name="${slngenerator.moduletype}"/>
    <eval code="@{PropertyUndefine('slngenerator.moduletype')}" type="Function" />
  </target>


  <!--
      slnruntime-prebuild
      
      Takes care of support for adding COM and web references to
      C# projects. This will hopefully go away when the support is
      added directly to eaconfig.
     -->
  <target name="slnruntime-prebuild" style="use">
    <call target="slnruntime-generateslninteropassemblies" />
    <call target="slnruntime-generatewebreferences" />
  </target>

  <!--
    slnruntime-generateslninteropassemblies
    
    Iterates through ${runtime.buildmodules} looking for modules that
    define a "comassemblies" fileset. If this exists then tlbimp.exe is
    used to generate the corresponding managed wrappers, which are
    added to the "assemblies" fileset for the module.
  -->
  <target name="slnruntime-generateslninteropassemblies">
    <foreach property="module" in="${runtime.buildmodules}" item="String">
      <do if="@{FileSetExists('runtime.${module}.comassemblies')}">
        <task name="task-generatemoduleinteropassemblies" module="${module}" />
      </do>
    </foreach>
  </target>

  <!--
    slnruntime-generatewebreferences
    
    Iterates through ${runtime.buildmodules} looking for modules that
    define a "webreferences" fileset. If this exists then wsdl.exe is
    used to generate the corresponding managed wrappers.
  -->

  <target name="slnruntime-generatewebreferences">
    <foreach property="module" in="${runtime.buildmodules}" item="String">
      <do if="@{OptionSetExists('runtime.${module}.webreferences')}">
        <task name="task-generatemodulewebreferences" module="${module}" />
      </do>
    </foreach>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Set of dummy targets to be used only by slngenerator to create new project instances 
       We can not implement these targets easily in C# code using framework tasks -->
  <target name="runtime_builddependencies"/>
  <target name="test_builddependencies"/>
  <target name="tool_builddependencies"/>
  <target name="example_builddependencies"/>

</project>
