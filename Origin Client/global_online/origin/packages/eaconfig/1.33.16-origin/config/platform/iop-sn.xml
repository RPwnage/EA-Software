<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project>
  <dependent name="PlayStation2SN" />
  <do>
    <property name="nostartfiles" value=""/>
    <property name="xlinker">
      %objectfiles%
      %options%
      -L${package.PlayStation2SN.appdir}\sce\iop\lib
    </property>
  </do>

  <!-- redefine some stuff -->
  <property name="cc"         value="${package.PlayStation2SN.appdir}\sce\iop\gcc\bin\iop-elf-gcc.exe"/>
  <property name="as"         value="${package.PlayStation2SN.appdir}\sce\iop\gcc\bin\iop-elf-gcc.exe"/>
  <property name="lib"        value="${package.PlayStation2SN.appdir}\sce\iop\gcc\bin\iop-ar.exe"/>
  <property name="link"       value="${package.PlayStation2SN.appdir}\sce\iop\gcc\bin\iop-elf-gcc.exe"/>
  <property name="iop.fixup"  value="${package.PlayStation2SN.appdir}\sce\iop\gcc\mipsel-scei-elfl\bin\iopfixup.exe"/>

  <property name="config-system"      value="iop"/>
  <property name="config-compiler"    value="sn"/>
  <property name="config-platform"    value="iop-sn"/>

  <property name="lib-prefix"        value="lib"/>
  <property name="lib-suffix"        value=".a"/>

  <property name="exe-suffix"        value=".irx"/>


  <!-- <build> task properties -->
  <property name="build.pathstyle"    value="Unix"/>

  <!-- Compile in parallel on multiple CPUs         -->
  <property name="cc.parallelcompiler"    value="true"/>


  <optionset name="config-options-common">
    <option name="buildset.cc.defines" >
      @{OptionSetGetValue('config-options-common', 'buildset.cc.defines')}
    </option>
    <option name="buildset.cc.includedirs" >
      @{OptionSetGetValue('config-options-common', 'buildset.cc.includedirs')}
      ${package.PlayStation2SN.appdir}/sce/common/include
      ${package.PlayStation2SN.appdir}/sce/iop/include
      ${package.PlayStation2SN.appdir}/sce/iop/install/include
      ${package.PlayStation2SN.appdir}/sce/iop/gcc/lib/gcc-lib/mipsel-scei-elfl/2.8.1/include
    </option>
    <option name="buildset.link.options" >
      @{OptionSetGetValue('config-options-common', 'buildset.link.options')}
      ${nostartfiles}
    </option>
  </optionset>

  <!-- <as> task properties.  See PlayStation2SN package -->

  <!-- <cc> task properties -->
  <property name="cc.gccdefines">
    ${property.value}
  </property>

  <property name="cc.options">
    <!-- clear the default options and start fresh with config supplied options -->
  </property>

  <property name="cc.template.commandline">
    %defines%
    %includedirs%
    %options%
    -o "%objectfile%"           <!-- object file -->
    -c "%sourcefile%"           <!-- source file -->
  </property>

  <property name="cc.template.includedir"    value='-I "%includedir%"'/>
  <property name="cc.template.define"        value='-D%define%'/>

  <property name="lib.options">
  </property>

  <!-- <link> task properties -->
  <property name="link.options">
    ${property.value}
    ${nostartfiles}
  </property>

  <property name="link.libraries">
  </property>

  <property name='link.template.librarydir'  value='-L"%librarydir%"'/>
  <property name='link.template.libraryfile' value='"%libraryfile%"'/>
  <property name='link.template.objectfile'  value='"%objectfile%"'/>

  <property name="link.template.commandline">
    ${xlinker}

    -ilb=inet.ilb
    -ilb=netcnf.ilb
    -ilb=inetctl.ilb
    -ilb=cdvdman.ilb
  </property>

  <property name="link.postlink.program" value="${iop.fixup}" />

  <property name="link.postlink.commandline" >
    -o %outputdir%\%outputname%${exe-suffix} %outputdir%\%outputname%${exe-suffix}
  </property>

  <property name="platform.sdklibs.regular">
  </property>

  <property name="platform.sdklibs.debug">
  </property>

</project>