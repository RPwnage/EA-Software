<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project>

  <dependent name="VisualStudio" />

  <property name="WindowsSDKName" value="WindowsSDK" if="(${config-system} == pc) or (${config-system} == pc64) or (${config-system} == winrt)"/>
  <property name="WindowsSDKName" value="WindowsPhoneSDK" if="(${config-system} == winprt)"/>

  <dependent name="${WindowsSDKName}" />

  <fail message="Please don't set 'config-vs-version' on the command-line.  We can auto-detect the Visual Studio version for all platforms now." if="@{PropertyExists('config-vs-version')}"/>
  <set-config-vs-version/>

  <property name="default-lib-prefix"     value="" />
  <property name="default-lib-suffix"     value=".lib" />
  <property name="default-dll-suffix"     value=".dll"/>
  <property name="default-exe-suffix"     value=".exe"/>

  <property name="exe-suffix"     value="${exe-suffix.${config-system}??${exe-suffix??${default-exe-suffix}}}"/>
  <property name="lib-prefix"     value="${lib-prefix.${config-system}??${lib-prefix??${default-lib-prefix}}}"/>
  <property name="lib-suffix"     value="${lib-suffix.${config-system}??${lib-suffix??${default-lib-suffix}}}"/>
  <property name="dll-suffix"     value="${dll-suffix.${config-system}??${dll-suffix??${default-dll-suffix}}}"/>

  <!-- <build> task properties -->
  <property name="build.pathstyle" value="Windows" />

  <!-- Always use response files, to avoid overflowing the command-line. -->
  <property name="link.useresponsefile" value="true"/>
  <!-- Always use response files, to avoid overflowing the command-line. -->
  <property name="lib.useresponsefile" value="true"/>

  <property name="platform.sdklibs.regular"/>
  <property name="platform.sdklibs.debug"/>

  <property name="package.eaconfig.clrFlag" value="-clr"/>
  <property name="package.eaconfig.clrFlag" value="-clr:oldSyntax" if="${${package.name}.vc8transition??false}"/>

  <property name="package.eaconfig.vcdir" value="${package.VisualStudio.vcdir??${package.VisualStudio.appdir}\VC}"/>
  <property name="package.eaconfig.sdkdir">
    ${package.VisualStudio.appdir}\SDK\v2.0\include
    ${package.VisualStudio.appdir}\INCLUDE
  </property>

  <do unless="@{PropertyExists('package.${WindowsSDKName}.libdir')}">
    <property name="package.${WindowsSDKName}.libdir" value="${package.${WindowsSDKName}.appdir}/lib/x64" if="${package.VisualStudio.64bit??false}"/>
    <property name="package.${WindowsSDKName}.libdir" value="${package.${WindowsSDKName}.appdir}/lib" unless="${package.VisualStudio.64bit??false}"/>
  </do>
  <!-- define platform SDK directory -->
  <property name="eaconfig.PlatformSDK.dir" value="${package.${WindowsSDKName}.appdir}"/>
  <property name="eaconfig.PlatformSDK.dir" value="${package.${WindowsSDKName}.kitdir}" if="${package.${WindowsSDKName}.MajorVersion??0} gte 8"/>
  <property name="eaconfig.PlatformSDK.dir.lib" value="${package.${WindowsSDKName}.libdir}"/>

  <!-- define include directory for Windows 8 SDK -->

  <do if="${package.${WindowsSDKName}.MajorVersion??0} gte 8">
    <property name="eaconfig.PlatformSDK.um.dir" value="${eaconfig.PlatformSDK.dir}\lib\win8\um\"/>
    <property name="eaconfig.PlatformSDK.dir.lib" value="${eaconfig.PlatformSDK.um.dir}\x64" if="${config-processor} == 'x64'"/>
    <property name="eaconfig.PlatformSDK.dir.lib" value="${eaconfig.PlatformSDK.um.dir}\x86" if="${config-processor} == 'x86'"/>
    <property name="eaconfig.PlatformSDK.dir.lib" value="${eaconfig.PlatformSDK.um.dir}\ARM" if="${config-processor} == 'arm'"/>
  </do>

  <!-- This template is only used for NAnt builds. -->
  <property name="cc.template.commandline">
    %defines%
    %includedirs%
    %usingdirs%
    %options%
    -Fo"%objectfile%"
    "%sourcefile%"
  </property>

  <property name="cc.template.includedir" value='-I "%includedir%"' />
  <property name="cc.template.define" value='-D "%define%"' />
  <property name="cc.template.usingdir" value='-AI "%usingdir%"' />


  <property name='link.template.librarydir' value='-libpath:"%librarydir%"' />
  <property name='link.template.libraryfile' value='"%libraryfile%"' />
  <property name='link.template.objectfile' value='"%objectfile%"' />

  <property name="link.template.commandline">
    %options%
    %librarydirs%
    %objectfiles%
    %libraryfiles%
  </property>

  <!-- clear options exported by Visual Studio package - they are wrong -->
  <!-- IMTODO: Shouldn't we fix VisualStudio packages? -->
  <property name="cc.options"/>
  <property name="link.options"/>
  <property name="cc.includedirs"/>

  <optionset name="config-options-common">
    <!-- ETFW-1428.  VS2010 has a bug when building from clean with incremental linking,
         manifest file generation and map file generation.  Disable map file generation
         to work around it.
    -->
    <option name="generatemapfile" value="off" />
    <option name="cc" value="${cc}"/>
    <option name="as" value="${as}"/>
    <option name="link" value="${link}"/>
    <option name="lib" value="${lib}"/>
    <option name="preprocess"/>
    <option name="postprocess"/>
    <!--- cc -->
    <option name="buildset.cc.options">
      ${option.value}
      ${cc.options??}

      <!--Specify a .pdb file name to avoid generic vs name.
                Regardless of whether we're building with debug symbols or not,
                this is necessary for vsbuilds during generation of .idb dependency files as well.
             -->
      -Fd"%outputdir%\%outputname%.pdb"
    </option>
    <option name="buildset.cc.defines">
      ${option.value}
      ${cc.defines??}
      WIN32
    </option>
    <option name="buildset.cc.defines" if="${${package.name}.vc8transition ?? false}">
      ${option.value}
      _CRT_SECURE_NO_DEPRECATE
    </option>
    <option name="buildset.cc.gccdefines">
      ${option.value}
      ${cc.gccdefines??}
      _WIN32
    </option>
    <option name="buildset.cc.includedirs">
      ${option.value}
      ${cc.includedirs??}
      ${package.eaconfig.vcdir}\ATLMFC\INCLUDE
      ${package.eaconfig.vcdir}\INCLUDE
      ${eaconfig.PlatformSDK.dir}\include
      ${package.eaconfig.sdkdir}
    </option>
    <option name="buildset.cc.includedirs" if="${package.${WindowsSDKName}.MajorVersion??0} gte 8">
      ${eaconfig.PlatformSDK.dir}\Include\shared
      ${eaconfig.PlatformSDK.dir}\Include\um
      ${option.value}
    </option>
    <option name="buildset.as.includedirs">
      ${option.value}
      ${as.includedirs??}
      ${package.eaconfig.vcdir}\INCLUDE
      ${eaconfig.PlatformSDK.dir}\include
      ${package.eaconfig.sdkdir}
    </option>
    <option name="buildset.as.includedirs" if="${package.${WindowsSDKName}.MajorVersion??0} gte 8">
      ${eaconfig.PlatformSDK.dir}\Include\shared
      ${eaconfig.PlatformSDK.dir}\Include\um
      ${option.value}
    </option>
    <option name="buildset.cc.usingdirs">
      ${option.value}
      ${cc.usingdirs??}
    </option>
    <option name="buildset.as.usingdirs">
      ${option.value}
      ${as.usingdirs??}
    </option>
    <!--- link -->
    <option name="buildset.link.options">
      ${option.value}
      ${link.options??}
      -manifest
    </option>
    <option name="buildset.link.librarydirs">
      ${option.value}
      ${link.librarydirs??}
      ${eaconfig.PlatformSDK.dir.lib}
      ${eaconfig.PlatformSDK.dir.lib}/prerelease
      ${eaconfig.PlatformSDK.dir.lib}
    </option>
    <option name="buildset.link.libraries">
      ${option.value}
      ${link.libraries??}
    </option>
    <option name="link.postlink.program" value="${package.${WindowsSDKName}.appdir}\BIN\mt.exe" />
    <option name="link.postlink.program" value="${package.${WindowsSDKName}.kitbin.dir??}\mt.exe" if="${package.${WindowsSDKName}.MajorVersion??0} gte 8"/>
    <!--- lib -->
  </optionset>

  <!-- Clear properties that are already appended to the optionset-->
  <property name="cc.options" />
  <property name="cc.defines" />
  <property name="cc.gccdefines" />
  <property name="cc.includedirs"/>
  <property name="link.options"/>
  <property name="link.libraries"/>
  <property name="link.librarydirs"/>
  <property name="lib.options"/>

  <optionset name="config-options-library">
    <option name="liboutputname" value="%outputdir%/${lib-prefix}%outputname%${lib-suffix}" />
  </optionset>

  <optionset name="config-options-program">
    <option name="linkoutputname" value="%outputdir%/%outputname%${exe-suffix}" />
    <option name="buildset.link.options">
      -manifestfile:"%intermediatedir%\%outputname%${exe-suffix}.manifest"
    </option>
    <option name="link.postlink.commandline" >
      -nologo
      -manifest "%intermediatedir%\%outputname%${exe-suffix}.manifest"
      -outputresource:"%outputdir%\%outputname%${exe-suffix};1"
    </option>
  </optionset>

  <optionset name="config-options-dynamiclibrary" >
    <option name="multithreadeddynamiclib"  value="on" />
    <option name="buildset.cc.defines">
      EA_DLL
    </option>
    <option name="linkoutputname"           value="%outputdir%/%outputname%${dll-suffix}" />
    <option name="impliboutputname"         value="%outputlibdir%/%outputname%.lib"/>
    <!-- name of import library -->
    <option name="buildset.link.options">
      -manifestfile:"%intermediatedir%\%outputname%${dll-suffix}.manifest"
    </option>
    <option name="link.postlink.commandline" >
      -nologo
      -manifest "%intermediatedir%\%outputname%${dll-suffix}.manifest"
      -outputresource:"%outputdir%\%outputname%${dll-suffix};2"
    </option>
  </optionset>

  <optionset name="config-options-windowsprogram">
    <option name="pcconsole"              value="off" />
    <option name="buildset.name"          value="WindowsProgram" />
    <option name="buildset.tasks"         value="asm cc link" />
    <option name="exceptions"             value="on"/>
    <option name="buildset.cc.defines">
      _WINDOWS
    </option>
    <option name="buildset.link.options">
      -manifestfile:"%intermediatedir%\%outputname%${exe-suffix}.manifest"
    </option>
    <option name="linkoutputname"         value="%outputdir%/%outputname%${exe-suffix}" />
    <option name="link.postlink.commandline" >
      -nologo
      -manifest "%intermediatedir%\%outputname%${exe-suffix}.manifest"
      -outputresource:"%outputdir%\%outputname%${exe-suffix};1"
    </option>

  </optionset>

  <optionset name="config-options-csharplibrary">
    <option name="buildset.name"            value="CSharpLibrary" />
    <option name="buildset.tasks"           value="csc" />
    <option name="buildset.csc.target"      value="library" />
    <option name="delayedinit"              value="eaconfig-init-csharpcommon" />
  </optionset>

  <optionset name="config-options-csharpprogram">
    <option name="buildset.name"            value="CSharpProgram" />
    <option name="buildset.tasks"           value="csc" />
    <option name="buildset.csc.target"      value="exe" />
    <option name="delayedinit"              value="eaconfig-init-csharpcommon" />
  </optionset>

  <optionset name="config-options-csharpwindowsprogram">
    <option name="buildset.name"            value="CSharpWindowsProgram" />
    <option name="buildset.tasks"           value="csc" />
    <option name="buildset.csc.target"      value="winexe" />
    <option name="delayedinit"              value="eaconfig-init-csharpcommon" />
  </optionset>

  <optionset name="config-options-fsharplibrary">
    <option name="buildset.name"            value="FSharpLibrary" />
    <option name="buildset.tasks"           value="fsc" />
    <option name="buildset.fsc.target"      value="library" />
    <option name="delayedinit"              value="eaconfig-init-fsharpcommon" />
  </optionset>

  <optionset name="config-options-fsharpprogram">
    <option name="buildset.name"            value="FSharpProgram" />
    <option name="buildset.tasks"           value="fsc" />
    <option name="buildset.fsc.target"      value="exe" />
    <option name="delayedinit"              value="eaconfig-init-fsharpcommon" />
  </optionset>

  <optionset name="config-options-fsharpwindowsprogram">
    <option name="buildset.name"            value="FSharpWindowsProgram" />
    <option name="buildset.tasks"           value="fsc" />
    <option name="buildset.fsc.target"      value="winexe" />
    <option name="delayedinit"              value="eaconfig-init-fsharpcommon" />
  </optionset>


  <!-- ===================================================================
        Visual Studio managed C++ program optionset
    ==================================================================== -->
  <optionset name="config-options-managedcppprogram">
    <option name="exceptions"                           value="on" />
    <option name="managedcpp"                           value="on" />
    <option name="multithreadeddynamiclib"              value="on" />
    <option name="rtti"                                 value="on" />
    <option name="runtimeerrorchecking"                 value="off" />
    <!-- RTC is incompatible with Managed C++ -->
    <option name="buildset.name"                        value="ManagedCppProgram" />
    <option name="buildset.tasks"                       value="cc link" />
    <option name="buildset.cc.options">
      ${package.eaconfig.clrFlag}
    </option>
    <!-- enable CLR for managed code -->
    <!-- link options -->
    <option name="buildset.link.libraries">
      <!-- minimal libraries needed to link with -->
      ${eaconfig.PlatformSDK.dir.lib}/kernel32.lib
      ${eaconfig.PlatformSDK.dir.lib}/User32.lib
      ${eaconfig.PlatformSDK.dir.lib}/Gdi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/winspool.lib
      ${eaconfig.PlatformSDK.dir.lib}/comdlg32.lib
      ${eaconfig.PlatformSDK.dir.lib}/advapi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/shell32.lib
      ${eaconfig.PlatformSDK.dir.lib}/ole32.lib
      ${eaconfig.PlatformSDK.dir.lib}/oleaut32.lib
      ${eaconfig.PlatformSDK.dir.lib}/uuid.lib
      ${eaconfig.PlatformSDK.dir.lib}/odbccp32.lib
    </option>
    <option name="buildset.link.options">
      -FIXED:No                               <!-- Fixed Base Address: Generate a relocation section -->
      -manifestfile:"%intermediatedir%\%outputname%${exe-suffix}.manifest"
    </option>
    <option name="linkoutputname" value="%outputdir%/%outputname%${exe-suffix}" />
    <option name="delayedinit" value="eaconfig-init-managedcppprogram" />
  </optionset>


  <!-- ===================================================================
        Visual Studio managed C++ program optionset - but for a Windows app.
    ==================================================================== -->
  <optionset name="config-options-managedcppwindowsprogram">
    <option name="exceptions"                           value="on" />
    <option name="managedcpp"                           value="on" />
    <option name="multithreadeddynamiclib"              value="on" />
    <option name="pcconsole"                            value="off" />
    <option name="rtti"                                 value="on" />
    <option name="runtimeerrorchecking"                 value="off" />
    <!-- RTC is incompatible with Managed C++ -->
    <option name="buildset.name" value="ManagedCppWindowsProgram" />
    <option name="buildset.tasks" value="cc link" />
    <option name="buildset.cc.options">
      ${package.eaconfig.clrFlag}    <!-- enable CLR for managed code -->
    </option>
    <!-- link options -->
    <option name="buildset.link.libraries">
      <!-- minimal libraries needed to link with -->
      ${eaconfig.PlatformSDK.dir.lib}/kernel32.lib
      ${eaconfig.PlatformSDK.dir.lib}/User32.lib
      ${eaconfig.PlatformSDK.dir.lib}/Gdi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/winspool.lib
      ${eaconfig.PlatformSDK.dir.lib}/comdlg32.lib
      ${eaconfig.PlatformSDK.dir.lib}/advapi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/shell32.lib
      ${eaconfig.PlatformSDK.dir.lib}/ole32.lib
      ${eaconfig.PlatformSDK.dir.lib}/oleaut32.lib
      ${eaconfig.PlatformSDK.dir.lib}/uuid.lib
      ${eaconfig.PlatformSDK.dir.lib}/odbccp32.lib
    </option>
    <option name="buildset.link.options">
      -FIXED:No                               <!-- Fixed Base Address: Generate a relocation section -->
      -manifestfile:"%intermediatedir%\%outputname%${exe-suffix}.manifest"
    </option>
    <option name="linkoutputname"         value="%outputdir%/%outputname%${exe-suffix}" />
    <option name="link.postlink.commandline" >
      -nologo
      -manifest "%intermediatedir%\%outputname%${exe-suffix}.manifest"
      -outputresource:"%outputdir%\%outputname%${exe-suffix};1"
    </option>
    <option name="delayedinit" value="eaconfig-init-managedcppwindowsprogram" />

  </optionset>
  

  <!-- ===================================================================
        Visual Studio managed C++ assembly optionset
    ==================================================================== -->
  <optionset name="config-options-managedcppassembly">
    <option name="exceptions"                           value="on" />
    <option name="generatedll"                          value="on" />
    <option name="managedcpp"                           value="on" />
    <option name="runtimeerrorchecking"                 value="off" />
    <!-- RTC is incompatible with Managed C++ -->
    <option name="multithreadeddynamiclib"              value="on" />
    <option name="rtti"                                 value="on" />
    <option name="buildset.name"                        value="ManagedCppAssembly" />
    <option name="buildset.tasks"                       value="cc link" />
    <!-- cc options -->
    <option name="buildset.cc.defines">
      _WINDLL
    </option>
    <option name="buildset.cc.options"                  value="${package.eaconfig.clrFlag}"/>
    <!-- enable CLR for managed code -->
    <!-- link options -->
    <option name="buildset.link.libraries">
      <!-- minimal libraries needed to link with -->
      <!-- 
            If nochkclr.obj is included, it'll cause linker warning LNK4099. Microsoft says it's ok to 
            live with, but our game teams don't want any warning. So I exclude it.
            -->
      <!--${package.eaconfig.vcdir}/lib/nochkclr.obj-->
      ${eaconfig.PlatformSDK.dir.lib}/kernel32.lib
      ${eaconfig.PlatformSDK.dir.lib}/User32.lib
      ${eaconfig.PlatformSDK.dir.lib}/Gdi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/winspool.lib
      ${eaconfig.PlatformSDK.dir.lib}/comdlg32.lib
      ${eaconfig.PlatformSDK.dir.lib}/advapi32.lib
      ${eaconfig.PlatformSDK.dir.lib}/shell32.lib
      ${eaconfig.PlatformSDK.dir.lib}/ole32.lib
      ${eaconfig.PlatformSDK.dir.lib}/oleaut32.lib
      ${eaconfig.PlatformSDK.dir.lib}/uuid.lib
      ${eaconfig.PlatformSDK.dir.lib}/odbccp32.lib
    </option>
    <option name="buildset.link.options">
      -FIXED:No                               <!-- Fixed Base Address: Generate a relocation section -->
      -manifestfile:"%intermediatedir%\%outputname%${dll-suffix}.manifest"
    </option>
    <option name="linkoutputname"                       value="%outputdir%/%outputname%${dll-suffix}" />
    <option name="link.postlink.commandline" >
      -nologo
      -manifest "%intermediatedir%\%outputname%${dll-suffix}.manifest"
      -outputresource:"%outputdir%\%outputname%${dll-suffix};2"
    </option>
    <option name="delayedinit"          value="eaconfig-init-managedcppassembly" />
  </optionset>


  <do if="@{PropertyExists('package.WindowsSDK.tools.rc')}">
    <property name="build.rc.program" value="${package.WindowsSDK.tools.rc}"/>
  </do>
  <do unless="@{PropertyExists('package.WindowsSDK.tools.rc')}">
    <property name="build.rc.program" value="${package.WindowsSDK.appdir}\BIN\rc.exe" if="@{PropertyExists('package.WindowsSDK.appdir')}"/>
    <property name="build.rc.program" value="${package.WindowsSDK.kitbin.dir}\rc.exe" if="${package.WindowsSDK.MajorVersion??0} gte 8" />
  </do>


  <target name="eaconfig-init-csharpcommon" hidden="true">
    <dependent name="DotNet" />
    <property name="build.env.PATH" value="${property.value};${package.DotNet.appdir}"/>
    <!-- Asembly signing tool may need this environment variable -->
    <sysinfo />
    <property name="build.env.SystemDrive" value="${sys.env.SYSTEMDRIVE}" />

    <!-- In VC 9 we use ${WindowsSDKName} instead of .NetSDK -->
    <!-- But we still need to define some of the DotNetSDK properties, otherwise, when using with vc9, 
             many places in games/BuildworksScripts would report unable to find property package.DotNetSDK.version. 
             this would especially break all the JUICE client side apps.
        -->
    <do unless="@{PropertyExists('package.DotNetSDK.version')}">
      <property name="package.DotNetSDK.version" value="${package.${WindowsSDKName}.version}"/>
      <property name="package.DotNetSDK.support64bit" value="true"/>
      <property  name="package.DotNetSDK.appdir"  value="${package.${WindowsSDKName}.appdir}"/>
      <property name="package.DotNetSDK.libdir" value="${package.DotNetSDK.libdir}"
                if="@{PropertyExists('package.DotNetSDK.libdir')}"/>
      <property name="package.DotNetSDK.libdir" value="${package.DotNetSDK.appdir}/lib"
                unless="@{PropertyExists('package.DotNetSDK.libdir')}"/>
      <property name="package.DotNetSDK.includedirs" value="${package.DotNetSDK.includedirs}"
                if="@{PropertyExists('package.DotNetSDK.includedirs')}"/>
      <property name="package.DotNetSDK.includedirs" value="${package.DotNetSDK.appdir}/include"
                unless="@{PropertyExists('package.DotNetSDK.includedirs')}"/>
    </do>

    <!-- define DotNet SDK lib directory -->
    <property name="eaconfig.DotNetSDK.libdir" value="${package.${WindowsSDKName}.libdir}"/>

    <property name="eaconfig.DotNetSDK.includedirs" value="${package.${WindowsSDKName}.includedirs}"
              if="@{PropertyExists('package.${WindowsSDKName}.includedirs')}"/>

    <property name="eaconfig.DotNetSDK.includedirs" value="${package.${WindowsSDKName}.appdir}/include"
              unless="@{PropertyExists('package.${WindowsSDKName}.includedirs')}"/>

    <do if="@{PropertyExists('package.WindowsSDK.tools.resgen')}">
      <property name="build.resgen.program" value="${package.WindowsSDK.tools.resgen}"/>
    </do>
    <do unless="@{PropertyExists('package.WindowsSDK.tools.resgen')}">
      <property name="build.resgen.program" value="${package.DotNetSDK.appdir}\bin\resgen.exe"/>
      <property name="build.resgen.program" value="${package.WindowsSDK.appdir}\bin\NETFX 4.0 Tools\resgen.exe" if="${package.WindowsSDK.MajorVersion??0} gte 8" />
    </do>

  </target>

  <target name="eaconfig-init-fsharpcommon" hidden="true">
    <dependent name="DotNet" />
    <dependent name="FSharp" />
    <property name="build.env.PATH" value="${property.value};${package.DotNet.appdir}"/>
    <!-- Asembly signing tool may need this environment variable -->
    <sysinfo />
    <property name="build.env.SystemDrive" value="${sys.env.SYSTEMDRIVE}" />

    <do unless="@{PropertyExists('package.eaconfig.isusingvc9')}">
      <dependent name="DotNetSDK" />
    </do>

    <do unless="@{PropertyExists('package.DotNetSDK.version')}">
      <property name="package.DotNetSDK.version" value="${package.${WindowsSDKName}.version}"/>
      <property name="package.DotNetSDK.support64bit" value="true"/>
      <property  name="package.DotNetSDK.appdir"  value="${package.${WindowsSDKName}.appdir}"/>
      <property name="package.DotNetSDK.libdir" value="${package.DotNetSDK.libdir}"
                if="@{PropertyExists('package.DotNetSDK.libdir')}"/>
      <property name="package.DotNetSDK.libdir" value="${package.DotNetSDK.appdir}/lib"
                unless="@{PropertyExists('package.DotNetSDK.libdir')}"/>
      <property name="package.DotNetSDK.includedirs" value="${package.DotNetSDK.includedirs}"
                if="@{PropertyExists('package.DotNetSDK.includedirs')}"/>
      <property name="package.DotNetSDK.includedirs" value="${package.DotNetSDK.appdir}/include"
                unless="@{PropertyExists('package.DotNetSDK.includedirs')}"/>

    </do>
    <!-- define DotNet SDK lib directory -->
    <property name="eaconfig.DotNetSDK.libdir" value="${package.${WindowsSDKName}.libdir}"/>

    <property name="eaconfig.DotNetSDK.includedirs" value="${package.${WindowsSDKName}.includedirs}"
              if="@{PropertyExists('package.${WindowsSDKName}.includedirs')}"/>

    <property name="eaconfig.DotNetSDK.includedirs" value="${package.${WindowsSDKName}.appdir}/include"
              unless="@{PropertyExists('package.${WindowsSDKName}.includedirs')}"/>

    <do if="@{PropertyExists('package.WindowsSDK.tools.resgen')}">
      <property name="build.resgen.program" value="${package.WindowsSDK.tools.resgen}"/>
    </do>
    <do unless="@{PropertyExists('package.WindowsSDK.tools.resgen')}">
      <property name="build.resgen.program" value="${package.DotNetSDK.appdir}\bin\resgen.exe"/>
      <property name="build.resgen.program" value="${package.WindowsSDK.appdir}\bin\NETFX 4.0 Tools\resgen.exe" if="${package.WindowsSDK.MajorVersion??0} gte 8" />
    </do>

  </target>

  <target name="eaconfig-init-managedcppcommon" hidden="true" depends="eaconfig-init-csharpcommon">

    <property name="cc.includedirs">
      ${property.value}
      ${eaconfig.DotNetSDK.includedirs}
    </property>
    <property name="link.librarydirs" unless="@{PropertyExists('package.VisualStudio.64bit')}">
      ${property.value}
      ${eaconfig.DotNetSDK.libdir}
    </property>

    <MergeOption Optionset="${managedcppcommon.optionset}" OptionName="cc.includedirs">
      <OptionValue>
        ${package.DotNetSDK.appdir}/include    <!-- C++ .Net SDK includes -->
      </OptionValue>
    </MergeOption>

    <!-- HACK, should be fixed in DotNet package-->
    <do if="@{StrContains('${package.DotNet.referencedir}', '3.5')}">
      <property name="package.DotNet.referencedir">
        ${property.value}
        @{StrReplace('${property.value}', '3.5', '3.0')}
      </property>
    </do>
    <MergeOption Optionset="${managedcppcommon.optionset}" OptionName="cc.usingdirs">
      <OptionValue>
        ${package.DotNet.referencedir}                <!-- .Net assembly dirs -->
        ${package.configbindir}
      </OptionValue>
    </MergeOption>

    <property name="skip_defaultassemblies" value="false"/>
    <do if="@{PropertyExists('groupname')}">
      <do if="@{PropertyExists('${groupname}.usedefaultassemblies')}">
        <do if="'${${groupname}.usedefaultassemblies}'=='false'">
          <property name="skip_defaultassemblies" value="true"/>
        </do>
      </do>
    </do>

    <do unless="${skip_defaultassemblies}">
      <!-- Dot Net frameworks version 3.0 and higher do not contain macorlib.dll, System.dll-->
      <!--
          <property name="__assembly_folder" value="${package.DotNet.appdir}\"/>          
          <property name="__assembly_folder" value="" if="@{PropertyExists('package.DotNet.referencedir')}" />
          -->
      <property name="__assembly_folder" value=""/>

      <MergeOption Optionset="${managedcppcommon.optionset}" OptionName="cc.options">
        <OptionValue>
          <!-- minimal .net dll to compile with, other ones are added by #using <...> -->
          -FU "${__assembly_folder}mscorlib.dll"
          -FU "${__assembly_folder}System.dll"
          -FU "${__assembly_folder}System.Data.dll"
        </OptionValue>
      </MergeOption>
    </do>
  </target>

  <target name="eaconfig-init-managedcppprogram" hidden="true">
    <!-- This target is also used by build type customized from ManagedCppProgram -->
    <property name="managedcppcommon.optionset" value="${build.buildtype}" />
    <call target="eaconfig-init-managedcppcommon" />
    <MergeOption Optionset="${build.buildtype}" OptionName="link.libraries">
      <OptionValue>
        ${eaconfig.DotNetSDK.libdir}/mscoree.lib
      </OptionValue>
    </MergeOption>
  </target>

  <target name="eaconfig-init-managedcppwindowsprogram" hidden="true">
    <!-- This target is also used by build type customized from ManagedCppWindowsProgram -->
    <property name="managedcppcommon.optionset" value="${build.buildtype}" />
    <call target="eaconfig-init-managedcppcommon" />

    <property name="skip_defaultassemblies" value="false"/>
    <do if="@{PropertyExists('groupname')}">
      <do if="@{PropertyExists('${groupname}.usedefaultassemblies')}">
        <do if="'${${groupname}.usedefaultassemblies}'=='false'">
          <property name="skip_defaultassemblies" value="true"/>
        </do>
      </do>
    </do>

    <do unless="${skip_defaultassemblies}">
      <!-- Dot Net frameworks version 3.0 and higher do not contain macorlib.dll, System.dll-->
      <!--
          <property name="__assembly_folder" value="${package.DotNet.appdir}\"/>
          <property name="__assembly_folder" value="" if="@{PropertyExists('package.DotNet.referencedir')}" />
          -->
      <property name="__assembly_folder" value=""/>

      <MergeOption Optionset="${managedcppcommon.optionset}" OptionName="cc.options">
        <OptionValue>
          -FU "${__assembly_folder}System.Drawing.dll"
          -FU "${__assembly_folder}System.Drawing.Design.dll"
          -FU "${__assembly_folder}System.Windows.Forms.dll"
          -FU "${__assembly_folder}System.XML.dll"
        </OptionValue>
      </MergeOption>
    </do>
    <MergeOption Optionset="${build.buildtype}" OptionName="link.libraries">
      <OptionValue>
        ${eaconfig.DotNetSDK.libdir}/mscoree.lib
      </OptionValue>
    </MergeOption>
  </target>

  <target name="eaconfig-init-managedcppassembly" hidden="true">
    <!-- This target is also used by build type customized from ManagedCppAssembly -->
    <property name="managedcppcommon.optionset" value="${build.buildtype}" />
    <call target="eaconfig-init-managedcppcommon" />
  </target>

  <createtask name="AddNetworkLibsToModule" overload="true">
    <parameters>
      <option name="module" value="Required"/>
    </parameters>
    <code>
      <fileset name="${AddNetworkLibsToModule.module}.libs" append="true">
        <includes name="${eaconfig.PlatformSDK.dir.lib}/WS2_32.Lib" if="${config-system} == pc"/>
        <includes name="${eaconfig.PlatformSDK.dir.lib}/WS2_32.Lib" if="${config-system} == pc64"/>
      </fileset>
    </code>
  </createtask>

</project>
