<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- - - - - - - - - -sln generation targets - - - - - - - - - - - - - -->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnruntime" style="use">
    <property name="eaconfig.build.group" value="runtime" />
    <call target="sln-genall-caller" force="true" />
  </target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnexample" style="use">
    <property name="eaconfig.build.group" value="example" />    
    <call target="sln-genall-caller" force="true" />    
  </target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntest" style="use">
    <property name="eaconfig.build.group" value="test" />
    <call target="sln-genall-caller" force="true" />
  </target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntool" style="use">
    <property name="eaconfig.build.group" value="tool" />
    <call target="sln-genall-caller" force="true" />
  </target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroup" style="use">
    <property name="__eaconfig.build.groups" value="${eaconfig.build.groups??runtime test example tool}" />
    <property name="eaconfig.build.split-by-group-names" value="false"/>
    <call target="sln-genall-caller" force="true" />
    <!-- In case targets are chained reset the value -->
    <eval code="@{PropertyUndefine('__eaconfig.build.groups')}" type="Function"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroupall" style="use">
    <!-- IMTODO - propagate groups to dependents-->
    <property name="__eaconfig.build.groups" value="${eaconfig.build.groups??${slngenerator.slngroupall.groups??runtime test example tool}}" />
    <property name="eaconfig.build.split-by-group-names" value="false"/>
    <call target="sln-genall-caller" force="true" />
    <!-- In case targets are chained reset the value -->
    <eval code="@{PropertyUndefine('__eaconfig.build.groups')}" type="Function"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnruntime-generate-single-config" style="use">
    <property name="eaconfig.build.group" value="runtime" />
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-gen-caller" force="true" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntest-generate-single-config" style="use">
    <property name="eaconfig.build.group" value="test" />
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-gen-caller" force="true" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slnexample-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="eaconfig.build.group" value="example" />
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-gen-caller" force="true" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slntool-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="eaconfig.build.group" value="tool" />    
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-gen-caller" force="true" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroup-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">    
    <property name="__eaconfig.build.groups" value="${eaconfig.build.groups??runtime test example tool}" />
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-gen-caller" force="true" />
    <!-- In case targets are chained reset the value -->
    <eval code="@{PropertyUndefine('__eaconfig.build.groups')}" type="Function"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="slngroupall-generate-single-config" style="use" depends="vcproj-build-nantToVSTools">
    <property name="__eaconfig.build.groups" value="${eaconfig.build.groups??runtime test example tool}" />
    <property name="eaconfig.build.configs" value="${config}" />
    <property name="generate-single-config" value="true" readonly="true"/>
    <call target="sln-genall-caller" force="true" />
    <!-- In case targets are chained reset the value -->
    <eval code="@{PropertyUndefine('__eaconfig.build.groups')}" type="Function"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- - - - - - - - - -helper targets - - - - - - - - - - - - - - - - - -->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="sln-gen-caller" style="use">
    <property name="eaconfig.build.autobuild-target" value="load-package-generate" />
    <property name="eaconfig.build.process-generation-data" value="true"/>
    <set-config-vs-version/>
    <call target="eaconfig-build-graph" force="true" />
    <backend-generator generator-name="VisualStudio"  
                       startup-config="${config}" 
                       configurations="${config}" 
                       generate-single-config="${generate-single-config??false}" 
                       split-by-group-names="${eaconfig.build.split-by-group-names??true}"/>
  </target>

  <target name="sln-genall-caller" style="use">
    <property name="eaconfig.buildall.target" value="load-package-generate" />
    <property name="eaconfig.build.autobuild-target" value="load-package-generate" />
    <property name="eaconfig.build.configs" value="${package.configs}"/>
    <property name="eaconfig.build.configs" value="${config}" if="${generate-single-config??false}"/>
    <property name="eaconfig.build.process-generation-data" value="true"/>
    <set-config-vs-version/>
    <call target="eaconfig-build-graph-all" force="true" />
    <backend-generator generator-name="VisualStudio"  
                       startup-config="${config}" 
                       configurations="${eaconfig.build.configs}" 
                       generate-single-config="${generate-single-config??false}" 
                       split-by-group-names="${eaconfig.build.split-by-group-names??true}"/>
  </target>

  <!--
      slnruntime-prebuild
      
      Takes care of support for adding COM and web references to
      C# projects. This will hopefully go away when the support is
      added directly to eaconfig.
     -->
  <target name="slnruntime-prebuild" style="use">
    <call target="slnruntime-generateslninteropassemblies" />
    <call target="slnruntime-generatewebreferences" />
  </target>

  <!--
    slnruntime-generateslninteropassemblies
    
    Iterates through ${runtime.buildmodules} looking for modules that
    define a "comassemblies" fileset. If this exists then tlbimp.exe is
    used to generate the corresponding managed wrappers, which are
    added to the "assemblies" fileset for the module.
  -->
  <target name="slnruntime-generateslninteropassemblies">
    <foreach property="module" in="${runtime.buildmodules}" item="String">
      <do if="@{FileSetExists('runtime.${module}.comassemblies')}">
        <task name="task-generatemoduleinteropassemblies" module="${module}" />
      </do>
    </foreach>
  </target>

  <!--
    slnruntime-generatewebreferences
    
    Iterates through ${runtime.buildmodules} looking for modules that
    define a "webreferences" fileset. If this exists then wsdl.exe is
    used to generate the corresponding managed wrappers.
  -->

  <target name="slnruntime-generatewebreferences">
    <foreach property="module" in="${runtime.buildmodules}" item="String">
      <do if="@{OptionSetExists('runtime.${module}.webreferences')}">
        <task name="task-generatemodulewebreferences" module="${module}" />
      </do>
    </foreach>
  </target>

</project>
