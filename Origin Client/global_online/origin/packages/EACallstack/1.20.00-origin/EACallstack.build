<?xml version="1.0" encoding="utf-8"?>
<project default="build" xmlns="schemas/ea/framework3.xsd">

  <optionset name="config.targetoverrides">
    <option name="test-build" value="include" />
    <option name="test-buildall" value="include" />
    <option name="test-run" value="include" />
    <option name="test-runall" value="include" />
  </optionset>


  <!-- Package declaration -->
  <package name="EACallstack" />


  <!-- Options -->
  <!-- To enable options put (e.g.) <globalproperties>EACallstack.EACALLSTACK_DEFAULT_ALLOCATOR_ENABLED=1</globalproperties> -->
  <!-- in your masterconfig file or use -D:EACallstack.EACALLSTACK_DEFAULT_ALLOCATOR_ENABLED=1 on the nant command line.     -->
  <!-- The EACallstack.EACALLSTACK_XXX values here directly correspond to EACallstack config #defines.                       -->
  <property name="EATECH_WARNINGSASERRORS" value="0" unless="@{PropertyExists('EATECH_WARNINGSASERRORS')}" />

  <property name="EACallstack.configDefineTypes">
    EACALLSTACK_MS_PDB_READER_ENABLED
    EACALLSTACK_DEFAULT_ALLOCATOR_ENABLED
    EACALLSTACK_ENABLE_ELF_SPAWN
    EACALLSTACK_MSVC_DEMANGLE_ENABLED
    EACALLSTACK_GCC_DEMANGLE_ENABLED
    EACALLSTACK_CODEWARRIOR_DEMANGLE_ENABLED
    EACALLSTACK_MSVC_MAPFILE_ENABLED
    EACALLSTACK_GCC_MAPFILE_ENABLED
    EACALLSTACK_SN_MAPFILE_ENABLED
    EACALLSTACK_CODEWARRIOR_MAPFILE_ENABLED
    EACALLSTACK_GREENHILLS_MAPFILE_ENABLED
    EACALLSTACK_GREENHILLS_GHSFILE_ENABLED
    EACALLSTACK_PDBFILE_ENABLED
    EACALLSTACK_DWARFFILE_ENABLED
    EACALLSTACK_DASM_POWERPC_ENABLED
    EACALLSTACK_DASM_X86_ENABLED
    EACALLSTACK_DASM_ARM_ENABLED
    EACALLSTACK_DEBUG_DETAIL_ENABLED
  </property>



  <property name="EACallstack.configDefines" />

  <foreach item="String" in="${EACallstack.configDefineTypes}" property="configDefineType">
    <property name="EACallstack.configDefines" if="@{PropertyExists('EACallstack.${configDefineType}')}">
      ${property.value}
      ${configDefineType}=${EACallstack.${configDefineType}}
    </property>
  </foreach>

  <property name="EACallstack.configDefines" if="@{PropertyExists('EA_XBDM_ENABLED')}">
    ${property.value}
    EA_XBDM_ENABLED=${EA_XBDM_ENABLED}
  </property>

  <!-- ********************* -->
  <!-- Runtime configuration -->
  <!-- ********************* -->


  <Library name="EACallstack" >
    <buildtype name="DynamicLibrary" if="${Dll??false}"/>
    <config>
      <defines>
        ${EACallstack.configDefines}
        UTF_USE_EAASSERT=1

        <do if="${Dll??false} and ${config-compiler} == 'vc'" >
          EACALLSTACK_API=__declspec(dllexport)
        </do>
      </defines>

      <buildoptions>
        <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
        <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />

        <option name="buildset.cc.options" if="${config-compiler} == 'gcc'">
          ${option.value}
          -fstrict-aliasing
        </option>

        <option name="buildset.cc.options" if="${config-compiler} == 'gcc' and @{StrStartsWith('${config-system}', 'unix')} ">
          <!-- What we really want to test for is GCC on x86. -->
          <!-- Don't just StrReplace with -fno-omit-frame-pointer, because GCC4.6+ omits frame pointers by default, and this won't cover that in case eaconfig some day stops using -fomit-frame-pointer. -->
          ${option.value}
          -fno-omit-frame-pointer
        </option>

        <option name="buildset.cc.options" if="${config-compiler} == 'mw'">
          ${option.value}
          -w filecaps
          -w sysfilecaps
        </option>

        <option name="buildset.cc.options" if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'" >
          ${option.value}
          -Xdiag=2             <!-- Enable compiler remarks in addition to errors and warnings. -->
          -Xquit=2             <!-- Set it so that even remarks are considered errors. -->
          --diag_error=68      <!-- turn on 'change of sign' (68) warning.  -->
          --diag_suppress=178  <!-- variable was declared but never referenced -->
          --diag_suppress=341  <!-- value copied to temporary, reference to temporary used. -->
          --diag_suppress=403  <!-- destructor for base class is not virtual. -->
          --diag_suppress=481  <!-- function redeclared "inline" after being called -->
          --diag_suppress=833  <!-- support for placement delete is disabled. -->
          --diag_suppress=1236 <!-- invalid error number -->
          --diag_suppress=1772 <!-- argument of type "X" is implicitly converted to parameter of type "Y" -->
          --diag_suppress=1779 <!-- identifier (with leading underscore) is non-standard. [SN mistakenly flags this even when compiling compiler headers.] -->
          --diag_suppress=1783 <!-- cast from "X" to "Y" increases required alignment from 1 to 4 -->
          --diag_suppress=1785 <!-- pointer cast from "X" to "Y" violates strict-aliasing rules -->
          --diag_suppress=1788 <!-- inserted X bytes of padding at offset Y to align class "Z" -->
        </option>


      </buildoptions>

      <remove>
        <cc.options if="${config-compiler} == 'gcc'">
          -fno-strict-aliasing
        </cc.options>

        <cc.options if="${config-compiler} == 'gcc' and @{StrStartsWith('${config-system}', 'unix')} ">
          <!-- What we really want to test for is GCC on x86. -->
          -fomit-frame-pointer
        </cc.options>

        <cc.options if="${config-compiler} == 'mw'">
          -w nofilecaps
          -w nosysfilecaps
        </cc.options>

        <cc.options if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
          -Xdiag=1
        </cc.options>
        <cc.options if="${EATECH_WARNINGSASERRORS} == 1 and ${config-compiler} == 'sn' and ${config-system} == 'ps3'">
          -Xquit=1
        </cc.options>
      </remove>


      <warningsuppression if="${config-compiler} == 'vc'">
        -wd4217        <!-- disable warning: "member template functions cannot be used for copy-assignment or copy-construction" -->
        -wd4350        <!-- disable warning: "behavior change: '_Wrap_alloc(const std::_Wrap_alloc<_Alloc> &)' called instead of '_Wrap_alloc<std::_Wrap_alloc<_Alloc> >(_Other &)' -->
        -wd4530        <!-- disable warning: "C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc" -->
        -wd4548        <!-- disable warning: "expression before comma has no effect; expected expression with side-effect" -->
        -wd4619        <!-- disable warning: "#pragma warning : there is no warning number 'xxxx'"  MS being silly here -->
        -wd4738        <!-- disable warning: "storing 32-bit float result in memory, possible loss of performance" -->
        -wd4985        <!-- disable warning: "attributes not present on previous declaration." -->
      </warningsuppression>

      <warningsuppression  if="${config-compiler} == 'mw'">
        -w off        <!-- disable all warnings. We do this only because CodeWarrior doesn't document how to disable some individual warnings -->
      </warningsuppression>

      <warningsuppression if="${config-compiler} == 'gcc'">
        -Wstrict-aliasing=3
        -Wextra
      </warningsuppression>

    </config>

    <dependencies>
      <use>
        EABase
        coreallocator
      </use>

      <auto>
        EAAssert
        EASTL
        EAStdC
        EAThread
        PPMalloc
        EAIO
      </auto>

    </dependencies>

    <sourcefiles>
      <includes name="${package.dir}/source/*.cpp" />
      <includes name="${package.dir}/source/internal/EACallstackChoose.cpp" />
      <excludes name="${package.dir}/source/PS3DumpFile.cpp" if="${config-system} != pc and ${config-system} != pc64" />
      <!-- Only a PC would want to use this -->
      <includes name="${package.dir}/source/internal/Win32Runner.cpp" if="${config-system} == pc or  ${config-system} == pc64" />
      <includes name="${package.dir}/source/internal/CabReader.cpp" if="${config-system} == pc or  ${config-system} == pc64" />
      <includes name="${package.dir}/source/internal/DLLSupport.cpp" if="${Dll??false}" />
      <includes name="${package.dir}/source/internal/DemangleGCC.cpp" />
      <includes name="${package.dir}/source/internal/DemangleCodeWarrior.cpp" />
      <includes name="${package.dir}/source/internal/Minidump.cpp" />
      <includes name="${package.dir}/source/internal/PthreadInfo.cpp" />
      <includes name="${package.dir}/source/internal/cxa_demangle.cpp" />
    </sourcefiles>

    <bulkbuild enable="true" />

  </Library>


  <do if="${config-system} == 'ps3'">
    <dependent name="EAThread"/>
    <SPULibrary name="EACallstackSpu" if="@{StrCompareVersions(${package.EAThread.version}, '1.17.02')} lte 0">
      <config>
        <defines if="@{PropertyExists('runtime.EACallstack.defines')}">
          ${runtime.EACallstack.defines}
        </defines>

        <warningsuppression if="@{PropertyExists('runtime.EAStdC.warningsuppression')}" >
          ${runtime.EACallstack.warningsuppression}
        </warningsuppression>
      </config>

      <dependencies>
        <use>
          ${runtime.EACallstack.usedependencies}
        </use>
      </dependencies>

      <sourcefiles>
        <includes name="${package.dir}/source/ps3/EACallstack_PS3_SPU.cpp" />
      </sourcefiles>
      <!-- we will just use the above source as bulk -->
      <bulkbuild enable="true" />
    </SPULibrary>
  </do>



  <!-- ********************* -->
  <!-- Test configuration    -->
  <!-- ********************* -->



  <tests>
    <Program name="EACallstackTest">
      <config>
        <buildoptions>
          <option name="warningsaserrors" value="off" if="${EATECH_WARNINGSASERRORS} == 0" />
          <option name="warningsaserrors" value="on" if="${EATECH_WARNINGSASERRORS} == 1" />
        </buildoptions>

        <defines>
          ${EACallstack.configDefines}
          UTF_USE_EAASSERT=1
          EA_MEMORY_LEAK_TRACE_ENABLED=1
        </defines>

        <remove>
          <cc.options if="${config-compiler} == 'gcc' and @{StrStartsWith('${config-system}', 'unix')} ">
            <!-- What we really want to test for is GCC on x86. -->
            -fno-omit-frame-pointer
          </cc.options>
        </remove>

        <warningsuppression if="${config-compiler} == 'vc'">
          -wd4217        <!-- disable warning: "member template functions cannot be used for copy-assignment or copy-construction" -->
          -wd4530        <!-- disable warning: "C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc" -->
          -wd4619        <!-- disable warning: "#pragma warning : there is no warning number 'xxxx'"  MS being silly here -->
          -wd4548        <!-- disable warning: "expression before comma has no effect; expected expression with side-effect" -->
          -wd4738        <!-- disable warning: "storing 32-bit float result in memory, possible loss of performance" -->
          -wd4985        <!-- disable warning: "attributes not present on previous declaration." -->
        </warningsuppression>

        <warningsuppression if="${config-compiler} == 'mw'">
          -w off        <!-- disable all warnings. We do this only because CodeWarrior doesn't document how to disable some individual warnings -->
        </warningsuppression>

      </config>

      <dependencies>
        <use>
          EABase
          coreallocator
        </use>

        <build copylocal="true">
          EAAssert
          EASTL
          EAStdC
          EAThread
          PPMalloc
          EAIO
          MemoryMan
          EATest
          EAMain
          EACallstack/runtime/EACallstack
        </build>
      </dependencies>



      <includedirs>
        ${package.dir}/include
        ${package.dir}/test/include
      </includedirs>

      <sourcefiles>
        <includes name="${package.dir}/test/source/*.cpp" />
      </sourcefiles>

      <libraries  if="${config-system} == 'ps3'">
        <includes name="${package.configlibdir}/${lib-prefix}${package.name}${lib-suffix}" />

        <group if="${config-system} == ps3 and @{PropertyExists('package.PlayStation3GCC.appdir')}">
          <includes name="${package.PlayStation3GCC.appdir}/target/ppu/lib/liblv2dbg_stub.a" />
        </group>

        <group if="${config-system} == ps3 and @{PropertyExists('package.ps3sdk.appdir')}">
          <includes name="${package.ps3sdk.appdir}/target/ppu/lib/liblv2dbg_stub.a" />
        </group>

        <group if="${config-system} == unix or ${config-system} == unix64 or ${config-system} == palm or ${config-system} == android">
          <includes name="-ldl" asis="true" />
          <!-- Link libdl.a, which implements dlopen, dlclose, etc. -->
        </group>
      </libraries>

      <libraries  if="${config-system} == 'ps3'">
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsn.a" />
      </libraries>

      <do if="${config-system} == 'android'">
        <buildsteps>
          <packaging>
            <assetfiles basedir="${package.dir}/test/">
              <includes name="data/**" />
            </assetfiles>
            <manifestfile>
              <includes name="${package.dir}/test/android/AndroidManifest.xml" />
            </manifestfile>
          </packaging>
        </buildsteps>
      </do>

      <java>
        <sourcefiles  if="${config-system} == 'android'" basedir="${package.dir}/test/android/java_source">
          <includes name="**.java" />
        </sourcefiles>
      </java>

    </Program>
  </tests>


  <!-- ******************************** -->
  <!--  These do not exist yet in SXML-->
  <!-- ******************************* -->


  <fileset name="test.EACallstackTest.deploy-contents-fileset" basedir="${package.configbindir}/test">
    <includes name="**" />
  </fileset>
  <fileset name="test.EACallstackTest.test-data-fileset" basedir="${package.dir}/test/data/">
    <includes name="**" />
  </fileset>

  <do if="${config-system} == iphone">
    <property name="test.EACallstackTest.xcodeproj.paths-to-include-contents-in-bundle">
      ${package.dir}/test/data/
    </property>
  </do>

</project>
