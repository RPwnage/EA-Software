EADP Game Services DirtySDK 2015 Winter 1.1.0 - July 09, 2015

    This SDK release was built using the following compiler packages:

        EA Config   2.25.01
        Framework   3.32.02

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.07
        Capilano    CapilanoSDK 6.2.12999.0-1-proxy
                    capilano_config 1.01.02
        Kettle      kettlesdk 2.508.081-proxy
                    kettle_config 1.03.00
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.12.01-proxy
        Win32/WinRT/WinPRT
                    DotNet 4.0
                    DotNetSDK 2.0-4
                    VisualStudio 11.0.50727-1-proxy
                    WindowsSDK 8.0.50727-1-proxy
                    WindowsPhoneSDK 8.0.9900-proxy

    *** Important - Gen3 platforms (PlayStation 3 and Xbox 360) no longer supported ***
    The Winter 1.0.x stability branch should be used for any further development on these platforms.

New in this release:
    DirtySDK (All)
        Build
            Removed Gen3 Support.

        ConnAPI
            Added support to gate the voip connection based on QoS validation. The 'estv' selector can be used to
            ungate the voip connection.

        ProtoHttp
            Added returning of http status code as part of the 'hres' status selector.

        ProtoSSL
            Added signature_algorithms hello extension support, enabled by default.  Some servers require this
            extension to be present before accepting a connection request.

            Added validation of supported signature algorithms upon receiving a CertificateRequest handshake message.

        XmlParse
            Added support for 64-bit integers via XmlContentGetInteger64 and XmlAttribGetInteger64.

    DirtySDK (PC)
        NetConnWin
             Added support querying for MAC address with valid IP using the 'ethr'/'macx' when non-zero is passed into
             iData.

    DirtySDK (PS4)
        DirtyNetPS4
            Added 'spam' selector support to change debug verbosity.

        NetConnPS4
            Added an error message for when PRX is not loaded for the sceNpAuthCreateAsyncRequest call.

        VoipHeadsetPS4
            Added support for the following bitrates: 14400, 16000 and 22533.  The default bitrate has been increased
            from 7300 to 16000.

Changes/fixes in this release:
    DirtySDK (All)
        Build
            Changed DirtySDK build scripts to use Framework Structured XML.

        DirtyCert
            Changed requesting certificates use format state field with "ST=" instead of "S=", which is the default
            OpenSSL nomenclature.

        NetConn
            Changed NetConnDisconnect() to also abort UPnP operations. 

        ProtoHttp
            Changed default PUT/POST behavior to not reuse a previous connection (keep-alive).  When making a PUT or
            POST request and utilizing a keep-alive connection, it is possible for the server to close the connection
            and for that connection close to be "in flight" when issuing the request.  This results in the request
            being failed when the connection close is received.  Because a PUT or POST request can result in modifying
            server state, it may not be automatically re-issued.  Not using keep-alive avoids this complication.  A new
            ProtoHttpControl('rput') selector has been added to disable this behavior if the caller is willing to deal
            with this complication in trade for getting connection reuse on a PUT/POST.

        ProtoSSL
            Fixed incorrect CertificateVerify formatting when using TLS1.2.  This fixes client certificate support that
            was previously broken when connecting to a server supporting TLS1.2.

            Fixed an error with 'hres' selector not returning the right hresult in some cases.

        ProtoTunnel
            Fixed diagnostic output in _ProtoTunnelFindTunnel(), when re-matching addr/port, to include correct tunnel
            index instead of the max tunnel index.

    DirtySDK (PC/XboxOne)
        DirtyLibWin
            Fixed debug print on QueryPerformanceCounter() failure that was comparing against the wrong result code.

    DirtySDK (PS4)
        PrivilegeApiPS4
            Fixed a logical error that prevented a dialog from being appropriately terminated when aborted and the 
            reference is not destroyed.

        DirtyWebApiPS4
            Fixed an issue where we were using the wrong critical section for handling errors which ended up in a
            deadlock if another request was made before the response was handled.

        DirtySessionManagerPS4
            Changed 'gses' control selector to now guard against passing in "INVALID".

        VoipHeadsetPS4
            Fixed the wrong user index being set when polling for voice.

    DirtySDK (PS4/XboxOne)
        NetConn
            Added ability to pass -1 into NetConnRemoveLocalUser(), in which case an internal lookup will be performed.

            Added a new selector 'iusr' than can be used to retrieve the index given the IEAUser UserId.

        VoipHeadset
            Fixed voipheadsetDeleteLocalUser() to also clear the last headset status.

            Fixed a situation where channel configs are applied before we have any registered user with voipheadset. 

    DirtySDK (PS4/Unix)
        DirtyNet
            Fixed SocketConnect() to copy the remote address when performing an non-blocking connect
            (SCE_NET_EINPROGRESS/SYS_NET_EINPROGRESS/EINPROGRESS) for ps4/ps3/unix.

    DirtySDK (Unix)
        DirtyLibUnix
            Fixed NetTickUsec() to use proper scale for seconds.

    DirtySDK (XboxOne)
        NetConnXboxOne
            Changed the environment to be mapped to the sandbox ID. If it can't be mapped it will default back to TMS
            RETAIL -> PROD
            CERT -> CERT
            EARW.1 -> TEST

EADP Game Services DirtySDK 2015 Winter 1.0.1 - June 05, 2015

    This SDK release was built using the following compiler packages:

        EA Config   2.19.00
        Framework   3.25.00

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.07
        Capilano    CapilanoSDK 6.2.12710.0-1-proxy
                    capilano_config 1.01.00
        Kettle      kettlesdk 2.508.051-proxy
                    kettle_config 1.02.00
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.07.00
        PS3         ps3sdk 470.001-lite
                    PlayStation3NpEx 470.001
        Win32/WinRT/WinPRT
                    DotNetSDK 4.0
                    VisualStudio 11.0.50727-proxy
                    WindowsSDK 8.0.50727-proxy
                    WindowsPhoneSDK 8.0.9900-proxy
        Xenon       XenonSDK 2.0.21256.3-proxy

    *** Important - ProtoTunnel format modified - backward compatibility broken ***
    Th Winter 1.0 release of DirtySDK introduced a new ProtoTunnel protocol version - 1.1.  By default, this
    is the version used for all platforms except for Xbox 360.  ProtoTunnel v1.1 is not compatible with v1.0,
    and Xbox 360 is not compatible with v1.1.  Please make sure to rebuild any game servers in addition to
    game clients when upgrading to this release from a version older than Winter 1.0.

New in this release:
    DirtySDK (PS4)
        NetConnPS4
            Added NetConnRegisterNpStateCallback() to receive callbacks directly from NP State events.

Changes/fixes in this release:
    DirtySDK (All)
        NetGameLink
            Fixed a rare latency estimation issue at start of connection when local and remote clocks are close to but
            not quite synchronized.

    DirtySDK (PC)
        VoipPC
            Fixed VoipCommonUpdateRemoteStatus() not being invoked from the VoipThread.

            Fixed bPrivileged not defaulting to TRUE.

        VoipCommon
            Removed unnecessary PC specificities.

    DirtySDK (PS3)
        VoipHeadsetPS3
            Fixed implementation to no longer wait for the user to be in a participating state for acquiring and
            playing voice.  Without this change, there is some potential for garbled voice at connection establishment.

    DirtySDK (PS4)
        VoipHeadsetPS4
            Changed VoIP muting based on privileges back to be the most restrictive between local users. It will
            be reverted back to be muted on a per player basis once Sony provides us a way to check whether VoIP
            is being played back on the TV or headsets.

    DirtySDK (XboxOne)
        ConnApi
            Fixed _ConnApiInitClientConnectionState() to not reset ip address if it was already resolved (required for
            host migration to succeed with peer hosted topology when p2p voip is active before host migration).

        NetConnXBoxOne
            Fixed the value of the internet connectivity state to reset after a resume to prevent the user from getting
            stuck in an offline state after a NetConnDisconnect()/NetConnConnect().

        UserListApiXBoxOne
            Fixed the queueing of UserListApiIsFriendAsync() requests which return success codes but then behaved
            strangely when more than one request was active.

            Fixed a possible memory leak on shutdown.

    DirtySDK (PC/PS3/Unix/XboxOne)
        DirtyLib
            Fixed a rare thread safety issue in SocketLookup around
            refcounting


EADP Game Services DirtySDK 2015 Winter 1.0.0 - April 9, 2015

    This SDK release was built using the following compiler packages:

        EA Config   2.19.00
        Framework   3.25.00

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.07
        Capilano    CapilanoSDK 6.2.12128.0-proxy
                    capilano_config 1.01.00
        Kettle      kettlesdk 2.000.121-proxy
                    kettle_config 1.02.00
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.07.00
        PS3         ps3sdk 450.001-lite
                    PlayStation3NpEx 450.001
        Win32/WinRT/WinPRT
                    DotNetSDK 4.0
                    VisualStudio 11.0.50727-proxy
                    WindowsSDK 8.0.50727-proxy
                    WindowsPhoneSDK 8.0.9900-proxy
        Xenon       XenonSDK 2.0.21256.3-proxy

    *** Important - Please update your QOS servers from your Blaze server configurations ***
    The changes to the qosapi requires the new version of the QOS servers in order to function properly.
    Contact GOSOPS for information about the most up to date QOS servers.

    *** Important - ProtoTunnel format modified - backward compatibility broken ***
    This release of DirtySDK introduces a new ProtoTunnel protocol version - 1.1.  By default, this is the
    version used for all platforms except for Xbox 360.  ProtoTunnel v1.1 is not compatible with v1.0, and
    Xbox 360 is not compatible with v1.1.  Please make sure to rebuild any game servers in addition to game
    clients when upgrading to this release.

New in this release:

    DirtySDK (All)
        ProtoTunnel
            Added support for the new 1.1 version of the ProtoTunnel protocol, with the following features:
                - Introduces backwards compatibility for future protocol versions.
                - Control packet data data used in handshaking is still authenticated, but is now unencrypted.
                - Adds fast matching (and re-matching, when the source addr and/or port changes) of packet data to the
                  correct endpoint.
                - Version 1.0 can still be selected and is the default for Xbox 360 operation.  Xbox 360 is not
                  compatible with 1.1 or later versions of the protocol.
                - Version 1.0 is compatible with the previous ProtoTunnel protocol.

        CommUDP
            Added a packet received flag which can be accessed through NetGameUtilStatus('pkrc'). The flag is stored in
            ConnApiClientT GameInfo.uConnFlags. This part of the more specific join error task GOSREQ-184.

    DirtySDK (PS3)
        NetConnPS3
            Added 'nper' selector to NetConnStatus() to allow the user to differentiate a user logging out from PSN
            from PSN disconnect.

    DirtySDK (XboxOne)
        NetConnXboxOne
            Added a critical section to protect against NetConnStatus('xusr') being called from the voip thread.

        VoipHeadsetXboxOne
            Added support for MS voip bystanders (cert requirement).

    DirtySDK (Xenon)
        ConnApiXenon
            Added ConnApiControl('xonl') which can be used to tell ConnApiXenon to no longer attempt game connectivity
            but to only perform Xsession management.

            Added _ConnApiMoveToNextState() for improved logging of ConnApiXenon state transitions.

Changes/fixes in this release:

    DirtySDK (All)
        CryptRSA
            Refactored to make modular exponentiation an iterative process.  This allows it to be spread out over
            multiple updates, which is useful as the operation can take significant amounts of clock time and is
            blocking.  As part of this change, roughly 12k of temporary state that used to be on the stack is now
            moved to the RSA state.

            Switched to use 64-bit math on Linux and PS4, improving execution time on those platforms.

        DirtyCert
            Switched to new gosca.ea.com endpoint using certificate issued against GOS2015 CA.

        DirtySessionManager
            Renamed DirtySessionManagerComplete() to DirtySessionManagerGetSecureIp(), and made that new function
            xenon-only.

        NetConn
            Changed UPnP initialization: if peerport netconn param is not specified, netconn now configures
            protoupnp with default port 3659 instead of default port 0.

        NetGameDist
            Fixed _strNetGameDistDataType to also cover GMDIST_DATA_NODATA.

        ProtoHttp
            Changes to harden protohttp against multi-threaded calls into update, send, and recv functions from
            interfering with one another.

        ProtoSSL
            Enabled ServerName Hello Extension by default.

            Refactored to take advantage of iteratve modular exponentation for SendClientKeyExchange and
            SendCertificateVerify operations.

            Switched CA provider flag from GOS2013 CA to GOS2015 CA.  This allows the new DirtyCert endpoint to
            provision CA certificates.

        QosApi
            Refactored qosapi to improve maintainability, this is extensive changes throughout the
            implementation.

            Changed qosapi so that the different phases of the qos process (latency, bandwidth, firewall)
            do not have dependencies on one another.  In the past firewall could only be done after
            bandwidth, and qos phases would have an impact on the error status of other qos phases.

            Changed qosapi to use the new ip reported by the server rather than the IP address discovered
            by the DNS lookup. The old behavior prevented XBox One from successfully querying the NAT type,
            due to DNS round robin issues.

            Removed the client to client methods QosApiListen() and QosApiRequest() from the qosapi.

        VoipConnection
            Fixed incorrect array size for LocalUsers

    DirtySDK (PS3)
        DirtyNetPS3
            Fixed a race condition that causes memory corruption when calling NetConnShutdown() while a
            hostname lookup is in progress.  NetConnShutdown() now waits until all hostname threads are
            finished.

    DirtySDK (PS4)
        DirtySessionManagerPS4
            Removed DirtySessionManagerComplete().

    DirtySDK (XboxOne)
        NetConnXboxOne
            Fixed a case where the connectivity level can be stuck because of a missing notification from
            Microsoft. When logging out after a resume event it seems that we sometimes do not receive an
            XBoxLiveAccess notification when logging back in after the resume. This fix forces a check of
            the network state after 5 seconds.

    DirtySDK (Xenon)
        ConnApiXenon
            Changed implementation to guarantee that _ConnApiUpdateDemangle() will never be performed before
            XSessionCreate() or XSesssionMigrateHost() completes (on both session host and session members).
            Failure to enforce such a serialization can lead to 2 potential problems:  secure address being
            resolved with an invalid session id (if primary session creation is not complete) or connapi
            exiting ST_MIGRATE state prematurely before firing SESSEVENT (if secondary session migration is
            not complete).

            Changed ConnApiUpdate() such that _ConnApiUpdateDemangle() cannot be called when a session
            creation or a session migration is pending.

            Removed usage of ConnApiSessionManagerStatus('idle') at the beginning of _ConnApiUpdateDemangle():
            no longer required now that calls to _ConnApiUpdateDemangle() from ConnApiUpdate() are limited to
            states where it is allowed.

            Fixed _ConnApiInitClientList() to properly initialize pConnApi->GameServer.ClientInfo.strTunnelKey
            (inspired from connapi.c) This fix is minor because the tunnel key is not used on xenon anyway.

        ConnApiXenonSessionManager
            Enhanced implementation of ConnApiXenonSessionManagerComplete() to make it clear that
            ConnApiXenonSessionManagerGetSecureIp() CANNOT return "in-progress".

            Fixed implementation of ConnApiXenonSessionManagerComplete() to return the right secure ip address for the
            console specified as input. It used to return pRef->iAddrPrimary which is not guaranteed to match the
            specified console.

            Renamed ConnApiXenonSessionManagerComplete() to ConnApiXenonSessionManagerGetSecureIp()

            Removed ConnApiXenonSessionManagerControl('conn') which was dead code because the 'conn' selector is no
            longer supported in DirtySessionManager.

        DirtySessionManagerXenon
            Renamed DirtySessionManagerComplete() to DirtySessionManagerGetSecureIp().

        VoipXenon
            Fixed implementation of VoipSetLocalUser() to properly setup the VoipUserT to be passed to
            _VoipRegisterLocalTalker(). Without this fix, wrong xuids are registered with XHV resulting
             in calls to  pXHVEngine->SubmitIncomingChatData() intermittently failing with ERROR_INVALID_FUNCTION.


EADP Game Services DirtySDK 2015 Winter 0.3.0 - March 16, 2015

    This SDK release was built using the following compiler packages:

        EA Config   2.19.00
        Framework   3.25.00

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.07
        Capilano    CapilanoSDK 6.2.12128.0-proxy
                    capilano_config 1.01.00
        Kettle      kettlesdk 2.000.121-proxy
                    kettle_config 1.02.00
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.07.00
        PS3         ps3sdk 450.001-lite
                    PlayStation3NpEx 450.001
        Win32/WinRT/WinPRT
                    DotNetSDK 4.0
                    VisualStudio 11.0.50727-proxy
                    WindowsSDK 8.0.50727-proxy
                    WindowsPhoneSDK 8.0.9900-proxy
        Xenon       XenonSDK 2.0.21256.3-proxy

New in this release:

    DirtySDK (All)
        CommUDP
            Added a metric to track packet loss prevented by a redundancy mechanic.

        DirtyLib
            Added new NetTickUsec() to return microsecond-precision tick counter for profiling purposes.

        ProtoSSL
            Added GOS2015 SHA2 CA.

            Added VeriSign 2008 Universal SHA2 CA.

        VoipConnection
            Added support for piggy-backing reliable data over voip traffic (data packets and ping packets)
                * Added VoipConnectionReliableBroadcastUser() and VoipConnectionReliableBroadcastOpaque().
                * Added LinkedReliableDataT.
                * Extended VoipConnectionT and VoipConnectionlistT for reliable data support.
                * Changed synopsis of VoipConnectRecvVoiceCbT.

        VoipHeadset
            Added support for piggy-backing reliable data over voip traffic (data packets and ping packets)
                * Changed to adapt to change in synopsis of VoipConnectRecvVoiceCbT.

        VoipPacket
            Added support for piggy-backing reliable data over voip traffic (data packets and ping packets)
                * Added new constants, and ReliableDataInfoT, ReliableDataT, ReliableAckT.

        VoipPriv
            Added support for piggy-backing reliable data over voip traffic (data packets and ping packets)
                * Changed implementation of VOIP_CopyUser() to use ds_memcpy_s() instead of ds_strnzcpy().
                * Changed VoipUserExT to be conditionally compiled in for XBOXONE only.

    DirtySDK (PS4)
        DirtyWebApiPs4
            Added DirtyWebApiUpdate to issue callbacks from same thread as NetConnIdle. This feature can be enabled
            or disabled with 'qcal' control selector. By default the feature is disabled.

    DirtySDK (XboxOne)
        VoipXboxOne
            Added support for piggy-backing reliable data over voip traffic (data packets and ping packets)
                * Added call to VoipConnectionReliableBroadcastUser() from VoipActivateLocalUser().

    DirtySDK (Xenon)
       ConnApiXenon
        Removed the dependency of the CONNAPI_MAXCLIENT from the function ConnApiUpdateDemangle().

Changes/fixes in this release:

    DirtySDK (iOS)
        DirtyLib
            Fixed incorrect critical section length for iOS64

    DirtySDK (PC)
        Build
            Fixed compilation warnings for deprecated winsock2 calls with WindowsSDK 8.1

    DirtySDK (PS3)
        NetConnPS3
            Fixed the processing of the SCE_NP_MANAGER_STATUS_OFFLINE event when we are early on in the connection
            process to prevent us from becoming stuck in +con when PSN is down.

            Fixed the handling of cellNetCtlNetStartDialogUnloadAsync() which was being treated as a synchronous
            function.

    DirtySDK (PS4)
        VoipPS4
            Changed the chat permission to applied on a player to player basis when not using the Playstation Camera

    DirtySDK (WinRT)
        DirtyLibWinRT
            Fixed incorrect thread priority initialization in NetLibCreate().

    DirtySDK (XboxOne)
        NetConnXboxOne
            Fixed a build error that occurs when IEAUSER is not used.

        PrivilegeApiXboxOne
            Fixed a memory stomp.

    DirtySDK (Xenon)
        Build
            Fixed a build break in the post build step of ATGFramework, which is used for the Xenon samples.

        ConnApiXenon
            Fixed secure address resolution not being done for new connections to be established after host migration.

        FriendApiXenon
            Fixed a potential issue where friend data could be populated in the incorrect slot.


EADP Game Services DirtySDK 2015 Winter 0.2.0 - January 28, 2015

    This SDK release was built using the following compiler packages:

        EA Config   2.19.00
        Framework   3.25.00

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.05-1
        Capilano    CapilanoSDK 6.2.11785.0-proxy
                    capilano_config 1.00.14
        Kettle      kettlesdk 2.000.091-proxy
                    kettle_config 1.01.08
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.07.00
        PS3         ps3sdk 450.001-lite
                    PlayStation3NpEx 450.001
        Win32/WinRT/WinPRT
                    DotNetSDK 4.0
                    VisualStudio 11.0.50727-proxy
                    WindowsSDK 8.0.50727-proxy
                    WindowsPhoneSDK 8.0.9900-proxy
        Xenon       XenonSDK 2.0.21256.3-proxy

New in this release:

    DirtySDK (All)
        PrivilegeApi
            Added PRIVILEGEAPI_PRIV_INVALID privilege for ease of use.

    DirtySDK (PC)
        VoipSpeex
            Added the dll export tag to extern const VoipCodecDefT VoipSpeex_CodecDef.

    DirtySDK (PS3)
        NetConnPS3
            Added logging for connection status changes.

    DirtySDK (PS4)
        DirtySessionMangerPS4
            Added session lock support (prevent user from joining). A PS4 session can not be locked/unlocked
            using the 'lock' selector.

        NetConnPS4
           Added logging for connection status changes.

    DirtySDK (XboxOne)
        NetConnXboxOne
            Removed automatic reset user list support when IEAUSER is used.

            Added logging for connection status changes

        UserApiXboxOne
            Added Support for ProfileChanged Event. Please use the new UserApiNotifyDataT::ProfileUpdateData type
            and UserApiNotifyTypeE::USERAPI_NOTIFY_PROFILE_UPDATE to listen for the event.

    DirtySDK (Xenon)
        NetConnXenon
            Added logging for connection status changes

Changes/fixes in this release:

    DirtySDK (All)
        ConnApi
            Fixed a bug where ConnApi will tried to initialize clients with NULL machine address.

        DirtyMem
            Fixed to export DirtyMemAlloc and DirtyMemFree when building as a DLL.

            Added include of <stdlib.h> to prevent malloc() and free() calls for default memory allocators compiling
            out when building as a DLL.

        DirtyPng
            Fixed a wrong usage of ds_strnzcpy that leads to a memory stomp.

        NetConn
            Fixed NetConnStatus() not propagating the iData parameter to SocketInfo() for selectors that are passed
            through.

        ProtoHttp
            Fixed a memory pointer issue when sending chunked http transaction faster than the network can keep up
            that could lead to potentially sending parts of uninitialized memory over the network.

            Changed to check status of open keep-alive connection in the DONE state, to detect server-closed
            connections when they are closed, rather than waiting until the ProtoHttp ref is used in a new transaction
            or destroyed.

        VoipConnection
            Fixed an integration error. VoipConnectionStartup() will now have a max player check. If for any reason
            voip system is not started properly voip setup will be skipped by Blaze.

    DirtySDK (iOS)
        DirtyLib
            Fixed wrong critical section length for iOS64.

    DirtySDK (PS4)
        DirtyWebApiPS4
            Changed priority and scheduling setting of internal threads in favor of less aggressive threading
            patterns to avoid negatively impacting game with unnecessary thread switches during game play.

        NetConnPS4
            Fixed an error which prevents users from going online if PSN does not respond quickly to the parental
            settings query.

        PrivilegeApiPS4
            Fixed an integration error, which caused _PrivilegeApiUpdateDialogStatus callback not to be removed properly.

    DirtySDK (XboxOne)
        ProtoMangleXboxOne
            Fixed a potential crash if a client is removed and re-added while corresponding security association
            creation is in progress.


EADP Game Services DirtySDK 2015 Winter 0.1.0 - December 4, 2014

    This SDK release was built using the following compiler packages:

        EA Config   2.19.00
        Framework   3.25.00

        Android     androidsdk 18-2
                    androidndk r9c
                    android_config 1.06.05-1
        Capilano    CapilanoSDK 6.2.11785.0-proxy
                    capilano_config 1.00.14
        Kettle      kettlesdk 2.000.071-proxy
                    kettle_config 1.01.07
        iPhone      ios_config 1.01.05
                    iphonesdk 7.0-proxy-5
        OSX         UnixGCC 0.05.00
                    osx_config 1.00.01
        Linux/Unix  UnixClang  0.07.00
        PS3         ps3sdk 450.001-lite
                    PlayStation3NpEx 450.001
        Win32/WinRT/WinPRT
                    DotNetSDK 4.0
                    VisualStudio 11.0.50727-proxy
                    WindowsSDK 8.0.50727-proxy
                    WindowsPhoneSDK 8.0.9900-proxy
        Xenon       XenonSDK 2.0.21256.3-proxy

    *** Important - Complementary integration guidelines available on Confluence ***
        DirtySDK 2015 Winter Upgrade available here:
        https://docs.developer.ea.com/display/dirtysock/DirtySDK+2015+Winter+Upgrade+Guide

New in this release:

    DirtySDK (All)
        ProtoSSL
            Added support for AES-128-GCM-SHA256 and AES-256-GCM-SHA384 cipher suites.

            Added two obsolete alternate definitions for sha1withRSAEncryption for compatibility with some software
            that generates certificates using these object IDs, for example makecert.exe in WindowsSDK.

        ProtoTunnel
            Enhanced debug logging for the 'bnds' selector.

        Voip
            Enhanced API for user registration to better support MLU (Multiple Local Users) scenarios. Every local user
            should now be registered with the voip sub-system using VoipSetLocalUser() in order for its headset status
            info to be available for queries. To additionally get fully functional voip, local users must be further
            activated with VoipActivateLocalUser(), which promotes the user to a "participating" state. Basically any
            user being pulled into the game should be a participating user. Associated public api impact:
                * New synopsis for VoipSetLocalUser()
                * New function to promote local users to "participating" state: VoipActivateLocalUser()

        VoipGroup
            Enhanced VoipGroup api. It was re-aligned with changes to the voip api called out above.
                * New function to promote local users to "participating" state: VoipGroupActivateLocalUser()

    DirtySDK (PC)
        DirtyErrPC
            Added DirtyErrPC implementation with pc-specific errors.

        ProtoPingPC
            Added a new version of protoping for PC, using ICMPSendEcho2() API.  This API allows use of ICMP when an
            application is run without administrator privilege, which is required for use of RAW sockets employed with
            protoping.c.

    DirtySDK (PS4)
        VoipHeadsetPS4
            Enhanced _VoipHeadsetIsLocalVoiceFrameReady() to detect voice readiness quicker.

            Added '-pbk' and '+pbk' selectors to better support our voip channel feature under MLU scenarios.

    DirtySDK (WinRT/WintPRT)
        DirtyLibWinRT
            Enhanced NetPrintfCode() to use OutputDebugStringA() instead of OutputDebugStringW().

    DirtySDK (XboxOne)
        UserApiXboxOne
            Added support for the 'avsz' selector. Now different profile pictures sizes can be fetched.

        VoipXboxOne
            Added selectors:
            VoipStatus 'pcac' - returns true if party chat is active
            VoipStatus 'pcsu' - returns true if party chat is currently suspended
            VoipControl 'pcsu' - takes iValue as a bool, TRUE suspend party chat, FALSE resume it
            In order for VoipControl 'pcsu' to work you must add to the appxmanifest.xml:
            <mx:Extension Category="xbox.multiplayer">
                <mx:XboxMultiplayer CanSuppressPartyChat="true" />
            </mx:Extension>

Changes/fixes in this release:

    DirtySDK (All)
        General
            Replaced APIs deprecated by Microsoft with generic equivalents.

        ConnApi
            Changed synopsis of ConnApiOnline(): it no longer has a pSelfAddr parameter.

            Changed ConnApiUserInfoT.uClientFlags to ConnApiUserInfoT.uFlags.

            Changed ConnApiClientInfoT.uMachineId to ConnApiCLientInfoT.uId.

            Removed multiple virtual machine mode: connapi 'mvtm' status and control selectors no longer exist.
            The implementation is now multiple-virtual-machine capable by default.

            Removed ConnApiUserInfoT, ConnApiAddUser() and ConnApiRemoveUser() for all platforms except xbox360.

            Removed ConnApiFindClient(), then renamed ConnApiFindClientById() to ConnApiFindClient().

            Removed ConnApiClientInfoT.strUniqueId

            Removed _ConnApiDefaultCallback() and made the debug logging client-centric instead of user-centric.

        DirtyNet
            Changed all dirtynet files to log unsupported status selectors the same way.

        NetGameLink
            Changed implementation to avoid code duplication: moved packet loss calculation logics into a static
            function.

            Changed the names of several member variables in the NetGameLinkStatT structure. The changes are listed below:
            bps  to outbps
            rps  to outrps
            nps  to outnps
            pps  to outpps
            rpps to outrpps

        ProtoSSL
            Changed to request TLS1.2 instead of TLS1.1.  Servers are still allowed to select any version from TLS1.2
            down to SSLv3.

            Changed to use 64-bit time for certificate expiration checking, so certificates created with expiration
            times far in the future won't fail validation.

            Changed to harden protossl against multi-threaded use causing obscure secure failures.

        VoipConnection
            Removed platform specificities in _VoipConnectionInit().

        VoipPacket
            Changed value of VOIP_PACKET_STATUS_FLAG_METADATA from 2 to 1.

    DirtySDK (PS4)
        DirtyWebApiPS4
            Removed DirtyWebApiCreate()/DirtyWebApiCreateEx() and renamed DirtyWebApiCreateEx2() to
            DirtyWebApiCreate().

            Changed WebApi threads to only wakeup when there are jobs queued.

        VoipHeadsetPS4
            Fixed establishment of connections between a decoder port and all local speaker ports when a user is added
            after a decoder was created.

    DirtySDK (XboxOne)
        DirtyNetXboxOne
            Fixed _SocketAddrMapGet() to no longer include the port value when trying to match an input ipv6 address
            with an existing mapping. This change is required for multi-hub test bench to be functional on xboxone:
            because hubs all bind to different game port, the inbound traffic source port may not be same as the ipv6
            address mapped when resolving secure device address for the local console.

        VoipHeadsetXboxOne
            Deprecated support for pre-March2014 XDKs (_XDK_VER < 10698).

            Replaced VOIPHEADSET_VOICELIB_DEBUG with VOIPHEADSET_DEBUG.

    DirtySDK (Xenon)
        ConnnApiXenon
            Changed internal usage of some control selectors: moved call to ConnApiXenonManagerControl('self')
            and VoipGroupControl('lusr') from ConnApiOnline() to _ConnApiInitClientList()

            Fixed connapixenon to properly update the remote tunnel port with the peer's internally bound port
            when the internal address (i.e. internal to NAT scope) is used to reach that peer.

            Fixed a logical error forcing the voip connection attempt to fail early.
