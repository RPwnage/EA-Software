<project>

    <!-- convenience names -->
    <property name="modulename"         value="offering" />
    <property name="module.src"         value="${package.DirtySDK.dir}/sample/${config-system}/${modulename}/source.txt"      />

    <!-- add this module to the list of modules to build -->
    <property name="runtime.buildmodules">
        ${property.value}
        ${modulename}
    </property>

    <property name="runtime.${modulename}.builddependencies">
        VisualStudio
    </property>

    <!-- declare the type of module to build -->
    <property name="runtime.${modulename}.buildtype" value="WindowsProgram" />

    <!-- only add a build dependency on the DS lib if samples are not being linked against a prebuilt DS -->
    <do unless="@{PropertyTrue('DirtySDK-skip-lib-generation')}">
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${dirtysock_modulename}
        </property>
    </do>

    <do if="${config-system} == 'pc' or ${config-system} == 'pc64'">
        <!-- pc prebuild for sln -->
        <property name="runtime.${modulename}.vcproj.pre-build-step">
            ${nant.location}\nant.exe runtime.${modulename}.prebuildtarget -buildfile:${nant.project.buildfile} -buildroot:${nant.project.buildroot} -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config}
        </property>
    </do>
    <!-- END FOR SLN Generation -->

    <!-- add this module's includes to the general includes -->
    <property name="runtime.${modulename}.includedirs">
        ${package.DirtySDK.includedirs}
        ${package.DirtySDK.dir}/sample/${config-system}/samplecore
        ${package.DirtySDK.dir}/sample/common/include

    </property>
    
    <!-- inherit warning suppression from dirtysock -->
	<property name="runtime.${modulename}.warningsuppression">
		${runtime.${dirtysock_modulename}.warningsuppression}
		-wd4201
	</property>    
	
	<!-- inherit defines from dirtysock -->
	<property name="runtime.${modulename}.defines">
	    ${runtime.${dirtysock_modulename}.defines}
	</property>

    <!-- now bring in the list of files to build into this module -->
   	<fileset basedir="${package.DirtySDK.dir}" name="runtime.${modulename}.sourcefiles">
   	    <includes fromfile="${module.src}" />
<!--        <includes fromfile="${package.DirtySDK.dir}/sample/pc/${modulename}/source.txt" /> -->
    </fileset>

    <!-- add in other libraries to link with -->
    <!-- *** I had to add the .res file to the libs fileset here because 
         adding it in the prebuildtarget (as shown in the example) didn't work. *** -->
        <fileset name="runtime.${modulename}.libs" append="true">
          <includes name="comctl32.lib" asis="true"  />
          <includes name="iphlpapi.lib" asis="true" />
          <includes name="ws2_32.lib" asis="true" />
          <includes name="${package.configbuilddir}/${modulename}/Offering.res" asis="true"/>
        </fileset>

    <!-- I believe this enables us to link with the libs created by this (DirtySDK) package -->
    <fileset name="runtime.${modulename}.libs" append="true">
        <includes name="${package.configlibdir}/*${lib-suffix}" />
    </fileset>

    <!-- compile the .rc file into a .res file before linking. -->
    <!-- *** For some reason, when I use ${modulename} in the target name
         for this prebuildtarget, it skips it completely.  Thus, I'm just
         using thq value of ${modulename} (chatter2 in this case), which 
         (for the moment) is working... *** -->
    <!-- *** It appears that prebuildtargets occur before the build... :)
         Thus, ${modulename} will either have no value, or the value from 
         the last build that used this value.  I had to remove it from 
         the res.outputdir property as well, or it was using the previous
         sample name rather than "chatter2" as I had hoped. *** -->
    <target name="runtime.offering.prebuildtarget" hidden="true">
        <property name="res.name" value="Offering.res" />
        <property name="res.resourcefile" value="${package.DirtySDK.dir}/sample/pc/offering/source/Offering.rc" />
        <!-- Need to put a directory on to the end of the output dir -->
        <property name="res.outputdir" value="${package.configbuilddir}/offering" />
        <fileset name="res.sourcefiles">
            <includes name="${res.resourcefile}" />
        </fileset>
        
        <call target="build-res" force="true" />
    </target>
    
</project>
