<project>

    <!-- convenience names -->
    <property name="modulename"         value="libstat"                                                   />
    <property name="module.src"         value="${package.DirtySDK.dir}/sample/common/${modulename}/source.txt"      />

    <!-- add this module to the list of modules to build -->
    <property name="runtime.buildmodules">
        ${property.value}
        ${modulename}
    </property>

    <!-- declare the type of module to build -->
    <property name="runtime.${modulename}.buildtype" value="DSProgram" />

    <!-- only add a build dependency on the DS lib if samples are not being linked against a prebuilt DS -->
    <do unless="@{PropertyTrue('DirtySDK-skip-lib-generation')}">
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${dirtysock_modulename}
        </property>
    </do>

    <do if="${config-system} == 'xenon'">
        <!-- xenon specific dependencies on other modules -->
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${property.value}
            atgframework
        </property>
    </do>

    <!-- define build dependencies for each platform -->

    <!-- PS3 build dependencies -->
    <property name="${modulename}.builddependencies.ps3">
    </property>
    <!-- PS3 use dependencies (PlayStation3NPEx can't be a build dependency like how the others are setup or the sln generation wont get the libs)-->
    <do if="${config-system} == 'ps3'">
      <property name="runtime.${modulename}.usedependencies">
        ${property.value}
        PlayStation3NPEx
      </property>
    </do>

    <!-- PC build dependencies -->
    <property name="${modulename}.builddependencies.pc">
        VisualStudio
    </property>

    <!-- PC64 build dependencies -->
    <property name="${modulename}.builddependencies.pc64">
      VisualStudio
    </property>

    <!-- define dependencies -->
    <property name="${modulename}.builddependencies.xenon">
    </property>
    <property name="${modulename}.usedependencies.xenon">
        xenonsdk
    </property>

    <!-- Revolution build dependencies -->
    <property name="${modulename}.builddependencies.rev">
        RevolutionDWC_DL
        RevolutionEX
        RevolutionSDK
    </property>

    <!-- include the build dependency for the platform we're buildling -->
    <property name="runtime.${modulename}.builddependencies">
        ${${modulename}.builddependencies.${config-system}}
    </property>

    <!-- add this module's includes to the general includes -->
    <property name="runtime.${modulename}.includedirs">
        ${package.DirtySDK.includedirs}
        ${package.DirtySDK.dir}/sample/${config-system}
    </property>

    <!-- inherit warning suppression from dirtysock -->
    <property name="runtime.${modulename}.warningsuppression">
        ${runtime.${dirtysock_modulename}.warningsuppression}
    </property>

    <!-- inherit defines from dirtysock -->
    <property name="runtime.${modulename}.defines">
        ${runtime.${dirtysock_modulename}.defines}
    </property>

    <!-- remove -unused option from revolution link -->
    <optionset name='DSProgram'>
        <option name='link.options'>
          @{StrReplace(@{OptionSetGetValue('DSProgram', 'link.options')}, '-unused', '')}
        </option>
    </optionset>

    <!-- now bring in the list of files to build into this module -->
    <fileset basedir="${package.DirtySDK.dir}" name="runtime.${modulename}.sourcefiles">
        <includes fromfile="${module.src}" />
    </fileset>

    <!-- allow debug builds to link with libs ending with "d" (debug libs), and
         dev-opt build to link with non-debug libs. -->
    <!-- *** This should likely be moved to a more central place, so it doesn't need
             to be in every sample file. Currently only used for xbox 360. *** -->
    <property name="debug-lib-suffix" value="" if="${config-name} == 'dev-opt'" />
    <property name="debug-lib-suffix" value="d" if="${config-name} != 'dev-opt'" />

    <!-- pc libs -->
    <fileset name="runtime.${modulename}.libs.pc" append="true" if="${config-system} == 'pc' or ${config-system} == 'pc64'">
        <includes name="iphlpapi.lib" asis="true" />
        <includes name="tapi32.lib" asis="true" />
        <includes name="ws2_32.lib" asis="true" />
    </fileset>

    <!-- ps3 libs -->
    <fileset name="runtime.${modulename}.libs.ps3" append="true" if="${config-system} == ps3">
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsysutil_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libnet_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libnetctl_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsysmodule_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libsysutil_np_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/librtc_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libaudio_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libmic_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libadec_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libcelpenc_stub.a" asis="true"  />
        <includes name="${package.ps3sdk.appdir}/target/ppu/lib/libcelp8enc_stub.a" asis="true"  />
    </fileset>

    <!-- xenon libs -->
    <fileset name="runtime.${modulename}.libs.xenon" append="true" if="${config-system} == xenon">
        <includes name="${package.xenonsdk.appdir}/lib/xbox/xonline${debug-lib-suffix}.lib" asis="true"  />
        <includes name="${package.xenonsdk.appdir}/lib/xbox/xhv${debug-lib-suffix}2.lib" asis="true"  />
    </fileset>
    <do if="${config-name} == dev-opt">
        <fileset name="runtime.${modulename}.libs.xenon" append="true" if="${config-system} == xenon">
            <includes name="${package.xenonsdk.appdir}/lib/xbox/xbdm.lib" asis="true"  />
        </fileset>
    </do>

    <fileset name="runtime.${modulename}.libs" append="true">
        <includes name="${package.configlibdir}/*${lib-suffix}"/>
    </fileset>

</project>
