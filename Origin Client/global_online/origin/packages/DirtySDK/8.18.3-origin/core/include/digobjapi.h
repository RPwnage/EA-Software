/*H********************************************************************************/
/*!
    \File digobjapi.h

    \Description
        expose Digital Object BESL services through this API

    \Notes
        None.

    \Copyright
        Copyright (c) Electronic Arts 2006. ALL RIGHTS RESERVED.

    \Version 1.0 05/30/2006 (tchen) First Version
*/
/********************************************************************************H*/

#ifndef _digobjapi_h
#define _digobjapi_h

/*** Include files ****************************************************************/

/*** Defines **********************************************************************/

#define DIGOBJAPI_DOMAIN_MAXLEN       (32)        //!< max game name length
#define DIGOBJAPI_OBJID_MAXLEN       (32)        //!< max object ID length
#define DIGOBJAPI_SPOOLSIZE             (4096)      //!< size of spool buffer
#define DIGOBJAPI_MAXOBJ                (64)        //!< max digital objects per user/regcode


/*** Macros ***********************************************************************/

/*** Type Definitions *************************************************************/


//! digobjapi events
typedef enum DigObjApiEventE
{
    DIGOBJAPI_EVENT_ERROR = -1, //!< an error occurred - call GetLastError()

    DIGOBJAPI_EVENT_NONE = 0,   //!< null event
    DIGOBJAPI_EVENT_RDM,        //!< redeem event
    DIGOBJAPI_EVENT_FET,        //!< fetch event
    DIGOBJAPI_EVENT_DONE,       //!< data transfer operation is complete
    
    DIGOBJAPI_NUMEVENTS         //!< number of events (not including error event)
} DigObjApiEventE;

// lockerapi errors
typedef enum DigObjApiErrorE
{
    /*
       Errors returned by server
    */
    DIGOBJAPI_ERROR_NONE,           //!< no error

    // generic errors
    DIGOBJAPI_ERROR_SERVER,         //!< an unknown server error occurred
    DIGOBJAPI_ERROR_LKEYINVALID,    //!< invalid lkey
    DIGOBJAPI_ERROR_CODEINVALID,    //!< invalid regcode
    DIGOBJAPI_ERROR_CODEUSED,       //!< already used regcode
    DIGOBJAPI_ERROR_PERSINVALID,    //!< invalid user
    DIGOBJAPI_ERROR_CMDINVALID,    //!< invalid command

    /*
       Errors generated by client
    */
    DIGOBJAPI_ERROR_CLIENT = 100,   //!< an unknown client error occurred
    DIGOBJAPI_ERROR_TIMEOUT        //!< server timeout
} DigObjApiErrorE;

//! private module state
typedef struct DigObjApiRefT DigObjApiRefT;

//! lockerapi event handler
typedef void (DigObjApiCallbackT)(DigObjApiRefT *pDigObjApi, DigObjApiEventE eEvent, void *pUserData);

//! a single Digital Object Id
typedef struct DigObjApiIdT
{
    char strDomain[DIGOBJAPI_DOMAIN_MAXLEN];
    char strID[DIGOBJAPI_OBJID_MAXLEN];
} DigObjApiIdT;


/*** Variables ********************************************************************/

/*** Functions ********************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

// create digobj module
DigObjApiRefT *DigObjApiCreate(const char *pServer, DigObjApiCallbackT *pCallback, void *pUserData);

// destroy digobj module
void DigObjApiDestroy(DigObjApiRefT *pDigObjApi);

// set login info
void DigObjApiSetLoginInfo(DigObjApiRefT *pDigObjApi, const char *pLKey, const char *pPersona);

// redeem code to get digital objects
void DigObjApiRedeemCode(DigObjApiRefT *pDigObjApi, const char *pRegCode);

// get list of digital objects for user
void DigObjApiFetchObjectListForUser(DigObjApiRefT *pDigObjApi, const char *pOwner);

// get current number of digital objects
int32_t DigObjApiGetObjectCount(DigObjApiRefT *pDigObjApi);

// get digital object at index
const DigObjApiIdT* DigObjApiGetObjectAtIndex(DigObjApiRefT *pDigObjApi, uint32_t uIdx);

// get most recent event (if not using callback)
DigObjApiEventE DigObjApiGetLastEvent(DigObjApiRefT *pDigObjApi);

// get most recent error
DigObjApiErrorE DigObjApiGetLastError(DigObjApiRefT *pDigObjApi);

#ifdef __cplusplus
};
#endif

#endif // _digobjapi_h
