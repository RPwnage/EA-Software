<project>
    
    <!-- convenience names -->
    <property name="modulename"         value="xnlogon"                                                   />
    <property name="module.src"         value="${package.DirtySDK.dir}/sample/${config-system}/${modulename}/source.txt"      />

    <!-- add this module to the list of modules to build -->
    <property name="runtime.buildmodules">
        ${property.value}
        ${modulename}
    </property>

    <!-- define dependencies -->
    <property name="runtime.${modulename}.usedependencies.xenon">
        xenonsdk
    </property>

    <!-- declare the type of module to build -->
    <property name="runtime.${modulename}.buildtype" value="Program" />

    <!-- only add a build dependency on the DS lib if samples are not being linked against a prebuilt DS -->
    <do unless="@{PropertyTrue('DirtySDK-skip-lib-generation')}">
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${dirtysock_modulename}
        </property>
    </do>

    <!-- add this module's includes to the general includes -->
    <property name="runtime.${modulename}.includedirs">
        ${package.DirtySDK.includedirs}
        ${package.DirtySDK.dir}/sample/common/include
        ${package.DirtySDK.dir}/sample/${config-system}
        ${package.DirtySDK.dir}/sample/${config-system}/xdksamples/atg
    </property>
    
    <!-- inherit warning suppression from dirtysock -->
	<property name="runtime.${modulename}.warningsuppression">
		${runtime.${dirtysock_modulename}.warningsuppression}
		-wd4265
	</property>    
	
	<!-- inherit defines from dirtysock -->
	<property name="runtime.${modulename}.defines">
	    ${runtime.${dirtysock_modulename}.defines}
	</property>
	
    <!-- now bring in the list of files to build into this module -->
   	<fileset basedir="${package.DirtySDK.dir}" name="runtime.${modulename}.sourcefiles">
        <includes fromfile="${module.src}" />
    </fileset>

    <!-- add in platform-dependent network libs that are required for DirtySDK -->
    <task name="AddDirtySDKLibsToModule" module="runtime.${modulename}"/>

    <fileset name="runtime.${modulename}.libs" append="true">
          <includes name="${package.configlibdir}/*${lib-suffix}"/>
	  </fileset>

    <!-- add XEXSECTION to link step for Xenon - this is required for matchmaking to work correctly --> 
    <property name="link.template.commandline">
        ${property.value}
        /XEXSECTION:454107D5=${package.DirtySDK.dir}\sample\common\tester2\source\xenon\spa.bin
    </property>

    <target name="runtime.xnlogon.postbuildtarget" hidden="true">
        <echo message="RUNNING xnlogon postbuild target" />
        
        <!-- first convert the EXE image to an xbox-live happy version -->
		<exec program="${package.xenonsdk.appdir}/bin/win32/imagexex.exe" workingdir="${package.builddir}/${config}/build">
		    <arg value="/IN:${package.builddir}/${config}/build/xnlogon/xnlogon.xex"/>
		    <arg value="/OUT:${package.builddir}/${config}/bin/xnlogon.xex"/>
            <arg value="/CONFIG:${package.DirtySDK.dir}\sample\xenon\xexconfig.xml"/>
		</exec>

        <!-- copy the xex file to the xbox 360 -->
		<!-- It's important to use back-slashes ("\") instead of forward slashes when calling xbcp. -->		
		<!-- setting "failonerror" to false means the build will continue with the target xbox 360 off -->
        <choose>
            <!-- Deploy to the targets -->
            <do if="@{PropertyExists('TargetXenon')}">
                <foreach item="String" in="${TargetXenon}" property="DeployTarg">
                    <exec program="${package.xenonsdk.appdir}\bin\win32\xbcp.exe" failonerror="false">
                        <arg value="/y /t /f /r /s /X:${DeployTarg}"/>
                        <arg value="${package.builddir}\${config}\bin\xnlogon.xex"/>
                        <arg value="xe:\${Xenon-Dest-Dir}"/>
                    </exec>
                </foreach>
            </do>
            <!-- This is a build, or the Target List was empty. Only deploy to default. -->
            <do>
                <choose>
                    <!-- BuildStudio build -->
                    <do if="@{PropertyExists('Xenon-Dest-Dir')}">
                        <exec program="${package.xenonsdk.appdir}\bin\win32\xbcp.exe" failonerror="false">
                            <arg value="/y /t /f /r /s "/>
                            <arg value="${package.builddir}\${config}\bin\xnlogon.xex"/>
                            <arg value="xe:\${Xenon-Dest-Dir}"/>
                        </exec>
                    </do>
                    <!-- Continuous build -->
                    <do>
                        <exec program="${package.xenonsdk.appdir}\bin\win32\xbcp.exe" failonerror="false">
                            <arg value="/y /t /f /r /s "/>
                            <arg value="${package.builddir}\${config}\bin\xnlogon.xex"/>
                            <arg value="xe:\${package.name}"/>
                        </exec>
                    </do>
                </choose>
            </do>
        </choose>
    </target>        
</project>
