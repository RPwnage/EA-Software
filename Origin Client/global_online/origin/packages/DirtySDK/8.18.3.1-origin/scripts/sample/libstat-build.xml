<project>

    <!-- convenience names -->
    <property name="modulename"         value="libstat"                                                   />
    <property name="module.src"         value="${package.DirtySDK.dir}/sample/common/${modulename}/source.txt"      />

    <!-- add this module to the list of modules to build -->
    <property name="runtime.buildmodules">
        ${property.value}
        ${modulename}
    </property>

    <!-- declare the type of module to build -->
    <property name="runtime.${modulename}.buildtype" value="DSProgram" />

    <!-- only add a build dependency on the DS lib if samples are not being linked against a prebuilt DS -->
    <do unless="@{PropertyTrue('DirtySDK-skip-lib-generation')}">
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${dirtysock_modulename}
        </property>
    </do>

    <do if="${config-system} == 'xenon'">
        <!-- xenon specific dependencies on other modules -->
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${property.value}
            atgframework
        </property>
    </do>

    <!-- define build dependencies for each platform -->

    <!-- PS3 build dependencies -->
    <property name="${modulename}.builddependencies.ps3">
    </property>
    <!-- PS3 use dependencies (PlayStation3NPEx can't be a build dependency like how the others are setup or the sln generation wont get the libs)-->
    <do if="${config-system} == 'ps3'">
      <property name="runtime.${modulename}.usedependencies">
        ${property.value}
        PlayStation3NPEx
      </property>
    </do>

    <!-- PC build dependencies -->
    <property name="${modulename}.builddependencies.pc">
        VisualStudio
    </property>

    <!-- PC64 build dependencies -->
    <property name="${modulename}.builddependencies.pc64">
      VisualStudio
    </property>

    <!-- define dependencies -->
    <property name="${modulename}.builddependencies.xenon">
    </property>
    <property name="${modulename}.usedependencies.xenon">
        xenonsdk
    </property>

    <!-- Revolution build dependencies -->
    <property name="${modulename}.builddependencies.rev">
        RevolutionDWC_DL
        RevolutionEX
        RevolutionSDK
    </property>

    <!-- include the build dependency for the platform we're buildling -->
    <property name="runtime.${modulename}.builddependencies">
        ${${modulename}.builddependencies.${config-system}}
    </property>

    <!-- add this module's includes to the general includes -->
    <property name="runtime.${modulename}.includedirs">
        ${package.DirtySDK.includedirs}
        ${package.DirtySDK.dir}/sample/${config-system}
    </property>

    <!-- inherit warning suppression from dirtysock -->
    <property name="runtime.${modulename}.warningsuppression">
        ${runtime.${dirtysock_modulename}.warningsuppression}
    </property>

    <!-- inherit defines from dirtysock -->
    <property name="runtime.${modulename}.defines">
        ${runtime.${dirtysock_modulename}.defines}
    </property>

    <!-- remove -unused option from revolution link -->
    <optionset name='DSProgram'>
        <option name='link.options'>
          @{StrReplace(@{OptionSetGetValue('DSProgram', 'link.options')}, '-unused', '')}
        </option>
    </optionset>

    <!-- now bring in the list of files to build into this module -->
    <fileset basedir="${package.DirtySDK.dir}" name="runtime.${modulename}.sourcefiles">
        <includes fromfile="${module.src}" />
    </fileset>

    <!-- add in platform-dependent network libs that are required for DirtySDK -->
    <task name="AddDirtySDKLibsToModule" module="runtime.${modulename}"/>

    <fileset name="runtime.${modulename}.libs" append="true">
        <includes name="${package.configlibdir}/*${lib-suffix}"/>
    </fileset>

</project>
