<project>

    <!-- convenience names -->
    <property name="modulename"         value="T2Client" />
    <property name="module.src"         value="${package.DirtySDK.dir}/sample/common/tester2/project/${config-system}/clientsource.txt"      />

    <!-- add this module to the list of modules to build -->
    <property name="runtime.buildmodules">
        ${property.value}
        ${modulename}
    </property>

    <property name="runtime.${modulename}.builddependencies">
        VisualStudio
    </property>

    <!-- declare the type of module to build -->
    <property name="runtime.${modulename}.buildtype" value="WindowsProgram" />

    <!-- only add a build dependency on the DS lib if samples are not being linked against a prebuilt DS -->
    <do unless="@{PropertyTrue('DirtySDK-skip-lib-generation')}">
        <property name="runtime.${modulename}.runtime.moduledependencies">
            ${dirtysock_modulename}
        </property>
    </do>

    <do if="${config-system} == 'pc' or ${config-system} == 'pc64'">
    <!-- pc prebuild for sln -->
        <property name="runtime.${modulename}.vcproj.pre-build-step">
            ${nant.location}\nant.exe runtime.${modulename}.prebuildtarget -buildfile:${nant.project.buildfile} -buildroot:${nant.project.buildroot} -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config}
        </property>
    </do>
    <!-- post build step for sln -->  
    <property name="runtime.${modulename}.vcproj.post-build-step" value="${nant.location}\nant.exe runtime.${modulename}.postbuildtarget -buildfile:${nant.project.buildfile} -buildroot:${nant.project.buildroot} -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config}"/>
    <!-- END FOR SLN Generation -->  

    <!-- add this module's includes to the general includes -->
    <property name="runtime.${modulename}.includedirs">
        ${package.DirtySDK.includedirs}
        ${package.DirtySDK.dir}/sample/common/include
        ${package.DirtySDK.dir}/sample/common/tester2/source
        ${package.DirtySDK.dir}/sample/common/tester2/source/${config-system}/resource
        ${package.DirtySDK.dir}/sample/common/tester2/contrib/t2xbdm/include/xenon
    </property>
    
    <!-- inherit warning suppression from dirtysock -->
	<property name="runtime.${modulename}.warningsuppression">
		${runtime.${dirtysock_modulename}.warningsuppression}
        -wd4365
	</property>    
	
	<!-- inherit defines from dirtysock -->
	<property name="runtime.${modulename}.defines">
	    ${runtime.${dirtysock_modulename}.defines}
	</property>
	    
    <!-- now bring in the list of files to build into this module -->
    <fileset basedir="${package.DirtySDK.dir}" name="runtime.${modulename}.sourcefiles">
        <includes fromfile="${module.src}" />
    </fileset>

    <!-- add in platform-dependent network libs that are required for DirtySDK -->
    <task name="AddDirtySDKLibsToModule" module="runtime.${modulename}"/>
  
    <!-- add in other libraries to link with -->
    <fileset name="runtime.${modulename}.libs.pc" append="true">
        <includes name="tapi32.lib" asis="true"  />
        <includes name="${package.configbuilddir}/${modulename}/T2Client.res" asis="true"/>
    </fileset>

    <fileset name="runtime.${modulename}.libs" append="true">
        <includes name="${package.configlibdir}/*${lib-suffix}"/>
    </fileset>

    <do if="${config-system} == pc">
        <!-- compile the .rc file into a .res file before linking. -->
        <!-- *** It appears that prebuildtargets occur before the build.
             Thus, ${modulename} will either have no value, or the value from 
             the last build that used this value.  I had to remove it from 
             the res.outputdir property as well, or it was using the previous
             sample name rather than "chatter2" as I had hoped. *** -->
        <target name="runtime.T2Client.prebuildtarget" hidden="true">
            <property name="res.name" value="T2Client.res" />
            <property name="res.resourcefile" value="${package.DirtySDK.dir}/sample/common/tester2/source/pc/resource/T2Client.rc" />
            <!-- Need to put a directory on to the end of the output dir -->
            <property name="res.outputdir" value="${package.configbuilddir}/T2Client" />
            <fileset name="res.sourcefiles">
                <includes name="${res.resourcefile}" />
            </fileset>
        
            <call target="build-res" force="true" />
        </target>

        <!-- HACK: I can't seem to get the property "package.xenonsdk.appdir" to work,
            perhaps because this is a PC build.  Anyway, this is how we get the 
            value in the first place (see Initialize.xml in the Xdk package. -->
	    <property name="package.xenonsdk.appdir.HACK" value="C:" />
	    <property if="@{RegistryValueExists('LocalMachine', 'SOFTWARE\Microsoft\Xbox\2.0\SDK', 'InstallPath')}" name="package.xenonsdk.appdir.HACK" value="@{RegistryGetValue('LocalMachine', 'SOFTWARE\Microsoft\Xbox\2.0\SDK', 'InstallPath')}" />

        <!-- HACK: after the build is done, copy the xenon dlls to the bin directory -->
        <target name="runtime.T2Client.postbuildtarget" hidden="true">
            <copy if="@{FileExists('${package.DirtySDK.dir}/sample/common/tester2/contrib/t2xbdm/bin/xenon/t2xbdmxenon.dll')}" file="${package.DirtySDK.dir}/sample/common/tester2/contrib/t2xbdm/bin/xenon/t2xbdmxenon.dll" todir="${package.configbindir}" />
            <copy if="@{FileExists('${package.xenonsdk.appdir.HACK}/bin/win32/mspdb70.dll')}" file="${package.xenonsdk.appdir.HACK}/bin/win32/mspdb70.dll" todir="${package.configbindir}" />
            <copy if="@{FileExists('${package.xenonsdk.appdir.HACK}/bin/win32/xbdm.dll')}" file="${package.xenonsdk.appdir.HACK}/bin/win32/xbdm.dll" todir="${package.configbindir}" />
        </target>

    </do>
    
        
</project>
