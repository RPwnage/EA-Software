<project>
    <tools unless="${Dll??false}">
        <Program name="eadp-sdk-protoc-plugin" if="${config-system} == 'pc64' or ${config-system} == 'osx'">
            <dependencies>
                <auto>
                    protobuf/protobuf
                    protobuf/tool/libprotoc
                    protobuf/tool/protoc
                </auto>
            </dependencies>

            <config>
                <warningsuppression>
                    <do if="${config-compiler} == 'vc'">
                        <!-- Suppress these warnings, as they are from code generated by original 
                             protobuf tool instead of EADP protobuf plug-in -->
                        -wd4125 <!-- decimal digit terminates octal escape sequence -->
                        -wd4146 <!-- unary minus operator applied to unsigned type, result still unsigned -->
                        -wd4267 <!-- conversion from 'size_t' to 'type2', possible loss of data -->
                        -wd4456 <!-- declaration hides previous declaration -->
                        -wd4800 <!-- forcing value to bool 'true' or 'false' -->
                        -wd4946 <!-- reinterpret_cast used between related types -->
                        -wd4996 <!-- 'std::iterator<std::random_access_iterator_tag,Element,ptrdiff_t,_Ty*,_Ty&>': warning STL4015: The std::iterator class template (used as a base class to provide typedefs) is deprecated in C++17. (The <iterator> header is NOT deprecated.) -->
                    </do>
                </warningsuppression>
            </config>

            <headerfiles>
                <includes name="${package.dir}/codegen/src/*.h"/>
            </headerfiles>

            <sourcefiles>
                <includes name="${package.dir}/codegen/src/*.cpp" />
                <includes name="${package.dir}/codegen/src/*.cc" />
            </sourcefiles>
        </Program>
    </tools>

    <target name="generation">
        <dependent name="protobuf" />
        <property name="host-target" local="true" value="pc64-vc-dev-opt"       if="${nant.platform_host} == 'windows'"/>
        <property name="host-target" local="true" value="osx-x64-clang-dev-opt" if="${nant.platform_host} == 'osx'"/>
        <property name="host-target" local="true" value="unix64-gcc-dev-opt"    if="${nant.platform_host} == 'unix'"/>

        <exec program="${package.protobuf.builddir}/${host-target}/bin/tool/protoc${protoc-suffix??}">
            <args>
                <arg value="--cpp_out=${package.dir}/codegen/src"/>
                <arg value="-I${package.dir}/proto/eadp"/>
                <arg value="-I${package.protobuf.protobuf.includedirs}"/>
                <arg value="${package.dir}/proto/eadp/annotations.proto"/>
            </args>
            <inputs failonmissing="true">
                <includes name="${package.dir}/proto/eadp/annotations.proto" />
            </inputs>
            <outputs failonmissing="true">
                <includes name="${package.dir}/codegen/src/**" />
            </outputs>
        </exec>

        <task name="EadpSdkProtoCodegenTask" InputDir="${package.dir}/proto/eadp/foundation"  OutputDir="${package.dir}" />
        <task name="EadpSdkProtoCodegenTask" InputDir="${package.dir}/proto/eadp/director"    OutputDir="${package.dir}/source/director" />
        <task name="EadpSdkProtoCodegenTask" InputDir="${package.dir}/test/proto"             OutputDir="${package.dir}/test/source/gen" />
        <task name="EadpSdkProtoCodegenTask" InputDir="${package.dir}/codegen/test/proto/in"  OutputDir="${package.dir}/codegen/test" />
            
        <mkdir dir="${package.dir}/codegen/test/gen" />
        <exec program="${package.protobuf.builddir}/${host-target}/bin/tool/protoc${protoc-suffix??}">
            <args>
                <arg value="--cpp_out=${package.dir}/codegen/test/gen"/>
                <arg value="-I${package.dir}/codegen/test/proto/out"/>
                <arg value="-I${package.protobuf.protobuf.includedirs}"/>
                <arg value="${package.dir}/codegen/test/proto/out/out.proto"/>
                <arg value="${package.dir}/codegen/test/proto/out/proto2out.proto"/>
            </args>
        </exec>
    </target>
    <target name="regen">
        <task name="EadpSdkProtoCodegenResetTask" TargetDir="${package.dir}" />
        <task name="EadpSdkProtoCodegenResetTask" TargetDir="${package.dir}/source/director" />
        <task name="EadpSdkProtoCodegenResetTask" TargetDir="${package.dir}/test/source/gen" />
        <task name="EadpSdkProtoCodegenResetTask" TargetDir="${package.dir}/codegen/test" />
        <call target="generation" />
    </target>
</project>
