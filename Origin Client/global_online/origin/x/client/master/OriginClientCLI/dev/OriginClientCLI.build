<?xml version="1.0" encoding="utf-8"?>
<project name="OriginClientCLI" default="build">
    <!-- ************************* -->
    <!-- EAConfig target overrides -->
    <!-- ************************* -->
    <optionset name="config.targetoverrides" >
        <option name="clean" value="exclude"/>
    </optionset>


    <!-- Package declaration -->
    <!-- Get the version number from current directory -->
    <property name="currDir" value="@{PathGetFullPath('.')}" />
    <property name="currVer" value="@{PathGetFileName('${currDir}')}" />
    <package name="OriginClientCLI" targetversion="${currVer}" />

    <property name="debug-suffix" value="" />
    <dependent name="Qt" />
    <dependent name="OriginConfig" />
    <dependent name="openSSL" />


    <property name="dirtysdk-samples" value="false" />
		<property name="eaconfig.rtti" value="on" />
    
    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->
    <do if="${config-platform} == 'osx-gcc'">
			<property name="config-xcode-type" value="Debug" if="${config-type} == 'debug'" />
			<property name="config-xcode-type" value="Release" if="${config-type} == 'opt'" />
			<property name="runtime.OriginClientCLI.xcodeprojfile" value="${package.${package.name}.dir}/build/XCodeOSX/${package.name}.xcodeproj" />
			<property name="runtime.OriginClientCLI.bundledir" value="${package.OriginClientCLI.dir}/build/XCodeOSX/build/${config-xcode-type}/${package.name}.app" />
			<property name="runtime.OriginClientCLI.frameworksdir" value="${runtime.OriginClientCLI.bundledir}/Contents/Frameworks" />
	    <property name="runtime.OriginClientCLI.outputdir" value="${runtime.OriginClientCLI.bundledir}/Contents/MacOS" />
	    <property name="runtime.OriginClientCLI.targetdir" value="${package.dir}/target" />
			<!--property name="old.Qt.libroot" value="/usr/local/Trolltech/Qt-4.8.2/lib" /--> <!- HACK - NOT SURE YET -->
    </do>
    
    <do if="${config-platform} == 'pc-vc'">
	    <property name="runtime.OriginClientCLI.outputdir" value="${package.OriginClientCLI.dir}/runtime" />
    </do>
    
    
    <property name="runtime.buildmodules" value="OriginClientCLI" />
    <property name="runtime.OriginClientCLI.buildtype" value="OriginProgram" />
<!--    <property name="osx-extra-frameworks" value="-framework AppKit -framework Carbon -framework SystemConfiguration -framework ${package.Qt.libdir}/QtCore" /> -->

		<!-- linker_args is a global property where you can add extra linker args -->
		<property name="linker_args" value="-F${package.Qt.libdir}" />

    <property name="runtime.OriginClientCLI.usedependencies">
        openSSL
        Qt
    </property>
    
    <property name="runtime.OriginClientCLI.builddependencies">
        coreallocator
        EAAssert
        EABase
        EACallstack
        EAIO
        EAStdC
        EASTL
        EAThread
        EATrace
        PPMalloc
        zlib
        DirtySDK
        BugSentry
        TelemetryAPI
        services
        engine
    </property>

    <property name="runtime.OriginClientCLI.includedirs" >
        ${package.dir}/
        ${package.dir}/include
        ${moc.output.dir}
        ${ui.output.dir}
    </property>

		<property name="qtlibs">
			QtCore
			QtGui
			QtNetwork
			QtWebKit
			QtWidgets
			QtXml
			QtXmlPatterns
		</property>

    <fileset name="runtime.OriginClientCLI.libs" >
        <includes name="${package.openSSL.bindir}\libcrypto.a"/>
        <includes name="${package.openSSL.bindir}\libssl.a"/>
    </fileset>

    <fileset name="runtime.OriginClientCLI.headerfiles" basedir="${package.dir}">
        <includes name="**/*.h" />
    </fileset>

    <fileset name="runtime.OriginClientCLI.sourcefiles" >
        <includes name="${package.dir}/source/**/*.cpp" />
    </fileset>

    <fileset name="runtime.OriginClientCLI.resourcefiles">
    </fileset>

    <fileset name="runtime.ui_sourcefiles" basedir="${package.dir}" if="@{FileExists('**/*.ui')}" >
        <includes name="**/*.ui" />
    </fileset>
    
    <!-- these are the moc source files that generate the mocfiles that need to be included in the build. -->
    <fileset name="runtime.moc_sourcefiles" basedir="${package.dir}">
        <includes name="source/Command.h" />
        <includes name="source/CommandDispatcher.h" />
        <includes name="source/Console.h" />
        <includes name="source/LoginService.h" />
        <includes name="source/EntitlementService.h" />
        <includes name="source/DownloadService.h" />
    </fileset>

    <!-- construct the paths to include the moc files into the build after generating. -->
    <foreach property="fname" item="FileSet" in="runtime.moc_sourcefiles">
        <property name="sourcefile" value="${moc.output.dir}/moc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
        <fileset name="runtime.OriginClientCLI.sourcefiles" append="true">
            <includes name="${sourcefile}" asis="true"/>
        </fileset>
    </foreach>

	<!-- these are the Qt rc source files will be run through the Qt rc compiler  -->
	<fileset name="runtime.qrc_sourcefiles" basedir="${package.OriginClientCLI.dir}">
		<includes name="${package.OriginClientCLI.dir}/resources/OriginClientCLI.qrc" />
	</fileset>

	<!-- construct the paths to include the qrc files into the build after generating. -->
	<foreach property="fname" item="FileSet" in="runtime.qrc_sourcefiles">
		<property name="sourcefile" value="${rc.output.dir}/qrc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
		<fileset name="runtime.OriginClientCLI.sourcefiles" append="true">
			<includes name="${sourcefile}" asis="true"/>
		</fileset>
	</foreach>
	
    <!-- get the options from the current config -->
    <property name="runtime.moc_defines" value=""/>
    <property name="runtime.moc_includedirs" value="${runtime.OriginClientCLI.includedirs}"/>
    
    <target name="setup-generate-code">
        <!-- get the options from the current config -->
        <property name="runtime.moc_defines" value="@{OptionSetGetValue('${runtime.OriginClientCLI.buildtype}','cc.defines')}"/>
        <foreach property="dependent.package" item="String" in="${runtime.OriginClientCLI.usedependencies} ${runtime.OriginClientCLI.builddependencies}">
        	<dependent name="${dependent.package}" />
        	<property name="dependent.includedirs" if="@{PropertyExists('package.${dependent.package}.includedirs')}">
        		${property.value}
        		${package.${dependent.package}.includedirs}
        	</property>
        </foreach>
        <property name="runtime.moc_includedirs" value="${runtime.${package.name}.includedirs} ${dependent.includedirs}"/>
    </target>

    <target name="generate-code" depends="setup-generate-code" >
        <call target="moc-compile" if="@{FileSetExists('runtime.moc_sourcefiles')}" />
        <call target="ui-compile" if="@{FileSetExists('runtime.ui_sourcefiles')}" />
        <call target="qt-rc-compile" if="@{FileSetExists('runtime.qrc_sourcefiles')}" />
    </target>

    <!-- ************************** -->
    <!-- Prebuild property targets -->
    <!-- ************************** -->

    <property name="prebuild.target.list">
        create-dirs
        generate-code
    </property>
    
    <target name="pre-build-tasks">
        <foreach property="runtarget" item="String" in="${prebuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>

    <!-- NANT prebuild target. Will execute this after compiling happens. -->
    <property name="runtime.OriginClientCLI.prebuildtarget" value="pre-build-tasks" />

    <!-- ************************** -->
    <!-- postbuild property targets -->
    <!-- ************************** -->
    
    <property name="postbuild.target.list">
        copy-to-runtime-new
    </property>
    
    <target name="post-build-tasks">
        <foreach property="runtarget" item="String" in="${postbuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>
    
    <!-- NANT postbuild target. Will execute this after compiling happens. -->
    <property name="runtime.OriginClientCLI.postbuildtarget" value="post-build-tasks" />
    
    <target name="create-dirs">
        <mkdir dir="${runtime.OriginClientCLI.outputdir}" unless="@{DirectoryExists(${runtime.OriginClientCLI.outputdir})}" />
    </target>
    
    <target name="clean-custom">
        <delete dir="${runtime.OriginClientCLI.outputdir}" />
        <echo message="Cleaning ${config-xcode-type} XCode project." /> 
        <exec program="xcodebuild" workingdir="@{PathGetDirectoryName(${runtime.${package.name}.xcodeprojfile})}" if="@{FileExists(${runtime.${package.name}.xcodeprojfile})}">
          <args>
            <arg value="-configuration" />
            <arg value="${config-xcode-type}" />
            <arg value="clean" />
          </args>
        </exec>
    </target>
    
    <target name="fix-rpaths">
        <do if="${config-platform} == 'osx-gcc'">
            <echo message="Fixing rpaths" />
            <exec program="install_name_tool" commandline="-add_rpath @executable_path/Qt ${runtime.OriginClientCLI.outputdir}/${runtime.buildmodules}" failonerror="false" />
        </do>    
    </target>

    <target name="copy-to-runtime">
        <do if="${config-platform} == 'osx-gcc'">
            <echo message="Creating Qt symlinks" />
            <exec program="rm" commandline="-f @{PathToUnix('${runtime.OriginClientCLI.outputdir}/Qt')}" />
            <exec program="ln" commandline="-s @{PathToUnix('${package.Qt.libdir}')} @{PathToUnix('${runtime.OriginClientCLI.outputdir}/Qt')}" />
        </do>
        <do unless="${config-platform} == 'osx-gcc'">
            <echo message="Copying Qt libs" />
            <copy todir="${runtime.OriginClientCLI.outputdir}" flatten="true">
            <fileset>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Core${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Sql${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Xml${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5XmlPatterns${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Gui${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Network${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Designer${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5DesignerComponents${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5WebKit${debug-suffix}${package.Qt.libsuffix}"/>
				<includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Widgets${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Test${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Script${debug-suffix}${package.Qt.libsuffix}"/>
            </fileset>
            </copy>
        </do>
    </target>

    <target name="copy-to-runtime-new">
    		<property name="at" value='@' />
        <do if="${config-platform} == 'osx-gcc'">
        		<echo message="Copying openSSL dylibs to bundle dir" />
							<copy todir="${runtime.OriginClientCLI.frameworksdir}" >
								<fileset basedir="${package.openSSL.bindir}">
									<includes name="libcrypto*.dylib" />
									<includes name="libssl*.dylib" />
								</fileset>
							</copy>
						<echo message="Copying Frameworks to bundle dir" />
						<foreach property="lib" item="String" in="${qtlibs}">
<!--	the <copy> task is folliwng symlinks and copying the originals					
							<echo message="Copying ${lib}.framework." />
							<copy todir="${runtime.OriginClientCLI.frameworksdir}" >
								<fileset basedir="${package.Qt.libdir}">
									<includes name="${lib}.framework/**" />
								</fileset>
							</copy>
-->
							<delete dir="${runtime.OriginClientCLI.frameworksdir}/${lib}.framework" />
							<exec program="cp">
								<args>
									<arg value="-f" />
									<arg value="-R" />
									<arg value="-P" />
									<arg value="${package.Qt.libdir}${lib}.framework" />
									<arg value="${runtime.OriginClientCLI.frameworksdir}" />
								</args>
							</exec>							
							<exec program="chmod">
								<args>
									<arg value="-R" />						
									<arg value="777" />
									<arg value="${runtime.OriginClientCLI.frameworksdir}/${lib}.framework" />						
								</args>
							</exec>
							<echo message="Modifying rpath for ${lib}.framework." />
							<exec program="install_name_tool">
								<args>
									<arg value="-id" />
									<arg value="${at}rpath/${lib}.framework/Versions/5/${lib}${package.Qt.debugsuffix}" />
									<arg value="${runtime.OriginClientCLI.frameworksdir}/${lib}.framework/Versions/5/${lib}${package.Qt.debugsuffix}" />
								</args>
							</exec>
		        	<foreach property="lib2" item="String" in="${qtlibs}">
		        		<do unless="${lib} == ${lib2}" >
									<exec program="install_name_tool">
										<args>
											<arg value="-change" />
											<arg value="${old.Qt.libroot}/${lib2}.framework/Versions/5/${lib2}" />
											<arg value="${at}rpath/${lib2}.framework/Versions/5/${lib2}${package.Qt.debugsuffix}" />
											<arg value="${runtime.OriginClientCLI.frameworksdir}/${lib}.framework/Versions/5/${lib}${package.Qt.debugsuffix}" />
										</args>
									</exec>
								</do>
							</foreach>
							<exec program="install_name_tool" if="@{FileExists('${runtime.OriginClientCLI.outputdir}/${package.name}')}" >
								<args>
									<arg value="-change" />
									<arg value="${old.Qt.libroot}/${lib}.framework/Versions/5/${lib}" />
									<arg value="${at}rpath/${lib}.framework/Versions/5/${lib}${package.Qt.debugsuffix}" />
									<arg value="${runtime.OriginClientCLI.outputdir}/${package.name}" />
								</args>
							</exec>
						</foreach>
        </do>
        
        
<!--            <exec program="rm" commandline="-f @{PathToUnix('${runtime.OriginClientCLI.outputdir}/Qt')}" />
            <exec program="ln" commandline="-s @{PathToUnix('${package.Qt.libdir}')} @{PathToUnix('${runtime.OriginClientCLI.outputdir}/Qt')}" />
          </foreach>
        </do>
        
        
        <do unless="${config-platform} == 'osx-gcc'">
            <echo message="Copying Qt libs" />
            <copy todir="${runtime.OriginClientCLI.outputdir}" flatten="true">
            <fileset>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Core${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Sql${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Xml${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5XmlPatterns${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Gui${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Network${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Designer${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5DesignerComponents${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5WebKit${debug-suffix}${package.Qt.libsuffix}"/>
				<includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Widgets${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Test${debug-suffix}${package.Qt.libsuffix}"/>
                <includes name="${package.Qt.libdir}\${package.Qt.libprefix}Qt5Script${debug-suffix}${package.Qt.libsuffix}"/>
            </fileset>
            </copy>
        </do> -->
    </target>

		<target name="zip">
			<delete dir="${package.dir}/target" />
			<exec program="cp">
				<args>
					<arg value="-f" />
					<arg value="-R" />
					<arg value="-P" />
					<arg value="@{PathGetDirectoryName('${runtime.OriginClientCLI.bundledir}')}" />
					<arg value="${package.dir}/target" />
				</args>
			</exec>							
			<exec program="zip" workingdir="${package.dir}/target">
				<args>
					<arg value="-r" />
					<arg value="-p" />
					<arg value="${package.name}" />
					<arg value="${package.name}.app" />
				</args>
			</exec>
			
		</target>

		<target name="dmg">
			<echo message="Creating ${package.name}.dmg in ${runtime.OriginClientCLI.targetdir}." />
	    <delete file="target/${package.name}.dmg" />
			<mkdir dir="${runtime.OriginClientCLI.targetdir}" unless="@{DirectoryExists(${runtime.OriginClientCLI.targetdir})}" />
			<exec program="hdiutil" workingdir=".">
				<args>
					<arg value="create" />
					<arg value="target/${package.name}.dmg" />
					<arg value="-srcfolder" />
					<arg value="${runtime.OriginClientCLI.bundledir}" />
				</args>
			</exec>
		</target>

    <target name="dump">
        <echo message="osx-extra-frameworks = ${osx-extra-frameworks}"  />
        <echo message="config.builddir: ${package.builddir}" />
    
    </target>

</project>




