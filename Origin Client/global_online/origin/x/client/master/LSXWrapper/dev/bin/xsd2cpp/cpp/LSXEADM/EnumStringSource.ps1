if($Schema.SimpleTypes.Count -ne 0)
{
$SchemaFilename = $Generator.NamespaceToFilename($Schema.Namespace).Replace('/','.')
$SchemaFilename + "EnumStrings.cpp"

"
// Generated By: XSD2CPP V2.0
// Author: Hans van Veenendaal
//
// !!!! This file is automatically generated please do not modify !!!!

#include <map>
"

#Write out the namespace
$NamespaceParts = $SchemaFilename.Split('.')
foreach($i in $NamespaceParts)
{
	"namespace " + $i
	"{"
}

foreach($i in $Schema.SimpleTypes)
{
	if($i.Enumerations.Count -ne 0)
	{

		""
		"const char * " + $i.Name + "Strings[] ="
		"{"
            if($i.ValueType -eq "xs:string")
            {
                foreach($e in $i.EnumerationValues)
			    {
				    "    """ + $e + ""","
			    }
            }
            else
            {
			    foreach($e in $i.Enumerations)
			    {
				    "    """ + $e + ""","
			    }
            }
		"};"

		if($i.EnumValuesSet)
		{
			"std::map<int, int> " + $i.Name + "_EnumToIndexMap;"
			"std::map<int, int> " + $i.Name + "_IndexToEnumMap;"
			""
			"class " + $i.Name + "_Init"
			"{"
			"public:"
			"    " + $i.Name + "_Init()"
			"    {"

			for($e = 0; $e -lt $i.Enumerations.Count; $e++)
			{
			"        " + $i.Name + "_EnumToIndexMap[" + $i.EnumerationValues[$e] + "] = " + $e + ";	// " + $i.Name.ToUpper() + "_" + $i.Enumerations[$e]
			}
			""
			for($e = 0; $e -lt $i.Enumerations.Count; $e++)
			{
			"        " + $i.Name + "_IndexToEnumMap[" + $e + "] = " + $i.EnumerationValues[$e] + ";	// " + $i.Name.ToUpper() + "_" + $i.Enumerations[$e]
			}

			"    }"
			"}"+ $i.Name + "MappingInitializer;"
		}
	}
}


[array]::Reverse($NamespaceParts)
foreach($i in $NamespaceParts)
{
	"} // namespace " + $i
}

}