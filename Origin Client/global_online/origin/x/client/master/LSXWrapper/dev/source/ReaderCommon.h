#ifndef __READER_COMMON_H__
#define __READER_COMMON_H__

// !!!! This file is automatically generated please do not modify !!!!

#include <QString>
#include <map>
#include "NodeDocument.h"
#include "Types.h"

// Readers of base types with name
bool Read(INodeDocument * doc, const char *name, int32_t &value);
bool Read(INodeDocument * doc, const char *name, uint32_t &value);
bool Read(INodeDocument * doc, const char *name, int64_t &value);
bool Read(INodeDocument * doc, const char *name, uint64_t &value);
bool Read(INodeDocument * doc, const char *name, OriginTimeT &value);
bool Read(INodeDocument * doc, const char *name, float &value);
bool Read(INodeDocument * doc, const char *name, double &value);
bool Read(INodeDocument * doc, const char *name, bool &value);
bool Read(INodeDocument * doc, const char *name, QString &value);
bool ReadEnumValue(INodeDocument * doc, const char *name, const char *pValues[], int Count, int &data);
bool ReadEnumValue(INodeDocument * doc, const char *name, const char *pValues[], std::map<int, int> & IndexToEnumMap, int Count, int &data);

// Readers of base types from selected element
bool Read(INodeDocument * doc, int32_t &value);
bool Read(INodeDocument * doc, uint32_t &value);
bool Read(INodeDocument * doc, int64_t &value);
bool Read(INodeDocument * doc, uint64_t &value);
bool Read(INodeDocument * doc, OriginTimeT &value);
bool Read(INodeDocument * doc, float &value);
bool Read(INodeDocument * doc, double &value);
bool Read(INodeDocument * doc, bool &value);
bool Read(INodeDocument * doc, QString &value);
bool ReadEnumValue(INodeDocument * doc, const char *pValues[], int Count, int &data);
bool ReadEnumValue(INodeDocument * doc, const char *pValues[], std::map<int, int> & IndexToEnumMap, int Count, int &data);

// Readers of base types from named attributes.
bool ReadAttribute(INodeDocument * doc, const char *name, int32_t &value);
bool ReadAttribute(INodeDocument * doc, const char *name, uint32_t &value);
bool ReadAttribute(INodeDocument * doc, const char *name, int64_t &value);
bool ReadAttribute(INodeDocument * doc, const char *name, uint64_t &value);
bool ReadAttribute(INodeDocument * doc, const char *name, OriginTimeT &value);
bool ReadAttribute(INodeDocument * doc, const char *name, float &value);
bool ReadAttribute(INodeDocument * doc, const char *name, double &value);
bool ReadAttribute(INodeDocument * doc, const char *name, bool &value);
bool ReadAttribute(INodeDocument * doc, const char *name, QString &value);
bool ReadEnumValueAttribute(INodeDocument * doc, const char *name, const char *pValues[], int Count, int &data);
bool ReadEnumValueAttribute(INodeDocument * doc, const char *name, const char *pValues[], std::map<int, int> & IndexToEnumMap, int Count, int &data);

bool Read(const char *String, int32_t &value);
bool Read(const char *String, uint32_t &value);
bool Read(const char *String, int64_t &value);
bool Read(const char *String, uint64_t &value);
bool Read(const char *String, OriginTimeT &value);
bool Read(const char *String, float &value);
bool Read(const char *String, double &value);
bool Read(const char *String, bool &value);
bool Read(const char *String, QString &value);
bool ReadEnumValue(const char *pValue, const char *pValues[], int Count, int &data);
bool ReadEnumValue(const char *pValue, const char *pValues[], std::map<int, int> & IndexToEnumMap, int Count, int &data);

bool IsCommandOfType(const char *pName, const char *pCommand);
unsigned long GetHash(const char *pCommand);
//unsigned long GetCommandHash(const char *pCommand);
bool IsXml(const char *pCommand);

std::string GetPrefix(INodeDocument * doc, const char *nameSpace);


#endif // __READER_COMMON_H__
