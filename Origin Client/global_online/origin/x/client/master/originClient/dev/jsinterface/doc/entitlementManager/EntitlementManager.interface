<?xml version="1.0"?>
<interface root="true">
	<description>
		Root object for accessing the current user's entitlement information 
	</description>
	<property type="EntitlementDialog" name="dialogs" readonly="true">
		<description>
			List of dialogs associated with an entitlement.
		</description>
	</property>
	<property type="Entitlement[]" name="topLevelEntitlements" readonly="true">
		<description>
			List of top-level entitlement objects belonging to the current user. Top-level entitlements are intended to be shown as standalone items in the user's game library.
		</description>
	</property>
	<method return="Entitlement?" name="getEntitlementById">
		<param name="id" type="String" />
        <param name="includeUnownedContent" type="Boolean" />
		<description>
			Gets an entitlement based on its ID. Returns null if no entitlement is found
		</description>
	</method>
	<method return="Entitlement?" name="getEntitlementByProductId">
		<param name="productId" type="String" />
        <param name="includeUnownedContent" type="Boolean" />
		<description>
			Gets an entitlement based on its product ID. Returns null if no entitlement is found
		</description>
	</method>
	<method return="Entitlement?" name="getEntitlementByContentId">
		<param name="contentId" type="String" />
        <param name="includeUnownedContent" type="Boolean" />
		<description>
			Gets an entitlement based on its content ID. Returns null if no entitlement is found
		</description>
	</method>
	<method name="refresh">
		<description>
			Refreshes the entitlement list from the copy stored on the server
		</description>
	</method>

	<signal name="added">
		<param name="entitlement" type="Entitlement" />
		<description>
			Emitted when a top-level entitlement has been added to the current user
		</description>
	</signal>
	
	<signal name="removed">
		<param name="entitlement" type="Entitlement" />
		<description>
			Emitted when a top-level entitlement has been removed from the current user
		</description>
	</signal>

	<signal name="refreshStarted">
		<description>
			Emitted before retrieving a new copy of the user's entitlements from the server or offline cache. This is fired for both refreshes explicitly requested through JavaScript and refreshes triggered from other components.
		</description>
	</signal>

	<signal name="refreshCompleted">
		<description>
			Emitted when a new copy of the user's entitlements has been retrieved from the server or the local offline cache. This is fired for both refreshes explicitly requested through JavaScript and refreshes triggered from other components. This signal can be quite noisy and should only be used to communicate to the user that their explicitly requested refresh has completed.
		</description>
	</signal>

	<property name="initialRefreshCompleted" type="Boolean" readonly="true">
		<description>
			Indicates if the user's entitlements have been retrieved from the server or the local offline cache at least once. If this property is false the user will appear to have no entitlements until the refreshCompleted signal is fired. 
		</description>
	</property>

	<property name="refreshInProgress" type="Boolean" readonly="true">
		<description>
			Indicates if a new copy of the user's entitlements is currently being retrieved. The refreshStarted signal will be fired when this becomes true; the refreshCompleted signal wil be fired when this becomes false.
		</description>
	</property>
    
</interface>
