<?xml version="1.0"?>
<interface inherits="SocialUser">
	<description>Object for representing a remote social user</description>

	<method name="startConversation">
		<description>Starts a conversation with the user. This will typically open a new chat window or show an existing one.</description>
	</method>

	<method name="inviteToGame">
		<description>Invites the user to the game the user is currently playing. This is only functional if originSocial.currentUser.playingGame.joinable is true.</description>
	</method>

	<method name="joinGame">
		<description>Joins the game the user is currently playing if the user has a compatible entitlement. Otherwise, the user is brought to the store page for the user's currently playing product.  This is only functional if playingGame.joinable is true.</description>
	</method>

	<property name="blocked" type="Boolean" readonly="true">
		<description>Indicates if the user is blocked. Incoming messages from blocked user are ignored.</description>
	</property>

	<property name="subscriptionState" type="SubscriptionState" readonly="true">
		<description>State of the user's presence subscription</description>
	</property>
	
	<method name="block">
		<description>Prompts the user to block the user if the user is not currently blocked</description>
	</method>
	
	<method name="removeAndBlock">
		<description>Prompts the user to block and remove the user</description>
	</method>

	<method name="unblock">
		<description>Unblocks the user if the user is not currently blocked</description>
	</method>

	<signal name="blockChanged">
		<param name="blocked" type="Boolean">
			<description>Indicates if the user is now blocked</description>
		</param>

		<description>Emitted whenever the blocked property of the user changes</description>
	</signal>

	<method name="acceptSubscriptionRequest">
		<description>Accepts the user's incoming subscription request</description>
	</method>
	
	<method name="rejectSubscriptionRequest">
		<description>Rejects the user's incoming subscription request</description>
	</method>

	<method name="cancelSubscriptionRequest">
		<description>Cancels the outgoing subscription request to the user</description>
	</method>

	<method name="requestSubscription">
		<description>Requests a subscription to the user's presence</description>
	</method>

	<signal name="subscriptionStateChanged">
		<description>Emitted whenever the subscriptionState property user</description>
	</signal>

	<method name="achievementSharingState">
		<description>Requests the status of the user's achievements sharing.</description>
	</method>

	<signal name="succeded">
		<param name="isSharing" type="Boolean">
			<description>Indicates if the user has chosen to share their achievements.</description>
		</param>
		<description>Emitted when the request for the status of the user's achievements sharing has returned.</description>
	</signal>
	
	
	<signal name="addedToRoster">
		<description>Emitted when the remote user is added to the current user's roster</description>
	</signal>
	
	<signal name="removedFromRoster">
		<description>Emitted when the remote user is removed from the current user's roster</description>
	</signal>

	<method name="reportTosViolation">
		<description>Reports a terms of service violation by the user to EA customer support</description>
	</method>
</interface>
