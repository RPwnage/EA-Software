<?xml version="1.0"?>
<interface>
	<description>Object for representing a social user</description>
	
	<property name="id" type="String" readonly="true">
		<description>Unique ID for the user. This value is not stable between Origin sessions.</description>
	</property>

	<property name="nickname" type="String?" readonly="true">
		<description>Plain text nickname to be displayed for the user. This is typically the user's Origin ID. This value is remotely provided and must not be trusted. In particular, it may contain malicious HTML special characters. For non-contacts this can briefly be null when the user is first created. Once a final nickname has been determined nameChanged will be emitted.</description>
	</property>

	<property name="statusText" type="String?" readonly="true">
		<description>Human readable status string describing the user's availability or activity or null if it's unknown or unset</description>
	</property>

	<property name="avatarUrl" type="String?" readonly="true">
		<description>URL of the user's avatar or null if the avatar hasn't been determined yet. This may be a data: URI.</description>
	</property>
	
	<property name="largeAvatarUrl" type="String?" readonly="true">
		<description>URL of the user's large avatar or null if the avatar hasn't been determined yet. This may be a data: URI. requestLargeAvatar can be called to asynchronously update this property</description>
	</property>
	
	<signal name="avatarChanged">
		<description>Emitted whenever the user's avatar changes.</description>
	</signal>
	
	<signal name="largeAvatarChanged">
		<description>Emitted whenever the user's large avatar changes.</description>
	</signal>

	<property name="availability" type="Availability?" readonly="true">
		<description>Current availability of the user or null if their availability is unknown</description>
	</property>

	<property name="playingGame" type="PlayingGame?" readonly="true">
		<description>Information about the game the user is playing through Origin or null if no game is being played</description>
	</property>

	<property name="realName" type="RealName?" readonly="true">
		<description>Real name of the user or null if the real name hasn't been requested or is restricted for privacy reasons. requestRealName can be called to asynchronously update this property</description>
	</property>

	<signal name="presenceChanged">
		<description>Emitted whenever the user's availability, status or playingGame properties change</description>
	</signal>

	<signal name="nameChanged">
		<description>Emitted whenever the user's nickname or real name properties change</description>
	</signal>

	<method name="requestRealName">
		<description>Asynchronously requests the user's real name if it hasn't already been requested. If a real name has been loaded nameChanged will be emitted.</description>
	</method>
	
	<method name="requestLargeAvatar">
		<description>Asynchronously requests the user's largeAvatarUrl if it hasn't already been requested. If the large avatar URL has been loaded largeAvatarChanged will be emitted.</description>
	</method>

	<method name="showProfile">
		<description>Shows the profile page for the user. This displays detailed information about the user and provides extended actions such as joining a contact's multiplayer game.</description>
		<param type="ShowProfileSource" name="org">
			<description>String containing the origin of the show profile request.</description>
		</param>
	</method>
    
    <method name="updateAchievements" return="AchievementPortfolio?">
        <description>Get the achievement portfolio for this friend.</description>
    </method>
	
	<method name="queryOwnedProducts" return="OwnedProductsQueryOperation">
		<description>Asynchronously queries a list of products owned by this user</description>
	</method>
	
	<method name="queryContacts" return="UserContactsQueryOperation">
		<description>Asynchronously queries the contacts the user is mutually subscribed to</description>
	</method>
	
	<method name="achievementSharingState" return="AchievementShareQueryOperation">
		<description>Asynchronously queries the list of privacy settings including achievement sharing for this user</description>
	</method>
	
	<method name="setAchievementSharingState" return="AchievementShareSetOperation">
		<description>Asynchronously sets the list of privacy settings including achievement sharing for this user</description>
	</method>
	
	<signal name="succeeded">
		<description>Emitted whenever a query or a set privacy settings using the achievement query operation is performed.</description>
		<param type="String" name="achievementShareInfo">
			<description>String containing a JSON structure with sharing statuses.</description>
		</param>
	</signal>
	
</interface>
