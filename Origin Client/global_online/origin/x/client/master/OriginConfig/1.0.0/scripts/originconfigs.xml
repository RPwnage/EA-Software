<project>
    <!-- ************************* -->
    <!-- COMMON compile options		 -->
    <!-- for all configurations 	 -->
    <!-- ************************* -->
    <property name="common.cc.options">
    </property>

    <property name="common.cc.defines">
      _UNICODE
      UNICODE
      LIBARCHIVE_STATIC
      ${extra.defines??}
  </property>

    <property name="common.link.options">
    </property>
    
  <property name="warninglevel" value="2" />
  
  <!-- Turn on signature checking for Jenkins builds -->
  <property name="checksignatures" value="false" />
  <property name="checksignatures" value="true" if="@{PropertyExists('jenkins')}" />

  <property  name="common.cc.defines" if="${checksignatures} == false">
    ${property.value}
	NO_SIGNATURE_CHECKS
  </property>
  <property name="common.cc.defines" if="${checksignatures} == true">
	${property.value}
	CHECK_SIGNATURES
  </property>
  
    <!-- ************************* -->
    <!-- CONFIG build options		   -->
    <!-- ************************* -->
  <do if="(${config-name} eq 'dev-debug') || (${config-name} eq 'dev-debug-mt')">
    <property name="config.cc.defines">
      _DEBUG
      DEBUG
      EA_DEBUG
    </property>

    <property name="config.cc.options">
    </property>
    
    <property name="config.link.options">
    </property>
  </do>

  <do if="(${config-name} eq 'dev-opt') || (${config-name} eq 'dev-opt-mt')">
    <property name="config.cc.defines">
            QT_NO_DEBUG
            NDEBUG
    </property>

    <property name="config.cc.options">
    </property>

    <property name="config.link.options">
    </property>
  </do>
  
    <!-- ************************* -->
    <!-- PLATFORM BuildTypes       -->
    <!-- ************************* -->

  <do if="${config-system} == 'pc'">
        <property name="program.optionset.name" value="config-options-windowsprogram" />
    <property name="platform.cc.options">
      /fp:precise
      /Zc:forScope
      /MP
      /wd4191
      /wd4571
      /wd4127
      /wd4512
      /wd4625
      /wd4626
      /wd4628
      /wd4917
      /wd4481
    </property>
    
    <property name="platform.cc.defines">
        WIN32
        _WINDOWS
        ORIGIN_PC
        _WINSOCKAPI_
        ENABLE_VOICE_CHAT=1
        _USING_V110_SDK71_
    </property>
    
    <property name="platform.link.options">
      /NOLOGO
      /MANIFEST
      /MANIFESTUAC:"level='asInvoker' uiAccess='false'"
      /TLBID:1
      /DYNAMICBASE
      /NXCOMPAT
      /MACHINE:X86
      /ERRORREPORT:QUEUE
    </property>
    
    <do if="${config-name} == 'dev-debug'">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <property name="config.cc.options">
        ${property.value}
        /GF 
        /Gm- 
        /EHsc 
        /GS 
        /Gy 
        /Gd /analyze- 
        /errorReport:queue
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>
    <do if="${config-name} == 'dev-opt' || (${config-name} eq 'dev-opt-mt')">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <property name="config.cc.options">
        ${property.value}
        /WX-
        /O2
        /Oy-
        /GL
        /Gm-
        /EHsc
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>
  </do>
    
  <do if="${config-system} == 'pc64'">
        <property name="program.optionset.name" value="config-options-windowsprogram" />
    <property name="platform.cc.options">
      /fp:precise
      /Zc:forScope
      /MP
      /wd4191
      /wd4571
      /wd4127
      /wd4512
      /wd4625
      /wd4626
      /wd4628
      /wd4917
      /wd4481
    </property>
    
    <property name="platform.cc.defines">
      _WIN64
      _AMD64_
      _WINDOWS
      ORIGIN_PC
      _USING_V110_SDK71_
    </property>
    
    <property name="platform.link.options">
      /NOLOGO
      /MANIFEST
      /MANIFESTUAC:"level='asInvoker' uiAccess='false'"
      /TLBID:1
      /DYNAMICBASE
      /NXCOMPAT
      /MACHINE:X64
      /ERRORREPORT:QUEUE
    </property>
    
    <do if="${config-name} == 'dev-debug'">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <property name="config.cc.options">
        ${property.value}
        /GF 
        /Gm- 
        /EHsc 
        /GS 
        /Gy 
        /Gd /analyze- 
        /errorReport:queue
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>
    <do if="${config-name} == 'dev-opt' || (${config-name} eq 'dev-opt-mt')">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <property name="config.cc.options">
        ${property.value}
        /WX-
        /O2
        /Oy-
        /GL
        /Gm-
        /EHsc
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>
  </do>	
    
  <do if="${config-system} == 'osx'">
        <property name="program.optionset.name" value="config-options-program" />
    <property name="platform.cc.options">
    </property>
    
      <!-- USE_OPENGL_ACCELERATED_WEBKIT -->
    <property name="platform.cc.defines">
        ORIGIN_MAC
        ENABLE_VOICE_CHAT=0
        __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0
    </property>
    
    <property name="platform.cc.defines" if="@{PropertyExists('jenkins')}" >
      ${property.value}
      ORIGIN_MAC_OFFICIAL_CERT
    </property>

    <property name="platform.link.options">
    </property>
    
    <do if="${config-name} == 'dev-debug'">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <do if="${config-compiler} == 'clang'">
          <property name="config.cc.options">
            ${property.value}
            -Wall
            -Wno-unused-private-field
          </property>
      </do>

      <property name="config.cc.options">
        ${property.value}
        -Wno-unknown-pragmas
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>

    <do if="${config-name} == 'dev-opt'">
      <property name="config.cc.defines">
        ${property.value}
      </property>

      <do if="${config-compiler} == 'clang'">
          <property name="config.cc.options">
            ${property.value}
            -Wall
            -Wno-unused-private-field
          </property>
      </do>

      <property name="config.cc.options">
        ${property.value}
      </property>

      <property name="config.link.options">
        ${property.value}
      </property>
    </do>
  </do>
    
    <!-- ************************* -->
    <!-- USER LEVEL compile options	-->
    <!-- for all configurations 	 -->
    <!-- ************************* -->
  <property name="user.cc.options">
  </property>

  <property name="user.cc.defines">
  </property>

  <property name="user.link.options">
  </property>

  <!-- add your USERNAME in here to define user-specific defines. -->
  <property name="usernames">
    hvveenendaal
  </property>

  <do if="@{PropertyExists('sys.env.USERNAME')}">
    <do if="@{StrIndexOf('${usernames}','${sys.env.USERNAME}')} >= 0 " >
      <property name="user.cc.options">
        ${property.value}
      </property>

      <property name="user.cc.defines">
        ${property.value}
        ENABLE_ACHIEVEMENTS
      </property>

      <property name="user.link.options">
        ${property.value}
      </property>
    </do>
  </do>

    <!-- Common optionset for debug executable builds -->
    <optionset name="origin-config-options-program" fromoptionset="${program.optionset.name}">
    <option name="buildset.name" value="OriginProgram"/>
    <option name="buildset.cc.options">
            ${option.value}
      ${common.cc.options}
            ${platform.cc.options}
      ${config.cc.options}
      ${user.cc.options}
    </option>
    <option name="buildset.link.options" >
            ${option.value}
            ${common.link.options}
            ${platform.link.options}
            ${config.link.options}
            ${user.link.options}
    </option>
    <option name="buildset.cc.defines">
            ${option.value}
      ${common.cc.defines}
      ${platform.cc.defines}
            ${config.cc.defines}
            ${user.cc.defines}
            _ATL_STATIC_REGISTRY
    </option>
    <option name="generatemapfile" value="on"/>
    <option name="warningsaserrors" value="on" if="${config-compiler} == 'clang'"/>
    <option name="warningsaserrors" value="off" if="${config-compiler} != 'clang'"/>
    <option name="rtti" value="on"/>
    <option name="exceptions" value="on"/>
  </optionset>
  <task name="GenerateBuildOptionset" configsetname="origin-config-options-program" />
  <optionset name="OriginProgram">
    <option name="cc.options" if="${config-compiler} != 'clang'">
        @{StrReplace(${option.value}, '-Werror', '-Wnoerror')}
    </option>
  </optionset>

  <!-- Master optionset for debug static lib builds -->
  <optionset name="origin-config-options-library" fromoptionset="config-options-library">
    <option name="buildset.name" value="OriginLibrary"/>
    <option name="buildset.cc.options">
            ${option.value}
            ${common.cc.options}
            ${platform.cc.options}
            ${config.cc.options}
            ${user.cc.options}
    </option>
    <option name="buildset.link.options" >
            ${option.value}
            ${common.link.options}
            ${platform.link.options}
            ${config.link.options}
            ${user.link.options}
    </option>
    <option name="buildset.cc.defines">
            ${option.value}
            ${common.cc.defines}
      ${platform.cc.defines}
            ${config.cc.defines}
            ${user.cc.defines}
            _CHAR16T
            _USRDLL
            PRAGMA_STRUCT_PACK=1
            EADM
            EASTL_NOMINMAX
            CORE
            JAVATEST
            NO_DUMMY_DECL
      TELEMETRYAPI_STATIC
    </option>
    <option name="generatemapfile" value="on"/>
    <option name="warningsaserrors" value="on" if="${config-compiler} == 'clang'"/>
    <option name="warningsaserrors" value="off" if="${config-compiler} != 'clang'"/>
    <option name="rtti" value="on"/>
    <option name="exceptions" value="on"/>
</optionset>
  <task name="GenerateBuildOptionset" configsetname="origin-config-options-library" />
  <optionset name="OriginLibrary">
    <option name="cc.options" if="${config-compiler} != 'clang'">
        @{StrReplace(${option.value}, '-Werror', '-Wnoerror')}
    </option>
  </optionset>
    
  <!-- Master optionset for debug dynamic library builds -->
  <optionset name="origin-config-options-dll" fromoptionset="config-options-dynamiclibrary">
    <option name="buildset.name" value="OriginDLL"/>
    <option name="buildset.cc.options">
            ${option.value}
            ${common.cc.options}
            ${platform.cc.options}
            ${config.cc.options}
            ${user.cc.options}
    </option>
    <option name="buildset.link.options" >
            ${option.value}
            ${common.link.options}
            ${platform.link.options}
            ${config.link.options}
            ${user.link.options}
    </option>
    <option name="buildset.cc.defines">
            ${option.value}
            ${common.cc.defines}
      ${platform.cc.defines}
            ${config.cc.defines}
            ${user.cc.defines}
            _USRDLL
            PRAGMA_STRUCT_PACK=1
            EADM
            EASTL_NOMINMAX
            CORE
            JAVATEST
            NO_DUMMY_DECL
    </option>
    <option name="generatemapfile" value="on"/>
    <option name="warningsaserrors" value="on" if="${config-compiler} == 'clang'"/>
    <option name="warningsaserrors" value="off" if="${config-compiler} != 'clang'"/>
    <option name="exceptions" value="on" />
    <option name="rtti" value="on"/>
    </optionset>
  <task name="GenerateBuildOptionset" configsetname="origin-config-options-dll" />
  <optionset name="OriginDLL">
    <option name="cc.options" if="${config-compiler} != 'clang'">
        @{StrReplace(${option.value}, '-Werror', '-Wnoerror')}
    </option>
  </optionset>
    </project>
    
