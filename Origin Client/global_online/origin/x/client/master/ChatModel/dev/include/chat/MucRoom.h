#ifndef _CHATMODEL_MUCROOM_H
#define _CHATMODEL_MUCROOM_H

#include <QMutex>
#include <QElapsedTimer>

#include "Conversable.h"
#include "XMPPImplTypes.h"

namespace Origin
{
namespace Chat
{
    class Connection;
    class OutgoingMucRoomInvite;
    struct XmppChatroomMemberProxy;

    ///
    /// Represents a multi-user chat room that the current user is participating in
    ///
    class MucRoom : public Conversable
    {
        Q_OBJECT

        friend class Connection;
    public:
        /// \brief Reason for deactivation
        enum DeactivationType
        {
            /// \brief A room was manually destroyed
            RoomDestroyedType,
            /// \brief A group was destroyed
            GroupDestroyedType,
            /// \brief A member left a group
            GroupLeftType,
            /// \brief A member was kicked from a room
            RoomKickedType,
            /// \brief A member was kicked from a group
            GroupKickedType
        };

        MucRoom(Connection *connection, const JabberID &roomJabberId, QObject *parent = NULL); 

        JabberID jabberId() const;
        QSet<ConversableParticipant> participants() const;

        ///
        /// Leaves the multi-user chat room and destroys the MucRoom instance
        ///
        virtual ~MucRoom();

        ///
        /// Returns the room's ID
        ///
        QString id() const;
        
        ///
        /// Generates a unique room ID
        ///
        /// Room IDs don't have a particular format as long as they're unique. This is just a helper function.
        ///
        static QString generateUniqueMucRoomId();

        ///
        /// Sets the nickname of the connected user inside the room
        /// \param nickname         Nickname for the connected user
        ///
        void setNickname(const QString& nickname);

        ///
        /// Invites another user to the room
        ///
        /// \param  invite  Invite information
        ///
        void invite(const OutgoingMucRoomInvite &invite);

        ///
        /// Returns the nickname of the connected user inside the room
        ///
        QString nickname() const;

        ///
        /// Sets the role of the connected user inside the room
        /// \param role         Role for the connected user
        ///
        void setRole(const QString& role);

        ///
        /// Returns the role of the connected user inside the room
        ///
        QString role() const;

        ///
        /// Returns the Jabber ID for the passed room nickname
        ///
        JabberID jabberIdForNickname(const QString &nickname) const;

        ///
        /// Returns the peak number of participants in this room
        ///
        int peakParticipants() const;

        ///
        /// Returns the number of milliseconds we've been participating in this room for
        ///
        qint64 participationMilliseconds() const;

        ///
        /// Leave the room
        ///
        virtual void leaveRoom();

        ///
        /// Mark room as deactivated
        ///
        /// \param  type   Reason why room is being deactivated
        /// \param  owner  Nickname of owner deactivating the room
        ///
        void setDeactivated(DeactivationType type, const QString &owner);

        ///
        /// Is this room deactivated (e.g., in a dead state from being destroyed)?
        ///
        bool isDeactivated() const { return mDeactivated; }

        bool isParticipant(RemoteUser* user) const;

        bool isModerator(RemoteUser* user) const;

        void setInvitedBy(const QString& username) { mInvitedBy = username; }
        const QString& invitedBy() const { return mInvitedBy; }

    signals:
        ///
        /// Emitted if a system message has been received from the room
        ///
        /// System messages are typically automated messages generated by the server to communicate information about
        /// the room's configuration or life cycle.
        ///
        void systemMessageReceived(const Origin::Chat::Message &);

        ///
        /// Emitted immediately after existing the room
        ///
        /// The MucRoom instance will be destroyed immediately after emitting this signal
        ///
        void exited();

        ///
        /// Emitted after sending a room invitation to another user
        ///
        /// \param  invite  Invite that was sent
        ///
        /// \sa invite()
        ///
        void inviteSent(const Origin::Chat::OutgoingMucRoomInvite &invite);

        ///
        /// Emitted when a remote user declines a multi-user chat room invite from the current user
        ///
        /// \param  invitee  User that declined the invite
        /// \param  reason   Optional human-readable string describing the reason for declining the invite
        ///
        void inviteDeclined(const Origin::Chat::JabberID &invitee, const QString &reason);

        ///
        /// Emitted when the room gets destroyed by the owner
        ///
        /// \param  type   Reason why room is being deactivated
        /// \param  owner  Nickname of owner destroying the room
        ///
        void deactivated(const Origin::Chat::MucRoom::DeactivationType type, const QString &owner);

    protected:
        // Disable chat states in MUCs for now
        // There is no UI support and this is very chatty
        virtual bool enableChatStates() const
        {
            return false;
        }
        virtual void addParticipant(XmppChatroomMemberProxy const& member);
        virtual void removeParticipant(XmppChatroomMemberProxy const& member);
        virtual void clearRoom();

    private slots:
        void reconnectRoom();

    private:
        void changeParticipant(XmppChatroomMemberProxy const& member);
        void setJabberId(const Origin::Chat::JabberID &jid);

        void receivedSystemMessage(const Message &);

        JabberID mJabberId;
        QString mNickname;
        QString mRole;
        
        bool mDeactivated;

        // This protects the members below
        mutable QMutex mStateLock;

        QSet<ConversableParticipant> mParticipants;
        QSet<ConversableParticipant> mModerators;
        int mPeakParticipants;
        QElapsedTimer mJoinedTime;

        QString mInvitedBy;
    };
}
}

#endif
