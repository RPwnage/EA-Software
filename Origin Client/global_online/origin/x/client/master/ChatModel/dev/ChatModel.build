<?xml version="1.0" encoding="utf-8"?>
<project default="build">
    <!-- ************************* -->
    <!-- EAConfig target overrides -->
    <!-- ************************* -->
    <optionset name="config.targetoverrides" >
        <option name="clean" value="exclude"/>
    </optionset>

    <!-- ******************* -->
    <!-- Package declaration -->
    <!-- ******************* -->
    <property name="package.ChatModel.dir"  value="@{PathGetFullPath('.')}"/>
    <property name="package.ChatModel.version"  value="@{PathGetFileName('${package.ChatModel.dir}')}"/>
    <package name="ChatModel" targetversion="${package.ChatModel.version}"/>

    <!-- ******************** -->
    <!-- Package dependencies -->
    <!-- ******************** -->
    <dependent name="OriginVersion" />
    <dependent name="OriginConfig" />
    <dependent name="Qt" />
    <dependent name="libarchive" />
    <dependent name="openSSL" />
    <dependent name="libjingle" />

  <!-- ***************************** -->
    <!-- Build Configuration properties-->
    <!-- ***************************** -->
    <BuildType name="ChatModel.buildtype" from="OriginLibrary">
        <option name="buildset.cc.defines">
          ${option.value}
          ${package.libjingle.extra-defines}
        </option>

		<option name="buildset.cc.defines" if="${config-system} == 'pc'">
			${option.value}
			_WINSOCKAPI_
		</option>
	    <option name="buildset.cc.options" if="${config-system} == pc">
	      ${option.value}
	      /FI ${package.ChatModel.dir}/include/chat/OriginCommon.h
	    </option>

	</BuildType>

    <property name="runtime.buildtype" value="ChatModel.buildtype" />

    <target name="generate-code" depends="moc-compile" />

    <!-- NANT Prebuild target. Will execute this first before any compiling happens. -->
    <property name="runtime.prebuildtarget" value="generate-code" />

    <!-- VS Prebuild target. Will set this to execute in the VS project. -->
    <property name="runtime.vcproj.pre-build-step">
        ${nant.location}/nant.exe -buildfile:${nant.project.buildfile}  -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config} ${runtime.prebuildtarget}
    </property>

    <property name="runtime.usedependencies">
        OriginVersion
        libarchive
    </property>

    <!-- EA Package build dependencies. Automatically gets include and link inclusion. -->
    <property name="runtime.builddependencies">
        coreallocator
        Qt
        EABase
        EATrace
        EASTL
        DirtySDK
        TelemetryAPI
        libjingle
        services
        engine
        LSXWrapper
    </property>

    <property name="runtime.includedirs" >
        ${package.ChatModel.dir}
        ${package.ChatModel.dir}/source
        ${package.ChatModel.dir}/include/chat
    </property>

    <!-- common source files -->
    <fileset name="runtime.sourcefiles" basedir="${package.dir}">
        <includes name="${package.ChatModel.dir}/source/**/*.cpp" />
    </fileset>

    <fileset name="runtime.libs" >
        <includes name="${package.Qt.libdir}/qtmain${debug-suffix}.lib"/>
        <includes name="${package.Qt.libdir}/Qt5Gui${debug-suffix}.lib"/>
        <includes name="${package.Qt.libdir}/Qt5Network${debug-suffix}.lib"/>
        <includes name="${package.Qt.libdir}/Qt5Core${debug-suffix}.lib"/>
        <includes name="${package.Qt.libdir}/Qt5WebKit${debug-suffix}.lib"/>
        <includes name="${package.Qt.libdir}/Qt5WebKitWidgets${debug-suffix}.lib"/>
    </fileset>

    <target name="dumpsources">
        <foreach property="fname" item="FileSet" in="runtime.sourcefiles">
            <echo message="source ${fname}" />
        </foreach>
    </target>

    <fileset name="runtime.headerfiles" basedir="${package.dir}">
        <includes name="${package.ChatModel.dir}/**/source/*.h" />
        <includes name="${package.ChatModel.dir}/include/**/*.h" />
    </fileset>

    <property name="runtime.res.includedirs">
        ${package.ChatModel.dir}/include
    </property>

    <fileset name="runtime.resourcefiles">
    </fileset>

    <!-- these are the moc source files that generate the mocfiles that need to be included in the build. -->
    <fileset name="runtime.moc_sourcefiles" basedir="${package.ChatModel.dir}" append="true">
        <includes name="include/chat/BlockList.h" />
        <includes name="include/chat/ChatChannel.h" />
        <includes name="include/chat/ChatGroup.h" />
        <includes name="include/chat/ConnectedUser.h" />
        <includes name="include/chat/Connection.h" />
        <includes name="include/chat/Conversable.h" />
        <includes name="include/chat/MucRoom.h" />
        <includes name="include/chat/OriginConnection.h" />
        <includes name="include/chat/RemoteUser.h" />
        <includes name="include/chat/Roster.h" />
        <includes name="include/chat/XMPPUser.h" />
        <includes name="source/XMPPImplEventAdapter.h" />
    </fileset>

    <!-- construct the paths to include the moc files into the build after generating. -->
    <foreach property="fname" item="FileSet" in="runtime.moc_sourcefiles">
        <property name="sourcefile" value="${moc.output.dir}/moc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
        <fileset name="runtime.sourcefiles" append="true">
            <includes name="${sourcefile}" asis="true"/>
        </fileset>
    </foreach>

    <!-- get the options from the current config -->
    <property name="runtime.moc_defines" value="@{OptionSetGetValue('${runtime.buildtype}','cc.defines')}"/>
    <property name="runtime.moc_includedirs" value="${runtime.includedirs}"/>

</project>
