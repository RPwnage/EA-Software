///////////////////////////////////////////////////////////////////////////////
// NetworkAccessManager.h
//
// Copyright (c) 2011 Electronic Arts, Inc. -- All Rights Reserved.
///////////////////////////////////////////////////////////////////////////////
#ifndef NETWORKMANAGER_H_INCLUDED_
#define NETWORKMANAGER_H_INCLUDED_

#include <QNetworkAccessManager>
#include <QUrl>
#include <QMutex>

#include "services/plugin/PluginAPI.h"

namespace Origin
{
    namespace Services
    {
        class ORIGIN_PLUGIN_API NetworkAccessManager : public QNetworkAccessManager
        {
            Q_OBJECT
        public:
            ///
            /// Returns the default network access manager for the current thread
            ///
            static NetworkAccessManager* threadDefaultInstance();

            ///
            /// Compatibility alias for threadDefaultInstance()
            ///
            static NetworkAccessManager* instance() { return threadDefaultInstance(); }

            ///
            /// Hint about what is generating the requests
            ///
            enum RequestSourceHint 
            { 
                ///
                /// Requests are generated by the system
                ///
                /// This can include embedded web views and web services
                ///
                SystemRequestSourceHint,

                ///
                /// Requests are generated by the user
                ///
                /// IGO is an example of user generated request
                ///
                UserRequestSourceHint,

                ///
                /// Requests that are generated by the downloader
                ///
                DownloaderSourceHint
            };

            ///
            /// Gets the request source hint
            ///
            /// Defaults to SystemRequestSource
            ///
            RequestSourceHint requestSource() const { return m_requestSource; }

            ///
            /// Sets the request source hint
            ///
            /// \param source  The new request source
            ///
            void setRequestSource(RequestSourceHint source) { m_requestSource = source; }

            ///
            /// Retrieves the request source for a request
            ///
            /// \return The request source hint or SystemRequestSourceHint if it has
            ///         none
            ///
            static RequestSourceHint sourceForRequest(const QNetworkRequest &);

			/// \brief creates a network request from an URL string
			QNetworkRequest networkRequest(const QString& url);

			/// \brief creates a network request from an URL
			QNetworkRequest networkRequest(const QUrl& url);

			/// \brief creates a network request from a network request
			QNetworkRequest networkRequest(const QNetworkRequest& req);

        signals:
            void requestCreated(const QNetworkRequest &req, QNetworkReply *reply);

        protected slots:
            void handleSslErrors(const QList<QSslError>&);
        
        protected:

            NetworkAccessManager();

			/// \brief creates a network reply
			virtual QNetworkReply *createRequest( Operation, const QNetworkRequest &, QIODevice * outgoingdata = 0); 

        private:
            QString getCertificateSubjectString(const QSslCertificate& cert);
            QString getCertificateIssuerString(const QSslCertificate& cert);

            friend class NetworkAccessManagerFactory;

            RequestSourceHint m_requestSource;
            
            bool m_shouldAddDebugHeaders;

            QHash<QByteArray, QSsl::SslProtocol> m_forceServerProtocol;
            QByteArray m_geoIp;
            QByteArray m_geoTestHeader;
        };
    }
}

#include <QNetworkReply>
#include <QNetworkRequest>

namespace Origin
{
    namespace Services
    {
        ///
        /// NetworkReply is a generic network reply that can be used as a stand-in for a real QNetworkReply.
        ///
        /// NetworkReply is currently only used for blacklisting support in NetworkAccessManager::createRequest().
        ///
        class ORIGIN_PLUGIN_API NetworkReply : public QNetworkReply
        {
            Q_OBJECT
            
        public:
            NetworkReply( QNetworkAccessManager::Operation op, const QNetworkRequest& request, QObject *parent=0 );
            
            void setHttpStatusCode( int code, const QByteArray &statusText = QByteArray() );
            void setHeader( QNetworkRequest::KnownHeaders header, const QVariant &value );
            void setContentType( const QByteArray &contentType );
            
            void setBody( const QString &body );
            void setBody( const QByteArray &body );
            
            void abort();
            qint64 bytesAvailable() const;
            bool isSequential() const;
            
        protected:
            qint64 readData(char *data, qint64 maxSize);
            
        private:
            QByteArray mBody;
            qint64 mLocation;
        };
    }
}

#endif