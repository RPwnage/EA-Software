
<project name="BeaconService_OSX" default="build">
	
	<!-- ************************* -->
	<!-- EAConfig target overrides -->
	<!-- ************************* -->
	<optionset name="config.targetoverrides" >
		<option name="clean" value="exclude"/>
	</optionset>
  
  <property name="dll-suffix" value=".dylib" readonly="true" />

    <!-- ******************* -->
    <!-- Package declaration -->
    <!-- ******************* -->
    <property name="package.BeaconService_OSX.dir"  value="@{PathGetFullPath('.')}"/>
    <property name="package.BeaconService_OSX.version"  value="@{PathGetFileName('${package.BeaconService_OSX.dir}')}"/>
    <package name="BeaconService_OSX" targetversion="${package.BeaconService_OSX.version}"/>
	
	<!-- ******************* -->
    <!-- Package dependencies -->
    <!-- ******************* -->
	<dependent name="OriginConfig" />
	<dependent name="OriginVersion" />
	<dependent name="openSSL" />
	<dependent name="Qt" />

	<!-- ***************************** -->
	<!-- Build Configuration properties-->
	<!-- ***************************** -->
  <property name="eaconfig.rtti" value="on" />
  <property name="dirtysdk-samples" value="false" />
  <property name="osx-base-sdk-version" value="10.8" />

	<BuildType name="BeaconService_OSX.buildtype" from="OriginDLL">
    <option name="RTTI" value="on" />
	</BuildType>

  <property name="runtime.buildmodules" value="OriginWebHelperImpl" />
  
  <!-- This is to remove frameworks that are forced on us from the Heaven - ugly but it works -->
  <property name="runtime.OriginWebHelperImpl.remove.link.options">
    -framework AudioToolBox
  </property>
  
  <property name="config-xcode-type" value="Debug" if="${config-type} == 'debug'" />
  <property name="config-xcode-type" value="Release" if="${config-type} == 'opt'" />

  <!-- OriginWebHelperImpl module section -->

  <property name="module.OriginWebHelperImpl.dir" value="${package.dir}/source/OriginWebHelperImpl" />
  <property name="runtime.OriginWebHelperImpl.buildtype" value="BeaconService_OSX.buildtype" />

  <property name="runtime.OriginWebHelperImpl.xcode-postprocessing-strip" value="false" />
  <property name="runtime.OriginWebHelperImpl.xcode-osx-template-dir" value="${package.BeaconService_OSX.dir}/XCodeTemplate/BeaconService-xcode.template" />
  <!--property name="runtime.OriginWebHelperImpl.outputdir" value="${nant.project.buildroot}/XCodeOSX/SubProjects/BeaconService_OSX/${package.BeaconService_OSX.version}/OriginWebHelperImpl/build/${config-xcode-type}" /-->
  <property name="runtime.OriginWebHelperImpl.outputdir" value="${package.configbindir}" />
  <property name="runtime.OriginWebHelperImpl.targetdir" value="${package.dir}/target" />
  <property name="runtime.OriginWebHelperImpl.outputname" value="OriginWebHelperImpl" />
  <property name="runtime.OriginWebHelperImpl.plist" value="${runtime.OriginWebHelperImpl.xcode-osx-template-dir}/Info.plist" />
  <property name="runtime.OriginWebHelperImpl.plist.template" value="${runtime.OriginWebHelperImpl.xcode-osx-template-dir}/Info.plist.template" />
  <property name="runtime.OriginWebHelperImpl.plist.embedded" value="${package.dir}/source/OriginWebHelperImpl/OriginWebHelperImpl-Info-versioned.plist" />
  <property name="runtime.OriginWebHelperImpl.plist.embedded.template" value="${package.dir}/source/OriginWebHelperImpl/OriginWebHelperImpl-Info.plist" />

	<property name="runtime.OriginWebHelperImpl.osx-extra-link-options" value="-sectcreate __TEXT __info_plist ${runtime.OriginWebHelperImpl.plist.embedded} -headerpad_max_install_names -stdlib=libc++"/>

	<!-- ************************* -->
	<!-- Prebuild property targets -->
	<!-- ************************* -->
	<!-- NANT preprocess target. Step that happens before project generation -->
  <property name="runtime.OriginWebHelperImpl.preprocess" value="update-version" />
  
	<!-- NANT Prebuild target. Will execute this first before any compiling happens. -->
	<property name="runtime.OriginWebHelperImpl.prebuildtarget" value="OriginWebHelperImpl-generate-code" />

	<!-- VS Prebuild target. Will set this to execute in the VS project. -->
	<property name="runtime.OriginWebHelperImpl.vcproj.pre-build-step">
		${nant.location}\nant.exe -buildfile:${nant.project.buildfile}  -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config} ${runtime.OriginWebHelperImpl.prebuildtarget}
	</property>

	<!-- ********************************************************** -->
	<!-- Package USE dependencies 																	-->
	<!-- inclusion into the project but does not affect build order -->
	<!-- ********************************************************** -->
	<property name="runtime.OriginWebHelperImpl.usedependencies">
        Qt
        openSSL
	</property>
	
	<!-- ********************************************************** -->
	<!-- Package BUILD dependencies 																-->
	<!-- inclusion into the project, affects build order 						-->
	<!-- ********************************************************** -->

	<property name="runtime.OriginWebHelperImpl.builddependencies">
        coreallocator
        EABase
        EAIO
        EATrace
        EAStdC
        EAThread
        EASTL
        BugSentry
        EAAssert
        EACallstack
        PPMalloc
        ExceptionHandler
        EABase
        zlib
        TelemetryAPI
        services
        DirtySDK
		TelemetrySDK
		LocalHost
		LSXWrapper
	</property>

  <property name="runtime.OriginWebHelperImpl.osx-frameworks" >
    -framework ${package.Qt.libdir}/QtCore
    -framework Carbon
    -framework QuickTime
    -framework CoreServices
    -framework Foundation
    -framework Security
    -framework AppKit
    -framework CoreFoundation
    -framework ApplicationServices
    -framework ServiceManagement
    -framework CoreAudio
    -framework IOKit
    -framework SystemConfiguration
    -framework ${package.Qt.libdir}/QtGui
    -framework ${package.Qt.libdir}/QtNetwork
    -framework ${package.Qt.libdir}/QtOpenGL
    -framework ${package.Qt.libdir}/QtWebKit
	-framework ${package.Qt.libdir}/QtWidgets
    -framework ${package.Qt.libdir}/QtXml
    -framework ${package.Qt.libdir}/QtXmlPatterns
  </property>

	<!-- ************ -->
    <!-- Include path -->
    <!-- ************ -->
	<property name="runtime.OriginWebHelperImpl.includedirs" >
        ${property.value}
		${module.OriginWebHelperImpl.dir}
	</property>

    <fileset name="runtime.OriginWebHelperImpl.headerfiles" basedir="${module.OriginWebHelperImpl.dir}">
        <includes name="**/*.h" />
    </fileset>  
  

	<!-- ************ -->
    <!-- Source path  -->
    <!-- ************ -->
	<fileset name="runtime.OriginWebHelperImpl.sourcefiles" basedir="${module.OriginWebHelperImpl.dir}">
		<includes name="OriginWebHelperImpl.cpp" />
        <includes name="POSIXSignalHandler.cpp" />
        <includes name="ServiceContext.cpp" />
	</fileset>

  <fileset name="runtime.OriginWebHelperImpl.libs" >
		<includes name="${package.openSSL.bindir}/libcrypto.a"/>
		<includes name="${package.openSSL.bindir}/libssl.a"/>
  </fileset>
	
	<fileset name="runtime.OriginWebHelperImpl.moc_sourcefiles" basedir="${module.OriginWebHelperImpl.dir}" append="true"> 
        <includes name="POSIXSignalHandler.h" />
        <includes name="ServiceContext.h" />
	</fileset> 

	<!-- construct the paths to include the moc files into the build after generating. -->
	<foreach property="fname" item="FileSet" in="runtime.OriginWebHelperImpl.moc_sourcefiles">
		<property name="sourcefile" value="${moc.output.dir}/moc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
		<fileset name="runtime.OriginWebHelperImpl.sourcefiles" append="true">
			<includes name="${sourcefile}" asis="true"/>
		</fileset>
	</foreach>
	
	<target name="sign-exe">
	</target>
	
    <target name="OriginWebHelperImpl-generate-code" depends="update-version" >
        <!-- get the options from the current config -->
        <property name="runtime.moc_defines" value="@{OptionSetGetValue('${runtime.OriginWebHelperImpl.buildtype}','cc.defines')}"/>
        <property name="runtime.moc_includedirs" value="${runtime.OriginWebHelperImpl.includedirs}"/>
        <fileset name="runtime.moc_sourcefiles" fromfileset="runtime.OriginWebHelperImpl.moc_sourcefiles" />
        <call target="moc-compile" if="@{FileSetExists('runtime.moc_sourcefiles')}" />
  </target>
        
  <target name="update-version" >
  
    <echo message="Updating versions in plist files" />
    <!-- Get the current version -->
    <nant buildfile="${package.OriginVersion.dir}/version.build" target="getversion" >
      <property name="config" value="${config}" />
    </nant>
    <property name="version" fromfile="${package.OriginVersion.version.file}" />

    <!-- Update the embedded plist with the new version number -->
    <property name="plist" value="" />
    <property name="nextline" value="false" />
    <foreach property="line" item="Line" in="${runtime.OriginWebHelperImpl.plist.embedded.template}">
      <do if="${nextline}" >
        <property name="line" value="&lt;string&gt;${version}&lt;/string&gt;" />
        <property name="nextline" value="false" />
      </do>
      <do if="@{StrIndexOf(${line},'CFBundleVersion')} != -1">
        <property name="nextline" value="true" />
      </do>
      <property name="plist" value="${property.value}&#10;${line}" />
    </foreach>
    <echo message="${plist}" file="${runtime.OriginWebHelperImpl.plist.embedded}" />

    <!-- Update the main plist with the new version number -->
    <property name="plist" value="" />
    <property name="nextline" value="false" />
    <foreach property="line" item="Line" in="${runtime.OriginWebHelperImpl.plist.template}">
      <do if="${nextline}" >
        <property name="line" value="&lt;string&gt;${version}&lt;/string&gt;" />
        <property name="nextline" value="false" />
      </do>
      <do if="@{StrIndexOf(${line},'CFBundleVersion')} != -1">
        <property name="nextline" value="true" />
      </do>
      <property name="plist" value="${property.value}&#10;${line}" />
    </foreach>
    <echo message="${plist}" file="${runtime.OriginWebHelperImpl.plist}" />
  </target>
  
  <!-- ************************** -->
  <!-- Postbuild property targets -->
  <!-- ************************** -->

	<target name="runtime.OriginWebHelperImpl.postbuildtarget">

        <property name="bad-rpaths">
            QtNetwork.framework/Versions/5/QtNetwork
            QtGui.framework/Versions/5/QtGui
            QtCore.framework/Versions/5/QtCore
            QtOpenGL.framework/Versions/5/QtOpenGL
            QtWebKit.framework/Versions/5/QtWebKit
			QtWidgets.framework/Versions/5/QtWidgets
            QtXml.framework/Versions/5/QtXml
            QtXmlPatterns.framework/Versions/5/QtXmlPatterns
			libcrypto.1.0.0.dylib
			libssl.1.0.0.dylib
        </property>
        <echo message="Fixing paths" />
        <foreach property="lib" item="String" in="${bad-rpaths}">
            <exec program="install_name_tool" commandline="-change @rpath/${lib} @loader_path/../Frameworks/${lib} ${runtime.OriginWebHelperImpl.outputdir}/${runtime.OriginWebHelperImpl.outputname}${dll-suffix}" failonerror="false" />
        </foreach>

		<exec program="install_name_tool" commandline="-change  @executable_path/../Frameworks/mach_inject_bundle.framework/Versions/A/mach_inject_bundle @loader_path/../Frameworks/mach_inject_bundle.framework/Versions/A/mach_inject_bundle ${runtime.OriginWebHelperImpl.outputdir}/${runtime.OriginWebHelperImpl.outputname}${dll-suffix}" failonerror="false" />
	</target>

  <target name="clean-custom" >
    <delete dir="${package.BeaconService_OSX.dir}/build" />
    <delete dir="${package.BeaconService_OSX.dir}/XCodeOSXTemplate" />
  </target>
</project>
