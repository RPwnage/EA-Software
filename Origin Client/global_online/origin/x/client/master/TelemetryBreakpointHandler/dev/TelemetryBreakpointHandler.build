<?xml version="1.0" encoding="utf-8"?>
<project name="TelemetryBreakpointHandler" default="build">
    <!-- ************************* -->
    <!-- EAConfig target overrides -->
    <!-- ************************* -->
    <optionset name="config.targetoverrides" >
        <option name="clean" value="exclude"/>
    </optionset>
    
    <property name="xcode-postprocessing-strip" value="false" />
    
    <!-- Package declaration -->
    <!-- Get the version number from current directory -->
    <property name="currDir" value="@{PathGetFullPath('.')}" />
    <property name="currVer" value="@{PathGetFileName('${currDir}')}" />
    <package name="TelemetryBreakpointHandler" targetversion="${currVer}" />
    
    <dependent name="OriginConfig" />
	<dependent name="Qt" />
    
    
	<property name="eaconfig.rtti" value="on" />
    <property name="osx-base-sdk-version" value="10.7" />
    <property name="at" value='@' />
    
    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->
    
	<property name="runtime.buildmodules" value="TelemetryBreakpointHandler" />
	<property name="config-xcode-type" value="Debug" if="${config-type} == 'debug'" />
	<property name="config-xcode-type" value="Release" if="${config-type} == 'opt'" />
    <!--property name="runtime.TelemetryBreakpointHandler.xcodedir" value="${package.${package.name}.dir}/build/XCodeOSX" /-->
    <property name="runtime.TelemetryBreakpointHandler.xcodedir" value="${package.builddir}/build/XCodeOSX" />
    <property name="runtime.TelemetryBreakpointHandler.xcodebuilddir" value="${runtime.${package.name}.xcodedir}/build" />
    <property name="runtime.TelemetryBreakpointHandler.xcodeprojfile" value="${runtime.${package.name}.xcodedir}/${package.name}.xcodeproj" />
    <property name="runtime.TelemetryBreakpointHandler.bundledir" value="${runtime.${package.name}.xcodedir}/build/${config-xcode-type}/TelemetryBreakpointHandler.app"/>
	<property name="runtime.TelemetryBreakpointHandler.outputdir" value="${runtime.TelemetryBreakpointHandler.bundledir}/Contents/MacOS" />
	<property name="runtime.TelemetryBreakpointHandler.outputdir" value="${package.TelemetryBreakpointHandler.dir}/bin" if="${config-system} == 'pc'"/>
	<property name="runtime.TelemetryBreakpointHandler.targetdir" value="${package.dir}/target" />
    <property name="runtime.TelemetryBreakpointHandler.outputname" value="TelemetryBreakpointHandler" />
    <property name="runtime.TelemetryBreakpointHandler.osx-xcode-postprocessing-strip" value="false" />
    <property name="runtime.TelemetryBreakpointHandler.xcode-osx-template-dir" value="${package.TelemetryBreakpointHandler.dir}/XCodeTemplate/TelemetryBreakpointHandler-xcode.template" />
	
	<property name="runtime.TelemetryBreakpointHandler.osx-extra-link-options" value="-headerpad_max_install_names"/>
    
	<BuildType name="TelemetryBreakpointHandler.buildtype" from="OriginProgram">
        <option name="clanguage" value="on"/>
	</BuildType>
    
    <property name="runtime.TelemetryBreakpointHandler.buildtype" value="TelemetryBreakpointHandler.buildtype" />
    
    <property name="runtime.TelemetryBreakpointHandler.usedependencies">
        EABase
        Qt
    </property>
    
    <property name="runtime.TelemetryBreakpointHandler.builddependencies">
    </property>
    
    <property name="runtime.TelemetryBreakpointHandler.buildonlydependencies">
    </property>
    
    <do if="${config-system} == 'osx'" >
        <property name="runtime.TelemetryBreakpointHandler.osx-frameworks" >
            -framework Cocoa
            -framework Carbon
            -framework QuickTime
            -framework AppKit
            -framework ${package.Qt.libdir}/QtCore
            -framework ${package.Qt.libdir}/QtGui
            -framework ${package.Qt.libdir}/QtWidgets
        </property>
    </do>
    
    <property name="runtime.TelemetryBreakpointHandler.includedirs" >
        ${package.dir}/include
        ${package.dir}/source
        ${moc.output.dir}
        <!-- ${ui.output.dir} -->
    </property>
    
    <fileset name="runtime.TelemetryBreakpointHandler.libs" >
        <group if="${config-system} =='pc'" >
            <includes name="${package.Qt.libdir}/qtmain${debug-suffix}.lib"/>
            <includes name="${package.Qt.libdir}/Qt5Gui${debug-suffix}.lib"/>
            <includes name="${package.Qt.libdir}/Qt5Core${debug-suffix}.lib"/>
            <includes name="${package.Qt.libdir}/Qt5Widgets${debug-suffix}.lib"/>
        </group>
        <group if="${config-system} == 'osx'" >
        </group>
    </fileset>
    
    <!--
    <fileset name="runtime.TelemetryBreakpointHandler.headerfiles" basedir="${package.dir}">
    <includes name="**/*.h" />
    </fileset>
    -->
    
    <!-- Resource files that require the Qt Resource Compiler (QRC) -->
	<!--
    <fileset name="runtime.qrc_sourcefiles" basedir="${package.dir}/resources">
        <includes name="**/*.qrc" />
    </fileset>
    -->
	
    <!-- Header files that require the Qt Meta Object Compiler (MOC) -->
    <fileset name="runtime.moc_sourcefiles" basedir="${package.dir}/source">
        <includes name="**/*.h" />
    </fileset>

    <!-- User interface files that require the Qt UI Compiler (UIC)
    <fileset name="runtime.ui_sourcefiles" basedir="${package.dir}/source">
        <group if="${config-system} =='pc'" >
	        <includes name="**/crashreportwindow.ui" />
	</group>
        <group if="${config-system} == 'osx'" >
	        <includes name="**/crashreportwindow_mac.ui" />
        </group>
    </fileset>
    -->
    
    <!-- Normal source files -->
    <fileset name="runtime.TelemetryBreakpointHandler.sourcefiles" basedir="${package.dir}/source">
        <group if="${config-system} =='pc'" >
	        <includes name="**/*.cpp"/>
	</group>
        <group if="${config-system} == 'osx'" >
        <includes name="**/*.xib" />
        <includes name="**/*.m" />
        <includes name="**/*.mm"/>
        <includes name="**/*.cpp"/>
        </group>
    </fileset>
    
    <!-- construct the paths to include the qrc files into the build after generating. -->
	<!--
    <foreach property="fname" item="FileSet" in="runtime.qrc_sourcefiles">
        <property name="sourcefile" value="${rc.output.dir}/qrc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
        <fileset name="runtime.TelemetryBreakpointHandler.sourcefiles" append="true">
            <includes name="${sourcefile}" asis="true"/>
        </fileset>
    </foreach>
	-->
    
	<!-- construct the paths to include the moc files into the build after generating. -->
	<foreach property="fname" item="FileSet" in="runtime.moc_sourcefiles">
		<property name="sourcefile" value="${moc.output.dir}/moc_@{PathGetFileNameWithoutExtension(${fname})}.cpp" />
		<fileset name="runtime.TelemetryBreakpointHandler.sourcefiles" append="true">
			<includes name="${sourcefile}" asis="true"/>
		</fileset>
	</foreach>
    
    <fileset name="runtime.TelemetryBreakpointHandler.resourcefiles">
    </fileset>
    
    <fileset name="runtime.TelemetryBreakpointHandler.bundleresources">
    </fileset>
    
    <!-- get the options from the current config -->
    <property name="runtime.moc_defines" value=""/>
    <property name="runtime.moc_includedirs" value="${runtime.TelemetryBreakpointHandler.includedirs}"/>
    
    <property name="qtlibs">
        QtGui
        QtCore
        QtWidgets
    </property>
    
    <!-- OS X wants OpenGL accerated WebKit -->
    <property name="qtlibs" if="${config-system} == 'osx'">
        ${property.value}
        QtOpenGL
    </property>
    
    <!-- ************************** -->
    <!-- Prebuild property targets -->
    <!-- ************************** -->
    
    <property name="prebuild.target.list">
        create-dirs
        <!-- ui-compile -->
        moc-compile
        <!-- qt-rc-compile -->
    </property>
    
    <target name="pre-build-tasks">
        <foreach property="runtarget" item="String" in="${prebuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>
    
    <property name="runtime.TelemetryBreakpointHandler.preprocess" value="update-plist" />
    <!-- NANT prebuild target. Will execute this after compiling happens. -->
    <property name="runtime.TelemetryBreakpointHandler.prebuildtarget" value="pre-build-tasks" />
    
    <!-- VS Prebuild target. Will set this to execute in the VS project. -->
    <property name="runtime.TelemetryBreakpointHandler.vcproj.pre-build-step">
        ${nant.location}/nant.exe -buildfile:${nant.project.buildfile}  -masterconfigfile:${nant.project.masterconfigfile} -D:config=${config} ${runtime.TelemetryBreakpointHandler.prebuildtarget}
    </property>
    
    <!-- ************************** -->
    <!-- postbuild property targets -->
    <!-- ************************** -->
    
    <property name="postbuild.target.list">
        sign-exe
    </property>

    <target name="post-build-tasks">
        <foreach property="runtarget" item="String" in="${postbuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>
    
    <target name="sign-exe">
        <do if="${config-system}=='pc'" >
            <property name="cert.name" value="OriginDev" />
            <property name="cert.name" value="Developer ID Application: Electronic Arts Inc." if="@{PropertyExists('jenkins')}"/>
            <property name="signfile" value="${runtime.TelemetryBreakpointHandler.outputdir}/${runtime.TelemetryBreakpointHandler.outputname}"/>
            
            <exec program="codesign" message="Signing ${signfile}" failonerror="false" if="@{FileExists('${signfile}')}==true" >
                <args>
                    <arg value="-f" />
                    <arg value="-s" />
                    <arg value="&quot;${cert.name}&quot;" />
                    <arg value="${signfile}" />
                </args>
            </exec>
        </do>
    </target>
    
    <!-- NANT postbuild target. Will execute this after compiling happens. -->
    <property name="runtime.TelemetryBreakpointHandler.postbuildtarget" value="post-build-tasks" />
    
    <target name="create-dirs">
        <mkdir dir="${runtime.TelemetryBreakpointHandler.outputdir}" unless="@{DirectoryExists(${runtime.TelemetryBreakpointHandler.outputdir})}" />
    </target>
    
    <target name="clean-custom">
        <delete dir="${runtime.TelemetryBreakpointHandler.outputdir}" />
		<do if="${config-system}=='osx'" >
			<echo message="Cleaning ${config-xcode-type} XCode project." />
			<exec program="xcodebuild" workingdir="@{PathGetDirectoryName(${runtime.${package.name}.xcodeprojfile})}" if="@{FileExists(${runtime.${package.name}.xcodeprojfile})}" >
				<args>
					<arg value="-configuration" />
					<arg value="${config-xcode-type}" />
					<arg value="clean" />
				</args>
			</exec>
		</do>
        <delete dir="${nant.project.buildroot}" />
    </target>
    
    
    <!-- Fix rpath on the Mac. -->
    <target name="fix-rpaths">
        <do if="${config-system} == 'osx'">
            <echo message="Fixing rpaths" />
            <exec program="install_name_tool" commandline="-add_rpath @loader_path/../Frameworks ${runtime.TelemetryBreakpointHandler.outputdir}/${runtime.TelemetryBreakpointHandler.outputname}" />
        </do>
    </target>
</project>
