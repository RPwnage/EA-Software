<?xml version="1.0" encoding="utf-8"?>
<project name="OriginBootstrap" default="build">
    <!-- ************************* -->
    <!-- EAConfig target overrides -->
    <!-- ************************* -->
    <optionset name="config.targetoverrides" >
        <option name="clean" value="exclude"/>
    </optionset>

    <property name="xcode-postprocessing-strip" value="false" />
  
    <!-- Package declaration -->
    <!-- Get the version number from current directory -->
    <property name="currDir" value="@{PathGetFullPath('.')}" />
    <property name="currVer" value="@{PathGetFileName('${currDir}')}" />
    <package name="OriginBootstrap" targetversion="${currVer}" />

    <property name="xcode-osx-project-dir" value="${package.builddir}" />

    <property name="debug-suffix" value="" />
    <property name="debug-suffix" value="_debug" />
    <property name="dll-suffix" value=".dylib" />
    <dependent name="OriginConfig" />
    <dependent name="OriginVersion" />
    <dependent name="libarchive" />
    <dependent name="openSSL" />
    <dependent name="Qt" />
    <dependent name="OriginBootstrapShared" />
    <dependent name="originClient" />
    <dependent name="TelemetryBreakpointHandler" />
    <dependent name="ShiftDirectDownload" />
    <dependent name="OriginDeveloperTool" />

    <property name="dirtysdk-samples" value="false" />
    <property name="eaconfig.rtti" value="on" />
    <property name="osx-deployment-target-version" value="10.7" />
    <property name="at" value='@' />
  
    <!-- ********************* -->
    <!-- Runtime configuration -->
    <!-- ********************* -->

    <property name="runtime.buildmodules" value="OriginBootstrap" />
    <property name="config-xcode-type" value="Debug" if="${config-type} == 'debug'" />
    <property name="config-xcode-type" value="Release" if="${config-type} == 'opt'" />
    <!--property name="runtime.OriginBootstrap.xcodedir" value="${package.${package.name}.dir}/build/XCodeOSX" /-->
    <property name="runtime.OriginBootstrap.xcodedir" value="${package.builddir}" />
    <property name="runtime.OriginBootstrap.xcodebuilddir" value="${runtime.OriginBootstrap.xcodedir}/build" />
    <property name="runtime.OriginBootstrap.xcodeprojfile" value="${runtime.OriginBootstrap.xcodedir}/${package.name}.xcodeproj" />
    <property name="runtime.OriginBootstrap.bundledir" value="${runtime.OriginBootstrap.xcodedir}/build/${config-xcode-type}/Origin.app" />
		<property name="runtime.OriginBootstrap.qtpluginsdir" value="${runtime.OriginBootstrap.bundledir}/Contents/plugins" />
		<property name="runtime.OriginBootstrap.frameworksdir" value="${runtime.OriginBootstrap.bundledir}/Contents/Frameworks" />
    <property name="runtime.OriginBootstrap.resourcesdir" value="${runtime.OriginBootstrap.bundledir}/Contents/Resources" />
    <property name="runtime.OriginBootstrap.launchservicesdir" value="${runtime.OriginBootstrap.bundledir}/Contents/Library/LaunchServices" />
    <property name="runtime.OriginBootstrap.pluginsdir" value="${runtime.OriginBootstrap.bundledir}/Contents/MacOS/plugins" />
		<property name="runtime.OriginBootstrap.outputdir" value="${runtime.OriginBootstrap.bundledir}/Contents/MacOS" />
		<property name="runtime.OriginBootstrap.targetdir" value="${package.dir}/target" />
    <property name="runtime.OriginBootstrap.outputname" value="Origin" />
    <property name="runtime.OriginBootstrap.xcode-osx-template-dir" value="${package.OriginBootstrap.dir}/XCodeTemplate/OriginBootstrap-xcode.template" />
    <property name="runtime.OriginBootstrap.plist.template" value="${runtime.OriginBootstrap.xcode-osx-template-dir}/Info.plist.template" />
    <property name="runtime.OriginBootstrap.plist" value="${runtime.OriginBootstrap.xcode-osx-template-dir}/Info.plist" />
    <property name="runtime.OriginBootstrap.bundle-id" value="Origin" />
    <property name="runtime.OriginBootstrap.tempdir" value="${package.builddir}/temp" />
    <property name="runtime.OriginBootstrap.appdir" value="${runtime.OriginBootstrap.tempdir}/Origin.app" />
    <property name="runtime.OriginBootstrap.osx-xcode-postprocessing-strip" value="false" />
    <property name="runtime.OriginBootstrap.osx-extra-link-options" value="-stdlib=libstdc++"/>

  <property name="runtime.EAAssert.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EABase.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EACallstack.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EAIO.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EAStdC.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EASTL.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EAThread.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.EATrace.osx-universal-lib" value="true" readonly="true" />
  <property name="runtime.PPMalloc.osx-universal-lib" value="true" readonly="true" />
  
	<BuildType name="OriginBootstrap.ObjC.buildtype" from="OriginProgram">
    <option name="clanguage" value="on"/>
	</BuildType>

  <property name="cc.cpp11" value="off" />

	<BuildType name="OriginBootstrap.buildtype" from="OriginProgram">
    <option name="clanguage" value="on"/>
    <option name="buildset.cc.options">
      ${option.value}
      -std=c++11
      -stdlib=libstdc++
    </option>
    <option name="buildset.cc.defines">
      ${option.value}
    </option>
	</BuildType>

    <!--Automation specific variables-->
    <property name="automation.branch" value="@{StrConcat('Mac-',${origin.branch})}"/>
    <property name="automation.qt.dir" value="${runtime.OriginBootstrap.tempdir}/Qt" />
    <property name="automation.qt.zip" value="${runtime.OriginBootstrap.tempdir}/Qt.zip" />
    <property name="automation.qt.libs">
      QtDeclarative
      QtScript
    </property>
    <!--/Automation-->
    
    <property name="runtime.OriginBootstrap.buildtype" value="OriginBootstrap.buildtype" />

    <property name="runtime.OriginBootstrap.usedependencies">
        OriginVersion
        OriginBootstrapShared
    </property>
    
    <property name="runtime.OriginBootstrap.builddependencies">
      zlib
      libarchive
    </property>

    <property name="runtime.OriginBootstrap.buildonlydependencies">
      IGO
      IGOProxy_OSX 
      originClient
      BeaconService_OSX
      BeaconServiceHelper_OSX
      EscalationClient_OSX
      EscalationClientHelper_OSX
      OriginCrashReporter
      TelemetryBreakpointHandler
      ShiftDirectDownload
      OriginDeveloperTool
    </property>

  <property name="runtime.OriginBootstrap.osx-frameworks" >
    -framework AppKit
    -framework Cocoa
    -framework CoreData
    -framework CoreAudio
    -framework IOKit
    -framework CoreServices
    -framework Security
    -framework WebKit
  </property>

    <property name="runtime.OriginBootstrap.includedirs" >
        ${package.dir}/include
        ${package.OriginBootstrapShared.includedirs}
    </property>

    <fileset name="runtime.OriginBootstrap.libs" >
      <includes name="${package.libarchive.dir}\lib\libarchive.a"/>
      <includes name="libresolv.dylib"/>
    </fileset>

    <fileset name="runtime.OriginBootstrap.headerfiles" basedir="${package.dir}">
        <includes name="**/*.h" />
    </fileset>

    <fileset name="runtime.OriginBootstrap.sourcefiles" >
        <includes name="${package.dir}/source/**/*.xib" />
        <includes name="${package.dir}/source/**/*.m" optionset="OriginBootstrap.ObjC.buildtype" />
        <includes name="${package.dir}/source/**/*.mm"/>
        <includes name="${package.dir}/source/**/*.cpp"/>
    </fileset>

    <fileset name="runtime.OriginBootstrap.resourcefiles">
    </fileset>

    <fileset name="runtime.OriginBootstrap.bundleresources">
        <includes name="${package.dir}/Resources/**/*" />
        <includes name="${package.OriginBootstrapShared.dir}/Resources/**/*" />
    </fileset>

    <!-- get the options from the current config -->
    <property name="runtime.moc_defines" value=""/>
    <property name="runtime.moc_includedirs" value="${runtime.OriginBootstrap.includedirs}"/>
    
    <property name="qtlibs">
        QtCore
        QtGui
        QtOpenGL
        QtNetwork
        QtWebKit
        QtWidgets
        QtWebKitWidgets
        QtPrintSupport
        QtMultimedia
        QtMultimediaWidgets
        QtXml
        QtXmlPatterns
        QtOpenGL
        QtQuick
        QtQml
        QtSensors
        QtSerialPort
        QtSql
        QtDesigner
        QtPositioning
    </property>
    
    <property name="qtplugins">
        accessible
        audio
        bearer
        designer
        iconengines
        imageformats
        mediaservice
        platforms
        playlistformats
        printsupport
        qmltooling
        sensorgestures
        sensors
        sqldrivers
    </property>
    
    <property name="originplugins">
        ShiftDirectDownload
        OriginDeveloperTool
    </property>

    <!-- This is the relative filepath to the bundle that you are signing. -->
    <property name="sign.filelist" >
      Contents/Frameworks/libcrypto.1.0.0.dylib
      Contents/Frameworks/libssl.1.0.0.dylib
      Contents/Library/LaunchServices/com.ea.origin.WebHelper
      Contents/Library/LaunchServices/com.ea.origin.ESHelper
      Contents/MacOS/IGO.dylib
      Contents/MacOS/IGOLoader.dylib
      Contents/MacOS/OriginWebHelperImpl.dylib
      Contents/MacOS/OriginESImpl.dylib
      Contents/MacOS/OriginCrashReporter
      Contents/MacOS/OriginClient
    </property>
    
    <property name="sign.filelist" if="(${config-system} == 'osx') AND (${config-type} == 'debug')">
      ${property.value}
      Contents/MacOS/TelemetryBreakpointHandler
    </property>
    
    <!-- If TelemetryBreakPointHandler exists then it needs to be signed before Origin which is why we have this separate -->
    <property name="sign.filelist" >
      ${property.value}
      Contents/MacOS/Origin
    </property>

    <property name="sign.dirlist" >
      Contents/Frameworks/QtCore.framework
      Contents/Frameworks/QtDesigner.framework
      Contents/Frameworks/QtGui.framework
      Contents/Frameworks/QtMultimedia.framework
      Contents/Frameworks/QtMultimediaWidgets.framework
      Contents/Frameworks/QtNetwork.framework
      Contents/Frameworks/QtOpenGL.framework
      Contents/Frameworks/QtPrintSupport.framework
      Contents/Frameworks/QtQml.framework
      Contents/Frameworks/QtQuick.framework
      Contents/Frameworks/QtSensors.framework
      Contents/Frameworks/QtSerialPort.framework
      Contents/Frameworks/QtSql.framework
      Contents/Frameworks/QtWebKit.framework
      Contents/Frameworks/QtWebKitWidgets.framework
      Contents/Frameworks/QtWidgets.framework
      Contents/Frameworks/QtXml.framework
      Contents/Frameworks/QtXmlPatterns.framework
      Contents/Frameworks/QtPositioning.framework    
    </property>
    <!-- ************************** -->
    <!-- Prebuild property targets -->
    <!-- ************************** -->

    <property name="prebuild.target.list">
        create-dirs
        create-qm-files
    </property>
    
    <target name="pre-build-tasks">
        <foreach property="runtarget" item="String" in="${prebuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>

    <target name="create-dirs">
        <mkdir dir="${runtime.OriginBootstrap.outputdir}" unless="@{DirectoryExists(${runtime.OriginBootstrap.outputdir})}" />
    </target>
    
    <property name="runtime.OriginBootstrap.preprocess" value="update-plist" />
    <!-- NANT prebuild target. Will execute this after compiling happens. -->
    <property name="runtime.OriginBootstrap.prebuildtarget" value="pre-build-tasks" />

    <property name="qm.output.dir" value="${package.builddir}/lang"/>
    <fileset name="runtime.ts_sourcefiles" basedir="${package.dir}">
        <includes name="${package.OriginBootstrap.dir}/Resources/lang/**/*.ts" />
    </fileset>

    <target name="create-qm-files">
        <do if="@{FileSetExists('runtime.ts_sourcefiles')}">
            <echo message="-- .ts Compile Start -- " />

            <!-- Create output dir for ts compiler. It won't create one-->
            <mkdir dir="${qm.output.dir}" unless="@{DirectoryExists(${qm.output.dir})}" />

            <foreach property="fname" item="FileSet" in="runtime.ts_sourcefiles">
                <exec program="${package.Qt.tools}/lrelease" message="lrelease ${fname}" stdout="false">
                    <args>
                        <arg value="${fname}" />
                        <arg value="-qm ${qm.output.dir}/@{PathGetFileNameWithoutExtension(${fname})}.qm"/>
                    </args>
                    <inputs>
                        <includes name="${fname}"/>
                    </inputs>
                    <outputs>
                        <includes name="${qm.output.dir}/@{PathGetFileNameWithoutExtension(${fname})}.qm"/>
                    </outputs>
                </exec>
            </foreach>
            <echo message="-- .ts Compile End -- " />
        </do>
    </target>
    
    <!-- ************************** -->
    <!-- postbuild property targets -->
    <!-- ************************** -->
    
    <property name="postbuild.target.list">
      copy-to-bundle
      codesign
    </property>
    
    <target name="post-build-tasks">
        <property name="sign.basedir" value="${runtime.OriginBootstrap.bundledir}" />
        <foreach property="runtarget" item="String" in="${postbuild.target.list}">
            <call target="${runtarget}" />
        </foreach>
    </target>
  
    <!-- NANT postbuild target. Will execute this after compiling happens. -->
    <property name="runtime.OriginBootstrap.postbuildtarget" value="post-build-tasks" />
    
    <target name="clean-custom">
        <delete dir="${runtime.OriginBootstrap.outputdir}" />
      <echo message="Cleaning ${config-xcode-type} XCode project." /> 
      <exec program="xcodebuild" workingdir="@{PathGetDirectoryName(${runtime.${package.name}.xcodeprojfile})}" if="@{FileExists(${runtime.${package.name}.xcodeprojfile})}" >
        <args>
          <arg value="-configuration" />
          <arg value="${config-xcode-type}" />
          <arg value="clean" />
        </args>
      </exec>
      <delete dir="${nant.project.buildroot}" />
      <delete dir="${runtime.OriginBootstrap.tempdir}" />
      <delete dir="${runtime.OriginBootstrap.targetdir}" />
      <delete dir="${package.OriginBootstrap.dir}/XCodeOSXTemplate" />
    </target>
    
    <target name="fix-rpaths">
        <do if="${config-platform} == 'osx-gcc'">
            <echo message="Fixing rpaths" />
            <exec program="install_name_tool" commandline="-add_rpath @executable_path/../Frameworks ${runtime.OriginBootstrap.outputdir}/${runtime.buildmodules}" failonerror="false" />
        </do>
    </target>

    <target name="copy-to-bundle">
      <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/" flatten="false">
        <fileset>
          <includes name="${package.${package.name}.dir}/Resources/**/*.*"/>
          <excludes name="${package.${package.name}.dir}/Resources/**/*.ts"/>
        </fileset>
      </copy>
          <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/Resources/lang" flatten="true">
            <fileset>
              <includes name="${package.OriginBootstrapShared.dir}/Resources/lang/*.*"/>
            </fileset>
          </copy>
          <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/Resources/EULAs" flatten="true">
            <fileset>
              <includes name="${package.OriginBootstrapShared.dir}/Resources/EULAs/*.*"/>
            </fileset>
          </copy>
          <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/Resources/EULAs/EU" flatten="true">
            <fileset>
              <includes name="${package.OriginBootstrapShared.dir}/Resources/EULAs/EU/*.*"/>
            </fileset>
          </copy>
          <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/Resources/EULAs/ROW" flatten="true">
            <fileset>
              <includes name="${package.OriginBootstrapShared.dir}/Resources/EULAs/ROW/*.*"/>
            </fileset>
          </copy>
          <copy todir="${runtime.OriginBootstrap.bundledir}/Contents/Resources/EULAs/German" flatten="true">
            <fileset>
              <includes name="${package.OriginBootstrapShared.dir}/Resources/EULAs/German/*.*"/>
            </fileset>
          </copy>

      <foreach property="module" item="String" in="${qtplugins}">
          <do if="${config-type} == 'opt'">
              <copy todir="${runtime.OriginBootstrap.qtpluginsdir}/${module}" >
                <fileset basedir="${package.Qt.distdir}/plugins/${module}">
                    <includes name="*.*" />
                    <excludes name="lib*_debug.*"/>
                    <excludes name="libqsvg*.*"/>
                </fileset>
              </copy>
          </do>
          <do if="${config-type} == 'debug'">
              <copy todir="${runtime.OriginBootstrap.qtpluginsdir}/${module}" >
                <fileset basedir="${package.Qt.distdir}/plugins/${module}">
                    <includes name="lib*_debug.*"/>
                    <!-- The designer plugins don't have a debug version yet -->
                    <includes name="libqwebview.*" />
                    <includes name="libqdeclarativeview.*" />
                    <excludes name="libqsvg*.*"/>
                </fileset>
              </copy>
          </do>
      </foreach>

      <copy todir="${runtime.OriginBootstrap.qtpluginsdir}/codecs" flatten="true">
        <fileset>
          <group if="${config-system} == 'pc'">
            <includes name="${package.Qt.dir}/plugins/codecs/qcncodecs4.dll"/>
            <includes name="${package.Qt.dir}/plugins/codecs/qjpcodecs4.dll"/>
            <includes name="${package.Qt.dir}/plugins/codecs/qkrcodecs4.dll"/>
            <includes name="${package.Qt.dir}/plugins/codecs/qtwcodecs4.dll"/>
          </group>
          <group if="${config-system} == 'osx'">
            <!-- TODO: FIX? /-->
            <!--includes name="${package.Qt.distdir}/plugins/codecs/libqcncodecs.dylib"/-->
            <!--includes name="${package.Qt.distdir}/plugins/codecs/libqjpcodecs.dylib"/-->
            <!--includes name="${package.Qt.distdir}/plugins/codecs/libqkrcodecs.dylib"/-->
            <!--includes name="${package.Qt.distdir}/plugins/codecs/libqtwcodecs.dylib"/-->
          </group>
        </fileset>
      </copy>
  
      <echo message="Copying openSSL dylibs to bundle dir" />
      <copy 
        file="${package.openSSL.bindir}/libcrypto.1.0.0${debug-suffix}.dylib" 
        tofile="${runtime.OriginBootstrap.frameworksdir}/libcrypto.1.0.0.dylib" 
      />
      <copy 
        file="${package.openSSL.bindir}/libssl.1.0.0${debug-suffix}.dylib" 
        tofile="${runtime.OriginBootstrap.frameworksdir}/libssl.1.0.0.dylib" 
      />     
      
      <echo message="Copying Frameworks to bundle dir" />
      <foreach property="lib" item="String" in="${qtlibs}">
        <exec program="rm">
          <args>
            <arg value="-dfR" />
            <arg value="${runtime.OriginBootstrap.frameworksdir}/${lib}.framework" />
          </args>
        </exec>
        <exec program="rsync">
          <args>
            <arg value="-av" />
            <arg value="--exclude=*.prl" />
            <arg value="--exclude=Headers" />
            <arg value="--exclude=Contents" />
            <arg value="--exclude=.DS_Store" />
            <arg value="--exclude=Versions/5/Headers/" />
            <arg value="${package.Qt.libdir}/${lib}.framework" />
            <arg value="${runtime.OriginBootstrap.frameworksdir}" />
          </args>
        </exec>
        <exec program="chmod">
          <args>
            <arg value="-R" />
            <arg value="777" />
            <arg value="${runtime.OriginBootstrap.frameworksdir}/${lib}.framework" />
          </args>
        </exec>
	    <echo message="Updating ExecutableFile in plist" />
	    <property name="plist" value="" />    
    	<foreach property="line" item="Line" in="${runtime.OriginBootstrap.frameworksdir}/${lib}.framework/Versions/Current/Resources/Info.plist">
    	
        	<!-- Check for CFBundleExecutable and update content -->
		  <do if="(@{StrIndexOf(${line},'CFBundleExecutable')} != -1)" >
			<property name="line" value="@{StrReplace(${property.value},'${lib}_debug','${lib}')}" />
		  </do>
	  
		  <property name="plist" value="${property.value}&#10;${line}" />
		</foreach>
		<delete file="${runtime.OriginBootstrap.frameworksdir}/${lib}.framework/Versions/Current/Resources/Info.plist" />
		<echo message="${plist}" file="${runtime.OriginBootstrap.frameworksdir}/${lib}.framework/Versions/Current/Resources/Info.plist" />
      </foreach>
      
      <echo message="Copying sounds to bundle" />
      <mkdir dir="${runtime.OriginBootstrap.resourcesdir}" unless="@{DirectoryExists(${runtime.OriginBootstrap.resourcesdir})}" />
      <copy todir="${runtime.OriginBootstrap.resourcesdir}/sounds" >
        <fileset basedir="${package.originClient.dir}/runtime/sounds">
          <includes name="*.*" />
        </fileset>
      </copy>
      
        <echo message="Copying translations to bundle" />
        <copy todir="${runtime.OriginBootstrap.resourcesdir}" >
            <fileset basedir="${package.originClient.dir}/resources/mac">
                <includes name="**" />
            </fileset>
        </copy>
        <copy todir="${runtime.OriginBootstrap.resourcesdir}/lang" flatten="true">
            <fileset basedir="${package.Qt.distdir}/translations">
                <includes name="qt_ar.qm" />
                <includes name="qt_cs.qm" />
                <includes name="qt_da.qm" />
                <includes name="qt_de.qm" />
                <includes name="qt_es.qm" />
                <includes name="qt_fa.qm" />
                <includes name="qt_fr.qm" />
                <includes name="qt_gl.qm" />
                <includes name="qt_he.qm" />
                <includes name="qt_hu.qm" />
                <includes name="qt_ja.qm" />
                <includes name="qt_ko.qm" />
                <includes name="qt_lt.qm" />
                <includes name="qt_pl.qm" />
                <includes name="qt_pt.qm" />
                <includes name="qt_ru.qm" />
                <includes name="qt_sk.qm" />
                <includes name="qt_sl.qm" />
                <includes name="qt_sv.qm" />
                <includes name="qt_uk.qm" />
                <includes name="qt_zh_CN.qm" />
                <includes name="qt_zh_TW.qm" />
                <includes name="qtbase_cs.qm"/>
                <includes name="qtbase_de.qm"/>
                <includes name="qtbase_fi.qm"/>
                <includes name="qtbase_hu.qm"/>
                <includes name="qtbase_it.qm"/>
                <includes name="qtbase_ja.qm"/>
                <includes name="qtbase_ru.qm"/>
                <includes name="qtbase_sk.qm"/>
                <includes name="qtbase_uk.qm"/>
                <includes name="qtmultimedia_cs.qm"/>
                <includes name="qtmultimedia_de.qm"/>
                <includes name="qtmultimedia_fi.qm"/>
                <includes name="qtmultimedia_hu.qm"/>
                <includes name="qtmultimedia_it.qm"/>
                <includes name="qtmultimedia_ja.qm"/>
                <includes name="qtmultimedia_ru.qm"/>
                <includes name="qtmultimedia_sk.qm"/>
                <includes name="qtmultimedia_uk.qm"/>
                <includes name="qtquick1_cs.qm"/>
                <includes name="qtquick1_de.qm"/>
                <includes name="qtquick1_fi.qm"/>
                <includes name="qtquick1_hu.qm"/>
                <includes name="qtquick1_it.qm"/>
                <includes name="qtquick1_ja.qm"/>
                <includes name="qtquick1_ru.qm"/>
                <includes name="qtquick1_sk.qm"/>
                <includes name="qtquick1_uk.qm"/>
                <includes name="qtscript_cs.qm"/>
                <includes name="qtscript_de.qm"/>
                <includes name="qtscript_fi.qm"/>
                <includes name="qtscript_hu.qm"/>
                <includes name="qtscript_it.qm"/>
                <includes name="qtscript_ja.qm"/>
                <includes name="qtscript_ru.qm"/>
                <includes name="qtscript_sk.qm"/>
                <includes name="qtscript_uk.qm"/>
                <includes name="qtxmlpatterns_cs.qm"/>
                <includes name="qtxmlpatterns_de.qm"/>
                <includes name="qtxmlpatterns_hu.qm"/>
                <includes name="qtxmlpatterns_it.qm"/>
                <includes name="qtxmlpatterns_ja.qm"/>
                <includes name="qtxmlpatterns_ru.qm"/>
                <includes name="qtxmlpatterns_sk.qm"/>
                <includes name="qtxmlpatterns_uk.qm"/>
            </fileset>
        </copy>
        <copy todir="${runtime.OriginBootstrap.resourcesdir}/lang" flatten="true">
            <fileset basedir="${qm.output.dir}">
                <includes name="*.qm" />
            </fileset>
        </copy>
      
      <echo message="Copying IGO to exe dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/IGO/dev/IGO/build/${config-xcode-type}/IGO.dylib" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>
      
      <echo message="Copying IGOLoader to exe dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${runtime.OriginBootstrap.xcodedir}/SubProjects/IGOProxy_OSX/dev/IGOProxy_OSX/build/${config-xcode-type}/IGOLoader.dylib" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>

      <echo message="Copying OriginESImp to exe dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/EscalationClient_OSX/dev/OriginESImpl/build/${config-xcode-type}/OriginESImpl.dylib" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>
      
      <echo message="Copying OriginESHelper to bundle dir" />
      <mkdir dir="${runtime.OriginBootstrap.launchservicesdir}" unless="@{DirectoryExists('${runtime.OriginBootstrap.launchservicesdir}')}" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/EscalationClientHelper_OSX/dev/OriginESHelper/build/${config-xcode-type}/OriginESHelper.app/Contents/MacOS/com.ea.origin.ESHelper" />
          <arg value="${runtime.OriginBootstrap.launchservicesdir}" />
        </args>
      </exec>
      
      <echo message="Copying OriginWebHelperImpl to exe dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/BeaconService_OSX/dev/OriginWebHelperImpl/build/${config-xcode-type}/OriginWebHelperImpl.dylib" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>
      
      <echo message="Copying OriginWebHelper to bundle dir" />
      <mkdir dir="${runtime.OriginBootstrap.launchservicesdir}" unless="@{DirectoryExists('${runtime.OriginBootstrap.launchservicesdir}')}" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/BeaconServiceHelper_OSX/dev/OriginWebHelper/build/${config-xcode-type}/OriginWebHelper.app/Contents/MacOS/com.ea.origin.WebHelper" />
          <arg value="${runtime.OriginBootstrap.launchservicesdir}" />
        </args>
      </exec>

      <echo message="Copying OriginCrashReporter to bundle dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/OriginCrashReporter/dev/OriginCrashReporter/build/${config-xcode-type}/OriginCrashReporter.app/Contents/MacOS/OriginCrashReporter" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>
      
      <do if="${config-type} == 'debug'" >
        <echo message="Copying TelemetryBreakpointHandler to bundle dir" />
        <exec program="cp" >
          <args>
            <arg value="-f" />
            <arg value="-R" />
            <arg value="-P" />
            <arg value="${package.builddir}/SubProjects/TelemetryBreakpointHandler/dev/TelemetryBreakpointHandler/build/${config-xcode-type}/TelemetryBreakpointHandler.app/Contents/MacOS/TelemetryBreakpointHandler" />
            <arg value="${runtime.OriginBootstrap.outputdir}" />
          </args>
        </exec>
        <exec program="install_name_tool" commandline="-add_rpath @executable_path/../Frameworks ${runtime.OriginBootstrap.outputdir}/TelemetryBreakpointHandler" />
      </do>
      
      <echo message="Copying originClient to bundle dir" />
      <exec program="cp" failonerror="false">
        <args>
          <arg value="-f" />
          <arg value="-R" />
          <arg value="-P" />
          <arg value="${package.builddir}/SubProjects/originClient/dev/originClient/build/${config-xcode-type}/Origin.app/Contents/MacOS/OriginClient" />
          <arg value="${runtime.OriginBootstrap.outputdir}" />
        </args>
      </exec>

      <echo message="Copying Origin plug-ins to plug-in output dir" />
      <mkdir dir="${runtime.OriginBootstrap.pluginsdir}" unless="@{DirectoryExists('${runtime.OriginBootstrap.pluginsdir}')}" />
      <foreach property="plugin" item="String" in="${originplugins}">
        <exec program="rm">
          <args>
            <arg value="-dfR" />
            <arg value="${runtime.OriginBootstrap.pluginsdir}/${plugin}.plugin" />
          </args>
        </exec>
        <exec program="cp">
          <args>
            <arg value="-f" />
            <arg value="-R" />
            <arg value="-P" />
            <arg value="${package.builddir}/SubProjects/${plugin}/dev/${plugin}/build/${config-xcode-type}/${plugin}.plugin" />
            <arg value="${runtime.OriginBootstrap.pluginsdir}" />
          </args>
        </exec>
        <exec program="chmod">
          <args>
            <arg value="-R" />
            <arg value="777" />
            <arg value="${runtime.OriginBootstrap.pluginsdir}/${plugin}.plugin" />
          </args>
        </exec>
      </foreach>
  </target>

    <target name="dump">
        <echo message="${runtime.OriginBootstrap.buildtype} cc.options" />
        <echo message="@{OptionSetGetValue('${runtime.OriginBootstrap.buildtype}','cc.options')}" />
    </target>

  <target name="update-plist" >
    <echo message="Updating versions in plist files" />
    <!-- Get the current version -->
    <nant buildfile="${package.OriginVersion.dir}/version.build" target="getversion" >
      <property name="config" value="${config}" />
    </nant>
    <property name="version" fromfile="${package.OriginVersion.version.file}" />
    
    <!-- Update the plist with the new version number -->
    <property name="plist" value="" />
    <property name="version.nextline" value="false" />
    
    <foreach property="line" item="Line" in="${runtime.OriginBootstrap.plist.template}">
      <!-- Check for CFBundleVersion in line and put the version in the next line -->
      <do if="${version.nextline}" >
        <property name="line" value="&lt;string&gt;${version}&lt;/string&gt;" />
        <property name="version.nextline" value="false" />
      </do>
      <do if="@{StrIndexOf(${line},'CFBundleVersion')} != -1 || @{StrIndexOf(${line},'CFBundleShortVersionString')} != -1">
        <property name="version.nextline" value="true" />
      </do>
      
      <!-- Check for OriginDev in line and put the new cert in the next line -->
      <do if="(@{StrIndexOf(${line},'OriginDev')} != -1) and @{PropertyExists('jenkins')}" >
        <property name="line" value="@{StrReplace(${property.value},'OriginDev','Developer ID Application: Electronic Arts Inc.')}" />
      </do>
      
      <property name="plist" value="${property.value}&#10;${line}" />
    </foreach>
    <delete file="${runtime.OriginBootstrap.plist}" />
    <echo message="${plist}" file="${runtime.OriginBootstrap.plist}" />
  </target>
  
  <target name="strip" >
    <fail message="input.filename not defined." unless="@{PropertyExists('input.filename')}" />
    <exec program="strip" message="Stripping ${input.filename}" >
      <args>
        <arg value="-u" />
        <arg value="-r" />
        <arg value="${input.filename}" />
      </args>
    </exec>
  </target>

  <target name="bundle">
    <dependent name="s3" />
    
    <echo message="Copying OriginClient bundle to ${runtime.OriginBootstrap.tempdir}" />
    <exec program="ditto" >
      <args>
        <arg value="${runtime.OriginBootstrap.bundledir}" />
        <arg value="${runtime.OriginBootstrap.appdir}" />
      </args>
    </exec>
    
    <foreach property="lib" item="String" in="${qtlibs}" >
      <echo message="${runtime.OriginBootstrap.appdir}/Contents/Frameworks/${lib}.framework" />
      <exec program="rm">
        <args>
          <arg value="-f" />
          <arg value="${runtime.OriginBootstrap.appdir}/Contents/Frameworks/${lib}.framework/Headers" />
        </args>
      </exec>
      <exec program="rm">
        <args>
          <arg value="-fR" />
          <arg value="${runtime.OriginBootstrap.appdir}/Contents/Frameworks/${lib}.framework/Versions/5/Headers" />
        </args>
      </exec>
      <delete>
        <fileset basedir="${runtime.OriginBootstrap.appdir}/Contents/Frameworks/${lib}.framework" >
          <includes name="${lib}_debug" />
          <includes name="${lib}_debug.prl" />
          <includes name="${lib}.prl" />
          <includes name="Versions/5/${lib}_debug" />
        </fileset>
      </delete>
    </foreach>

    <property name="sign.basedir" value="${runtime.OriginBootstrap.appdir}" />
    
    <foreach property="input.filename" item="String" in="${sign.filelist}">
      <property name="input.filename" value="${sign.basedir}/${property.value}" />
      <call target="dsym" />
      <call target="strip" />
    </foreach>
    
    <call target="dsym-zip" />
    
    <call target="codesign" />
    
    <call target="create-update-osx" />

    <call target="dmg" />
    
    <optionset name="s3.properties" >
      <option name="build.folder" value="${runtime.OriginBootstrap.targetdir}"/>
      <option name="build.type" value="${automation.branch}"/>
      <option name="build.version" value="${version_p_delimited}" />
      <option name="config" value="${config}" />
      <option name="config-system" value="${config-system}" />
    </optionset>
    <nant buildfile="${package.s3.dir}/s3.build" target="upload-build" optionset="s3.properties" if="@{PropertyExists('s3.upload')}" failonerror="false"/>
    
    <call target="upload-qt" if="@{PropertyExists('s3.upload')}"/>
  </target>

  <!-- OSX target to pull symbols from application -->
  <target name="dsym" >
    <mkdir dir="${runtime.OriginBootstrap.targetdir}/dsym" unless="@{DirectoryExists('${runtime.OriginBootstrap.targetdir}/dsym')}" />
    <fail message="input.filename not defined." unless="@{PropertyExists('input.filename')}" />
    <exec program="dsymutil" >
      <args>
        <arg value="--out ${runtime.OriginBootstrap.targetdir}/dsym/@{PathGetFileNameWithoutExtension(${input.filename})}.dSYM" />
        <arg value="${input.filename}" />
      </args>
    </exec>
  </target>
  
  <target name="dsym-zip" >
    <nant buildfile="${package.OriginVersion.dir}/version.build" target="getversion" >
      <property name="config" value="${config}" />
    </nant>
    <property name="version_p_delimited" fromfile="${package.OriginVersion.version.file}" />
    <property name="version_u_delimited" value="@{StrReplace('${version_p_delimited}', '.', '_')}"/>
    
    <mkdir dir="${runtime.OriginBootstrap.targetdir}" unless="@{DirectoryExists(${runtime.OriginBootstrap.targetdir})}" />
    <property name="zip.name" value="${runtime.OriginBootstrap.targetdir}/OriginDebug_${version_p_delimited}.zip" />
    <exec program="zip" workingdir="${runtime.OriginBootstrap.targetdir}" >
      <args>
        <arg value="-r" />
        <arg value="${zip.name}" />
        <arg value="dsym" />
      </args>
    </exec>
    <exec program="zip" workingdir="${runtime.OriginBootstrap.targetdir}" >
      <args>
        <arg value="-j" />
        <arg value="${zip.name}" />
        <arg value="${package.builddir}/SubProjects/TelemetryBreakpointHandler/dev/TelemetryBreakpointHandler/build/${config-xcode-type}/TelemetryBreakpointHandler.app/Contents/MacOS/TelemetryBreakpointHandler" />
      </args>
    </exec>
  </target>
  
  <target name="symstore-upload" >
    <nant buildfile="${package.OriginVersion.dir}/version.build" target="getversion" >
      <property name="config" value="${config}" />
    </nant>
    <property name="version_p_delimited" fromfile="${package.OriginVersion.version.file}" />
    <property name="version_u_delimited" value="@{StrReplace('${version_p_delimited}', '.', '_')}"/>
    <property name="zip.name" value="${runtime.OriginBootstrap.targetdir}/OriginDebug_${version_u_delimited}.zip" />

    <!-- copy the dsym files off to the opqa webserver -->
    <property name="opqa.dir" value="/Volumes/opqa" />
    <do unless="@{DirectoryExists(${opqa.dir})}" >
      <mkdir dir="${opqa.dir}" />
      <exec program="mount" >
        <args>
          <arg value="-t smbfs" />
          <arg value="//originautomation@opqa-online.rws.ad.ea.com/Webserver" />
          <arg value="${opqa.dir}" />
        </args>
      </exec>
    </do>
    <copy todir="/Volumes/opqa/originsymstore_mac/${version_p_delimited}" >
      <fileset basedir="${runtime.OriginBootstrap.targetdir}" >
        <includes name="${zip.name}" />
      </fileset>
    </copy>
    <do unless="@{DirectoryExists(${opqa.dir})}" >
      <exec program="umount" >
        <args>
          <arg value="${opqa.dir}" />
        </args>
      </exec>
    </do>
  </target>
  
  <!-- codesign - Signs the files listed in property 'sign.fileslist' and/or directories in 'sign.dirlist'. You must have one of these -->
  <!-- properties defined before calling this function -->
  <target name="codesign" >
    <fail unless="@{PropertyExists('sign.basedir')}" message="You must specify a basedir to sign" />
    <fail message="Property sign.filelist or sign.dirlist is not defined. You must define one of these properties for osx to tell us what to sign"
    unless="@{PropertyExists('sign.filelist')} || @{PropertyExists('sign.filelist')}" />
    
    <property name="cert.name" value="OriginDev" />
    <property name="cert.name" value="Developer ID Application: Electronic Arts Inc." if="@{PropertyExists('jenkins')}"/>
    
    <foreach property="signdir" item="String" in="${sign.dirlist}" if="@{PropertyExists('sign.dirlist')}" >
      <task name="codesign.exec" in="${sign.basedir}/${signdir}" public.cert="@{PropertyExists('jenkins')}" extra.options="${codesign.extra.options} --deep" if="@{DirectoryExists('${sign.basedir}/${signdir}')}==true" />
    </foreach>

    <foreach property="signfile" item="String" in="${sign.filelist}" if="@{PropertyExists('sign.filelist')}" >
      <task name="codesign.exec" in="${sign.basedir}/${signfile}" public.cert="@{PropertyExists('jenkins')}" extra.options="${codesign.extra.options}" />
    </foreach>

    <task name="codesign.exec" in="${sign.basedir}" public.cert="@{PropertyExists('jenkins')}" extra.options="${codesign.extra.options}" if="@{DirectoryExists('${sign.basedir}')}==true" />
</target>

  <target name="create-update-osx">
    <nant buildfile="${package.OriginVersion.dir}/version.build" target="getversion" >
      <property name="config" value="${config}" />
    </nant>
    <property name="version_p_delimited" fromfile="${package.OriginVersion.version.file}" />
    <property name="version_u_delimited" value="@{StrReplace('${version_p_delimited}', '.', '_')}"/>
    
    <mkdir dir="${runtime.OriginBootstrap.targetdir}" unless="@{DirectoryExists(${runtime.OriginBootstrap.targetdir})}" />
    <property name="zip.name" value="${runtime.OriginBootstrap.targetdir}/OriginUpdate_${version_u_delimited}" />
    <exec program="zip" workingdir="${runtime.OriginBootstrap.appdir}" >
      <args>
        <arg value="-R" />
        <arg value="${zip.name}.zip" />
        <arg value="*" />
      </args>
    </exec>
  </target>

  <target name="dmg">
    <property name="dmg.contents.dir" value="${package.OriginBootstrap.dir}/make_dmg/contents" />
    <exec program="diskutil" message="Unmounting Origin.dmg" failonerror="false" >
      <args>
        <arg value="unmount" />
        <arg value="Origin" />
      </args>
    </exec>
    <sleep seconds="10"/>
    <echo message="Creating custom dmg." />
    <delete dir="${dmg.contents.dir}" if="@{DirectoryExists('${dmg.contents.dir}')}" />
    <mkdir dir="${dmg.contents.dir}" unless="@{DirectoryExists('${dmg.contents.dir}')}" />
    <exec program="ditto" >
      <args>
        <arg value="${runtime.OriginBootstrap.appdir}" />
        <arg value="${dmg.contents.dir}/@{PathGetFileName(${runtime.OriginBootstrap.appdir})}" />
      </args>
    </exec>
    <exec program="${package.OriginBootstrap.dir}/make_dmg/build-origin-dmg.sh" workingdir="${package.OriginBootstrap.dir}/make_dmg" />
    
    <exec program="mv">
      <args>
        <arg value="${package.OriginBootstrap.dir}/make_dmg/Origin.dmg" />
        <arg value="${runtime.OriginBootstrap.targetdir}" />
      </args>
    </exec>
  </target>
  
  <target name="upload-qt">
    <dependent name="s3" />
    <delete dir="${automation.qt.dir}" if="@{DirectoryExists('${automation.qt.dir}')}" />
    <delete file="${automation.qt.zip}" />
    <mkdir dir="${automation.qt.dir}" unless="@{DirectoryExists('${automation.qt.dir}')}" />
    <echo message="zipping up qt libraries for automation"/>
    <foreach property="framework" item="String" in="${automation.qt.libs}">
        <!-- Copy from the main structure to the folder to be zipped to -->
        <exec program="cp">
          <args>
            <arg value="-f" />
            <arg value="-R" />
            <arg value="-P" />
            <arg value="-p" />
            <arg value="${package.Qt.dir}/dist/qtbase/lib/${framework}.framework" />
            <arg value="${automation.qt.dir}" />
          </args>
      </exec>
      <!-- remove the debug version (takes up more than half the space of the zip)-->
      <exec program="rm">
        <args>
          <arg value="-dfR" />
          <arg value="${automation.qt.dir}/${framework}.framework/Versions/Current/${framework}_debug" />
        </args>
      </exec>
    </foreach>
    <!-- zip up the stuff -->
    <exec program="zip" workingdir="${automation.qt.dir}" >
      <args>
        <arg value="-9" />
        <arg value="-r" />
        <arg value="${automation.qt.zip}" />
        <arg value="." />
      </args>
    </exec>
    <!-- upload to s3 -->
    <optionset name="s3.properties" >
      <option name="copy.file" value="${automation.qt.zip}"/>
      <option name="copy.dest" value="/builds/${automation.branch}/Qt.zip"/>
    </optionset>
    <nant buildfile="${package.s3.dir}/s3.build" target="copy-to-s3" optionset="s3.properties" failonerror="false"/>

  </target>

  <target name="test" >
      <exec program="cp">
          <args>
            <arg value="-fRPv" />
            <arg value="${package.Qt.libdir}/QtCore.framework" />
            <arg value="${runtime.OriginBootstrap.frameworksdir}" />
          </args>
        </exec>
  </target>
  
</project>




