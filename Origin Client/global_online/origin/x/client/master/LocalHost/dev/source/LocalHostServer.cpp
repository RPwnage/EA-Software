#include <QTcpSocket>
#include <QSslSocket>
#include <QSslKey>

#include "services/log/LogService.h"
#include "services/debug/DebugService.h"

#include "LocalHostServer.h"

#include "HttpRequestHandler.h"
#include "LocalHost/LocalHostServiceHandler.h"
#include "TelemetryAPIDLL.h"


namespace Origin
{
    namespace Sdk
    {
        namespace LocalHost
        {
            LocalHostServer::LocalHostServer(QSharedPointer<ILocalHostConfig> config) :
            mConfig(config)
            {
                ORIGIN_VERIFY_CONNECT(this, SIGNAL(newConnection()), this, SLOT(onNewConnectionPending()));
            }

            LocalHostServerSSL::LocalHostServerSSL(QSharedPointer<ILocalHostConfig> config) :
                LocalHostServer(config)
            {
                ORIGIN_VERIFY_CONNECT(this, SIGNAL(newConnection()), this, SLOT(onNewConnectionPendingSSL()));
                ORIGIN_VERIFY_DISCONNECT(this, SIGNAL(newConnection()), this, SLOT(onNewConnectionPending()));
            }

            LocalHostServer::~LocalHostServer()
            {
                stopListenForConnection();
            }

            quint16 LocalHostServer::getListenPort()
            {
                return mConfig->getUnsecurePort();
            }

            quint16 LocalHostServerSSL::getListenPort()
            {
                return mConfig->getSecurePort();
            }
            
            QTcpSocket *LocalHostServer::nextPendingConnection()
            {
                if (mPendingConnections.isEmpty())
                    return NULL;
                
                return mPendingConnections.dequeue();
            }
            
            void LocalHostServer::incomingConnection(qintptr handle)
            {
                QTcpSocket* socket = new QTcpSocket(this);
                
                if (socket->setSocketDescriptor(handle))
                {
                    this->mPendingConnections.enqueue(socket);
                } 
                else 
                {
                    delete socket;
                }
            }

            void LocalHostServer::stopListenForConnection()
            {              
                close();
                LocalHostServiceHandler::deregisterServices(mConfig.data());
                GetTelemetryInterface()->Metric_LOCALHOST_SERVER_STOP();
            }

            void LocalHostServer::startListenForConnection()
            {              
                //register the services here will create the service handler object in the same thread as the localhostserver
                //we create the localhostserver then move it to another thread
                
                const quint16 numPorts = 5;
                const quint16 ALT_PORT_JUMP = 1000;

                bool success = false;
                quint16 base = getListenPort();   // Default: 3215 for normal tcp 3214 for SSL

                LocalHostServiceHandler::registerServices(mConfig.data());

                //here we try to find an open port that we can bind the local host server to.
                //we first try with the BASE_PORT then add on ALT_PORT_JUMP (e.g. we start with 3215,
                //then 4215, then 5215 etc.

                for(int i = 0; i < numPorts; i ++)
                {
                    //calculate the port
                    quint16 port = base + (ALT_PORT_JUMP * i);

                    success = listen(QHostAddress::LocalHost, port);
                    GetTelemetryInterface()->Metric_LOCALHOST_SERVER_START(port, success ? 1 : 0 );
                    if(success)
                    {
                        ORIGIN_LOG_DEBUG << "Listening on port: " << port;

                        //we were able to start the local host server on the given port so lets stop trying
                        LocalHostServiceHandler::setBoundedPort(port);
                        break;
                    }

                }

                if(!success)
                {
                    LocalHostServiceHandler::deregisterServices(mConfig.data());
                }
            }
            
            ///
            /// perform a little initialization, then wait for connections to be provided manually
            ///
            void LocalHostServer::startWaitingForConnections()
            {
                LocalHostServiceHandler::registerServices(mConfig.data());
                
                // Using manual connections, so this always succeeds
                qint16 port = getListenPort();
                GetTelemetryInterface()->Metric_LOCALHOST_SERVER_START(port, 1);
                
                ORIGIN_LOG_DEBUG << "Listening on port: " << port;
                    
                //we were able to start the local host server on the given port so lets stop trying
                LocalHostServiceHandler::setBoundedPort(port);
            }


            void LocalHostServer::onNewConnectionPending()
            {
                QTcpSocket *socket;
                while((socket = dynamic_cast<QTcpSocket*>(nextPendingConnection())))
                {
                    //instantiate a new connection class that handles all the incoming data on a socket
                    HttpRequestHandler *request = new HttpRequestHandler(socket, NULL);
                    ORIGIN_VERIFY_CONNECT(socket, SIGNAL(disconnected()), request, SLOT(deleteLater()));
                    ORIGIN_VERIFY_CONNECT(socket, SIGNAL(disconnected()), socket, SLOT(deleteLater()));
                }
            }
            
            ///
            /// invoked when a new socket descriptor is available with a pending connection
            ///
            void LocalHostServer::onNewConnectionPendingManual(int sd)
            {
                incomingConnection(sd);
                
                emit newConnection();
            }

            // XOR 13'd obfuscated private key for clienttolocalhostonly.com (Verisign signed)
#define PRIVATE_KEY_PASS_SIZE 16
static const unsigned char private_key_pass_obf[PRIVATE_KEY_PASS_SIZE] = 
{ 0x65, 0x1c, 0x4e, 0x1a, 0x1c, 0x6c, 0x12, 0x63, 0x7b, 0x4c, 0x50, 0x47, 0x73, 0x73, 0x44, 0x64 };

// XOR 13'd obfuscated private key for clienttolocalhostonly.com (Verisign signed)
#define PRIVATE_KEY_SIZE 1773
static const unsigned char private_key_obf[PRIVATE_KEY_SIZE] = 
{
    0x07, 0x07, 0x07, 0x07, 0x07, 0x68, 0x6f, 0x6d, 0x63, 0x64, 0x0a, 0x78, 0x79, 0x6b, 0x0a, 0x7a, 
    0x78, 0x63, 0x7c, 0x6b, 0x7e, 0x6f, 0x0a, 0x61, 0x6f, 0x73, 0x07, 0x07, 0x07, 0x07, 0x07, 0x27, 
    0x20, 0x7a, 0x58, 0x45, 0x49, 0x07, 0x7e, 0x53, 0x5a, 0x4f, 0x10, 0x0a, 0x1e, 0x06, 0x6f, 0x64, 
    0x69, 0x78, 0x73, 0x7a, 0x7e, 0x6f, 0x6e, 0x27, 0x20, 0x6e, 0x6f, 0x61, 0x07, 0x63, 0x44, 0x4c, 
    0x45, 0x10, 0x0a, 0x6e, 0x6f, 0x79, 0x07, 0x6f, 0x6e, 0x6f, 0x19, 0x07, 0x69, 0x68, 0x69, 0x06, 
    0x69, 0x6e, 0x68, 0x69, 0x69, 0x1e, 0x19, 0x6e, 0x18, 0x1b, 0x68, 0x1e, 0x1b, 0x1e, 0x13, 0x13, 
    0x27, 0x20, 0x27, 0x20, 0x5f, 0x4e, 0x4d, 0x68, 0x53, 0x46, 0x52, 0x73, 0x4d, 0x59, 0x40, 0x05, 
    0x4c, 0x67, 0x61, 0x1a, 0x1a, 0x4e, 0x58, 0x73, 0x60, 0x6d, 0x6f, 0x7e, 0x78, 0x5a, 0x7c, 0x48, 
    0x6c, 0x13, 0x7d, 0x12, 0x58, 0x6b, 0x53, 0x5f, 0x61, 0x13, 0x64, 0x41, 0x7d, 0x48, 0x53, 0x1a, 
    0x53, 0x19, 0x64, 0x46, 0x7c, 0x5f, 0x13, 0x67, 0x68, 0x66, 0x58, 0x79, 0x4c, 0x42, 0x1d, 0x6f, 
    0x78, 0x49, 0x41, 0x7d, 0x27, 0x20, 0x48, 0x13, 0x6f, 0x4b, 0x4d, 0x47, 0x78, 0x43, 0x1b, 0x43, 
    0x6f, 0x62, 0x40, 0x72, 0x5a, 0x1e, 0x68, 0x5e, 0x72, 0x4d, 0x45, 0x6e, 0x5e, 0x52, 0x5e, 0x4c, 
    0x4f, 0x42, 0x6d, 0x43, 0x7b, 0x45, 0x5c, 0x6e, 0x72, 0x7b, 0x63, 0x7e, 0x53, 0x5f, 0x58, 0x70, 
    0x7c, 0x40, 0x64, 0x1b, 0x63, 0x45, 0x73, 0x67, 0x53, 0x5c, 0x7f, 0x58, 0x05, 0x7a, 0x5c, 0x4c, 
    0x40, 0x12, 0x4e, 0x1e, 0x66, 0x18, 0x27, 0x20, 0x41, 0x79, 0x1f, 0x5b, 0x7d, 0x5c, 0x18, 0x4c, 
    0x44, 0x44, 0x44, 0x7c, 0x70, 0x6b, 0x47, 0x5c, 0x42, 0x5c, 0x1a, 0x64, 0x48, 0x6f, 0x53, 0x6c, 
    0x5b, 0x67, 0x42, 0x7c, 0x43, 0x49, 0x05, 0x4b, 0x62, 0x44, 0x52, 0x7e, 0x1a, 0x41, 0x46, 0x4c, 
    0x72, 0x1b, 0x6f, 0x50, 0x1f, 0x68, 0x60, 0x7b, 0x49, 0x53, 0x78, 0x59, 0x53, 0x4b, 0x7d, 0x4b, 
    0x7c, 0x78, 0x05, 0x61, 0x1e, 0x1b, 0x41, 0x1f, 0x27, 0x20, 0x6d, 0x41, 0x7d, 0x5a, 0x5f, 0x70, 
    0x52, 0x49, 0x68, 0x40, 0x4d, 0x45, 0x79, 0x63, 0x1e, 0x6c, 0x64, 0x43, 0x66, 0x1c, 0x52, 0x63, 
    0x4c, 0x6f, 0x4e, 0x70, 0x68, 0x05, 0x05, 0x5c, 0x78, 0x7e, 0x49, 0x1d, 0x69, 0x67, 0x42, 0x58, 
    0x46, 0x59, 0x45, 0x44, 0x4e, 0x46, 0x1a, 0x7c, 0x4d, 0x4c, 0x7a, 0x67, 0x66, 0x7b, 0x64, 0x61, 
    0x65, 0x6d, 0x7c, 0x68, 0x78, 0x67, 0x13, 0x49, 0x5c, 0x66, 0x27, 0x20, 0x1e, 0x46, 0x5c, 0x61, 
    0x43, 0x79, 0x58, 0x44, 0x6d, 0x67, 0x5c, 0x65, 0x6b, 0x64, 0x5f, 0x7a, 0x49, 0x60, 0x67, 0x1c, 
    0x41, 0x01, 0x47, 0x4d, 0x4e, 0x1b, 0x69, 0x73, 0x6f, 0x53, 0x01, 0x69, 0x48, 0x68, 0x59, 0x7e, 
    0x05, 0x63, 0x50, 0x62, 0x72, 0x4c, 0x41, 0x4e, 0x1b, 0x66, 0x79, 0x65, 0x6f, 0x1e, 0x1c, 0x79, 
    0x18, 0x44, 0x01, 0x60, 0x5a, 0x12, 0x12, 0x6e, 0x7b, 0x5f, 0x18, 0x1b, 0x27, 0x20, 0x7a, 0x72, 
    0x65, 0x4d, 0x78, 0x60, 0x1f, 0x1e, 0x6f, 0x6d, 0x6c, 0x6f, 0x7a, 0x72, 0x1d, 0x6e, 0x5b, 0x18, 
    0x1d, 0x6e, 0x1f, 0x5c, 0x18, 0x4c, 0x19, 0x40, 0x18, 0x7c, 0x66, 0x18, 0x73, 0x43, 0x05, 0x63, 
    0x1f, 0x6e, 0x61, 0x19, 0x66, 0x59, 0x5f, 0x4f, 0x5e, 0x12, 0x66, 0x67, 0x4c, 0x60, 0x53, 0x01, 
    0x52, 0x50, 0x73, 0x45, 0x05, 0x46, 0x65, 0x7d, 0x6d, 0x5c, 0x7a, 0x6f, 0x61, 0x58, 0x27, 0x20, 
    0x1d, 0x1c, 0x05, 0x45, 0x64, 0x59, 0x5b, 0x6b, 0x6d, 0x6b, 0x52, 0x69, 0x43, 0x7e, 0x5f, 0x18, 
    0x68, 0x79, 0x01, 0x65, 0x46, 0x79, 0x46, 0x67, 0x19, 0x1a, 0x62, 0x1f, 0x61, 0x4d, 0x7a, 0x05, 
    0x62, 0x12, 0x6f, 0x49, 0x5d, 0x67, 0x60, 0x5a, 0x68, 0x01, 0x19, 0x44, 0x63, 0x63, 0x4d, 0x1f, 
    0x6f, 0x6e, 0x52, 0x7e, 0x4c, 0x63, 0x42, 0x6d, 0x42, 0x63, 0x62, 0x61, 0x1f, 0x6c, 0x64, 0x42, 
    0x27, 0x20, 0x52, 0x62, 0x53, 0x69, 0x12, 0x66, 0x4b, 0x4e, 0x7f, 0x41, 0x58, 0x5d, 0x12, 0x58, 
    0x42, 0x1f, 0x01, 0x4c, 0x19, 0x59, 0x5d, 0x68, 0x70, 0x6b, 0x61, 0x1b, 0x61, 0x79, 0x4f, 0x45, 
    0x53, 0x43, 0x01, 0x1c, 0x70, 0x4f, 0x7b, 0x58, 0x5f, 0x64, 0x79, 0x72, 0x53, 0x7b, 0x64, 0x7c, 
    0x65, 0x79, 0x6c, 0x13, 0x64, 0x73, 0x7e, 0x01, 0x1b, 0x73, 0x42, 0x41, 0x5c, 0x64, 0x62, 0x7b, 
    0x5a, 0x7f, 0x27, 0x20, 0x6f, 0x79, 0x4c, 0x5b, 0x49, 0x5b, 0x6e, 0x61, 0x62, 0x69, 0x7b, 0x6d, 
    0x79, 0x52, 0x12, 0x7e, 0x70, 0x65, 0x62, 0x58, 0x7b, 0x4c, 0x4f, 0x66, 0x53, 0x13, 0x42, 0x1d, 
    0x5d, 0x6b, 0x60, 0x61, 0x60, 0x47, 0x67, 0x12, 0x1a, 0x5d, 0x6d, 0x6d, 0x52, 0x60, 0x01, 0x5a, 
    0x6d, 0x70, 0x62, 0x1b, 0x1f, 0x18, 0x70, 0x7b, 0x78, 0x50, 0x45, 0x72, 0x40, 0x6b, 0x68, 0x63, 
    0x7f, 0x1f, 0x4c, 0x78, 0x27, 0x20, 0x65, 0x46, 0x47, 0x53, 0x1d, 0x40, 0x13, 0x50, 0x4b, 0x18, 
    0x70, 0x47, 0x6f, 0x6c, 0x63, 0x7c, 0x6f, 0x78, 0x59, 0x01, 0x53, 0x7d, 0x59, 0x1e, 0x1c, 0x78, 
    0x6b, 0x6b, 0x59, 0x6f, 0x69, 0x52, 0x4b, 0x6e, 0x4e, 0x6f, 0x41, 0x5a, 0x78, 0x5b, 0x13, 0x49, 
    0x53, 0x7d, 0x78, 0x19, 0x66, 0x19, 0x4c, 0x62, 0x45, 0x67, 0x7b, 0x62, 0x78, 0x66, 0x6e, 0x5b, 
    0x05, 0x58, 0x58, 0x1c, 0x7e, 0x7a, 0x27, 0x20, 0x63, 0x4e, 0x1d, 0x6e, 0x44, 0x60, 0x7e, 0x6b, 
    0x60, 0x6d, 0x60, 0x48, 0x5d, 0x46, 0x7f, 0x7f, 0x73, 0x1d, 0x52, 0x65, 0x73, 0x47, 0x47, 0x4b, 
    0x7d, 0x7d, 0x5f, 0x7f, 0x1b, 0x65, 0x68, 0x52, 0x59, 0x5c, 0x7f, 0x5c, 0x50, 0x7f, 0x6b, 0x01, 
    0x6e, 0x1c, 0x78, 0x48, 0x05, 0x58, 0x1d, 0x4b, 0x1a, 0x58, 0x42, 0x5d, 0x19, 0x48, 0x4b, 0x4f, 
    0x6b, 0x12, 0x01, 0x7a, 0x6f, 0x7d, 0x6d, 0x12, 0x27, 0x20, 0x68, 0x70, 0x4e, 0x13, 0x50, 0x1b, 
    0x63, 0x69, 0x79, 0x66, 0x7f, 0x64, 0x48, 0x1b, 0x13, 0x7c, 0x72, 0x58, 0x43, 0x6f, 0x46, 0x01, 
    0x60, 0x05, 0x5d, 0x5b, 0x7d, 0x46, 0x65, 0x4f, 0x41, 0x5f, 0x67, 0x63, 0x5f, 0x6c, 0x66, 0x62, 
    0x48, 0x6e, 0x7c, 0x1b, 0x1c, 0x48, 0x53, 0x42, 0x5d, 0x65, 0x53, 0x78, 0x1c, 0x70, 0x6e, 0x58, 
    0x6b, 0x47, 0x41, 0x6b, 0x69, 0x70, 0x43, 0x7b, 0x63, 0x61, 0x27, 0x20, 0x42, 0x67, 0x62, 0x7b, 
    0x5e, 0x7b, 0x52, 0x45, 0x4e, 0x69, 0x13, 0x13, 0x61, 0x6b, 0x5c, 0x12, 0x70, 0x5d, 0x7e, 0x7f, 
    0x1d, 0x12, 0x46, 0x4c, 0x52, 0x4b, 0x5b, 0x5c, 0x1b, 0x18, 0x12, 0x5e, 0x72, 0x66, 0x7c, 0x1d, 
    0x63, 0x4d, 0x6e, 0x6e, 0x1c, 0x4e, 0x65, 0x5a, 0x42, 0x52, 0x5e, 0x1d, 0x45, 0x64, 0x62, 0x47, 
    0x49, 0x7d, 0x6b, 0x6f, 0x50, 0x12, 0x66, 0x50, 0x59, 0x50, 0x58, 0x1a, 0x27, 0x20, 0x67, 0x72, 
    0x1e, 0x48, 0x5f, 0x7e, 0x59, 0x6f, 0x79, 0x42, 0x1d, 0x46, 0x7f, 0x70, 0x5d, 0x48, 0x60, 0x6f, 
    0x5c, 0x5d, 0x1c, 0x64, 0x60, 0x60, 0x47, 0x18, 0x43, 0x52, 0x65, 0x58, 0x6e, 0x5d, 0x1d, 0x6f, 
    0x4e, 0x7e, 0x79, 0x47, 0x58, 0x01, 0x19, 0x59, 0x40, 0x1c, 0x49, 0x61, 0x60, 0x4b, 0x4d, 0x42, 
    0x5d, 0x19, 0x6f, 0x43, 0x64, 0x1f, 0x53, 0x69, 0x5c, 0x4c, 0x60, 0x65, 0x1e, 0x43, 0x27, 0x20, 
    0x4c, 0x40, 0x68, 0x60, 0x1a, 0x60, 0x5f, 0x64, 0x01, 0x1c, 0x5f, 0x65, 0x6b, 0x72, 0x1e, 0x6e, 
    0x7e, 0x01, 0x78, 0x7b, 0x63, 0x7e, 0x13, 0x64, 0x1b, 0x53, 0x64, 0x52, 0x4c, 0x7f, 0x45, 0x4e, 
    0x18, 0x7c, 0x1a, 0x13, 0x52, 0x4d, 0x5a, 0x1f, 0x44, 0x69, 0x4d, 0x78, 0x53, 0x7f, 0x6e, 0x66, 
    0x1b, 0x1e, 0x46, 0x48, 0x43, 0x6b, 0x18, 0x6d, 0x6b, 0x50, 0x4f, 0x58, 0x49, 0x4c, 0x13, 0x72, 
    0x27, 0x20, 0x65, 0x44, 0x40, 0x1c, 0x1e, 0x4e, 0x78, 0x19, 0x50, 0x1f, 0x7c, 0x45, 0x1c, 0x78, 
    0x4c, 0x7f, 0x4e, 0x40, 0x6f, 0x5b, 0x7a, 0x7e, 0x19, 0x12, 0x4f, 0x42, 0x70, 0x64, 0x64, 0x79, 
    0x45, 0x1c, 0x12, 0x53, 0x43, 0x1c, 0x01, 0x42, 0x70, 0x65, 0x67, 0x1b, 0x7d, 0x1c, 0x7a, 0x7f, 
    0x63, 0x19, 0x48, 0x7a, 0x41, 0x5b, 0x70, 0x44, 0x6d, 0x7c, 0x7b, 0x45, 0x41, 0x73, 0x4b, 0x62, 
    0x63, 0x70, 0x27, 0x20, 0x7f, 0x6c, 0x64, 0x5b, 0x41, 0x50, 0x72, 0x01, 0x4e, 0x6d, 0x70, 0x7d, 
    0x50, 0x1b, 0x7d, 0x7a, 0x1a, 0x70, 0x61, 0x5a, 0x1a, 0x1d, 0x62, 0x43, 0x4e, 0x62, 0x01, 0x5f, 
    0x18, 0x72, 0x1e, 0x78, 0x65, 0x1a, 0x48, 0x4c, 0x6d, 0x4d, 0x01, 0x47, 0x13, 0x60, 0x4c, 0x67, 
    0x47, 0x4d, 0x13, 0x73, 0x6c, 0x40, 0x4e, 0x4f, 0x1a, 0x1f, 0x12, 0x7e, 0x50, 0x7a, 0x79, 0x6b, 
    0x12, 0x59, 0x1a, 0x5e, 0x27, 0x20, 0x43, 0x6c, 0x12, 0x4b, 0x42, 0x7f, 0x45, 0x73, 0x4f, 0x41, 
    0x62, 0x45, 0x4b, 0x5d, 0x01, 0x49, 0x4c, 0x1f, 0x7d, 0x65, 0x49, 0x48, 0x78, 0x72, 0x18, 0x1d, 
    0x05, 0x12, 0x1b, 0x7a, 0x1e, 0x58, 0x7b, 0x59, 0x58, 0x67, 0x01, 0x7f, 0x69, 0x62, 0x6b, 0x59, 
    0x68, 0x1b, 0x44, 0x67, 0x5a, 0x60, 0x66, 0x5f, 0x18, 0x52, 0x1b, 0x40, 0x4d, 0x7d, 0x7e, 0x61, 
    0x46, 0x6e, 0x1d, 0x1a, 0x53, 0x63, 0x27, 0x20, 0x7c, 0x19, 0x52, 0x7b, 0x1a, 0x5b, 0x5a, 0x42, 
    0x5d, 0x43, 0x67, 0x58, 0x6c, 0x60, 0x65, 0x63, 0x6c, 0x7b, 0x6f, 0x5c, 0x73, 0x40, 0x61, 0x1b, 
    0x50, 0x1f, 0x43, 0x45, 0x6d, 0x1d, 0x63, 0x13, 0x5c, 0x44, 0x78, 0x5c, 0x52, 0x13, 0x5a, 0x6f, 
    0x47, 0x78, 0x42, 0x45, 0x4e, 0x18, 0x05, 0x1d, 0x61, 0x7d, 0x6f, 0x47, 0x6b, 0x68, 0x53, 0x5f, 
    0x7a, 0x4f, 0x42, 0x61, 0x4f, 0x7c, 0x4d, 0x6d, 0x27, 0x20, 0x1c, 0x5d, 0x5a, 0x6c, 0x7e, 0x19, 
    0x42, 0x4b, 0x78, 0x1b, 0x7d, 0x6f, 0x59, 0x4c, 0x65, 0x53, 0x7e, 0x72, 0x12, 0x61, 0x6f, 0x4e, 
    0x49, 0x60, 0x4e, 0x43, 0x69, 0x41, 0x41, 0x68, 0x19, 0x1f, 0x66, 0x5d, 0x79, 0x12, 0x68, 0x1e, 
    0x7b, 0x5d, 0x7a, 0x49, 0x4d, 0x5c, 0x5b, 0x5c, 0x6f, 0x4f, 0x41, 0x53, 0x18, 0x70, 0x4e, 0x72, 
    0x7e, 0x1f, 0x05, 0x7b, 0x49, 0x65, 0x7d, 0x5a, 0x42, 0x41, 0x27, 0x20, 0x58, 0x53, 0x53, 0x48, 
    0x63, 0x4e, 0x7f, 0x79, 0x49, 0x18, 0x6d, 0x47, 0x4b, 0x7a, 0x47, 0x70, 0x4f, 0x64, 0x45, 0x72, 
    0x40, 0x7f, 0x52, 0x5e, 0x7c, 0x63, 0x4d, 0x5e, 0x1e, 0x41, 0x1d, 0x4f, 0x48, 0x48, 0x6d, 0x1d, 
    0x52, 0x53, 0x12, 0x5f, 0x1b, 0x78, 0x58, 0x7e, 0x5d, 0x6e, 0x5b, 0x70, 0x1b, 0x63, 0x1a, 0x6c, 
    0x7d, 0x40, 0x65, 0x70, 0x78, 0x13, 0x73, 0x62, 0x5b, 0x5c, 0x6b, 0x5d, 0x27, 0x20, 0x72, 0x70, 
    0x65, 0x72, 0x7c, 0x50, 0x53, 0x4c, 0x4c, 0x59, 0x47, 0x73, 0x6c, 0x6d, 0x46, 0x60, 0x59, 0x5f, 
    0x45, 0x69, 0x5e, 0x5c, 0x5a, 0x45, 0x4c, 0x5c, 0x43, 0x18, 0x53, 0x41, 0x4b, 0x41, 0x1b, 0x7c, 
    0x4f, 0x72, 0x60, 0x42, 0x7e, 0x5c, 0x61, 0x1c, 0x4b, 0x46, 0x1f, 0x59, 0x46, 0x61, 0x46, 0x4f, 
    0x79, 0x4f, 0x4f, 0x7d, 0x5e, 0x1a, 0x4c, 0x72, 0x18, 0x59, 0x7c, 0x4d, 0x6c, 0x68, 0x27, 0x20, 
    0x60, 0x47, 0x1d, 0x5b, 0x5b, 0x46, 0x61, 0x79, 0x1a, 0x5b, 0x7f, 0x7b, 0x4f, 0x68, 0x01, 0x63, 
    0x69, 0x41, 0x79, 0x7d, 0x62, 0x59, 0x70, 0x4f, 0x7c, 0x49, 0x69, 0x44, 0x40, 0x48, 0x5a, 0x12, 
    0x67, 0x4f, 0x13, 0x68, 0x19, 0x6f, 0x47, 0x43, 0x4d, 0x60, 0x4e, 0x41, 0x5e, 0x5e, 0x47, 0x42, 
    0x62, 0x4b, 0x6f, 0x73, 0x4e, 0x61, 0x46, 0x7d, 0x64, 0x18, 0x5c, 0x53, 0x52, 0x01, 0x5c, 0x7d, 
    0x27, 0x20, 0x40, 0x6b, 0x7c, 0x44, 0x73, 0x4e, 0x1f, 0x7b, 0x41, 0x44, 0x46, 0x4c, 0x01, 0x7d, 
    0x01, 0x43, 0x6c, 0x1c, 0x01, 0x5d, 0x65, 0x6b, 0x7c, 0x6e, 0x60, 0x1a, 0x68, 0x6e, 0x64, 0x4b, 
    0x41, 0x5f, 0x12, 0x79, 0x44, 0x68, 0x6f, 0x63, 0x58, 0x67, 0x64, 0x40, 0x5a, 0x6b, 0x72, 0x46, 
    0x7f, 0x12, 0x12, 0x58, 0x72, 0x61, 0x7a, 0x13, 0x79, 0x6c, 0x1d, 0x5e, 0x73, 0x42, 0x5e, 0x5e, 
    0x43, 0x45, 0x27, 0x20, 0x46, 0x62, 0x4d, 0x49, 0x61, 0x42, 0x4f, 0x1a, 0x12, 0x4d, 0x01, 0x7c, 
    0x6b, 0x13, 0x46, 0x7f, 0x78, 0x72, 0x64, 0x5a, 0x5a, 0x5d, 0x58, 0x47, 0x01, 0x68, 0x4b, 0x41, 
    0x1d, 0x6e, 0x49, 0x12, 0x62, 0x4b, 0x4d, 0x68, 0x65, 0x6f, 0x50, 0x7b, 0x6c, 0x79, 0x70, 0x41, 
    0x5c, 0x6b, 0x5e, 0x5c, 0x41, 0x5f, 0x53, 0x52, 0x66, 0x7b, 0x17, 0x17, 0x27, 0x20, 0x07, 0x07, 
    0x07, 0x07, 0x07, 0x6f, 0x64, 0x6e, 0x0a, 0x78, 0x79, 0x6b, 0x0a, 0x7a, 0x78, 0x63, 0x7c, 0x6b, 
    0x7e, 0x6f, 0x0a, 0x61, 0x6f, 0x73, 0x07, 0x07, 0x07, 0x07, 0x07, 0x27, 0x20 };

// XOR 13'd obfuscated certificate for clienttolocalhostonly.com (Verisign signed)
#define LOCALCERT_SIZE 1856
static const unsigned char local_cert_obf[LOCALCERT_SIZE] =
    {
        0x07, 0x07, 0x07, 0x07, 0x07, 0x68, 0x6f, 0x6d, 0x63, 0x64, 0x0a, 0x69, 0x6f, 0x78, 0x7e, 0x63, 
        0x6c, 0x63, 0x69, 0x6b, 0x7e, 0x6f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x27, 0x20, 0x67, 0x63, 0x63, 
        0x6c, 0x6c, 0x50, 0x69, 0x69, 0x6b, 0x05, 0x01, 0x4d, 0x6b, 0x5d, 0x63, 0x68, 0x6b, 0x4d, 0x63, 
        0x7b, 0x70, 0x01, 0x1c, 0x12, 0x67, 0x1f, 0x4f, 0x65, 0x1f, 0x78, 0x79, 0x53, 0x48, 0x13, 0x5c, 
        0x60, 0x13, 0x52, 0x12, 0x6e, 0x1b, 0x7e, 0x6b, 0x64, 0x68, 0x4d, 0x41, 0x5b, 0x42, 0x41, 0x43, 
        0x6d, 0x13, 0x5d, 0x1a, 0x68, 0x6b, 0x7b, 0x59, 0x6c, 0x6b, 0x6e, 0x68, 0x01, 0x27, 0x20, 0x67, 
        0x7b, 0x59, 0x5d, 0x69, 0x7b, 0x73, 0x6e, 0x7c, 0x7b, 0x7b, 0x6d, 0x6f, 0x5d, 0x60, 0x7c, 0x7f, 
        0x50, 0x6f, 0x4e, 0x67, 0x68, 0x59, 0x6d, 0x6b, 0x1b, 0x7f, 0x6f, 0x69, 0x42, 0x67, 0x7f, 0x7f, 
        0x19, 0x46, 0x5e, 0x73, 0x7d, 0x1f, 0x1a, 0x70, 0x7d, 0x67, 0x4d, 0x7b, 0x18, 0x13, 0x53, 0x49, 
        0x6d, 0x13, 0x53, 0x73, 0x72, 0x78, 0x5a, 0x48, 0x18, 0x1e, 0x52, 0x62, 0x50, 0x6b, 0x4e, 0x27, 
        0x20, 0x68, 0x4d, 0x64, 0x7c, 0x68, 0x6b, 0x59, 0x7e, 0x6c, 0x46, 0x64, 0x1f, 0x48, 0x7d, 0x6c, 
        0x5f, 0x4e, 0x6d, 0x7c, 0x40, 0x63, 0x6c, 0x78, 0x53, 0x4e, 0x72, 0x64, 0x1a, 0x63, 0x6f, 0x1f, 
        0x46, 0x4e, 0x62, 0x4e, 0x5c, 0x49, 0x47, 0x59, 0x52, 0x66, 0x50, 0x6b, 0x5e, 0x68, 0x4d, 0x64, 
        0x7c, 0x68, 0x6b, 0x67, 0x7e, 0x60, 0x46, 0x64, 0x1f, 0x48, 0x7d, 0x6c, 0x5f, 0x4e, 0x6d, 0x7c, 
        0x40, 0x27, 0x20, 0x63, 0x6f, 0x64, 0x59, 0x73, 0x72, 0x64, 0x50, 0x63, 0x6e, 0x67, 0x4d, 0x7f, 
        0x18, 0x7c, 0x40, 0x4e, 0x72, 0x60, 0x46, 0x63, 0x6c, 0x64, 0x46, 0x49, 0x44, 0x70, 0x46, 0x49, 
        0x43, 0x68, 0x6e, 0x7b, 0x79, 0x6b, 0x5e, 0x63, 0x6f, 0x49, 0x1a, 0x67, 0x68, 0x1e, 0x72, 0x6e, 
        0x7e, 0x6f, 0x1b, 0x67, 0x6e, 0x6f, 0x53, 0x64, 0x6e, 0x6b, 0x5d, 0x67, 0x6e, 0x6b, 0x5d, 0x67, 
        0x6c, 0x45, 0x72, 0x27, 0x20, 0x6e, 0x7e, 0x6f, 0x18, 0x67, 0x6e, 0x6f, 0x53, 0x64, 0x7e, 0x63, 
        0x50, 0x64, 0x7e, 0x41, 0x1b, 0x65, 0x7c, 0x45, 0x5d, 0x4d, 0x70, 0x45, 0x52, 0x69, 0x50, 0x6b, 
        0x60, 0x68, 0x4d, 0x64, 0x7c, 0x68, 0x6b, 0x73, 0x7e, 0x6b, 0x46, 0x7c, 0x7e, 0x67, 0x78, 0x67, 
        0x5d, 0x6f, 0x7b, 0x73, 0x6e, 0x7c, 0x7b, 0x7b, 0x63, 0x6e, 0x6b, 0x5a, 0x6e, 0x73, 0x7d, 0x52, 
        0x5a, 0x70, 0x47, 0x13, 0x53, 0x27, 0x20, 0x48, 0x47, 0x46, 0x42, 0x67, 0x78, 0x7f, 0x5d, 0x6f, 
        0x5d, 0x73, 0x6e, 0x7c, 0x7b, 0x7b, 0x62, 0x6e, 0x6b, 0x52, 0x79, 0x70, 0x7d, 0x78, 0x19, 0x48, 
        0x18, 0x13, 0x41, 0x63, 0x6f, 0x64, 0x5a, 0x4e, 0x62, 0x41, 0x52, 0x62, 0x40, 0x6b, 0x49, 0x68, 
        0x4d, 0x64, 0x7c, 0x68, 0x6b, 0x45, 0x67, 0x6c, 0x7f, 0x7c, 0x59, 0x70, 0x7d, 0x64, 0x1a, 0x49, 
        0x47, 0x13, 0x5f, 0x4b, 0x7d, 0x67, 0x4d, 0x27, 0x20, 0x7b, 0x72, 0x60, 0x1a, 0x49, 0x53, 0x5d, 
        0x4d, 0x79, 0x7d, 0x1f, 0x40, 0x66, 0x40, 0x6f, 0x48, 0x67, 0x68, 0x41, 0x6d, 0x6b, 0x1b, 0x7f, 
        0x6f, 0x69, 0x5d, 0x5d, 0x79, 0x78, 0x7f, 0x6f, 0x4d, 0x7e, 0x18, 0x1f, 0x59, 0x4b, 0x7d, 0x1f, 
        0x46, 0x66, 0x1b, 0x68, 0x5c, 0x70, 0x18, 0x12, 0x5f, 0x73, 0x18, 0x13, 0x5e, 0x67, 0x79, 0x63, 
        0x5d, 0x63, 0x6b, 0x73, 0x6e, 0x7c, 0x7b, 0x7b, 0x6e, 0x27, 0x20, 0x6e, 0x68, 0x46, 0x40, 0x48, 
        0x6d, 0x46, 0x46, 0x48, 0x44, 0x78, 0x1a, 0x48, 0x18, 0x52, 0x5c, 0x73, 0x18, 0x6c, 0x59, 0x4b, 
        0x6d, 0x13, 0x50, 0x4e, 0x6d, 0x13, 0x5f, 0x48, 0x62, 0x41, 0x5f, 0x73, 0x18, 0x13, 0x5e, 0x67, 
        0x63, 0x63, 0x68, 0x63, 0x40, 0x6b, 0x64, 0x68, 0x4d, 0x41, 0x5b, 0x42, 0x41, 0x43, 0x6d, 0x13, 
        0x5d, 0x1a, 0x68, 0x6b, 0x7b, 0x6f, 0x6c, 0x6b, 0x6b, 0x65, 0x69, 0x27, 0x20, 0x6b, 0x7b, 0x12, 
        0x6b, 0x67, 0x63, 0x63, 0x68, 0x69, 0x4d, 0x61, 0x69, 0x6b, 0x7b, 0x6f, 0x6b, 0x5e, 0x4e, 0x65, 
        0x05, 0x1e, 0x4d, 0x45, 0x19, 0x48, 0x6f, 0x6b, 0x79, 0x78, 0x45, 0x67, 0x52, 0x44, 0x61, 0x4f, 
        0x19, 0x47, 0x48, 0x5d, 0x40, 0x7f, 0x79, 0x66, 0x66, 0x5d, 0x5b, 0x4f, 0x12, 0x60, 0x59, 0x47, 
        0x44, 0x66, 0x52, 0x67, 0x7b, 0x5f, 0x4d, 0x12, 0x6d, 0x65, 0x62, 0x6c, 0x78, 0x27, 0x20, 0x53, 
        0x18, 0x5e, 0x5f, 0x12, 0x42, 0x60, 0x5d, 0x72, 0x64, 0x4c, 0x67, 0x18, 0x78, 0x58, 0x43, 0x65, 
        0x6d, 0x13, 0x4d, 0x48, 0x05, 0x7c, 0x6c, 0x61, 0x62, 0x6b, 0x73, 0x6b, 0x73, 0x62, 0x05, 0x1b, 
        0x63, 0x5e, 0x7d, 0x01, 0x41, 0x7f, 0x5f, 0x46, 0x7c, 0x42, 0x19, 0x4b, 0x4f, 0x65, 0x49, 0x01, 
        0x66, 0x58, 0x7e, 0x64, 0x78, 0x52, 0x50, 0x42, 0x6d, 0x41, 0x4b, 0x1c, 0x1e, 0x46, 0x40, 0x27, 
        0x20, 0x7c, 0x4e, 0x65, 0x61, 0x5a, 0x44, 0x1d, 0x78, 0x70, 0x13, 0x46, 0x05, 0x4d, 0x5a, 0x7f, 
        0x7d, 0x1a, 0x13, 0x1b, 0x7d, 0x64, 0x46, 0x4e, 0x78, 0x5d, 0x4d, 0x53, 0x65, 0x5a, 0x43, 0x7b, 
        0x4c, 0x5e, 0x7e, 0x44, 0x50, 0x4f, 0x5d, 0x6e, 0x7d, 0x45, 0x4e, 0x1d, 0x7f, 0x7a, 0x5c, 0x73, 
        0x6c, 0x18, 0x6b, 0x4b, 0x1f, 0x7e, 0x40, 0x50, 0x5b, 0x46, 0x18, 0x1c, 0x05, 0x6d, 0x01, 0x1c, 
        0x46, 0x27, 0x20, 0x1e, 0x79, 0x05, 0x78, 0x1f, 0x64, 0x59, 0x61, 0x5b, 0x78, 0x1f, 0x7a, 0x19, 
        0x5f, 0x1a, 0x18, 0x46, 0x73, 0x7a, 0x45, 0x4f, 0x64, 0x61, 0x62, 0x50, 0x78, 0x47, 0x50, 0x64, 
        0x61, 0x01, 0x70, 0x1d, 0x6e, 0x6f, 0x19, 0x64, 0x60, 0x65, 0x65, 0x4c, 0x5d, 0x4d, 0x49, 0x59, 
        0x5e, 0x5b, 0x69, 0x6e, 0x4c, 0x66, 0x4e, 0x5d, 0x67, 0x53, 0x5f, 0x49, 0x53, 0x5a, 0x12, 0x64, 
        0x13, 0x5a, 0x52, 0x27, 0x20, 0x62, 0x42, 0x50, 0x70, 0x1d, 0x60, 0x78, 0x70, 0x5d, 0x6d, 0x7f, 
        0x13, 0x1f, 0x4d, 0x78, 0x64, 0x43, 0x69, 0x44, 0x60, 0x5a, 0x64, 0x65, 0x79, 0x5f, 0x6d, 0x1a, 
        0x5a, 0x1e, 0x44, 0x7c, 0x6f, 0x66, 0x1a, 0x6f, 0x50, 0x4d, 0x65, 0x46, 0x12, 0x41, 0x58, 0x01, 
        0x48, 0x7a, 0x44, 0x50, 0x78, 0x58, 0x79, 0x78, 0x69, 0x4c, 0x4d, 0x61, 0x65, 0x4d, 0x60, 0x7c, 
        0x5f, 0x62, 0x68, 0x64, 0x50, 0x27, 0x20, 0x7a, 0x42, 0x01, 0x4d, 0x5c, 0x41, 0x18, 0x67, 0x52, 
        0x41, 0x68, 0x58, 0x47, 0x49, 0x6e, 0x58, 0x12, 0x6d, 0x60, 0x42, 0x7a, 0x1b, 0x67, 0x5d, 0x67, 
        0x7b, 0x68, 0x61, 0x5d, 0x46, 0x6c, 0x7f, 0x42, 0x7f, 0x65, 0x4b, 0x65, 0x5d, 0x63, 0x6e, 0x6b, 
        0x7b, 0x6b, 0x68, 0x45, 0x1e, 0x63, 0x68, 0x49, 0x40, 0x69, 0x69, 0x6b, 0x7d, 0x1e, 0x5d, 0x60, 
        0x6b, 0x73, 0x6e, 0x7c, 0x78, 0x1a, 0x78, 0x27, 0x20, 0x68, 0x68, 0x1a, 0x5d, 0x6d, 0x1e, 0x63, 
        0x70, 0x73, 0x18, 0x52, 0x5a, 0x70, 0x7d, 0x1f, 0x1a, 0x4e, 0x6d, 0x13, 0x59, 0x48, 0x18, 0x64, 
        0x42, 0x48, 0x6d, 0x42, 0x5c, 0x49, 0x19, 0x78, 0x5c, 0x48, 0x47, 0x52, 0x1f, 0x66, 0x47, 0x64, 
        0x5c, 0x48, 0x7e, 0x6b, 0x60, 0x68, 0x4d, 0x64, 0x7c, 0x62, 0x78, 0x67, 0x6f, 0x6b, 0x40, 0x6b, 
        0x6b, 0x67, 0x6b, 0x1e, 0x6d, 0x6b, 0x1b, 0x7f, 0x4e, 0x27, 0x20, 0x6e, 0x5d, 0x6f, 0x68, 0x05, 
        0x5d, 0x7b, 0x6f, 0x6b, 0x5d, 0x63, 0x6c, 0x45, 0x6e, 0x6b, 0x4e, 0x68, 0x4d, 0x64, 0x7c, 0x62, 
        0x79, 0x7f, 0x6f, 0x6c, 0x40, 0x6b, 0x7f, 0x68, 0x4d, 0x4d, 0x58, 0x68, 0x4d, 0x6f, 0x6c, 0x68, 
        0x7b, 0x49, 0x6e, 0x6b, 0x7b, 0x73, 0x63, 0x61, 0x5d, 0x73, 0x68, 0x68, 0x7b, 0x7f, 0x62, 0x6b, 
        0x5d, 0x63, 0x5d, 0x70, 0x7b, 0x73, 0x6e, 0x7c, 0x78, 0x1a, 0x4d, 0x27, 0x20, 0x68, 0x6c, 0x1e, 
        0x5d, 0x72, 0x6e, 0x68, 0x4b, 0x68, 0x4d, 0x5a, 0x4d, 0x42, 0x41, 0x4d, 0x68, 0x42, 0x5c, 0x42, 
        0x6c, 0x6b, 0x7b, 0x49, 0x18, 0x67, 0x6f, 0x5d, 0x5d, 0x63, 0x5d, 0x73, 0x63, 0x61, 0x5d, 0x73, 
        0x68, 0x68, 0x7b, 0x7f, 0x62, 0x6b, 0x4d, 0x6f, 0x7d, 0x6c, 0x18, 0x42, 0x1a, 0x4e, 0x62, 0x68, 
        0x50, 0x65, 0x43, 0x12, 0x5c, 0x70, 0x69, 0x1f, 0x50, 0x4f, 0x7d, 0x1b, 0x40, 0x27, 0x20, 0x73, 
        0x43, 0x1f, 0x40, 0x48, 0x18, 0x1a, 0x5c, 0x73, 0x19, 0x68, 0x50, 0x67, 0x69, 0x7f, 0x6d, 0x69, 
        0x69, 0x59, 0x6d, 0x6b, 0x7b, 0x7f, 0x6c, 0x68, 0x5d, 0x63, 0x69, 0x67, 0x68, 0x41, 0x4b, 0x6c, 
        0x18, 0x42, 0x1a, 0x4e, 0x62, 0x68, 0x50, 0x65, 0x43, 0x12, 0x5c, 0x70, 0x69, 0x1f, 0x50, 0x4f, 
        0x7d, 0x1b, 0x40, 0x73, 0x43, 0x1f, 0x40, 0x48, 0x18, 0x1a, 0x5c, 0x49, 0x44, 0x68, 0x42, 0x27, 
        0x20, 0x67, 0x68, 0x12, 0x6d, 0x6b, 0x1b, 0x7f, 0x4e, 0x63, 0x5d, 0x7b, 0x73, 0x67, 0x68, 0x4b, 
        0x6b, 0x6c, 0x6c, 0x13, 0x4d, 0x50, 0x18, 0x6d, 0x7b, 0x7c, 0x4e, 0x01, 0x6f, 0x7b, 0x52, 0x79, 
        0x61, 0x73, 0x69, 0x5b, 0x53, 0x13, 0x72, 0x58, 0x1a, 0x7b, 0x52, 0x40, 0x5c, 0x67, 0x69, 0x59, 
        0x6d, 0x6b, 0x1b, 0x7f, 0x4e, 0x62, 0x5d, 0x7b, 0x41, 0x67, 0x69, 0x63, 0x5d, 0x63, 0x61, 0x6b, 
        0x4f, 0x27, 0x20, 0x45, 0x68, 0x53, 0x6d, 0x6d, 0x47, 0x42, 0x1a, 0x4e, 0x62, 0x6b, 0x1c, 0x66, 
        0x53, 0x13, 0x50, 0x49, 0x53, 0x1f, 0x50, 0x4f, 0x7d, 0x1b, 0x40, 0x73, 0x43, 0x1f, 0x40, 0x48, 
        0x18, 0x1a, 0x5c, 0x49, 0x19, 0x67, 0x5f, 0x73, 0x19, 0x60, 0x59, 0x67, 0x6c, 0x49, 0x6d, 0x69, 
        0x69, 0x59, 0x6d, 0x6b, 0x7b, 0x7f, 0x6c, 0x68, 0x5d, 0x6f, 0x68, 0x68, 0x6f, 0x59, 0x5d, 0x79, 
        0x7e, 0x6b, 0x4c, 0x27, 0x20, 0x68, 0x4d, 0x4d, 0x58, 0x68, 0x4d, 0x6f, 0x6c, 0x68, 0x7b, 0x49, 
        0x5d, 0x6b, 0x73, 0x73, 0x7e, 0x4b, 0x62, 0x78, 0x1a, 0x49, 0x6e, 0x45, 0x5c, 0x66, 0x19, 0x64, 
        0x50, 0x66, 0x44, 0x64, 0x1f, 0x48, 0x7d, 0x64, 0x41, 0x66, 0x47, 0x64, 0x5c, 0x48, 0x7e, 0x6b, 
        0x47, 0x68, 0x4d, 0x4d, 0x58, 0x68, 0x4d, 0x6f, 0x6c, 0x68, 0x7b, 0x49, 0x5d, 0x6b, 0x45, 0x73, 
        0x4b, 0x4b, 0x62, 0x78, 0x1a, 0x27, 0x20, 0x49, 0x6e, 0x45, 0x5c, 0x66, 0x19, 0x64, 0x50, 0x66, 
        0x44, 0x64, 0x1f, 0x48, 0x7d, 0x64, 0x43, 0x66, 0x47, 0x64, 0x5c, 0x48, 0x79, 0x13, 0x50, 0x49, 
        0x53, 0x1f, 0x40, 0x49, 0x44, 0x7b, 0x5d, 0x6e, 0x7b, 0x73, 0x60, 0x61, 0x45, 0x70, 0x63, 0x42, 
        0x5c, 0x49, 0x64, 0x6b, 0x7b, 0x6f, 0x66, 0x68, 0x7b, 0x6b, 0x6e, 0x4d, 0x4d, 0x6f, 0x68, 0x6b, 
        0x62, 0x68, 0x1e, 0x41, 0x6e, 0x7a, 0x7c, 0x27, 0x20, 0x5c, 0x59, 0x63, 0x6f, 0x4d, 0x4e, 0x5e, 
        0x18, 0x52, 0x7f, 0x60, 0x67, 0x72, 0x1c, 0x7d, 0x1d, 0x1f, 0x6b, 0x40, 0x4d, 0x52, 0x72, 0x48, 
        0x66, 0x61, 0x65, 0x4c, 0x4c, 0x44, 0x7e, 0x7d, 0x52, 0x13, 0x64, 0x13, 0x6f, 0x52, 0x40, 0x64, 
        0x5e, 0x05, 0x7f, 0x46, 0x70, 0x5b, 0x64, 0x1f, 0x69, 0x70, 0x66, 0x68, 0x1d, 0x46, 0x72, 0x69, 
        0x50, 0x72, 0x5b, 0x6e, 0x52, 0x7f, 0x73, 0x44, 0x6c, 0x27, 0x20, 0x7f, 0x78, 0x19, 0x47, 0x50, 
        0x5a, 0x4d, 0x12, 0x7d, 0x72, 0x1a, 0x62, 0x7f, 0x66, 0x46, 0x6c, 0x42, 0x4c, 0x60, 0x5a, 0x13, 
        0x4e, 0x79, 0x63, 0x7c, 0x01, 0x7c, 0x42, 0x42, 0x45, 0x4e, 0x4f, 0x19, 0x43, 0x4c, 0x4e, 0x46, 
        0x05, 0x5c, 0x6b, 0x64, 0x7e, 0x47, 0x42, 0x69, 0x61, 0x5f, 0x46, 0x6e, 0x19, 0x7f, 0x4f, 0x6f, 
        0x5c, 0x1f, 0x4f, 0x50, 0x7b, 0x1c, 0x52, 0x7d, 0x48, 0x1b, 0x5d, 0x27, 0x20, 0x7c, 0x4c, 0x69, 
        0x7b, 0x58, 0x5f, 0x6f, 0x7b, 0x64, 0x72, 0x4c, 0x7e, 0x5f, 0x4c, 0x4f, 0x41, 0x49, 0x69, 0x49, 
        0x1b, 0x49, 0x53, 0x1f, 0x19, 0x19, 0x58, 0x12, 0x4f, 0x5b, 0x1f, 0x73, 0x1d, 0x1b, 0x1e, 0x61, 
        0x5b, 0x79, 0x4e, 0x58, 0x60, 0x59, 0x6e, 0x49, 0x6e, 0x5c, 0x70, 0x70, 0x53, 0x73, 0x6f, 0x4d, 
        0x78, 0x7c, 0x49, 0x69, 0x59, 0x66, 0x73, 0x44, 0x52, 0x7f, 0x65, 0x44, 0x7f, 0x27, 0x20, 0x6c, 
        0x64, 0x1d, 0x46, 0x69, 0x43, 0x7a, 0x1e, 0x68, 0x5f, 0x41, 0x41, 0x6b, 0x4e, 0x1f, 0x4d, 0x5a, 
        0x19, 0x6f, 0x1a, 0x52, 0x19, 0x43, 0x5f, 0x1e, 0x5e, 0x5a, 0x70, 0x1b, 0x7d, 0x6e, 0x42, 0x48, 
        0x65, 0x5c, 0x5a, 0x63, 0x64, 0x61, 0x63, 0x6c, 0x1d, 0x53, 0x53, 0x79, 0x50, 0x5f, 0x1e, 0x1c, 
        0x61, 0x1b, 0x6b, 0x4b, 0x59, 0x7e, 0x7c, 0x79, 0x67, 0x5a, 0x73, 0x41, 0x1b, 0x7d, 0x7f, 0x27, 
        0x20, 0x1d, 0x1e, 0x18, 0x6f, 0x7c, 0x41, 0x12, 0x1e, 0x5d, 0x64, 0x5a, 0x60, 0x7d, 0x5b, 0x53, 
        0x47, 0x7c, 0x47, 0x6c, 0x73, 0x53, 0x1f, 0x1f, 0x58, 0x4f, 0x79, 0x59, 0x7c, 0x59, 0x63, 0x46, 
        0x64, 0x53, 0x63, 0x4d, 0x4c, 0x5f, 0x12, 0x79, 0x12, 0x1a, 0x69, 0x46, 0x7f, 0x5f, 0x65, 0x66, 
        0x53, 0x5e, 0x6b, 0x58, 0x6d, 0x5f, 0x43, 0x01, 0x6e, 0x67, 0x4b, 0x78, 0x6e, 0x58, 0x68, 0x01, 
        0x5d, 0x27, 0x20, 0x73, 0x49, 0x42, 0x6c, 0x52, 0x4f, 0x61, 0x66, 0x6d, 0x18, 0x6b, 0x4e, 0x6d, 
        0x18, 0x6f, 0x17, 0x27, 0x20, 0x07, 0x07, 0x07, 0x07, 0x07, 0x6f, 0x64, 0x6e, 0x0a, 0x69, 0x6f, 
        0x78, 0x7e, 0x63, 0x6c, 0x63, 0x69, 0x6b, 0x7e, 0x6f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x27, 0x20 };

            void LocalHostServerSSL::incomingConnection(qintptr handle)
            {
                QSslSocket* socket = new QSslSocket(this);
                socket->setProtocol(QSsl::SecureProtocols); 

                unsigned char private_key_pass[PRIVATE_KEY_PASS_SIZE + 1];
                unsigned char private_key[PRIVATE_KEY_SIZE+1];
                unsigned char local_cert[LOCALCERT_SIZE+1];

                for (int i = 0; i < PRIVATE_KEY_PASS_SIZE; i++)
                {
                    private_key_pass[i] = private_key_pass_obf[i] ^ 0x2A;   // XOR 13 de-obfuscation
                }
                private_key_pass[PRIVATE_KEY_PASS_SIZE] = 0;

                for (int i = 0; i < PRIVATE_KEY_SIZE; i++)
                {
                    private_key[i] = private_key_obf[i] ^ 0x2A;   // XOR 13 de-obfuscation
                }
                private_key[PRIVATE_KEY_SIZE] = 0;

                for (int i = 0; i < LOCALCERT_SIZE; i++)
                {
                    local_cert[i] = local_cert_obf[i] ^ 0x2A;   // XOR 13 de-obfuscation
                }
                local_cert[LOCALCERT_SIZE] = 0;

                const QByteArray key_pass_array((char *) private_key_pass);
                const QByteArray key_array((char *) private_key);
                QSslKey key = QSslKey(key_array, QSsl::Rsa, QSsl::Pem, QSsl::PrivateKey, key_pass_array);//

                socket->setPrivateKey(key);
                QSslKey local_key = socket->privateKey();
                if (local_key.isNull())
                {
                    delete socket;
                    return;
                }

                const QByteArray cert_array((char *) local_cert);
                QSslCertificate cert = QSslCertificate(cert_array);
                socket->setLocalCertificate(cert);

                QSslCertificate local_certificate = socket->localCertificate();
                if (local_certificate.isNull())
                {
                    delete socket;
                    return;
                }

                if (socket->setSocketDescriptor(handle)) 
                {
                    this->mPendingConnections.enqueue(socket);
                    socket->startServerEncryption();
                } 
                else 
                {
                    delete socket;
                }
            }

            void LocalHostServerSSL::onNewConnectionPendingSSL()
            {
                QSslSocket *socket;
                while (socket = dynamic_cast<QSslSocket*>(nextPendingConnection()))
                {
                    //instantiate a new connection class that handles all the incoming data on a socket
                    HttpRequestHandler *request = new HttpRequestHandler(socket, NULL);
                    ORIGIN_VERIFY_CONNECT(socket, SIGNAL(disconnected()), request, SLOT(deleteLater()));
                    ORIGIN_VERIFY_CONNECT(socket, SIGNAL(disconnected()), socket, SLOT(deleteLater()));
                }
            }

        }
    }
}
