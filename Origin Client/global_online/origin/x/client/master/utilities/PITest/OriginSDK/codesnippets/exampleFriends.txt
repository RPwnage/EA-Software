OriginFriendT g_Friends[1000];
OriginErrorT QueryFriendsCallback(void *pContext, OriginHandleT hHandle, uint32_t total, uint32_t available, OriginErrorT err);
void exampleFriends()
{
   OriginHandleT handle;

   // Data associated with this query is only valid for as long as the handle exists.
   OriginErrorT err = OriginQueryFriends(OriginGetDefaultUser(), QueryFriendsCallback, NULL, 10000, &handle);
}

// Retrieve the results of the FriendsQuery
OriginErrorT QueryFriendsCallback(void *pContext, OriginHandleT hHandle, uint32_t total, uint32_t available, OriginErrorT err)
{
   if (err == ORIGIN_SUCCESS)
   {
       // Read data from enumerator using the handle.
       uint32_t count;
       err = OriginReadEnumeration(hHandle, g_Friends, sizeof(g_Friends), 0, ORIGIN_READ_ALL_DATA, &count);
       if (err == ORIGIN_SUCCESS)
       {
           for (uint32_t i=0; i<count; i++)
               printf("UserId: %I64d, Persona: %S", g_Friends[i].UserId, g_Friends[i].Persona);
       }
   }
   return OriginDestroyHandle(hHandle);
}