group componentdefinitionheader : servercommon;

baseComponent(fileNode, component) ::= <<
<standardFileHeader()>
<openIncludeGuard()>

/*** Include Files ********************************************************************************/
#include "framework/component/component.h"

/*** Defines/Macros/Constants/Typedefs ************************************************************/


<component.Scope.FullNameList: openNamespace(name=it); separator="\n">

extern const ::Blaze::ComponentBaseInfo <component.Name; format="toUpper">_COMPONENT_BASE_INFO;

<if (component.Types)>
<component.Types: {const BlazeObjectType <it.Name> = BlazeObjectType(<compId(component=component)>, <it.Value>);
} >
<endif>

<component.Scope.FullNameList: closeNamespace(name=it); separator="\n">

namespace Blaze
{   
    namespace BlazeRpcLog
    {
        //Backwards compatibility to the old logging standard
        extern const size_t& <component.Name; format="toLower">;
    }

<if(component.permissions)>    
    namespace Authorization
    {
        <component.permissions:{ permission|const Permission <permission.Name; format="@%1$-40s">= BLAZE_COMPONENT_PERMISSION(<component.CompId; format="hex">, <permission.Value>);     //\<\< <permission.FullValue; format="hex"> |<permission.FullValue>}; separator="\n" >

    }
<endif>         

    <component.Errors:{e|const ::Blaze::BlazeRpcError <e.Name; format="@%1$-80s">= BLAZE_COMPONENT_ERROR(<component.CompId; format="hex">, <e.Value>);     //\<\< <e.FullValue; format="hex"> |<e.FullValue>   | <e.description>}; separator="\n" >
}

<closeIncludeGuard()>
<standardFileFooter()>
>>


