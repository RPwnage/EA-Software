[ headername="framework/tdf/userdefines.h" ]
#include "framework/gen/userdefines.tdf"

[
  client_include = false,
  headername="framework/tdf/slivermanagertypes_server.h"
]
#include "framework/gen/slivermanagertypes_server.tdf"

namespace Blaze
{

class SliverSetMaster;
class SliverSet;
class Sliver;

[
  id = framework/5,
  configurationType = SliversConfig 
]
component Slivers
{
    errors
    {
    }

    [ clientname = "Slivers" ]
    slave
    {
        methods
        {
            // Slivers component RPCs (ids: 1..100)
            [
                id = 1,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            void importSliver(SliverInfo);

            [
                id = 2,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            void exportSliver(SliverInfo);

            [
                id = 9,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            void dropSliver(SliverInfo);

            [
                id = 3,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            MigrateSliverResponse migrateSliver(MigrateSliverRequest);

            [
                id = 4,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            void ejectSlivers(EjectSliversRequest);

            [
                id = 5,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            void rebalanceSlivers(RebalanceSliversRequest);

            [
                id = 6,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            GetSliversResponse getSlivers(GetSliversRequest);

            [
                id = 7,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            GetSliverInfosResponse getSliverInfos(GetSliverInfosRequest);

            [
                id = 8,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = true
            ]
            CheckHealthResponse checkHealth(CheckHealthRequest);

            // SliverCoordinator based RPCs (ids: 101..n)
            [
                id = 101,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false
            ]
            void submitSliverNamespaceStates(SubmitSliverNamespaceStatesRequest);

            [
                id = 102,
                internal = true,
                client_export = false,
                requires_authentication = false,
                generate_command_class = false,
                blocking = false
            ]
            CheckHealthResponse checkLocalHealth(CheckHealthRequest);
        }

        notifications
        {
            // Slivers component notifications (ids: 1..100)
            [
                id = 1,
                client_export = false
            ]
            SliverStateUpdateRequired(SliverStateUpdateRequest);

            // Slivers component notifications (ids: 1..100)
            [
                id = 2,
                client_export = false
            ]
            SliverStateUpdateConfirmation(SliverStateUpdateConfirmation);

            [
                id = 3,
                client_export = false
            ]
            SliverListenerSynced(SliverEventInfo);

            [
                id = 4,
                client_export = false
            ]
            SliverListenerDesynced(SliverEventInfo);

            [
                id = 5,
                client_export = false
            ]
            SliverRepairNeeded(SliverRepairParameters);

            // SliverCoordinator based notifications (ids: 101..n)
            [
                id = 101,
                client_export = false
            ]
            UpdateSliverListenerPartition(SliverListenerPartitionSyncUpdate);

            [
                id = 102,
                client_export = false
            ]
            SliverCoordinatorActivated(SliverCoordinatorInfo);

            [
                id = 103,
                client_export = false
            ]
            UpdateSliverListenerPartitionCount(SliverListenerPartitionCountUpdate);
        }
    }
}

}
