[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/oauth.h"]
#include "framework/gen/oauth.tdf"

[headername="nucleusidentity/tdf/nucleusidentity_base.h"]
#include "nucleusidentity/gen/nucleusidentity_base.tdf"

[headername="framework/tdf/vault_server.h"]
#include "framework/gen/vault_server.tdf"

namespace Blaze
{
namespace OAuth
{

[description="contains settings for platform external service authentication."]
class PsnClientCredentialConfig
{
    [tag="mock", default=false, description="For testing only. Indicates that the platform is enabled in mock mode."]
    bool mUseMock;

    [tag="eccs", description="For internal use. Access scope for Blaze's calls to Identity's GET ps5s2stoken. Empty disables the calls."]
    string(-1) mIdentityScope;

    [tag="ienv", default="", description="The environment parameter for Blaze's calls to Identity's GET ps5s2stoken. Empty omits specifying, in which case Nucleus side assumes a default environment. See Identity docs."]
    string(-1) mIdentityEnvironment;
};

[description = "Configuration for JWT"]
class JwtConfig
{
    [tag = "jwti", default = "", description = "Issuer of JWT token, used by blaze server to verify JWT token"]
    string(-1) mTokenIssuer;

    [tag = "jwkr", default = "5m", description = "Minimum refresh interval for JWT public key info, aka Json Web Keys (JWKs). Public key info is cached on server and used to verify JWT signature."]
    TimeValue mPublicKeyInfoRefreshMinInterval;
};

[description="Configuration for OAuth"]
class OAuthConfig
{
    [tag="ruri", reconfigurable="yes", description="The redirect_uri to send to Nucleus when getting an access token."]
    string(128) mRedirectUri;

    [tag="scop", reconfigurable="yes", description="The space delimited restricted scope that's applied to access tokens obtained by anyone other than the owner"]
    string(-1) mRestrictedScope;

    [tag="uatd", description="If a user session's Nucleus or first party access token validity falls below this threshold when it is being requested, it is updated automatically.", default="2m"]
    TimeValue mMinValidDurationForUserSessionAccessToken;

    [tag="urtd", description="If a user session's refresh token validity falls below this threshold, it is refreshed. Runs in a background timer.", default="30m"]
    TimeValue mMinValidDurationForUserSessionRefreshToken;

    [tag="srtd", description="If a server's access token validity falls below this threshold, it is refreshed. Run in background for avoiding on-demand refresh latency (like the UserSession token path)", default="5m"]
    TimeValue mMinValidDurationForServerAccessToken;

    [tag="tfmt", default=TOKEN_FORMAT_OPAQUE, description="Indicates the token format blaze server should use"]
    TokenFormat mTokenFormat;

    [tag = "jwtc", description = "JWT config"]
    JwtConfig mJwtConfig;

    [tag="mock", description="Indicates if the Nucleus service should respond with a valid XBL token for nucleus accounts"]
    bool mUseMock;

    [tag="csco", description="Map of any allowed scopes on a service/component level. Multiple scopes are separated by space."]
    map<ComponentName, string(-1)> mComponentScopes;

    [tag="psnc", description="contains settings for platform external service authentication."]
    PsnClientCredentialConfig mPsnClientCredential;
};

// The information about a token obtained from Nucleus that we cache. The token information isn't different between user and server so same struct is used.
class CachedTokenInfo
{
    [tag="atok", description="Nucleus 2.0 Access token", default=""]
    string(-1) mAccessToken;

    [tag="type", description="Access token type", default=""]
    string(64) mTokenType;

    [tag="rtok", description="Refresh token", default=""]
    string(-1) mRefreshToken;

    [tag="atex", description="Approximate access token expiry in absolute time."]
    TimeValue mAccessTokenExpire;

    [tag="rtex", description="Approximate refresh token expiry in absolute time."]
    TimeValue mRefreshTokenExpire;

    [tag="clid", description="The client id used to request the token."]
    string(MAX_NUCLEUS_CLIENT_ID_LENGTH) mClientId;

    [tag="ptnm", description="The product name whose info was used to request the token."]
    ProductName mProductName;

    [tag="ipad", description="The ip address of the user or server on whose behalf the token was acquired."]
    string(-1) mIpAddr;
};

class CachedFirstPartyToken
{
    [tag="psid", description="User's persona id"]
    PersonaId mPersonaId;

    [tag="pkey", description="Token proof key"]
    string(-1) mProofKey;

    [tag="auth", description="authentication token"]
    string(-1) mAuthToken;

    [tag="expr", description="time when the token will expire"]
    TimeValue mTokenExpires;

    [tag="plat", default=NATIVE, description="client platform"]
    ClientPlatformType mPlatform;
};


class CachedTrustedToken
{
    [tag="atok", description="Nucleus 2.0 Access token", default=""]
    string(-1) mAccessToken;

    [tag="scop",description="The space delimited scopes of the access token"]
    string(-1) mScopes;

    [tag="geo", description="IP Geo location info."]
    NucleusIdentity::IpGeoLocation mIpGeoLocation;
};

class IdentityContextRequest
{
    [tag="tokt", description="Type of the access token."]
    TokenType mAccessTokenType;

    [tag="tokn", description="The access token under which the rpc is trying to execute."]
    string(-1) mAccessToken;

    [tag="ipad", description="The ip address of the user or server who is making the request."]
    string(-1) mIpAddr;

    [tag="plat", default=NATIVE, description="The platform for which the request is being executed."]
    ClientPlatformType mPlatform;

    [tag="comp", description="The component name for which the request is being executed."]
    ComponentName mComponentName;

    [tag="rpcn", description="The rpc name for which the request is being executed."]
    string(-1) mRpcName;
};


class IdentityContext
{
    [tag="tokt", description="Type of the access token."]
    TokenType mAccessTokenType;

    [tag="tokn", description="The access token under which the rpc is trying to execute."]
    string(-1) mAccessToken;

    [tag="scop", description="The scopes associated with the token. Stored as a list as tdf does not support set.",
    details="Could use a map as a set but there are only 10s of these scopes in a token."]
    list<string(-1)> mAccessTokenScopes;

    [tag="plat", default=NATIVE, description="The platform for which the Identity Context is valid."]
    ClientPlatformType mPlatform;

    [tag="blid", default=INVALID_BLAZE_ID, description="The Blaze Id of the user making the request."]
    BlazeId mPersonaId;

    [tag="acid", default=INVALID_ACCOUNT_ID, description="The Account Id of the user making the request."]
    AccountId mNucleusId;
};


}//OAuth
}//Blaze
