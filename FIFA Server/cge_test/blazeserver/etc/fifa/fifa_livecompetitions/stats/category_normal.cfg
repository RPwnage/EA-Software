        scope = ["competitionid", "teamid"],
        entityType = "usersessions.user",
		stats = [
	    // SKILL
            { name = "rank",                 		type = "int",		format = "%d",	default = 0 },
            { name = "gamertag",             		type = "int",		format = "%d",  default = 0 },
            { name = "teamName",		   			type = "string",	format = "%s",	default = "", size = 64 },

            { name = "overallSkillPoints",   		type = "int",		format = "%d",  derived = "(currPerfPts + currCompPts)" },
            { name = "skill",                 		type = "int",		format = "%d",  default = 1 },
            { name = "opponentLevel",         		type = "int",		format = "%d",  default = 0 },
            { name = "averageOpponentLevel",  		type = "float",		format = "%.1f",derived = "(gamesPlayed>0)?(opponentLevel*1.0)/gamesPlayed : 0" }
	
	    // The current assignment of performance and competitve points
            { name = "currPerfPts",           		type = "int",		format = "%d",  default = 0 },
            { name = "currCompPts",           		type = "int",		format = "%d",  default = 200 },
            
	    // The previous state of the performance and competitive points before the last game was played
            { name = "prevPerfPts",           		type = "int",		format = "%d",  default = 0 },
            { name = "prevCompPts",           		type = "int",		format = "%d",  default = 200 },
            
	    // What the current perf and comp pts assignment would be if the teams had been equally weighted in the last game
            { name = "eqTPerfPts",            		type = "int",		format = "%d",  default = 0 },
            { name = "eqTCompPts",            		type = "int",		format = "%d",  default = 200 },
            
	    // Number of points till the next level
            { name = "ptsTillNextLevel",      		type = "int",		format = "%d",  default = 100 },
            { name = "ptsGainedThisLevel",			type = "int",		format = "%d",  default = 0 },
            
	    // Last Opponent stats
            { name = "opponentSkillPoints",     	type = "int",		format = "%d",  default = 0 },
            { name = "prevOpponentSkillPoints",		type = "int",		format = "%d",  default = 0 },
            { name = "starLevel",					type = "int",		format = "%d",	default = 0 },
            { name = "skillPrev",             		type = "int",		format = "%d",  default = 1 },

	    // STANDARD STATS
            { name = "wins",                 		type = "int",		format = "%d",  default = 0 },
            { name = "ties",                 		type = "int",		format = "%d",  default = 0 },
            { name = "losses",               		type = "int",		format = "%d",  default = 0 },
            { name = "pointsFor",            		type = "int",		format = "%d",  default = 0 },
            { name = "pointsAgainst",       		type = "int",		format = "%d",  default = 0 },
            { name = "gamesPlayed",          		type = "int",		format = "%d",  derived = "wins+ties+losses" },
            { name = "wstreak",               		type = "int",		format = "%d",  default = 0 },
            { name = "lstreak",               		type = "int",		format = "%d",  default = 0 },
            { name = "streak",                		type = "int",		format = "%d",  derived = "( wstreak > 0 ) ? wstreak : -lstreak" },
            { name = "beststreak",            		type = "int",		format = "%d",  default = 0 }, 
            { name = "ownGoals",              		type = "int",		format = "%d",  default = 0 },
            { name = "goals",                 		type = "int",		format = "%d",  default = 0 },
            { name = "averageGoalsPerGame",   		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (goals*1.0)/gamesPlayed:0" },
            { name = "goalsAgainst",                type = "int",		format = "%d",  default = 0 },
            { name = "averageGoalsAgainstPerGame",  type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (goalsAgainst*1.0)/gamesPlayed:0" },
            { name = "possession",            		type = "int", 		format = "%d",  default = 0 },
            { name = "averagePossession",    		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (possession*1.0)/gamesPlayed:0" },
            { name = "shotsFor",              		type = "int",		format = "%d",  default = 0 },
            { name = "averageShotsFor",       		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (shotsFor*1.0)/gamesPlayed:0" },
            { name = "shotsForOnGoal",       		type = "int",		format = "%d",  default = 0 },
            { name = "averageShotsForOnGoal", 		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (shotsForOnGoal*1.0)/gamesPlayed:0" },
            { name = "shotsAgainst",          		type = "int",		format = "%d",  default = 0 },
            { name = "averageShotsAgainst", 		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (shotsAgainst*1.0)/gamesPlayed:0" },
            { name = "shotsAgainstOnGoal",    		type = "int",		format = "%d",  default = 0 },
            { name = "averageShotsAgainstOnGoal",	type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (shotsAgainstOnGoal*1.0)/gamesPlayed:0" },
            { name = "tacklesAttempted",      		type = "int",		format = "%d",  default = 0 },
            { name = "tacklesMade",           		type = "int",		format = "%d",  default = 0 },
            { name = "tackleSuccessRate",     		type = "int", 		format = "%d",	derived = "(tacklesAttempted > 0) ? (tacklesMade*100.0)/tacklesAttempted : 0" },
            { name = "passAttempts",       			type = "int",		format = "%d",  default = 0 },
            { name = "passesMade",            		type = "int",		format = "%d",  default = 0 },
            { name = "passSuccessRate",       		type = "int", 		format = "%d",	derived = "(passAttempts > 0) ? (passesMade*100.0)/passAttempts : 0" },
            { name = "fouls",      	    			type = "int",		format = "%d",  default = 0 },
            { name = "averageFoulsPerGame",   		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (fouls*1.0)/gamesPlayed:0" },
            { name = "yellowCards",      	   		type = "int",		format = "%d",  default = 0 },
            { name = "redCards",      	    		type = "int",		format = "%d",  default = 0 },
            { name = "averagebookingsPerGame",     	type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? ((yellowCards + (redCards*2))*1.0)/gamesPlayed:0" },
            { name = "corners",      	         	type = "int",		format = "%d",  default = 0 },
            { name = "averagecornersPerGame",   	type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (corners*1.0)/gamesPlayed:0" },
            { name = "offsides",              		type = "int",		format = "%d",  default = 0 },
            { name = "averageoffsidesPerGame", 		type = "float",		format = "%.2f",derived = "(gamesPlayed > 0) ? (offsides*1.0)/gamesPlayed:0" },
			
        // DNF
	    // Dont need this at the moment but create it anyway. We are using NormalGameStats dnfPercent for all events.
            { name = "totalGamesPlayed",      		type = "int",		format = "%d",	default = 0 },
            { name = "totalGamesNotFinished", 		type = "int",		format = "%d",	default = 0 },
            { name = "dnfPercent",            		type = "int",		format = "%d",	derived = "(totalGamesPlayed > 0) ? (totalGamesNotFinished * 100.0) / totalGamesPlayed:0" },
            
            { name = "agreggateRecord",   			type = "string",	format = "%s",	derived = "wins . '-' . ties . '-' . losses", size = 32 },
            { name = "team_id", 					type = "int",		format = "%d",	default = 23 },   // Default team set to Borussia M'gladbach cause it's fun to say
            { name = "SPRankingPoints",		  		type = "int",		format = "%d",  default = 0 }
        ]