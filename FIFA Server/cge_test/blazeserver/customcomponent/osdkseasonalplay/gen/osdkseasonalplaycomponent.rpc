// Defines the RPCs and async notifications used in the osdkseasonalplay component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="osdkseasonalplay/tdf/osdkseasonalplaytypes.h" ]
#include "osdkseasonalplay/gen/osdkseasonalplaytypes.tdf"

[ 
  client_include = false,
  headername="osdkseasonalplay/tdf/osdkseasonalplaytypes_server.h" 
]
#include "osdkseasonalplay/gen/osdkseasonalplaytypes_server.tdf"

namespace Blaze
{
namespace OSDKSeasonalPlay
{
[
  id = custom/209,
  description = "OSDK SeasonalPlay component to handle seasonal play for clubs and users",
  details = "OSDK SeasonalPlay allows users and clubs to participate in seasons that include regular season and playoff",
  configurationType = OSDKSeasonalPlayConfig,
  strictConfigParsing = true
]
component OSDKSeasonalPlay
{
	errors
	{
		[ description = "An error has occurred." ]
		OSDKSEASONALPLAY_ERR_GENERAL =              1;
		[ description = "A database error has occurred." ]
		OSDKSEASONALPLAY_ERR_DB      =              2;
		[ description = "Error parsing seasonal play configuration." ]
		OSDKSEASONALPLAY_ERR_CONFIGURATION_ERROR =  3;
		[ description = "Parameters are invalid." ]
		OSDKSEASONALPLAY_ERR_INVALID_PARAMS =       4;
		[ description = "Season not found." ]
		OSDKSEASONALPLAY_ERR_SEASON_NOT_FOUND =     5;
		[ description = "Entity not registered in a season" ]
		OSDKSEASONALPLAY_ERR_NOT_REGISTERED =       6;
		[ description = "Already registered in a season" ]
		OSDKSEASONALPLAY_ERR_ALREADY_REGISTERED =   7;
        [ description = "Member Id not found in registration" ]
        OSDKSEASONALPLAY_ERR_NOT_FOUND =            8;
	}

	[ clientname = "OSDKSeasonalPlayComponent" ]
	slave
	{			
		methods
		{
               [
                 id = 1,
				 requiresUserSession = false,
                 errors = {
                       OSDKSEASONALPLAY_ERR_GENERAL,
                       OSDKSEASONALPLAY_ERR_CONFIGURATION_ERROR
                   },
                 description = "Retrieves the seasonal play instance configuration" 
               ]
               GetSeasonConfigurationResponse getSeasonConfiguration();
            
               [
                 id = 2,
				 requiresUserSession = false,
                 errors = {
                       OSDKSEASONALPLAY_ERR_GENERAL,
                       OSDKSEASONALPLAY_ERR_DB,
                       OSDKSEASONALPLAY_ERR_NOT_REGISTERED
                   } 
               ]
               GetSeasonIdResponse getSeasonId(GetSeasonIdRequest);
            
               [
                 id = 3,
				 requiresUserSession = false,
                 errors = {
                       OSDKSEASONALPLAY_ERR_GENERAL,
                       OSDKSEASONALPLAY_ERR_DB,
                       OSDKSEASONALPLAY_ERR_SEASON_NOT_FOUND
                   } 
               ]
               SeasonDetails getSeasonDetails(GetSeasonDetailsRequest);
            
               [
                 id = 4,
                 errors = {
                       OSDKSEASONALPLAY_ERR_GENERAL,
                       OSDKSEASONALPLAY_ERR_DB,
                       OSDKSEASONALPLAY_ERR_NOT_REGISTERED
                   } 
               ]
               MySeasonDetails getMySeasonDetails(GetMySeasonDetailsRequest);           
            
               [
                 id = 5,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_INVALID_PARAMS,
   	                OSDKSEASONALPLAY_ERR_SEASON_NOT_FOUND,
   	                OSDKSEASONALPLAY_ERR_ALREADY_REGISTERED
                   } 
               ]
               void registerForSeason(RegisterForSeasonRequest); 
               
               [
                 id = 6,
                 errors = {
                    OSDKSEASONALPLAY_ERR_GENERAL,
                    OSDKSEASONALPLAY_ERR_CONFIGURATION_ERROR
                 }
               ]
               GetAwardConfigurationResponse getAwardConfiguration();
               
               [
                 id = 7,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_INVALID_PARAMS
                  }
                ]
                GetAwardsResponse getAwardsForMember(GetAwardsForMemberRequest);                 
               
               [
                 id = 8,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_INVALID_PARAMS
                  }
                ]
                GetAwardsResponse getAwardsForSeason(GetAwardsForSeasonRequest);    
                
                [
                  id = 9,
                  errors = {
                     OSDKSEASONALPLAY_ERR_GENERAL,
                     OSDKSEASONALPLAY_ERR_CONFIGURATION_ERROR,
                     OSDKSEASONALPLAY_ERR_DB
                  }
                ]
                GetSeasonsRankingInfoResponse getSeasonsRankingInfo();

				[
                  id = 10,
                  requiresUserSession = false,
                  errors = {
                     OSDKSEASONALPLAY_ERR_GENERAL,
                     OSDKSEASONALPLAY_ERR_NOT_REGISTERED,
                     OSDKSEASONALPLAY_ERR_DB,
					 OSDKSEASONALPLAY_ERR_INVALID_PARAMS
                  }
                ]
                void setMemberTournamentStatus(SetMemberTournamentStatusRequest);
               
               [
                 id = 11,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_INVALID_PARAMS,
   	                OSDKSEASONALPLAY_ERR_SEASON_NOT_FOUND,
   	                OSDKSEASONALPLAY_ERR_ALREADY_REGISTERED
                   },
                 client_export = false
               ]
               void registerClub(RegisterClubRequest);
               
               [
                 id = 12,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_INVALID_PARAMS,
   	                OSDKSEASONALPLAY_ERR_SEASON_NOT_FOUND,
   	                OSDKSEASONALPLAY_ERR_ALREADY_REGISTERED,
                    OSDKSEASONALPLAY_ERR_CONFIGURATION_ERROR
                   },
                 client_export = false
               ]
               void updateClubRegistration(UpdateClubRegistrationRequest);

               [
                 id = 13,
                 errors = {
   	                OSDKSEASONALPLAY_ERR_GENERAL,
   	                OSDKSEASONALPLAY_ERR_DB,
   	                OSDKSEASONALPLAY_ERR_NOT_FOUND
                   },
                 client_export = false
               ]
               void deleteRegistration(DeleteRegistrationRequest);
		} // methods
	} // slave
}
}
}


