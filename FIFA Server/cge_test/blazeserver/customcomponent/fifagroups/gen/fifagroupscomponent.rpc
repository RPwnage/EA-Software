// Defines the RPCs and async notifications used in the fifagroups component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="fifagroups/tdf/fifagroupstypes.h" ]
#include "fifagroups/gen/fifagroupstypes.tdf"

[ 
  client_include = false,
  headername="fifagroups/tdf/fifagroupstypes_server.h" 
]
#include "fifagroups/gen/fifagroupstypes_server.tdf"


namespace Blaze  
{
namespace FifaGroups
{
[
  id = custom/25,
  description = "A component used strictly as a template.",
  details = "This component will compile.  It will not be configured to run by default.",
  configurationType=FifaGroupsConfig //Configuration TDF that describes what the component configuration looks like.
]
component FifaGroups
{                              
    errors
    {
        [ description = "An unknown error occurred." ]
        FIFAGROUPS_ERR_UNKNOWN = 1;
        [ description = "invalid data." ]
		FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED = 2;
        [ description = "invalid data." ]
		FIFAGROUPS_ERR_INVALID_DATA = 3;
    }

    slave
    {                           
        methods
        {
            [
              id = 1,
              errors = {FIFAGROUPS_ERR_UNKNOWN},
              errortype = FifaGroupsError,
              description = "This command will poke the Blaze server and return a response.",
              details = "If a negative number is passed in the num field, this command will return an error."
            ]
            FifaGroupsResponse poke(FifaGroupsRequest);

            [
				id = 2,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			CreateInstanceResponse createInstance(CreateInstanceRequest);

            [
				id = 3,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			DeleteInstanceResponse deleteInstance(DeleteInstanceRequest);

            [
				id = 4,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			DeleteMemberResponse deleteMember(DeleteMemberRequest);

            [
				id = 5,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			JoinGroupResponse joinGroup(JoinGroupRequest);

            [
				id = 6,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			SetInstanceAttributeResponse setInstanceAttribute(SetInstanceAttributeRequest);

            [
				id = 7,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN,
					   FIFAGROUPS_ERR_TOKEN_RETRIEVAL_FAILED
				}				
			]
			SetMultipleInstanceAttributesResponse setMultipleInstanceAttributes(SetMultipleInstanceAttributesRequest);

			[
				id = 8,
				errors = {
                       FIFAGROUPS_ERR_UNKNOWN
				}				
			]
			MergeGroupInstancesResponse mergeGroupInstances(MergeGroupInstancesRequest);

        } // methods

        notifications
        {
            [
                id = 100,
                description = "Sent to game client to inform when a merge operation has completed.",
                details = "A slave-to-client only notification."
            ]
            MergeNotification(Blaze::FifaGroups::MergeNotification);
        } // notifications
    } // slave

    master
    {        
        methods
        {
            [
              id = 1,
              errors = {FIFAGROUPS_ERR_UNKNOWN} 
            ]
            FifaGroupsResponse pokeMaster(FifaGroupsRequest);         
        } // methods
    } // master
}
}
}


