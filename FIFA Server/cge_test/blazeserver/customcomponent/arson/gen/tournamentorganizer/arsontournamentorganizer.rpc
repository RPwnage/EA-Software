[headername="arson/tournamentorganizer/tdf/arsontournamentorganizer.h"]
#include "arson/gen/tournamentorganizer/arsontournamentorganizer.tdf"

[
  client_include = false,
  headername="arson/tournamentorganizer/tdf/arsontournamentorganizer_server.h"
]
#include "arson/gen/tournamentorganizer/arsontournamentorganizer_server.tdf"

namespace Blaze
{
namespace Arson
{

[
  id = custom/2,
  description = "A helper component for the ARSON framework.  Not to be used by clients.",
  details = "This component has no production use, and is used only for testing." ,
  configurationType = ArsonTournamentOrganizerConfig
]
component ArsonTournamentOrganizer
{
    errors
    {
        [ description = "The user could not be found." ]
        ARSON_TO_ERR_INVALID_USER = 1;
        
        [ description = "The external session command requires the user to log in." ]
        ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED = 145; //http 401
        [ description = "The external session command request was badly formed." ]
        ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST = 146;//http 400
        [ description = "The external session command couldn't be accessed." ]
        ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN = 147; //http 403
        [ description = "External session service returned general/unknown failure" ]
        ARSON_TO_ERR_EXTERNAL_SESSION_FAILED = 148;
        [ description = "The external session service had an unspecified internal error. Check with Microsoft for potential issues." ]
        ARSON_TO_ERR_EXTERNAL_SESSION_SERVICE_INTERNAL_ERROR = 149; //http 500
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        ARSON_TO_ERR_EXTERNAL_SESSION_SERVICE_UNAVAILABLE = 150; //http 503
        [ description = "The external session service call failed due to possible bad gateway." ]
        ARSON_TO_ERR_EXTERNAL_SESSION_BAD_GATEWAY = 151; //http 502
        [ description = "The specified item's object exists in Blaze but was expected not to." ]
        ARSON_TO_ERR_ARSON_UNEXPECTED_EXISTING_ENTITY = 152;
        [ description = "The Blaze Game's members or external session tracking is incorrect or out of sync with the first party external session. Check logs for details."]
        ARSON_TO_ERR_EXTERNAL_SESSION_OUT_OF_SYNC = 153;
        [ description = "The Blaze Game was tracked as having an associated external session but no such external session was found on the first party side. This can occur due to timing or network issues, that cause things to get out of sync with the first party service."]
        ARSON_TO_ERR_EXTERNAL_SESSION_NOT_FOUND = 170; // from validations, or http 404
        [ description = "The number of calls by the user for has exceeded the command's rate limit. Check error info/logs for details and required wait time." ]
        ARSON_TO_ERR_EXTERNAL_SERVICE_BUSY = 171;
        
        ////////////////////////////////// Tournament Organizer Errors //////////////////////////////////
        
        [ description = "The tournament request failed due to invalid tournament team count." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM_COUNT = 201;
        [ description = "The request failed due to invalid team parameters. See Blaze Server logs for details." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM = 202;
        [ description = "The request to add a user/team to a tournament external session, failed due to the user already being registered." ]
        ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_ALREADY_REGISTERED_FOR_USER = 203;
        [ description = "The request to post a user/team's result to a tournament external session, failed due to and invalid ranking value. For instance on Xbox, ranking must be > 0" ]
        ARSON_TO_ERR_EXTERNAL_SESSION_INVALID_OUTCOME_RANKING = 204;
        [ description = "The request failed due to player's team not being present in the game." ]
        ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_NOT_FOUND_FOR_USER = 206;
        
        [ description = "The tournament request failed due to invalid tournament state." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_STATE = 301;
        [ description = "The tournament request failed due to invalid tournament organizer." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER = 302;
        [ description = "The tournament request failed due to invalid tournament id." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_ID = 303;
        [ description = "The tournament request failed due to invalid tournament time." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_TIME = 305;
        [ description = "The request failed due to invalid tournament parameters. See Blaze Server logs for details." ]
        ARSON_TO_ERR_INVALID_TOURNAMENT_PARAMETERS = 306;
        [ description = "The request failed due to no match existing for the tournament match id." ]
        ARSON_TO_ERR_INVALID_MATCH_ID = 307;
        [ description = "The request for the tournament game event failed due invalid or missing address." ]
        ARSON_TO_ERR_INVALID_GAME_EVENT_ADDRESS = 308;
    }

    slave
    {
        methods
        {
            [
             id = 300,
             description = "Create a tournament.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_STATE, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME}
            ]
            TournamentInfoResponse createTournament(CreateTournamentRequest);

            [
             id = 301,
             description = "Update a tournament.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_STATE, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME}
            ]
            TournamentInfoResponse updateTournament(UpdateTournamentRequest);

            [
             id = 302,
             description = "Remove a tournament.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_STATE}
            ]
            void removeTournament(RemoveTournamentRequest);
            
            [
             id = 303,
             description = "Get a tournament.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_STATE, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME}
            ]
            TournamentInfoResponse getTournament(GetTournamentRequest);

            [
             id = 304,
             description = "Create a tournament team.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_STATE, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_ALREADY_REGISTERED_FOR_USER}
            ]
            TournamentTeamInfo createTournamentTeam(CreateTournamentTeamRequest);

            [
             id = 305,
             description = "Join a tournament team.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_ALREADY_REGISTERED_FOR_USER, ARSON_TO_ERR_EXTERNAL_SESSION_OUT_OF_SYNC}
            ]
            TournamentTeamInfo joinTournamentTeam(JoinTournamentTeamRequest);
            
            [
             id = 306,
             description = "Update a tournament team.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_EXTERNAL_SESSION_OUT_OF_SYNC}
            ]
            TournamentTeamInfo updateTournamentTeam(UpdateTournamentTeamRequest);

            [
             id = 307,
             description = "Leave a tournament team.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_EXTERNAL_SESSION_OUT_OF_SYNC}
            ]
            TournamentTeamInfo leaveTournamentTeam(LeaveTournamentTeamRequest);
            
            [
             id = 308,
             description = "Get a tournament team.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME}
            ]
            TournamentTeamInfo getTournamentTeam(GetTournamentTeamRequest);
            
            [
             id = 309,
             description = "Get tournament teams for the user.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME}
            ]
            GetTournamentTeamsResponse getTournamentTeams(GetTournamentTeamsRequest);
                        
            [
             id = 310,
             description = "Set tournament team's scheduled match.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_INVALID_TOURNAMENT_PARAMETERS}
            ]
            TournamentTeamInfo setTournamentTeamMatch(SetTournamentTeamMatchRequest);
            
            [
             id = 311,
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_INVALID_TOURNAMENT_PARAMETERS, ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_INVALID_MATCH_ID, ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_NOT_FOUND_FOR_USER}
            ]
            SubmitTournamentMatchResultResponse submitTournamentMatchResult(SubmitTournamentMatchResultRequest);
            
            [
             id = 312,
             description = "Handle notificaton sent from Blaze Server to the Tournament Organizer, when a match is starting.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_INVALID_TOURNAMENT_PARAMETERS, ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_INVALID_MATCH_ID, ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_NOT_FOUND_FOR_USER}
            ]
            void handleGameEventStart(Blaze::GameManager::ExternalHttpGameEventData);

            [
             id = 313,
             description = "Handle notificaton sent from Blaze Server to the Tournament Organizer, when a match is ending.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID, ARSON_TO_ERR_INVALID_TOURNAMENT_TEAM, ARSON_TO_ERR_INVALID_TOURNAMENT_TIME, ARSON_TO_ERR_INVALID_TOURNAMENT_PARAMETERS, ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_INVALID_MATCH_ID, ARSON_TO_ERR_EXTERNAL_SESSION_TEAM_NOT_FOUND_FOR_USER}
            ]
            void handleGameEventEnd(Blaze::GameManager::ExternalHttpGameEventData);

            [
             id = 314,
             description = "Get all tournaments for the title.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER}
            ]
            GetTournamentsResponse getTournaments(GetTournamentsRequest);

            [
             id = 315,
             description = "Cleanup/cancel the specified tournaments for the title.",
             errors = {ARSON_TO_ERR_EXTERNAL_SERVICE_AUTHENTICATION_REQUIRED, ARSON_TO_ERR_EXTERNAL_SERVICE_BAD_REQUEST,  ARSON_TO_ERR_EXTERNAL_SERVICE_ACCESS_FORBIDDEN, ARSON_TO_ERR_INVALID_TOURNAMENT_ORGANIZER, ARSON_TO_ERR_INVALID_TOURNAMENT_ID}
            ]
            void cleanupTournaments(CleanupTournamentsRequest);

            [
             id = 316,
             description = "Test hook to artificially trigger sending the tournament game's current start event data, to its assigned start event URL. Does not actually start the game.",
             errortype = TestSendTournamentGameEventResponse,
             errors = {ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_INVALID_MATCH_ID, ARSON_TO_ERR_INVALID_GAME_EVENT_ADDRESS}
            ]
            TestSendTournamentGameEventResponse testSendGameEventStart(TestSendTournamentGameEventRequest);

            [
             id = 317,
             description = "Test hook to artificially trigger sending the tournament game's current end event data, to its assigned end event URL. Does not actually end the game.",
             errortype = TestSendTournamentGameEventResponse,
             errors = {ARSON_TO_ERR_INVALID_USER, ARSON_TO_ERR_INVALID_MATCH_ID, ARSON_TO_ERR_INVALID_GAME_EVENT_ADDRESS}
            ]
            TestSendTournamentGameEventResponse testSendGameEventEnd(TestSendTournamentGameEventRequest);
        }

        notifications
        {
        }

        events
        {
        }
    }
}
}
}
