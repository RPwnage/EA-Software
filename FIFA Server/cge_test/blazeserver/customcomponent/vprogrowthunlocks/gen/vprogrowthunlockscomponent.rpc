// Defines the RPCs and async notifications used in the vprogrowthunlocks component.
//  RPC classes are compiled with RPCComp, generating C++ classes (or class stubs) that the component must implement.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/RPCComp for info on the .rpc file/lang spec and the compiler, RpcComp
//
// We assume that all request and response types are valid and just use them
// directly in the code generation.
//
// The compiler should ensure that all commands within a component have a unique ID.
// The compiler should ensure that all components within a file have a unique ID.
// Zero is not a valid component or command ID
// Enforce that method names must start with lowercase letter.
// Enforce C++ rules for method names and TDF type names.
// Allow C++ style comments.
//

[ headername="vprogrowthunlocks/tdf/vprogrowthunlockstypes.h" ]
#include "vprogrowthunlocks/gen/vprogrowthunlockstypes.tdf"

[ 
  client_include = false,
  headername="vprogrowthunlocks/tdf/vprogrowthunlockstypes_server.h" 
]
#include "vprogrowthunlocks/gen/vprogrowthunlockstypes_server.tdf"


namespace Blaze  
{
namespace VProGrowthUnlocks
{
[
  id = custom/24,
  description = "A component used strictly as a template.",
  details = "This component will compile.  It will not be configured to run by default.",
  configurationType=VProGrowthUnlocksConfig //Configuration TDF that describes what the component configuration looks like.
]
component VProGrowthUnlocks
{                              
    errors
    {
        [ description = "An unknown error occurred." ]
        VPROGROWTHUNLOCKS_ERR_UNKNOWN = 1;
        [ description = "A database error has occurred." ]
        VPROGROWTHUNLOCKS_ERR_DB = 2;
        [ description = "user Not found." ]
        VPROGROWTHUNLOCKS_ERR_USER_NOT_FOUND = 3;
        [ description = "invalid data." ]
        VPROGROWTHUNLOCKS_ERR_INVALID_DATA = 4;
        [ description = "system error." ]
        VPROGROWTHUNLOCKS_ERR_SYSTEM = 5;
    }

    slave
    {                           
        methods
        {
            [
              id = 1,
              errors = {VPROGROWTHUNLOCKS_ERR_UNKNOWN},
              errortype = VProGrowthUnlocksError,
              description = "This command will poke the Blaze server and return a response.",
              details = "If a negative number is passed in the num field, this command will return an error."
            ]
            VProGrowthUnlocksResponse poke(VProGrowthUnlocksRequest);

            [
              id = 2,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_USER_NOT_FOUND
              }				
            ]
            FetchLoadOutsResponse fetchLoadOuts(FetchLoadOutsRequest);

            [
              id = 3,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_USER_NOT_FOUND
              }				
            ]
            ResetLoadOutsResponse resetLoadOuts(ResetLoadOutsRequest);

            [
              id = 4,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              }				
            ]
            UpdateLoadOutsPeripheralsResponse updateLoadOutsPeripherals(UpdateLoadOutsPeripheralsRequest);

            [
              id = 5,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              }				
            ]
            UpdateLoadOutUnlocksResponse updateLoadOutUnlocks(UpdateLoadOutUnlocksRequest);

            [
              id = 6,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              },
            requiresUserSession = false				
            ]
            void grantVProSkillPointsPostMatch(GrantVProSkillPointsPostMatchRequest);

            [
              id = 7,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              },
            requiresUserSession = false				
            ]
            void debugGrantVProSkillPoints(DebugGrantVProSkillPointsRequest);

            [
              id = 8,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              },
            requiresUserSession = false				
            ]
            GetXPRewardsFromMatchResponse getXPRewardsFromMatch(GetXPRewardsFromMatchRequest);

            [
              id = 9,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN
              },
            requiresUserSession = false				
            ]
            UpdatePlayerGrowthResponse updatePlayerGrowth(UpdatePlayerGrowthRequest);

            [
              id = 10,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_USER_NOT_FOUND,
              VPROGROWTHUNLOCKS_ERR_SYSTEM
              }				
            ]
            FetchObjectiveProgressResponse fetchObjectiveProgress(FetchObjectiveProgressRequest);

            [
              id = 11,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN
              }				
            ]
            FetchPlayerGrowthConfigResponse fetchPlayerGrowthConfig();

            [
              id = 12,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN
              }				
            ]
            FetchSkillTreeConfigResponse fetchSkillTreeConfig();

            [
              id = 13,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN
              }				
            ]
            FetchPerksConfigResponse fetchPerksConfig();

            [
              id = 14,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN
              }				
            ]
            FetchObjectiveConfigResponse fetchObjectiveConfig();

            [
              id = 15,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              }
            ]
            void debugCompleteVProObjectives(DebugCompleteVProObjectivesRequest);

            [
              id = 16,
              errors = {
              VPROGROWTHUNLOCKS_ERR_UNKNOWN,
              VPROGROWTHUNLOCKS_ERR_DB,
              VPROGROWTHUNLOCKS_ERR_INVALID_DATA
              }
            ]
            void debugGrantVProMatchRatingXP(DebugGrantVProMatchRatingXPRequest);

        } // methods
    } // slave

    master
    {        
        methods
        {
            [
              id = 1,
              errors = {VPROGROWTHUNLOCKS_ERR_UNKNOWN} 
            ]
            VProGrowthUnlocksResponse pokeMaster(VProGrowthUnlocksRequest);         
        } // methods
    } // master
}
}
}


