/*! ************************************************************************************************/
/*!
    \file xblserviceconfigs.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/
[ headername="xblserviceconfigs/tdf/xblsessiondirectorycommontypes.h" ]
#include "xblserviceconfigs/gen/xblsessiondirectorycommontypes.tdf"

namespace Blaze
{

namespace XBLServices
{

/////////////////////////////////////////////////////////////////////////////////////////
//      Create session Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class MultiplayerSessionRequestHeader
{
    [tag="cvrn", description=""]
    string(MAX_XBLCONTRACTVERSION_CHAR_LEN) mContractVersion;

    [tag="atkn", description=""]
    string(-1) mAuthToken;

    [tag="ttid", description="To have our Xbox Live server to server calls move MPS members to active state automatically, MS requires setting the title id in this header used in join MPS calls."]
    TitleId mOnBehalfOfTitle;

    [tag="deny", description="To have our Xbox Live server to server calls *not* bypass the first party MPS join restrictions, set this to 'Multiplayer.Manage'. Empty string omits."]
    string(18) mDenyScope;

    [tag="accp", description="To have our Xbox Live server to server calls return detailed logging info, specify 'session-write<fw-slash>*' for write errors or '*' for all. Empty string omits."]
    string(15) mAcceptLog; //15 chars for "session-write/*"

    [tag="mock", description="Sim outage header. Applicable only to mock services."]
    string(-1) mSimOutage;
};

[trackChanges = true]
class PutMultiplayerSessionCreateRequestBody
{
    [tag="cons", description=""]
    MultiplayerSessionConstants mConstants;

    [tag="prop", description=""]
    MultiplayerSessionProperties mProperties;

    [tag="memb", description=""]
    Members mMembers;

    [tag="srvr", description="The MPS's servers section."]
    MultiplayerSessionServers mServers;
};

class PutMultiplayerSessionCreateRequest
{
    [tag="scid", description=""]
    XblScid mScid;

    [tag="stnm", description=""]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description=""]
    XblSessionName mSessionName;
    
    [tag="nocm", description="whether to commit the transaction"]
    string(5) mNoCommit;

    [tag="prjh", description=""]
    MultiplayerSessionRequestHeader mHeader;

    [tag="prjb", description=""]
    PutMultiplayerSessionCreateRequestBody mBody;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Create and Join session Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class PutMultiplayerSessionJoinRequestBody
{
    [tag="memb", description=""]
    Members mMembers;
};

class PutMultiplayerSessionJoinRequest
{
    [tag="scid", description=""]
    XblScid mScid;

    [tag="stnm", description=""]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description=""]
    XblSessionName mSessionName;
    
    [tag="nocm", description="whether to commit the transaction"]
    string(5) mNoCommit; //5 chars for "true"

    [tag="prjh", description=""]
    MultiplayerSessionRequestHeader mHeader;

    [tag="prjb", description=""]
    PutMultiplayerSessionJoinRequestBody mBody;
};

[trackChanges = true]
class PutMultiplayerSessionJoinReserveRequestBody
{
    [tag="memb", description=""]
    NonActiveMembers mMembers;
};

class PutMultiplayerSessionJoinReserveRequest
{
    [tag="scid", description=""]
    XblScid mScid;

    [tag="stnm", description=""]
    XblSessionTemplateName mSessionTemplateName;

    [tag="snam", description=""]
    XblSessionName mSessionName;

    [tag="nocm", description="whether to commit the transaction"]
    string(5) mNoCommit;

    [tag="prjh", description=""]
    MultiplayerSessionRequestHeader mHeader;

    [tag="prjb", description=""]
    PutMultiplayerSessionJoinReserveRequestBody mBody;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Set Activity Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

class PostHandlesSetActivityRequestBody
{
    [tag="type", description="Handle type. Possible values include 'activity' and 'invite'."]
    string(8) mType; //8 chars for "activity"

    [tag="sess", description="The external session reference."]
    MultiplayerSessionRef mSessionRef;
};

class PostHandlesSetActivityRequest
{
    [tag="prjh", description="The REST request's header."]
    HandlesActivityRequestHeader mHeader;

    [tag="prjb", description="The REST request's body."]
    PostHandlesSetActivityRequestBody mBody;
};

class PostHandlesSetActivityResponse
{
    [tag="hand", description="The response's external session activity handle id."]
    XblActivityHandleId mId;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Clear Activity Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

class DeleteHandlesClearActivityRequest
{
    [tag="hand", description="The handle id for the activity to clear."]
    XblActivityHandleId mHandleId;

    [tag="prjh", description=""]
    HandlesActivityRequestHeader mHeader;
};

}
}
