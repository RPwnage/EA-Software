<project>
  <!-- Copyright 2007-2016 Electronic Arts Inc.  All rights reserved. -->
  <property name="package.nantToVSTools.slnmaker.default.output" value="${package.dir}/BlazeSDK.sln" />

  <!-- filenames used in packaging and deploying -->
  <property name="package_file_name" value="${package.name}-${package.targetversion}.zip" />
  <property name="libzip_file_name" value="${package.name}-${package.targetversion}-libs.zip" />
  <property name="externalzip_file_name" value="${package.name}-${package.targetversion}-external.exe" />
  <property name="doczip_file_name" value="${package.name}-${package.targetversion}-docs.zip" />
  <property name="readme_file_name" value="Blaze SDK ${package.targetversion} Release Notes.txt"/>
  <property name="blazesdk_modulename" local="true" value="${package.name}"/>

  <!-- base directory for publishing generated docs -->
  <property name="BlazeSDK.publishdocs.rootdir">\\sc-fs1\gos_docs\blaze-latest</property>

  <property name="package.enablepartialbulkbuild" value="true" />

  <!-- =========== CLEAN TARGET ===============  -->

  <target name="cleangeneratedcode">
    <echo message="Cleaning generated code!"/>
    <delete dir="${package.builddir}/gen/include" failonerror="false"/>
    <delete dir="${package.builddir}/gen/source" failonerror="false"/>
  </target>

  <!-- Overrides eaconfig clean -->
  <dependent name="EATDF"/>
  <target name="clean" depends="dep-list" style="clean" override="true">
    <nant buildfile="${package.dir}/BlazeSDK.build" target="clean-default" start-new-build="false">
      <property name="config" value="${package.config}"/>
    </nant>
    <call target="cleantools"/>
    <call target="cleangeneratedcode"/>
  </target>
  
  <target name="dep-list">
    <foreach item="String" in="${runtime.BlazeSDK.autodependencies}" property="build-dep">
      <dependent name="${build-dep}"/>
    </foreach>
  </target>

  <!-- =========== CLEANALL TARGET ============  -->
  <!-- Overrides eaconfig cleanall -->

  <!-- Fully clean the package (preserves the solution, deletes package zips.) -->
  <target name="cleanall" description="Deletes all folders for build configs plus the package zips" override="true">

    <!-- Clean the build dir for each config -->
    <foreach item="String" in="${package.configs}" property="clean-config-name">
      <nant buildfile="${package.dir}/${package.name}.build" target="clean">
        <property name="config" value="${clean-config-name}"/>
      </nant>
    </foreach>

    <!-- These zips are generated by "nant package" -->
    <delete>
      <fileset basedir="${package.BlazeSDK.builddir}" failonmissing="false">
        <includes name="${package_file_name}"/>
        <includes name="${libzip_file_name}"/>
        <includes name="${externalzip_file_name}"/>
        <includes name="${doczip_file_name}"/>
        <!-- to clean up any old sample zips -->
        <includes name="${package.name}-${package.targetversion}-samples.zip"/>
      </fileset>
    </delete>

    <echo message="Deleting doxygen output files..." />
    <!-- These are the outputs and temporary files for targets doxygen and chm -->
    <delete>
      <fileset basedir="${package.dir}/doc" >
        <includes name="*.*" />
        <excludes name="doc-source" />
      </fileset>
    </delete>
    <delete dir="${package.dir}/doc/html" />

    <!-- Workaround for EATech issue http://eac-jira.eac.ad.ea.com/browse/ETFW-2057 -->
    <foreach item="String" in="framework_tmp ios_config" property="configfoldername">
      <eval code="@{DirectoryGetDirectoriesRecursive('${package.BlazeSDK.buildroot}', '${configfoldername}', '|')}" 
        property="directories" type="Function" />
      <foreach item="String" in="${directories}" property="directory" delim="|">
         <delete dir="${directory}" if="@{DirectoryExists('${directory}')}" failonmissing="false"/>
      </foreach>
    </foreach>

  </target>

  <!-- =========== PACKAGE TARGETS ============  -->

  <!-- the package target builds 4 things:
    1) Doxygen generated help file
    2) The BlazeSDK Package (contains all source and package files (.build, xml, etc)
    3) The BlazeSDK lib zip file (contains the libs for all platforms for teams not using framework to rebuild our libs)
    4) The BlazeSDK external zip file (contains only public headers and libs.  No sample source code is included)

    TODO: in the future, we'd also like to package up the BlazeSDKSamples package as well..
         The BlazeSDK samples zip file (contains only the sample binaries & support files)
    -->
  <target name="package" description="Build both the BlazeSDK package for internal EA use, zips for external use, precompiled libs and samples." override="true">

    <echo message="WARNING: packaging for version: ${package.targetversion}"/>

    <!-- Run Doxygen -->
    <do unless="${skip-doxygen??false} == true">
      <echo message="Building SDK documentation..." />
      <call target="doxygen" />
      <call target="chm" />
    </do>

    <!-- ============== Common Files ==========================  -->

    <!-- Files to appear in each zip file -->

    <!-- Add misc files -->
    <fileset name="runtime.BlazeSDK.common_package_files" basedir="${package.dir}" >
      <!-- changelog & readme -->
      <includes name='changelog.txt' />
      <includes name='readme.md' />
      <includes name="doc/${package.name}.chm" />
    </fileset>

    <!-- ============== Lib Files ==========================  -->

    <!-- Copy the libs for each build config to a stability folder. -->
    <foreach item="String" in="${package.configs}" property="build-config-name">
      <property name="package.BlazeSDK.libfilename" local="true" value="BlazeSDK.lib"/>
      <property name="package.BlazeSDK.libfilename" local="true" value="libBlazeSDK.a" if="@{StrStartsWith(${build-config-name}, 'kettle')}"/>
      <copy file="${package.builddir}/${build-config-name}/lib/${package.BlazeSDK.libfilename}"
        tofile="${package.BlazeSDK.dir}/build/BlazeSDK/${package.targetversion}/${build-config-name}/lib/${package.BlazeSDK.libfilename}" />
    </foreach>

    <!-- Add the libs to a fileset. -->
    <fileset name="runtime.BlazeSDK.lib_package_files">
      <includes name="${package.BlazeSDK.dir}/build/BlazeSDK/${package.targetversion}/**/lib/**" />
    </fileset>

    <!-- ============== Public Header Files ==========================  -->

    <fileset name="runtime.BlazeSDK.headers_package_files" basedir="${package.dir}" >
      <!-- include Blaze SDK public headers -->
      <includes name='include/**/*.h' />
    </fileset>

    <!-- ============== BlazeSDK Source Package Files ==========================  -->

    <!-- Create fileset of files to zip up for the source package -->
    <fileset name="runtime.BlazeSDK.source_package_files" basedir="${package.dir}">

      <!-- include all the common files -->
      <includes fromfileset="runtime.BlazeSDK.common_package_files" />
      <includes fromfileset="runtime.BlazeSDK.headers_package_files" />

      <!-- includes package files -->
      <includes name='*.xml'/>
      <includes name='*.txt'/>
      <includes name='*.bat'/>
      <includes name='BlazeSDK.bstudio'/>
      <includes name='nant'/>
      <includes name='nant-iphone'/>
      <excludes name='build-masterconfig.xml'/>
      <excludes name='opt-masterconfig.xml'/>
      <includes name='*.build'/>
      <includes name='scripts/**/*.xml'/>
      <includes name='scripts/**/*.dxc'/>
      <includes name='scripts/**/*.py'/>
      <includes name='scripts/**/*.pl'/>
      <includes name='scripts/**/*.html'/>
      <includes name='gen/blazerpccomponent.rpc' />

      <!-- include source & internal headers -->
      <includes name='source/**/*.h' />
      <includes name='source/**/*.cpp' />

      <!-- include tools, tdf and rpc files -->
      <includes name='tools/**' />
      <includes name='gen/**' />
      
      <!-- include samples -->
      <includes name='samples/**' />
      
    </fileset>

    <!-- Create the source package zip with the fileset created -->
    <echo message="Creating BlazeSDK package zip file..." />
    <zip zipfile='${package.builddir}\${package_file_name}' zipentrydir='${package.name}\${package.targetversion}'>
      <fileset basedir='${package.dir}' fromfileset="runtime.BlazeSDK.source_package_files" />
    </zip>
    <echo message="Finished creating BlazeSDK package zip file..." />

    <!-- ============== BlazeSDK Lib Zip ==========================  -->

    <!-- Create set of files to zip up for the lib package -->
    <fileset name="runtime.BlazeSDK.libzip_package_files" basedir="${package.dir}">
      <!-- include all the common files -->
      <includes fromfileset="runtime.BlazeSDK.common_package_files" />
      <includes fromfileset="runtime.BlazeSDK.lib_package_files" />
    </fileset>

    <!-- Build the BlazeSDK lib zip file: -->
    <echo message="Creating BlazeSDK lib zip file..." />
    <zip zipfile='${package.builddir}\${libzip_file_name}' zipentrydir='${package.name}\${package.targetversion}'>
      <fileset basedir='${package.dir}' fromfileset="runtime.BlazeSDK.libzip_package_files" />
    </zip>
    <echo message="Finished creating BlazeSDK lib zip file..." />

  </target>

  <!-- To be called after package for release candidate builds -->
  <target name="package-docs">

    <!-- ============== Doxygen Files ==========================  -->

    <echo message="Creating zip file for doxygen docs, readme"/>
    <zip zipfile='${package.builddir}\${doczip_file_name}'>
      <fileset basedir="${package.dir}">
        <includes name="doc/html/**" />
        <includes name="readme.md"/>
      </fileset>
    </zip>

  </target>
 
  <!-- Creates an external distribution. 
  Assumes all packages are synced to a single package root like on the build machine. -->
  <target name="distro">

    <echo message="WARNING: packaging for version: ${package.targetversion}"/>

    <!-- Fail if WinRAR and Cygwin not found -->
    <property name="WinRar" value="C:\Program Files\WinRar\WinRar.exe"/>
    <property name="Sed" value="C:\cygwin\bin\sed.exe"/>
    <fail unless="@{FileExists('${WinRar}')}" message="Error: WinRar is required to run this target.  Failed to locate WinRar executable at ${WinRar}."/>
    <fail unless="@{FileExists('${Sed}')}" message="Error: Cygwin sed utility is required to run this target.  Failed to locate sed executable at ${Sed}."/>

    <!-- C:\packages -->
    <property name="baseDir" value="${package.Framework.dir}/../.."/>
    
    <!-- Generate Visual Studio 2005 project for all configs incl. Pyro samples -->
    <property name="skip-vcproj" value="false" unless="@{PropertyExists('skip-vcproj')}"/>
    <do unless="${skip-vcproj} == true">
      <optionset name="sln-opt">
        <option name="pyro" value="true"/>
        <option name="bulkbuild" value="false"/>
      </optionset>
      <nant buildfile="${package.dir}/BlazeSDK.build"
            target="slnruntime"
            optionset="sln-opt"/>
    </do>

    <!-- Global search and replace absolute paths with relative paths -->
    <fileset name="vcprojfiles" basedir="${package.dir}\build">
      <includes name="**\*.vcproj"/>
      <includes name="**\*.csproj"/>
    </fileset>
    <foreach property="vcprojfile" item="FileSet" in="vcprojfiles">
      <exec program="perl"
            workingdir="${package.dir}"
            stdout="false" 
            commandline="${package.dir}\scripts\relativize.pl ${package.dir} ${vcprojfile}" />
    </foreach>
    
    <!-- Run Doxygen -->
    <property name="skip-doxygen" value="false" unless="@{PropertyExists('skip-doxygen')}"/>
    <do unless="${skip-doxygen} == true">
      <echo message="Building SDK documentation..." />
      <call target="doxygen" />
      <call target="chm" />
    </do>

    <!-- Add build and use dependencies to the distribution -->
    <property name="distroPackages">
      EABase
      DirtySDK
      TelemetrySDK
      PinTaxonomySDK
      EASTL
      EAThread
      PPMalloc
      coreallocator
      EAAssert
      EATDF
      EAStdC
      EACallstack
      EAIO
      EACOM      
      PlayStation3NPEx
      Framework
      eaconfig
      nantToVSTools
      VisualStudio
      WindowsSDK      
      vstomaketools
      snvsi
      DotNet
      EAJson
    </property>
    <fileset name="runtime.BlazeSDK.dependent_packages" basedir="${baseDir}">
    </fileset>
    <foreach item="String" in="${distroPackages}" property="dependency">
      <dependent name="${dependency}"/>
      <fileset name="runtime.BlazeSDK.dependent_packages"
               fromfileset="runtime.BlazeSDK.dependent_packages"
               basedir="${baseDir}">
        <includes name="${dependency}/${package.${dependency}.version}/**"/>
      </fileset>
    </foreach>
    
    <!-- Create set of files to zip up for the external package -->
    <fileset name="runtime.BlazeSDK.external_package_files" 
             basedir="${package.dir}">
      <!-- include all scripts and common files -->
      <includes name='${package.dir}/HowToBuild.txt' />
      <includes name='${package.dir}/setup.bat' />
      <includes name='${package.dir}/changelog.txt' />
      <includes name='${package.dir}/readme.md' />
      <includes name='${package.dir}/*.xml'/>
      <includes name='${package.dir}/nant'/>
      <includes name='${package.dir}/nant-iphone'/>
      <excludes name='${package.dir}/build-masterconfig.xml'/>
      <excludes name='${package.dir}/opt-masterconfig.xml'/>
      <includes name='${package.dir}/*.build'/>
      <includes name='${package.dir}/scripts/**/*.xml'/>
      <includes name='${package.dir}/scripts/**/*.dxc'/>
      <includes name='${package.dir}/scripts/**/*.py'/>
      <includes name='${package.dir}/scripts/**/*.pl'/>
      <includes name='${package.dir}/gen/blazerpccomponent.rpc' />
      <!-- include documentation -->
      <includes unless="${skip-doxygen} == true" name="${package.dir}/doc/${package.name}.chm" />
      <!-- include source & internal headers -->
      <includes name='${package.dir}/source/**/*.h' />
      <includes name='${package.dir}/source/**/*.cpp' />
      <includes name='${package.dir}/include/**/*.h' />
      <!-- include tools, tdf and rpc files -->
      <includes name='${package.dir}/tools/**' />
      <includes name='${package.dir}/gen/**' />      
      <!-- include generated code files -->      
      <includes name='${package.builddir}/gen/**' />
      <!-- include Visual Studio 2005 project files -->
      <includes name='${package.dir}/build/**/*.vcproj'/>
      <includes name='${package.dir}/build/**/*.sln'/>
      <includes name='${package.dir}/build/**/*.csproj'/>
    </fileset>

    <!-- Print list of wildcards to a file -->
    <echo message="@{FileSetToString('runtime.BlazeSDK.dependent_packages','
')}" file="${package.builddir}\Packages.txt"/>
    <echo message="@{StrReplace('@{FileSetToString('runtime.BlazeSDK.external_package_files','
')}','${package.dir}\\','')}" file="${package.dir}\BlazeSDK.txt"/>
    
    <!-- Print license and version info to a file -->
    <property name="license" fromfile="${package.dir}\license.txt"/>
    <echo file="${package.builddir}\license.txt">
TITLE=BlazeSDK ${package.targetversion}
SETUP=packages\BlazeSDK\${package.targetversion}\setup.bat ${package.targetversion}

LICENSE
{
${license}
}
    </echo>
    
    <!-- Run WinRAR -->
    <exec program="${WinRar}" 
          workingdir="${package.builddir}" 
          commandline="a -sfx -y -z${package.builddir}\license.txt ${package.builddir}\${externalzip_file_name} @${package.builddir}\Packages.txt" />
    <exec program="${WinRar}"
          workingdir="${package.dir}"
          commandline="a -sfx -y -appackages\BlazeSDK\${package.targetversion} ${package.builddir}\${externalzip_file_name} @${package.dir}\BlazeSDK.txt" />
    
  </target>
  
  <!-- =========== PUBLISH TARGETS ============  -->

  <target name="publish-distro" description="Copy the self-extracting archive generated by nant distro to EATechNet">

    <property name="test" value="false" unless="@{PropertyExists('test')}"/>
    <property name="test-prefix" value=""/>
    <property name="test-prefix" value="unofficial-" if="${test} == true"/>
    <echo message="RUNNING IN TEST MODE" if="${test} == true"/>
    
    <!-- Nant property dump -->
    <echo message="== PROPERTIES =="/>
    <echo message="test = ${test}"/>
    <echo message="package.targetversion = ${package.targetversion}"/>
    <echo message="package_file_name = ${externalzip_file_name}"/>
    <echo message="================"/>
    
    <echo message="Copying external package file to EATechNet sharepoint"/>
    <copy file="${package.builddir}\${externalzip_file_name}"
      tofile="\\eatechnet.ea.com\products\blazesdk\Documents\External Package\${test-prefix}${externalzip_file_name}"
    />

    <do if="${test} == true">
      <echo message="TEST MODE: Reverting..."/>
      <delete file="\\eatechnet.ea.com\products\blazesdk\Documents\External Package\${test-prefix}${externalzip_file_name}"/>
    </do>
    
  </target>

  <!-- Old method: Publish a release from the local build directory after calling the package target -->
  <target name="publish" description="Copy the readme file and zip files for preparation for publishing the release">

    <property name="test" value="false" unless="@{PropertyExists('test')}"/>
    <property name="test-prefix" value=""/>
    <property name="test-prefix" value="unofficial-" if="${test} == true"/>
    <echo message="RUNNING IN TEST MODE" if="${test} == true"/>

    <!-- Nant property dump -->
    <echo message="== PROPERTIES =="/>
    <echo message="test = ${test}"/>
    <echo message="package.targetversion = ${package.targetversion}"/>
    <echo message="package_file_name = ${package_file_name}"/>
    <echo message="libzip_file_name = ${libzip_file_name}"/>
    <echo message="================"/>

    <echo message="Copying package file to package server drop folder"/>
    <copy file="${package.builddir}\${package_file_name}"
      tofile="\\eac-as5.eac.ad.ea.com\incoming\${test-prefix}${package_file_name}"
    />

    <do if="${test} == true">
      <echo message="TEST MODE: Reverting..."/>
      <delete file="\\eac-as5.eac.ad.ea.com\incoming\${test-prefix}${package_file_name}"/>
    </do>

    <do unless="${test} == true">
      <echo message="Manual steps:"/>
      <echo message="1) Complete publication of package at http://packages.worldwide.ea.com/admin/upload.aspx "/>
      <echo message="2) Create a new version on EATechNet at http://eatechnet.ea.com/Support "/>
      <echo message="***** See Confluence for full detailed steps "/>
    </do>

  </target>

  <!-- New method: publish a release from an existing build on the network -->
  <target name="publish-archive">

    <fail message="build-location property must be defined!" unless="@{PropertyExists('build-location')}"/>
    
    <property name="test" value="false" unless="@{PropertyExists('test')}"/>
    <property name="test-prefix" value=""/>
    <property name="test-prefix" value="unofficial-" if="${test} == true"/>
    <echo message="RUNNING IN TEST MODE" if="${test} == true"/>

    <!-- Nant property dump -->
    <echo message="== PROPERTIES =="/>
    <echo message="test = ${test}"/>
    <echo message="package.targetversion = ${package.targetversion}"/>
    <echo message="build-location = ${build-location}"/>
    <echo message="package_file_name = ${package_file_name}"/>
    <echo message="libzip_file_name = ${libzip_file_name}"/>
    <echo message="================"/>

    <echo message="Copying package file to package server drop folder"/>
    <copy file="${build-location}\${package_file_name}"
      tofile="\\eac-as5.eac.ad.ea.com\incoming\${test-prefix}${package_file_name}"
    />
    
    <do if="${test} == true">
      <echo message="TEST MODE: Reverting..."/>
      <delete file="\\eac-as5.eac.ad.ea.com\incoming\${test-prefix}${package_file_name}"/>
    </do>    

    <do unless="${test} == true">
      <echo message="Manual steps:"/>
      <echo message="1) Complete publication of package at http://packages.worldwide.ea.com/admin/upload.aspx "/>
      <echo message="2) Create a new version on EATechNet at http://eatechnet.ea.com/Support "/>
      <echo message="***** See Confluence for full detailed steps "/>
    </do>
    
  </target>

  <!-- Use this method to update the readme file of a given archived build with the one in the local build directory -->
  <target name="update-archive-readme">

    <fail message="build-location property must be defined!" unless="@{PropertyExists('build-location')}"/>

    <!-- Nant property dump -->
    <echo message="== PROPERTIES =="/>
    <echo message="package.targetversion = ${package.targetversion}"/>
    <echo message="build-location = ${build-location}"/>
    <echo message="package_file_name = ${package_file_name}"/>
    <echo message="================"/>

    <echo message="Copying readme to ${build-location}"/>
    <copy file="${package.dir}\readme.md" tofile="${build-location}\readme.md" overwrite="true" clobber="true" />

    <property name="temp-dir" value="${package.BlazeSDK.builddir}\temp" unless="@{PropertyExists('temp-dir')}"/>

    <delete dir="${temp-dir}" failonmissing="false"/>
    <mkdir dir="${temp-dir}"/>

    <echo message="Adding readme to ${package_file_name}"/>

    <!-- Unzip to a temp dir -->
    <unzip zipfile="${build-location}\${package_file_name}" outdir="${temp-dir}"/>

    <!-- Replace readme file -->
    <copy file="${package.dir}\readme.md" tofile="${temp-dir}\BlazeSDK\${package.targetversion}\readme.md" overwrite="true" clobber="true" />
    
    <!-- Zip it back up-->
    <zip zipfile="${temp-dir}\${package_file_name}">
      <fileset basedir="${temp-dir}">
        <includes name="BlazeSDK\**"/>
      </fileset>
    </zip>

    <echo message="Copying to rwsfiler2"/>
    <copy file="${temp-dir}\${package_file_name}" tofile="${build-location}\${package_file_name}" overwrite="true" clobber="true" />

    <delete dir="${temp-dir}" failonerror="false"/>

  </target>

  <!-- =========== UPDATES DOCS ON RWSFILER2 ============  -->
  <!-- Update the docs on \\rwsfiler2\gos-docs\blaze-latest\ -->
  <target name="publish-docs">
    <fail if="${BlazeSDK.publishdocs.dir} == DEV" message="Tried to publish docs from a dev build!"/>
    
    <!-- Allow override of the doxygen html documents location -->
    <property name="html-dir" value="${package.dir}\doc\html\" unless="@{PropertyExists('html-dir')}"/>
    
    <echo message="Deleting old docs"/>
    <delete>
      <fileset basedir="${BlazeSDK.publishdocs.rootdir}\${BlazeSDK.publishdocs.dir}\blazeapi">
        <includes name="**"/> 
      </fileset>
    </delete>

    <echo message="Copying doxygen output files to GOS documentation network share (may take a while)"/>
    <echo message="Source folder: ${html-dir}"/>

    <copy todir="${BlazeSDK.publishdocs.rootdir}\${BlazeSDK.publishdocs.dir}\blazeapi">
      <fileset basedir="${html-dir}">
        <includes name="**" />
      </fileset>
    </copy>

  </target>

  <!-- Use the above target to update docs from an archived build -->
  <target name="publish-archive-docs">
    
    <property name="doxygen-dir" value="C:\temp\${package.name}-${package.targetversion}"/>
    
    <!-- Nant property dump -->
    <echo message="== PROPERTIES =="/>
    <echo message="package.targetversion = ${package.targetversion}"/>
    <echo message="build-location = ${build-location}"/>
    <echo message="doczip_file_name = ${doczip_file_name}"/>
    <echo message="doxygen-dir = ${doxygen-dir}"/>
    <echo message="================"/>

    <delete dir="${doxygen-dir}" failonmissing="false"/>
    <mkdir dir="${doxygen-dir}" />
    
    <unzip zipfile="${build-location}\${doczip_file_name}" outdir="${doxygen-dir}"/>
    
    <property name="html-dir" value="${doxygen-dir}\doc\html"/>
    <call target="publish-docs"/>

    <delete dir="${doxygen-dir}" failonerror="false"/>
    
  </target>

  <!-- =========== LIBRARY FILE CHECK ============  -->

  <target name="si-package-run" hidden="false" >
    <echo message="${config-system} is currently unsupported!"/>
  </target>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <target name="codesize-report" description="Create code size reports for the BlazeSDK for the configured platforms">
    <dependent name="TypeDatabase" version="1.04.00"/>
    <dependent name="ActivePython" version="2.7.2.5"/>

    <nant buildfile="${package.TypeDatabase.dir}/TypeDatabase.build" target="slntool visualstudio-tool">
      <property name="package.configs" value="pc-vc-debug"/>
    </nant>

    <foreach item="String" in="${package.configs}" property="codesize-config-name">
      <nant buildfile="${package.dir}/${package.name}.build" target="build">
        <property name="config" value="${codesize-config-name}"/>
        <property name="pyroproxy" value="true"/>
      </nant>

      <choose>
        <do if="${codesize-config-name} == 'pc-vc-debug' || ${codesize-config-name} == 'pc-vc-debug-opt' || ${codesize-config-name} == 'pc-vc-opt' || 
                ${codesize-config-name} == 'pc64-vc-debug' || ${codesize-config-name} == 'pc64-vc-debug-opt' || ${codesize-config-name} == 'pc64-vc-opt' || 
                ${codesize-config-name} == 'capilano-vc-debug' || ${codesize-config-name} == 'capilano-vc-debug-opt' || ${codesize-config-name} == 'capilano-vc-opt'">
          <property name="codesize-debug-ext" value="pdb" />
        </do>
        <do>
          <property name="codesize-debug-ext" value="" />
          <echo message="${codesize-config-name} is currently unsupported!"/>
        </do>
      </choose>

      <do if="'${codesize-debug-ext}' != ''">
        <property name="codesize-working-dir" value="${package.dir}/build/${package.name}/${package.version}/${codesize-config-name}" />
        
        <mkdir dir="${codesize-working-dir}/codesize" />

        <!-- Note: EA Tech's behavior is Xbox One's output folder will differ. For details see: https://eadpjira.ea.com/browse/ETCM-2236 -->
        <property name="ignitionpdbpath" value="./bin/ignition.${codesize-debug-ext}"/>
        <property name="ignitionpdbpath" value="./bin/Ignition/ignition.${codesize-debug-ext}" if="${codesize-config-name} == 'capilano-vc-debug' || ${codesize-config-name} == 'capilano-vc-debug-opt' || ${codesize-config-name} == 'capilano-vc-opt'"/>
        
        <exec program="${package.dir}/build/TypeDatabase/${package.TypeDatabase.version}/win32-vc-debug/bin/tool/EA.TypeDatabase.Export.exe"
              workingdir="${codesize-working-dir}/" >
          <arg value="-i${ignitionpdbpath} -t./codesize/codesizeinfo.txt" />
        </exec>

        <exec program="${package.ActivePython.dir}/installed/python.exe" workingdir="${codesize-working-dir}/codesize/">
          <arg value="${package.dir}/scripts/reports/execsummary.py" />
        </exec>

        <exec program="${package.ActivePython.dir}/installed/python.exe" workingdir="${codesize-working-dir}/codesize/">
          <arg value="${package.dir}/scripts/reports/classsummary.py" />
        </exec>
      </do>
    </foreach>
  </target>

</project>
