group base : protobufbase;

standardFileHeader() ::= <<
/**************************************************************************************************/
/*!
    \file

    \attention
        (c) Electronic Arts. All Rights Reserved.

    \note DO NOT EDIT THIS FILE!
          This file was auto-generated from \verbatim <fileNode.InputFile> \endverbatim
*/

/**************************************************************************************************/
>>

centralFileHeader() ::= <<
/**************************************************************************************************/
/*!
    \file

    \attention
        (c) Electronic Arts. All Rights Reserved.

    \note DO NOT EDIT THIS FILE!
          This is an auto-generated central file.
*/

/**************************************************************************************************/
>>

standardFileFooter() ::= <<
>>

openIncludeGuard() ::= <<
#ifndef <printGuardName()>
#define <printGuardName()>
#if defined(EA_PRAGMA_ONCE_SUPPORTED)
    #pragma once
#endif
>>

closeIncludeGuard() ::= <<
#endif // <printGuardName()>
>>

printGuardName() ::= <<
<if(fileNode.InputParams.HeaderPrefix)><fileNode.InputParams.HeaderPrefix; format="guard">_<endif><fileNode.RelativeOutputFilename;format="guard">
>>

dllApiMacro() ::= "<fileNode.InputParams.DllApiMacro>"

singleClass(fileNode, classNode, defTable) ::= <<>>

////////////////////////Typedef Helpers/////////////////////////////////////

tdfTypeDefIntNameMap ::= [
    "bool" : "BOOL",
    "char8_t" : "INT8",
    "int8_t" : "INT8",
    "uint8_t" : "UINT8",
    "int16_t" : "INT16",
    "uint16_t" : "UINT16",
    "int32_t" : "INT32",
    "uint32_t" : "UINT32",
    "int64_t" : "INT64",
    "uint64_t" : "UINT64",
    "ComponentId" : "COMPONENTID",
    "EntityType" : "ENTITYTYPE",
    "EntityId" : "ENTITYID",
    "default" : "WTF!"
]

tdfTypeDefIntName(typeRef) ::= "<tdfTypeDefIntNameMap.(typeRef.ActualSymbol.Name)>"

tdfTypeDefMap ::= [
    "INT_PRIMITIVE" : "EA::TDF::TDF_TYPE_DESCRIPTION_<tdfTypeDefIntName(typeRef)>",
    "FLOAT_PRIMITIVE" : "EA::TDF::TDF_TYPE_DESCRIPTION_FLOAT",
    "ENUM" : "<typeRef.ActualSymbol.Parent.FullNameList:{<it>};separator=\"::\">::s<typeRef.ActualSymbol.NonNamespaceScope:{<it>};separator=\"_\">_EnumMapTypeDesc",
    "BITFIELD" : "EA::TDF::TDF_TYPE_DESCRIPTION_BITFIELD",
    "STRING" : "EA::TDF::TDF_TYPE_DESCRIPTION_STRING",
    "BLOB" : "EA::TDF::TDF_TYPE_DESCRIPTION_BLOB",
    "OBJECT_TYPE" : "EA::TDF::TDF_TYPE_DESCRIPTION_OBJECT_TYPE",
    "OBJECT_ID" : "EA::TDF::TDF_TYPE_DESCRIPTION_OBJECT_ID",
    "TIMEVALUE" : "EA::TDF::TDF_TYPE_DESCRIPTION_TIMEVALUE",
    "CLASS" : "EA::TDF::TDF_BASE_TYPE_TDF",
    "UNION" : "EA::TDF::TDF_BASE_TYPE_UNION",
    "VARIABLE" : "EA::TDF::TDF_TYPE_DESCRIPTION_VARIABLE",
    "GENERIC" : "EA::TDF::TDF_TYPE_DESCRIPTION_GENERIC",
    "MAP" : "EA::TDF::TDF_BASE_TYPE_MAP",
    "LIST" : "EA::TDF::TDF_BASE_TYPE_LIST",
    default : "TDF_BASE_TYPE_WTF!!!!"
]
tdfTypeDef(typeRef) ::= "<tdfTypeDefMap.(typeRef.ActualCategory)>"



printTypeRef(typeRef) ::= "<if(typeRef.ScopedSymbolName)><printTypeRefInner(typeRef=typeRef)><elseif(typeRef.TypeRef)><printTypeRefInner(typeRef=typeRef.TypeRef)><else>BADTYPE!!!<endif>"
printTypeRefFullScope(typeRef) ::= "<if(typeRef.ScopedSymbolName)><printTypeRefInner(typeRef=typeRef,fullScope=\"true\")><else><printTypeRefInner(typeRef=typeRef.TypeRef,fullScope=\"true\")><endif>"
printTypeRef2(typeRef, fullScope)::= "<if(typeRef.ScopedSymbolName)><printTypeRefInner(typeRef=typeRef,fullScope=fullScope)><else><printTypeRefInner(typeRef=typeRef.TypeRef,fullScope=fullScope)><endif>"
printTypeRef3(typeRef, fullScope, classNameOnly,macroSafeCommas)::= "<if(typeRef.ScopedSymbolName)><printTypeRefInner(typeRef=typeRef,fullScope=fullScope, classNameOnly=classNameOnly, macroSafeCommas=macroSafeCommas)><else><printTypeRefInner(typeRef=typeRef.TypeRef,fullScope=fullScope, classNameOnly=classNameOnly, macroSafeCommas=macroSafeCommas)><endif>"
printTypeRefInner(typeRef, fullScope, classNameOnly, macroSafeCommas) ::= "<({printTypeRef<typeRef.Symbol.Category>})()>"

printTypeRefLIST() ::= "<if(typeRef.Symbol.ValueType.ActualCategoryStruct)><printTypeRefLISTStruct()><elseif(typeRef.Symbol.ValueType.ActualCategoryBlob)><printTypeRefLISTStruct()><else><printTypeRefLISTPrimitive()><endif>"

printTypeRefLISTPrimitive() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfPrimitiveVector\<<printTypeRef2(typeRef=typeRef.Symbol.ValueTypeRef,fullScope=fullScope)> \>"

printTypeRefLISTStruct() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfStructVector\<<printTypeRef3(typeRef=typeRef.Symbol.ValueTypeRef,fullScope=fullScope,classNameOnly=classNameOnly,macroSafeCommas=macroSafeCommas)> \>"

printTypeRefMAP() ::= <<
<if(typeRef.Symbol.ValueType.ActualCategoryStruct)><printTypeRefMAPStruct()><elseif(typeRef.Symbol.ValueType.ActualCategoryBlob)><printTypeRefMAPStruct()><else><printTypeRefMAPPrimitive()><endif>
>>

printTypeRefMAPPrimitive() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfPrimitiveMap\<<printTypeRef2(typeRef=typeRef.Symbol.KeyTypeRef,fullScope=fullScope)><printTypeRefComma()><printTypeRef2(typeRef=typeRef.Symbol.ValueTypeRef,fullScope=fullScope)><printComparator()> \>"

printTypeRefMAPStruct() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfStructMap\<<printTypeRef3(typeRef=typeRef.Symbol.KeyTypeRef, fullScope=fullScope,classNameOnly=classNameOnly,macroSafeCommas=macroSafeCommas)><printTypeRefComma()><printTypeRef3(typeRef=typeRef.Symbol.ValueTypeRef, fullScope=fullScope,classNameOnly=classNameOnly,macroSafeCommas=macroSafeCommas)><printComparator()> \>"

//Todo this should be a map
printComparator() ::= "<if(typeRef.ScopedAttributes.Comparator)><if(typeRef.Symbol.KeyType.ActualCategoryString)><printTypeRefComma()> EA::TDF::TdfStringCompareIgnoreCase<printTypeRefComma()> true<endif><endif>"   

printTypeRefSTRING() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfString"
printTypeRefBLOB() ::= "<if(!classNameOnly)>EA::TDF::<endif>TdfBlob"
printTypeRefVARIABLE() ::= "<if(!classNameOnly)>EA::TDF::<endif>VariableTdfBase"
printTypeRefGENERIC() ::= "<if(!classNameOnly)>EA::TDF::<endif>GenericTdfType"


printTypeRefTIMEVALUE() ::= "<printTypeRefDEFAULT()>"
printTypeRefOBJECT_TYPE() ::= "<printTypeRefDEFAULT()>"
printTypeRefOBJECT_ID() ::= "<printTypeRefDEFAULT()>"
printTypeRefINT_PRIMITIVE() ::= "<printTypeRefDEFAULT()>"
printTypeRefFLOAT_PRIMITIVE() ::= "<printTypeRefDEFAULT()>"
printTypeRefENUM() ::= "<printTypeRefDEFAULT()>"
printTypeRefENUM_VALUE() ::= "<printTypeRefDEFAULT()>"
printTypeRefUNION() ::= "<printTypeRefDEFAULT()>"
printTypeRefBITFIELD() ::= "<printTypeRefDEFAULT()>"
printTypeRefCLASS() ::= "<printTypeRefDEFAULT()>"
printTypeRefTYPEDEF() ::= "<printTypeRefDEFAULT()>"
printTypeRefCONST() ::= "<printTypeRefDEFAULT()>"
printTypeRefDEFAULT() ::= "<if(fullScope)><printTypeList(typeRef.Symbol.FullNameList)><else><printTypeList(typeRef.ScopedSymbolName)><endif>"

printTypeList(typeList) ::= <<
<typeList; separator="::">
>>

//If we ever want to refer to a type inside a macro, this handy replacement will ensure we can do this (at the cost of readability both here and in the generated code).  
printTypeRefComma() ::= "<if(macroSafeCommas)> TDFCOMMA() <else>,<endif>"

usePtrHelper(nameList) ::= "<if(nameList)> || defined (TDF_USE_PTR_<nameList; separator=\"_\", format=\"toUpper\";  >) <endif><if(trunc(nameList))> <usePtrHelper(nameList=trunc(nameList))> <endif>"
