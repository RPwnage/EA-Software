<project xmlns="schemas/ea/framework3.xsd">
  <target name="compile-sndbs_eacloverride">
    <dependent name="SNDBS_EACLOverride"/>
    <dependent name="SNDBS_Customizations"/>
    <dependent name="Microsoft.VisualStudio.Setup.Configuration.Interop" />
    <dependent name="MSBuildTools" />
    <taskdef assembly="${package.SNDBS_Customizations.dir}/CustomMSBuildTask/bin/sndbs_eacloverride_${vsversion}.dll">
      <sources>
        <includes name="${package.SNDBS_EACLOverride.dir}/**.cs"/>
      </sources>
      <references>
        <includes name="Microsoft.CSharp.dll" asis="true"/>
        <includes name="System.Xml.Linq.dll" asis="true"/>
        <includes name="${package.MSBuildTools.dir}\BuildTools\MSBuild\Microsoft\VC\v160\Microsoft.Build.CPPTasks.Common.dll" asis="true"/>
        <includes name="${package.MSBuildTools.dir}\BuildTools\MSBuild\Current\Bin\Microsoft.Build.Framework.dll" asis="true"/>
        <includes name="${package.MSBuildTools.dir}\BuildTools\MSBuild\Current\Bin\Microsoft.Build.Utilities.Core.dll" asis="true"/>        
        <includes fromfileset="package.Microsoft.VisualStudio.Setup.Configuration.Interop.assemblies" />
      </references>
    </taskdef>
  </target>
  
  <target name="sndbsbuild-internal" depends="compile-sndbs_eacloverride">
    <property name="eaconfig.build.group" value="${eaconfig.build.group??runtime}" />
    <call target="set-sln-file"/>
    <choose>
      <!-- sln file exists -->
      <do if="@{FileExists('${sln-file}')}">
        <dependent name="SNDBS"/>

        <property name="platform.name.${config-system}" value="@{GetVisualStudioPlatformName()}"/>
        <GetConfigPlatform configname="config" platformname="platform.name.${config-system}" file="${sln-file}" />
        <GetVSConfigName ConfigPropertyName="vsproj_config_name"/>

        <call target="msbuild-setup-msbuild-path"/>
        <call target="msbuild-setup-msbuild-verbosity"/>
        <call target="msbuild-setup-msbuild-cpucount" />
        
        <property name="distributedBuildId" value="@{DateTimeNowAsFiletime()}" />
        
        <!-- this will call dbsrun, which is a wrapper for msbuild. Note that this calls msbuild as it normally would be but with some additional sndbs related arguments on the end -->
        <exec program='"${package.sndbs.dbsrun_path}"' >
          <args>
            <arg value="--no-job-object" /> <!-- don't use job object for monitoring, results in hang if mspdbsrv or msbuild remains open after build -->
            <arg value="${eaconfig.msbuild.path}" /> <!-- below this are all the arguments for msbuild.exe -->
            <arg value='"${sln-file}"'/>
            <arg value="/t:${eaconfig.msbuild.target??Build}"/>
            <arg value="/nodeReuse:False"/>
            <!-- This option stop msbuild.exe from lingering around after a build. -->
            <arg value="/v:${eaconfig.msbuild.default.verbosity}"/>
            <arg value="/r"/>
            <!-- nuget restore needed when building clean with the new csproj format -->
            <arg value="/m" unless="@{PropertyExists('eaconfig.msbuild.cpucount')}"/>
            <arg value="/m:${eaconfig.msbuild.cpucount}" if="@{PropertyExists('eaconfig.msbuild.cpucount')}"/>
            <arg value="/l:${eaconfig.msbuild.loggers}" if ="@{PropertyExists('eaconfig.msbuild.loggers')}"/>
            <arg value='"/p:Configuration=${vsproj_config_name};Platform=${platform.name.${config-system}}"'/>
            <arg value="${eaconfig.msbuild.extra-args}" if="@{PropertyExists('eaconfig.msbuild.extra-args')}"/>
            <arg value='/p:DistributedBuild=true' />
            <arg value='/p:DistributedBuildId=DBS:${distributedBuildId}' />
            <arg value='/p:DBSBUILD="dbsbuild.exe -id ${distributedBuildId} -gt"' />
            <arg value='/p:DBS_IN=$$I:' />
            <arg value='/p:DBS_OUT=$$O:' />
            <arg value='/p:DBS_COMMENT=$$C:' />
          </args>
          <env>
            <option name="VisualStudioVersion" value="${config-vs-version}"/>
            <option name="MSBUILDDEBUGONSTART" value="1" if="${eaconfig.msbuild.debug??false}"/>
          </env>
        </exec>
      </do> 

      <!-- no sln file -->
      <do>
        <choose>
          <do if="@{StrIsEmpty('${${eaconfig.build.group}.buildmodules??}')}">
            <echo message="There seems to be no modules in the '${eaconfig.build.group}' build group, nothing to build!"/>
          </do>
          <do>
            <fail message="Need to generate SLN file for ${package.name} package.  Couldn't find ${sln-file}"/>
          </do>
        </choose>
      </do>
    </choose>
  </target>

  <target name="sndbsbuild" description="Build the solution using SNDBS" allowoverride="true">
    <property name="eaconfig.msbuild.target" value="Build"/>
    <call target="sndbsbuild-internal"/>
  </target>

  <target name="sndbsrebuild" description="Build the solution using SNDBS" allowoverride="true">
    <property name="eaconfig.msbuild.target" value="Rebuild"/>
    <call target="sndbsbuild-internal"/>
  </target>

  <target name="sndbsbuild-msbuild" description="Build the solution using SNDBS via msbuild directly" allowoverride="true">
    <property name="sndbs.enabled" value="true" />
    <call target="msbuild"/>
    <eval code="@{PropertyUndefine('sndbs.enabled')}" type="Function"/>
  </target>
  
  <target name="sndbsrebuild-msbuild" description="Build the solution using SNDBS via msbuild directly" allowoverride="true">
    <property name="sndbs.enabled" value="true" />
    <call target="msbuild-rebuild"/>
    <eval code="@{PropertyUndefine('sndbs.enabled')}" type="Function"/>
  </target>

</project>