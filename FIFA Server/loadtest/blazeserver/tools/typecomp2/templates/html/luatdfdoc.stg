group luatdfdoc : servercommon;

file(fileNode, defTable) ::= <<
$standardFileHeader()$

<title>Types ($fileNode.InputFile$)</title>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<link rel="stylesheet" type="text/css" name="luadoc" href="../wadl.css" />
</head>

<h1 class="pagetitle">Types ($fileNode.InputFile$)</h1>
<a name="Overview"></a><h1> <span class="mw-headline">Overview</span></h1>
This document describes the Lua structures used to represent each TDF class generated by $fileNode.InputFile$ in our testing Lua scripting environments. These environments include the BT3 tool's Lua scripting environment as well as the Stress LuaStressModule bindings and can be used interchangeably with either.  This document assumes some familiarity with the Lua language, but more information can be found on the main Lua site: <a href="http://www.lua.org">www.lua.org</a>.
</p><p>For general background information see <a href="http://developer.ea.com/display/blaze/BT3+Tool+Help" title="BT3 Tool Help">BT3 Tool Help</a> on the GOS confluence site. 
</p><p>The typecomp2 tool is used for code generation for Blaze and it has been extended for Lua scripting purposes.  The new modifications to <b>typecomp2</b> are intended to allow a user to generate a complete Lua-scriptable tester from preexisting .tdf/.rpc files. The tool generates Lua to C++ conversion functions and vice versa for each TDF type found in .tdf files.</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Overview"><span class="toctext">Overview</span></a>
</li>
<li class="toclevel-1"><a href="#Usage_in_Lua"><span class="toctext">Usage in Lua</span></a>
<ul>
$fileNode.Defs:{$tocHelper(node=it)$}$
</ul>
</li>
</ul>
</td>
</tr>
</table>
<a name="Usage_in_Lua"></a><h1> <span class="mw-headline">Usage in Lua</span></h1>

$fileNode.Defs:{$contentHelper(node=it)$}$
$standardFileFooter()$
>>


tocCUSTOM_ATTRIBUTE() ::= <<>>  

tocHelper(node) ::= <<
$if(node.Category)$
$({toc$node.Category$})()$
$elseif(node.Filename)$
$else$
$tocNamespace()$
$endif$
>>

tocNAMESPACE() ::= <<
$node.Defs:{$tocHelper(node=it)$}$
>>

tocCONST() ::= <<>>

tocTYPEDEF() ::= <<>>

tocENUM() ::= <<
<li class="toclevel-2"><a href="#$node.FullNameList;separator="_"$"><span class="toctext">$node.FullNameList;separator="::"$ (enum)</span></a></li>
>>

tocBITFIELD() ::= <<
<li class="toclevel-2"><a href="#$node.FullNameList;separator="_"$"><span class="toctext">$node.FullNameList;separator="::"$ (bitfield)</span></a></li>
>>

tocCLASS() ::= <<

$if(node.Defs)$
$node.Defs:{$tocHelper(node=it)$}$
$endif$

<li class="toclevel-2"><a href="#$node.FullNameList;separator="_"$"><span class="toctext">$node.FullNameList;separator="::"$ (class)</span></a></li>
>>

tocUNION() ::= <<
<li class="toclevel-2"><a href="#$node.FullNameList;separator="_"$"><span class="toctext">$node.FullNameList;separator="::"$ (union)</span></a></li>
>>

contentCUSTOM_ATTRIBUTE() ::= <<>>  

contentHelper(node,parentClass) ::= <<
$if(node.Category)$
$({content$node.Category$})()$
$elseif(node.Filename)$
$else$
$contentNamespace()$
$endif$
>>

contentNAMESPACE() ::= <<
$node.Defs:{$contentHelper(node=it)$}$
>>

contentCONST() ::= <<>>

contentTYPEDEF() ::= <<>>

contentENUM() ::= <<
<a name="$node.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.FullNameList;separator="::"$</span></h2>
$if(node.description)$
$node.description$
$else$
This enum does not have a description.
$endif$

<a name="$node.FullNameList;separator="_"$_Values"></a>
<h3><span class="mw-headline">Values</span></h3>
<ul>
$node.Members:{$enumMember(member=it); separator="\r\n"$}$
</ul>
>>

enumMember(member) ::= <<
<li>$member.Name$$if(member.Value)$ ($member.Value$)$else$ ($i0$)$endif$$if(member.description)$ -- $member.description$$endif$</li>

>>

contentBITFIELD() ::= <<
<a name="$node.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.FullNameList;separator="::"$</span></h2>
$if(node.description)$
$node.description$
$else$
This bitfield does not have a description.
$endif$

<a name="$node.FullNameList;separator="_"$_Values"></a>
<h3><span class="mw-headline">Values</span></h3>
<ul>
$node.Members:{$bitfieldMember(member=it); separator="\r\n"$}$
</ul>
>>

bitfieldMember(member) ::= <<
<li>$member.Name$$if(member.Value)$ ($member.Value;format="hex"$)$else$ ($i0;format="hex"$)$endif$$if(member.description)$ -- $member.description$$endif$</li>
>>

contentCLASS() ::= <<
$node.Defs:{$contentHelper(node=it)$}$

<a name="$node.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.FullNameList;separator="::"$</span></h2>
$if(node.description)$
$node.description$
$else$
This class does not have a description.
$endif$

<a name="$node.FullNameList;separator="_"$_Members"></a>
<h3><span class="mw-headline">Members</span></h3>
$if(node.Members)$
<table>
<tr>
 <td><u>Lua Member Name</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Lua Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>C++ Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>TDF Description</u>&nbsp;&nbsp;&nbsp;</td>
</tr>
$node.Members:{$memberHelper(member=it)$}$
</table>
<a name="$node.FullNameList;separator="_"$_Example"></a>
<h3><span class="mw-headline">Lua Example</span></h3>
$generateExampleLuaTable(tdfClass=node)$
$else$
This class has no members.
$endif$
>>

contentUNION() ::= <<
<a name="$node.FullNameList;separator="_"$"></a>
<h2><span class="mw-headline">$node.FullNameList;separator="::"$</span></h2>
$if(node.description)$
$node.description$
$else$
This union does not have a description.
$endif$

<a name="$node.FullNameList;separator="_"$_Members"></a>
<h3><span class="mw-headline">Members</span></h3>
Only one of the following members can be set at any given time for a union.
$if(node.Members)$
<table>
<tr>
 <td><u>Lua Member Name</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>Lua Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>C++ Type</u>&nbsp;&nbsp;&nbsp;</td>
 <td><u>TDF Description</u>&nbsp;&nbsp;&nbsp;</td>
</tr>
$node.Members:{$memberHelper(member=it)$}$
</table>
<a name="$node.FullNameList;separator="_"$_Example"></a>
<h3><span class="mw-headline">Lua Example</span></h3>
$generateExampleLuaTable(tdfClass=node, isUnion={1})$
$else$
This union has no members.
$endif$
>>

memberHelper(member) ::= <<
<tr>
 <td>$member.Name$&nbsp;&nbsp;&nbsp;</td>
 <td>$getLuaType(nodeValue=member.TypeRef.Symbol)$&nbsp;&nbsp;&nbsp;</td>
 <td>$getCppType(node=member)$&nbsp;&nbsp;&nbsp;</td>
$if(member.description)$
 <td>$member.description$&nbsp;&nbsp;&nbsp;</td>
$else$
 <td>No description.&nbsp;&nbsp;&nbsp;</td>
$endif$
</tr>
>>

getLuaType(nodeValue) ::= <<
$({getLuaType$nodeValue.ActualCategory$})()$
>>

getLuaTypeSTRING() ::= "String"
getLuaTypeENUM() ::= "Int (EnumValue) or String (EnumName)"
getLuaTypeINT_PRIMITIVE() ::= "$({getLuaTypeINT_PRIMITIVE_$nodeValue.ActualSymbol.Name$})()$"
getLuaTypeINT_PRIMITIVE_bool8_t() ::= "Int"
getLuaTypeINT_PRIMITIVE_bool() ::= "Int"
getLuaTypeINT_PRIMITIVE_char8_t() ::= "Int"
getLuaTypeINT_PRIMITIVE_int8_t() ::= "Int"
getLuaTypeINT_PRIMITIVE_uint8_t() ::= "UInt"
getLuaTypeINT_PRIMITIVE_int16_t() ::= "Int"
getLuaTypeINT_PRIMITIVE_uint16_t() ::= "UInt"
getLuaTypeINT_PRIMITIVE_int32_t() ::= "Int"
getLuaTypeINT_PRIMITIVE_uint32_t() ::= "UInt"
getLuaTypeINT_PRIMITIVE_int64_t() ::= "Int64"
getLuaTypeINT_PRIMITIVE_uint64_t() ::= "UInt64"
getLuaTypeINT_PRIMITIVE_ComponentId() ::= "UInt"
getLuaTypeINT_PRIMITIVE_EntityType() ::= "UInt"
getLuaTypeINT_PRIMITIVE_EntityId() ::= "Int64"
getLuaTypeFLOAT_PRIMITIVE() ::= "Float"
getLuaTypeUNION() ::= "Table"
getLuaTypeBITFIELD() ::= "Int"
getLuaTypeBLOB() ::= "Blob"
getLuaTypeCLASS() ::= "Table"
getLuaTypeOBJECT_TYPE() ::= "Table"
getLuaTypeOBJECT_ID() ::= "Table"
getLuaTypeTIMEVALUE() ::= "Int64"
getLuaTypeVARIABLE() ::= "Table"
getLuaTypeGENERIC() ::= "Table"
getLuaTypeLIST() ::= "Table"
getLuaTypeMAP() ::= "Table"

getCppType(node) ::= "$({getCppType$node.TypeRef.Symbol.ActualCategory$})()$"
getCppTypeSTRING() ::= "string"
getCppTypeENUM() ::= "enum ($node.TypeRef.Symbol.FullNameList;separator=\"::\"$)"
getCppTypeINT_PRIMITIVE() ::= "$({getCppTypeINT_PRIMITIVE_$node.TypeRef.ActualSymbol.Name$})()$"
getCppTypeINT_PRIMITIVE_bool8_t() ::= "bool8_t"
getCppTypeINT_PRIMITIVE_bool() ::= "bool"
getCppTypeINT_PRIMITIVE_char8_t() ::= "char8_t"
getCppTypeINT_PRIMITIVE_int8_t() ::= "int8_t"
getCppTypeINT_PRIMITIVE_uint8_t() ::= "uint8_t"
getCppTypeINT_PRIMITIVE_int16_t() ::= "int16_t"
getCppTypeINT_PRIMITIVE_uint16_t() ::= "uint16_t"
getCppTypeINT_PRIMITIVE_int32_t() ::= "int32_t"
getCppTypeINT_PRIMITIVE_uint32_t() ::= "uint32_t"
getCppTypeINT_PRIMITIVE_int64_t() ::= "int64_t"
getCppTypeINT_PRIMITIVE_uint64_t() ::= "uint64_t"
getCppTypeINT_PRIMITIVE_ComponentId() ::= "ComponentId"
getCppTypeINT_PRIMITIVE_EntityType() ::= "EntityType"
getCppTypeINT_PRIMITIVE_EntityId() ::= "EntityId"
getCppTypeFLOAT_PRIMITIVE() ::= "float"
getCppTypeUNION() ::= "TdfUnion ($node.TypeRef.Symbol.FullNameList;separator=\"::\"$)"
getCppTypeBITFIELD() ::= "TdfBitfield ($node.TypeRef.Symbol.FullNameList;separator=\"::\"$)"
getCppTypeBLOB() ::= "TdfBlob"
getCppTypeCLASS() ::= "$node.TypeRef.ActualSymbol.Name$"
getCppTypeOBJECT_TYPE() ::= "EA::TDF::ObjectType"
getCppTypeOBJECT_ID() ::= "EA::TDF::ObjectId"
getCppTypeTIMEVALUE() ::= "TimeValue"
getCppTypeMAP() ::= "map&lt;$node.TypeRef.ActualSymbol.KeyType.ActualSymbol.FullNameList; separator=\"::\"$, $node.TypeRef.ActualSymbol.ValueType.ActualSymbol.FullNameList; separator=\"::\"$&gt;"
getCppTypeLIST() ::= "list&lt;$node.TypeRef.ActualSymbol.ValueType.ActualSymbol.FullNameList; separator=\"::\"$&gt;"
getCppTypeVARIABLE() ::= "variable TDF"
getCppTypeGENERIC() ::= "generic value"
