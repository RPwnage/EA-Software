group componentdbsource : servercommon;

masterComponent(fileNode, component) ::= <<>>
slaveComponent(fileNode, component) ::= <<>>
rootComponent(fileNode, node) ::= <<
<standardFileHeader()>
/*** Include Files ********************************************************************************/

#include "framework/blaze.h"
#include "blazerpcerrors.h"
#include "framework/component/blazerpc.h"

//This is an unfortunate but necessary temporary section of code that forces the linker to pull in all component libraries.
//To be removed once we are loading from DLLs.
<node.Subcomponents:{subcomponent|#include "<subcomponent.RelativeOutputPath;format="unixPath">/rpc/<subcomponent.Name;format="tl"><subcomponent.Type;format="tl">.h"};separator="\n">

namespace Blaze {

void BlazeRpcComponentDb::initialize(uint16_t componentId) 
{
    if (componentId != 0)
    {
        <node.Subcomponents:{subcomponent|<if(!subcomponent.proxyOnly)>::<subcomponent.Scope.FullNameList; separator="::">::<subcomponent.Name><subcomponent.Type>::createImpl();<endif>};separator="\n">       
    }
    AllocatorInitHelper::initMemGroupNames();
}

size_t BlazeRpcComponentDb::getTotalComponentCount()
{
    return <length(node.Components)>;
}

// Component Ids -> memGroupIds (index)
static const ComponentId sComponentIdsMemgroupCategoryOrder[] = 
{
    <node.Components:{component|<compId(component=component)>};separator=",\n">
};
// Component (index) -> AllocGroup size
static size_t sComponentAllocGroupSizes[] = 
{
    <node.Components:{component|<length(component.alloc_groups)>};separator=",\n">
};

size_t BlazeRpcComponentDb::getComponentCategoryIndex(ComponentId componentId)
{
    for (size_t index = 0; index \< (EAArrayCount(sComponentIdsMemgroupCategoryOrder)); ++index)
    {
        if (sComponentIdsMemgroupCategoryOrder[index] == componentId)
            return index;
    }
    
    return (size_t)-1;
}

size_t BlazeRpcComponentDb::getComponentAllocGroups(size_t componentCategoryIndex)
{
    if (componentCategoryIndex \< (EAArrayCount(sComponentAllocGroupSizes)))
        return sComponentAllocGroupSizes[componentCategoryIndex] + 1;
        
    return (size_t)-1;
}

} // Blaze
<standardFileFooter()>
>>

