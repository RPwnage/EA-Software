// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto

#ifndef PROTOBUF_Client_2eproto__INCLUDED
#define PROTOBUF_Client_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Client {
class ClientRequest;
class ClientRequestDefaultTypeInternal;
extern ClientRequestDefaultTypeInternal _ClientRequest_default_instance_;
class Detection;
class DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class Detection_DetectionCanary;
class Detection_DetectionCanaryDefaultTypeInternal;
extern Detection_DetectionCanaryDefaultTypeInternal _Detection_DetectionCanary_default_instance_;
class Detection_DetectionCodeIntegrity;
class Detection_DetectionCodeIntegrityDefaultTypeInternal;
extern Detection_DetectionCodeIntegrityDefaultTypeInternal _Detection_DetectionCodeIntegrity_default_instance_;
class Detection_DetectionDebugger;
class Detection_DetectionDebuggerDefaultTypeInternal;
extern Detection_DetectionDebuggerDefaultTypeInternal _Detection_DetectionDebugger_default_instance_;
class Detection_DetectionForeignCode;
class Detection_DetectionForeignCodeDefaultTypeInternal;
extern Detection_DetectionForeignCodeDefaultTypeInternal _Detection_DetectionForeignCode_default_instance_;
class Detection_DetectionHeartbeatTimeout;
class Detection_DetectionHeartbeatTimeoutDefaultTypeInternal;
extern Detection_DetectionHeartbeatTimeoutDefaultTypeInternal _Detection_DetectionHeartbeatTimeout_default_instance_;
class Detection_DetectionHook;
class Detection_DetectionHookDefaultTypeInternal;
extern Detection_DetectionHookDefaultTypeInternal _Detection_DetectionHook_default_instance_;
class Detection_DetectionHwid;
class Detection_DetectionHwidDefaultTypeInternal;
extern Detection_DetectionHwidDefaultTypeInternal _Detection_DetectionHwid_default_instance_;
class Detection_DetectionHwid_HardwareId;
class Detection_DetectionHwid_HardwareIdDefaultTypeInternal;
extern Detection_DetectionHwid_HardwareIdDefaultTypeInternal _Detection_DetectionHwid_HardwareId_default_instance_;
class Detection_DetectionHypervisor;
class Detection_DetectionHypervisorDefaultTypeInternal;
extern Detection_DetectionHypervisorDefaultTypeInternal _Detection_DetectionHypervisor_default_instance_;
class Detection_DetectionLoadtest;
class Detection_DetectionLoadtestDefaultTypeInternal;
extern Detection_DetectionLoadtestDefaultTypeInternal _Detection_DetectionLoadtest_default_instance_;
class Detection_DetectionOsQuery;
class Detection_DetectionOsQueryDefaultTypeInternal;
extern Detection_DetectionOsQueryDefaultTypeInternal _Detection_DetectionOsQuery_default_instance_;
class Detection_DetectionScreenshot;
class Detection_DetectionScreenshotDefaultTypeInternal;
extern Detection_DetectionScreenshotDefaultTypeInternal _Detection_DetectionScreenshot_default_instance_;
class Detection_DetectionSignature;
class Detection_DetectionSignatureDefaultTypeInternal;
extern Detection_DetectionSignatureDefaultTypeInternal _Detection_DetectionSignature_default_instance_;
class Detection_DetectionText;
class Detection_DetectionTextDefaultTypeInternal;
extern Detection_DetectionTextDefaultTypeInternal _Detection_DetectionText_default_instance_;
class Diagnostic;
class DiagnosticDefaultTypeInternal;
extern DiagnosticDefaultTypeInternal _Diagnostic_default_instance_;
class ExtensionRequestMessage;
class ExtensionRequestMessageDefaultTypeInternal;
extern ExtensionRequestMessageDefaultTypeInternal _ExtensionRequestMessage_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class ModuleRequestMessage;
class ModuleRequestMessageDefaultTypeInternal;
extern ModuleRequestMessageDefaultTypeInternal _ModuleRequestMessage_default_instance_;
class SemanticVersion;
class SemanticVersionDefaultTypeInternal;
extern SemanticVersionDefaultTypeInternal _SemanticVersion_default_instance_;
}  // namespace Client

namespace Client {

namespace protobuf_Client_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_Client_2eproto

enum HookType {
  NONE = 0,
  DETOUR = 1,
  IAT = 2,
  HookType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HookType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HookType_IsValid(int value);
const HookType HookType_MIN = NONE;
const HookType HookType_MAX = IAT;
const int HookType_ARRAYSIZE = HookType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HookType_descriptor();
inline const ::std::string& HookType_Name(HookType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HookType_descriptor(), value);
}
inline bool HookType_Parse(
    const ::std::string& name, HookType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HookType>(
    HookType_descriptor(), name, value);
}
enum ScreenshotSourceType {
  SOURCE_NONE = 0,
  SOURCE_DESKTOP = 1,
  SOURCE_BITBLT = 2,
  SOURCE_BITBLT_CM = 3,
  ScreenshotSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScreenshotSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScreenshotSourceType_IsValid(int value);
const ScreenshotSourceType ScreenshotSourceType_MIN = SOURCE_NONE;
const ScreenshotSourceType ScreenshotSourceType_MAX = SOURCE_BITBLT_CM;
const int ScreenshotSourceType_ARRAYSIZE = ScreenshotSourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScreenshotSourceType_descriptor();
inline const ::std::string& ScreenshotSourceType_Name(ScreenshotSourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScreenshotSourceType_descriptor(), value);
}
inline bool ScreenshotSourceType_Parse(
    const ::std::string& name, ScreenshotSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScreenshotSourceType>(
    ScreenshotSourceType_descriptor(), name, value);
}
// ===================================================================

class Heartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Heartbeat) */ {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Heartbeat& default_instance();

  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Heartbeat* other);
  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const PROTOBUF_FINAL { return New(NULL); }

  Heartbeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Client.Heartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Diagnostic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Diagnostic) */ {
 public:
  Diagnostic();
  virtual ~Diagnostic();

  Diagnostic(const Diagnostic& from);

  inline Diagnostic& operator=(const Diagnostic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Diagnostic(Diagnostic&& from) noexcept
    : Diagnostic() {
    *this = ::std::move(from);
  }

  inline Diagnostic& operator=(Diagnostic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Diagnostic& default_instance();

  static inline const Diagnostic* internal_default_instance() {
    return reinterpret_cast<const Diagnostic*>(
               &_Diagnostic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Diagnostic* other);
  friend void swap(Diagnostic& a, Diagnostic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Diagnostic* New() const PROTOBUF_FINAL { return New(NULL); }

  Diagnostic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Diagnostic& from);
  void MergeFrom(const Diagnostic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Diagnostic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint64 code() const;
  void set_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Client.Diagnostic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 code_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SemanticVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.SemanticVersion) */ {
 public:
  SemanticVersion();
  virtual ~SemanticVersion();

  SemanticVersion(const SemanticVersion& from);

  inline SemanticVersion& operator=(const SemanticVersion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SemanticVersion(SemanticVersion&& from) noexcept
    : SemanticVersion() {
    *this = ::std::move(from);
  }

  inline SemanticVersion& operator=(SemanticVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SemanticVersion& default_instance();

  static inline const SemanticVersion* internal_default_instance() {
    return reinterpret_cast<const SemanticVersion*>(
               &_SemanticVersion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(SemanticVersion* other);
  friend void swap(SemanticVersion& a, SemanticVersion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SemanticVersion* New() const PROTOBUF_FINAL { return New(NULL); }

  SemanticVersion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SemanticVersion& from);
  void MergeFrom(const SemanticVersion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SemanticVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // uint32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // uint32 build = 3;
  void clear_build();
  static const int kBuildFieldNumber = 3;
  ::google::protobuf::uint32 build() const;
  void set_build(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Client.SemanticVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  ::google::protobuf::uint32 build_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionCanary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionCanary) */ {
 public:
  Detection_DetectionCanary();
  virtual ~Detection_DetectionCanary();

  Detection_DetectionCanary(const Detection_DetectionCanary& from);

  inline Detection_DetectionCanary& operator=(const Detection_DetectionCanary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionCanary(Detection_DetectionCanary&& from) noexcept
    : Detection_DetectionCanary() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionCanary& operator=(Detection_DetectionCanary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionCanary& default_instance();

  static inline const Detection_DetectionCanary* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionCanary*>(
               &_Detection_DetectionCanary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Detection_DetectionCanary* other);
  friend void swap(Detection_DetectionCanary& a, Detection_DetectionCanary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionCanary* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionCanary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionCanary& from);
  void MergeFrom(const Detection_DetectionCanary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionCanary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionCanary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionDebugger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionDebugger) */ {
 public:
  Detection_DetectionDebugger();
  virtual ~Detection_DetectionDebugger();

  Detection_DetectionDebugger(const Detection_DetectionDebugger& from);

  inline Detection_DetectionDebugger& operator=(const Detection_DetectionDebugger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionDebugger(Detection_DetectionDebugger&& from) noexcept
    : Detection_DetectionDebugger() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionDebugger& operator=(Detection_DetectionDebugger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionDebugger& default_instance();

  static inline const Detection_DetectionDebugger* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionDebugger*>(
               &_Detection_DetectionDebugger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Detection_DetectionDebugger* other);
  friend void swap(Detection_DetectionDebugger& a, Detection_DetectionDebugger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionDebugger* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionDebugger* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionDebugger& from);
  void MergeFrom(const Detection_DetectionDebugger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionDebugger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionDebugger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionHypervisor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionHypervisor) */ {
 public:
  Detection_DetectionHypervisor();
  virtual ~Detection_DetectionHypervisor();

  Detection_DetectionHypervisor(const Detection_DetectionHypervisor& from);

  inline Detection_DetectionHypervisor& operator=(const Detection_DetectionHypervisor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionHypervisor(Detection_DetectionHypervisor&& from) noexcept
    : Detection_DetectionHypervisor() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionHypervisor& operator=(Detection_DetectionHypervisor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionHypervisor& default_instance();

  static inline const Detection_DetectionHypervisor* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionHypervisor*>(
               &_Detection_DetectionHypervisor_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Detection_DetectionHypervisor* other);
  friend void swap(Detection_DetectionHypervisor& a, Detection_DetectionHypervisor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionHypervisor* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionHypervisor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionHypervisor& from);
  void MergeFrom(const Detection_DetectionHypervisor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionHypervisor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionHypervisor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionOsQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionOsQuery) */ {
 public:
  Detection_DetectionOsQuery();
  virtual ~Detection_DetectionOsQuery();

  Detection_DetectionOsQuery(const Detection_DetectionOsQuery& from);

  inline Detection_DetectionOsQuery& operator=(const Detection_DetectionOsQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionOsQuery(Detection_DetectionOsQuery&& from) noexcept
    : Detection_DetectionOsQuery() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionOsQuery& operator=(Detection_DetectionOsQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionOsQuery& default_instance();

  static inline const Detection_DetectionOsQuery* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionOsQuery*>(
               &_Detection_DetectionOsQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Detection_DetectionOsQuery* other);
  friend void swap(Detection_DetectionOsQuery& a, Detection_DetectionOsQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionOsQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionOsQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionOsQuery& from);
  void MergeFrom(const Detection_DetectionOsQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionOsQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Client.SemanticVersion version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::Client::SemanticVersion& version() const;
  ::Client::SemanticVersion* mutable_version();
  ::Client::SemanticVersion* release_version();
  void set_allocated_version(::Client::SemanticVersion* version);

  // uint32 crashDumpFlag = 2;
  void clear_crashdumpflag();
  static const int kCrashDumpFlagFieldNumber = 2;
  ::google::protobuf::uint32 crashdumpflag() const;
  void set_crashdumpflag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionOsQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Client::SemanticVersion* version_;
  ::google::protobuf::uint32 crashdumpflag_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionHwid_HardwareId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionHwid.HardwareId) */ {
 public:
  Detection_DetectionHwid_HardwareId();
  virtual ~Detection_DetectionHwid_HardwareId();

  Detection_DetectionHwid_HardwareId(const Detection_DetectionHwid_HardwareId& from);

  inline Detection_DetectionHwid_HardwareId& operator=(const Detection_DetectionHwid_HardwareId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionHwid_HardwareId(Detection_DetectionHwid_HardwareId&& from) noexcept
    : Detection_DetectionHwid_HardwareId() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionHwid_HardwareId& operator=(Detection_DetectionHwid_HardwareId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionHwid_HardwareId& default_instance();

  static inline const Detection_DetectionHwid_HardwareId* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionHwid_HardwareId*>(
               &_Detection_DetectionHwid_HardwareId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Detection_DetectionHwid_HardwareId* other);
  friend void swap(Detection_DetectionHwid_HardwareId& a, Detection_DetectionHwid_HardwareId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionHwid_HardwareId* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionHwid_HardwareId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionHwid_HardwareId& from);
  void MergeFrom(const Detection_DetectionHwid_HardwareId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionHwid_HardwareId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionHwid.HardwareId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionHwid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionHwid) */ {
 public:
  Detection_DetectionHwid();
  virtual ~Detection_DetectionHwid();

  Detection_DetectionHwid(const Detection_DetectionHwid& from);

  inline Detection_DetectionHwid& operator=(const Detection_DetectionHwid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionHwid(Detection_DetectionHwid&& from) noexcept
    : Detection_DetectionHwid() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionHwid& operator=(Detection_DetectionHwid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionHwid& default_instance();

  static inline const Detection_DetectionHwid* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionHwid*>(
               &_Detection_DetectionHwid_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Detection_DetectionHwid* other);
  friend void swap(Detection_DetectionHwid& a, Detection_DetectionHwid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionHwid* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionHwid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionHwid& from);
  void MergeFrom(const Detection_DetectionHwid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionHwid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Detection_DetectionHwid_HardwareId HardwareId;

  // accessors -------------------------------------------------------

  // repeated .Client.Detection.DetectionHwid.HardwareId hwids = 1;
  int hwids_size() const;
  void clear_hwids();
  static const int kHwidsFieldNumber = 1;
  const ::Client::Detection_DetectionHwid_HardwareId& hwids(int index) const;
  ::Client::Detection_DetectionHwid_HardwareId* mutable_hwids(int index);
  ::Client::Detection_DetectionHwid_HardwareId* add_hwids();
  ::google::protobuf::RepeatedPtrField< ::Client::Detection_DetectionHwid_HardwareId >*
      mutable_hwids();
  const ::google::protobuf::RepeatedPtrField< ::Client::Detection_DetectionHwid_HardwareId >&
      hwids() const;

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionHwid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Client::Detection_DetectionHwid_HardwareId > hwids_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionSignature) */ {
 public:
  Detection_DetectionSignature();
  virtual ~Detection_DetectionSignature();

  Detection_DetectionSignature(const Detection_DetectionSignature& from);

  inline Detection_DetectionSignature& operator=(const Detection_DetectionSignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionSignature(Detection_DetectionSignature&& from) noexcept
    : Detection_DetectionSignature() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionSignature& operator=(Detection_DetectionSignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionSignature& default_instance();

  static inline const Detection_DetectionSignature* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionSignature*>(
               &_Detection_DetectionSignature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Detection_DetectionSignature* other);
  friend void swap(Detection_DetectionSignature& a, Detection_DetectionSignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionSignature* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionSignature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionSignature& from);
  void MergeFrom(const Detection_DetectionSignature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imageName = 4;
  void clear_imagename();
  static const int kImageNameFieldNumber = 4;
  const ::std::string& imagename() const;
  void set_imagename(const ::std::string& value);
  #if LANG_CXX11
  void set_imagename(::std::string&& value);
  #endif
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  ::std::string* mutable_imagename();
  ::std::string* release_imagename();
  void set_allocated_imagename(::std::string* imagename);

  // int64 streamOffset = 1;
  void clear_streamoffset();
  static const int kStreamOffsetFieldNumber = 1;
  ::google::protobuf::int64 streamoffset() const;
  void set_streamoffset(::google::protobuf::int64 value);

  // int64 imageBase = 2;
  void clear_imagebase();
  static const int kImageBaseFieldNumber = 2;
  ::google::protobuf::int64 imagebase() const;
  void set_imagebase(::google::protobuf::int64 value);

  // int64 imageSize = 3;
  void clear_imagesize();
  static const int kImageSizeFieldNumber = 3;
  ::google::protobuf::int64 imagesize() const;
  void set_imagesize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imagename_;
  ::google::protobuf::int64 streamoffset_;
  ::google::protobuf::int64 imagebase_;
  ::google::protobuf::int64 imagesize_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionText : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionText) */ {
 public:
  Detection_DetectionText();
  virtual ~Detection_DetectionText();

  Detection_DetectionText(const Detection_DetectionText& from);

  inline Detection_DetectionText& operator=(const Detection_DetectionText& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionText(Detection_DetectionText&& from) noexcept
    : Detection_DetectionText() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionText& operator=(Detection_DetectionText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionText& default_instance();

  static inline const Detection_DetectionText* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionText*>(
               &_Detection_DetectionText_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Detection_DetectionText* other);
  friend void swap(Detection_DetectionText& a, Detection_DetectionText& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionText* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionText* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionText& from);
  void MergeFrom(const Detection_DetectionText& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionText* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imageName = 4;
  void clear_imagename();
  static const int kImageNameFieldNumber = 4;
  const ::std::string& imagename() const;
  void set_imagename(const ::std::string& value);
  #if LANG_CXX11
  void set_imagename(::std::string&& value);
  #endif
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  ::std::string* mutable_imagename();
  ::std::string* release_imagename();
  void set_allocated_imagename(::std::string* imagename);

  // string text = 5;
  void clear_text();
  static const int kTextFieldNumber = 5;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // int64 streamOffset = 1;
  void clear_streamoffset();
  static const int kStreamOffsetFieldNumber = 1;
  ::google::protobuf::int64 streamoffset() const;
  void set_streamoffset(::google::protobuf::int64 value);

  // int64 imageBase = 2;
  void clear_imagebase();
  static const int kImageBaseFieldNumber = 2;
  ::google::protobuf::int64 imagebase() const;
  void set_imagebase(::google::protobuf::int64 value);

  // int64 imageSize = 3;
  void clear_imagesize();
  static const int kImageSizeFieldNumber = 3;
  ::google::protobuf::int64 imagesize() const;
  void set_imagesize(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionText)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imagename_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::int64 streamoffset_;
  ::google::protobuf::int64 imagebase_;
  ::google::protobuf::int64 imagesize_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionHook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionHook) */ {
 public:
  Detection_DetectionHook();
  virtual ~Detection_DetectionHook();

  Detection_DetectionHook(const Detection_DetectionHook& from);

  inline Detection_DetectionHook& operator=(const Detection_DetectionHook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionHook(Detection_DetectionHook&& from) noexcept
    : Detection_DetectionHook() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionHook& operator=(Detection_DetectionHook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionHook& default_instance();

  static inline const Detection_DetectionHook* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionHook*>(
               &_Detection_DetectionHook_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Detection_DetectionHook* other);
  friend void swap(Detection_DetectionHook& a, Detection_DetectionHook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionHook* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionHook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionHook& from);
  void MergeFrom(const Detection_DetectionHook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionHook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Client.HookType hookType = 1;
  void clear_hooktype();
  static const int kHookTypeFieldNumber = 1;
  ::Client::HookType hooktype() const;
  void set_hooktype(::Client::HookType value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionHook)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int hooktype_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionForeignCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionForeignCode) */ {
 public:
  Detection_DetectionForeignCode();
  virtual ~Detection_DetectionForeignCode();

  Detection_DetectionForeignCode(const Detection_DetectionForeignCode& from);

  inline Detection_DetectionForeignCode& operator=(const Detection_DetectionForeignCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionForeignCode(Detection_DetectionForeignCode&& from) noexcept
    : Detection_DetectionForeignCode() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionForeignCode& operator=(Detection_DetectionForeignCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionForeignCode& default_instance();

  static inline const Detection_DetectionForeignCode* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionForeignCode*>(
               &_Detection_DetectionForeignCode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Detection_DetectionForeignCode* other);
  friend void swap(Detection_DetectionForeignCode& a, Detection_DetectionForeignCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionForeignCode* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionForeignCode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionForeignCode& from);
  void MergeFrom(const Detection_DetectionForeignCode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionForeignCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imageName = 2;
  void clear_imagename();
  static const int kImageNameFieldNumber = 2;
  const ::std::string& imagename() const;
  void set_imagename(const ::std::string& value);
  #if LANG_CXX11
  void set_imagename(::std::string&& value);
  #endif
  void set_imagename(const char* value);
  void set_imagename(const char* value, size_t size);
  ::std::string* mutable_imagename();
  ::std::string* release_imagename();
  void set_allocated_imagename(::std::string* imagename);

  // bytes imageData = 3;
  void clear_imagedata();
  static const int kImageDataFieldNumber = 3;
  const ::std::string& imagedata() const;
  void set_imagedata(const ::std::string& value);
  #if LANG_CXX11
  void set_imagedata(::std::string&& value);
  #endif
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  ::std::string* mutable_imagedata();
  ::std::string* release_imagedata();
  void set_allocated_imagedata(::std::string* imagedata);

  // bool abnormalEntropy = 1;
  void clear_abnormalentropy();
  static const int kAbnormalEntropyFieldNumber = 1;
  bool abnormalentropy() const;
  void set_abnormalentropy(bool value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionForeignCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imagename_;
  ::google::protobuf::internal::ArenaStringPtr imagedata_;
  bool abnormalentropy_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionScreenshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionScreenshot) */ {
 public:
  Detection_DetectionScreenshot();
  virtual ~Detection_DetectionScreenshot();

  Detection_DetectionScreenshot(const Detection_DetectionScreenshot& from);

  inline Detection_DetectionScreenshot& operator=(const Detection_DetectionScreenshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionScreenshot(Detection_DetectionScreenshot&& from) noexcept
    : Detection_DetectionScreenshot() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionScreenshot& operator=(Detection_DetectionScreenshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionScreenshot& default_instance();

  static inline const Detection_DetectionScreenshot* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionScreenshot*>(
               &_Detection_DetectionScreenshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Detection_DetectionScreenshot* other);
  friend void swap(Detection_DetectionScreenshot& a, Detection_DetectionScreenshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionScreenshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionScreenshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionScreenshot& from);
  void MergeFrom(const Detection_DetectionScreenshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionScreenshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .Client.ScreenshotSourceType sourceType = 2;
  void clear_sourcetype();
  static const int kSourceTypeFieldNumber = 2;
  ::Client::ScreenshotSourceType sourcetype() const;
  void set_sourcetype(::Client::ScreenshotSourceType value);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionScreenshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int sourcetype_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionCodeIntegrity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionCodeIntegrity) */ {
 public:
  Detection_DetectionCodeIntegrity();
  virtual ~Detection_DetectionCodeIntegrity();

  Detection_DetectionCodeIntegrity(const Detection_DetectionCodeIntegrity& from);

  inline Detection_DetectionCodeIntegrity& operator=(const Detection_DetectionCodeIntegrity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionCodeIntegrity(Detection_DetectionCodeIntegrity&& from) noexcept
    : Detection_DetectionCodeIntegrity() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionCodeIntegrity& operator=(Detection_DetectionCodeIntegrity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionCodeIntegrity& default_instance();

  static inline const Detection_DetectionCodeIntegrity* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionCodeIntegrity*>(
               &_Detection_DetectionCodeIntegrity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Detection_DetectionCodeIntegrity* other);
  friend void swap(Detection_DetectionCodeIntegrity& a, Detection_DetectionCodeIntegrity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionCodeIntegrity* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionCodeIntegrity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionCodeIntegrity& from);
  void MergeFrom(const Detection_DetectionCodeIntegrity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionCodeIntegrity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionCodeIntegrity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionHeartbeatTimeout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionHeartbeatTimeout) */ {
 public:
  Detection_DetectionHeartbeatTimeout();
  virtual ~Detection_DetectionHeartbeatTimeout();

  Detection_DetectionHeartbeatTimeout(const Detection_DetectionHeartbeatTimeout& from);

  inline Detection_DetectionHeartbeatTimeout& operator=(const Detection_DetectionHeartbeatTimeout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionHeartbeatTimeout(Detection_DetectionHeartbeatTimeout&& from) noexcept
    : Detection_DetectionHeartbeatTimeout() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionHeartbeatTimeout& operator=(Detection_DetectionHeartbeatTimeout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionHeartbeatTimeout& default_instance();

  static inline const Detection_DetectionHeartbeatTimeout* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionHeartbeatTimeout*>(
               &_Detection_DetectionHeartbeatTimeout_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Detection_DetectionHeartbeatTimeout* other);
  friend void swap(Detection_DetectionHeartbeatTimeout& a, Detection_DetectionHeartbeatTimeout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionHeartbeatTimeout* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionHeartbeatTimeout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionHeartbeatTimeout& from);
  void MergeFrom(const Detection_DetectionHeartbeatTimeout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionHeartbeatTimeout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionHeartbeatTimeout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection_DetectionLoadtest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection.DetectionLoadtest) */ {
 public:
  Detection_DetectionLoadtest();
  virtual ~Detection_DetectionLoadtest();

  Detection_DetectionLoadtest(const Detection_DetectionLoadtest& from);

  inline Detection_DetectionLoadtest& operator=(const Detection_DetectionLoadtest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection_DetectionLoadtest(Detection_DetectionLoadtest&& from) noexcept
    : Detection_DetectionLoadtest() {
    *this = ::std::move(from);
  }

  inline Detection_DetectionLoadtest& operator=(Detection_DetectionLoadtest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection_DetectionLoadtest& default_instance();

  static inline const Detection_DetectionLoadtest* internal_default_instance() {
    return reinterpret_cast<const Detection_DetectionLoadtest*>(
               &_Detection_DetectionLoadtest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Detection_DetectionLoadtest* other);
  friend void swap(Detection_DetectionLoadtest& a, Detection_DetectionLoadtest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection_DetectionLoadtest* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection_DetectionLoadtest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection_DetectionLoadtest& from);
  void MergeFrom(const Detection_DetectionLoadtest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection_DetectionLoadtest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes imageData = 1;
  void clear_imagedata();
  static const int kImageDataFieldNumber = 1;
  const ::std::string& imagedata() const;
  void set_imagedata(const ::std::string& value);
  #if LANG_CXX11
  void set_imagedata(::std::string&& value);
  #endif
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  ::std::string* mutable_imagedata();
  ::std::string* release_imagedata();
  void set_allocated_imagedata(::std::string* imagedata);

  // @@protoc_insertion_point(class_scope:Client.Detection.DetectionLoadtest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imagedata_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Detection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.Detection) */ {
 public:
  Detection();
  virtual ~Detection();

  Detection(const Detection& from);

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(Detection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detection& default_instance();

  enum ContentsCase {
    kCanary = 2,
    kSignature = 3,
    kHook = 4,
    kHeartbeatTimeout = 5,
    kForeignCode = 6,
    kScreenshot = 7,
    kCodeIntegrity = 8,
    kDebugger = 9,
    kHypervisor = 10,
    kOsQuery = 11,
    kHwid = 12,
    kText = 13,
    kLoadTest = 14,
    CONTENTS_NOT_SET = 0,
  };

  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Detection* other);
  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detection* New() const PROTOBUF_FINAL { return New(NULL); }

  Detection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detection& from);
  void MergeFrom(const Detection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Detection_DetectionCanary DetectionCanary;
  typedef Detection_DetectionDebugger DetectionDebugger;
  typedef Detection_DetectionHypervisor DetectionHypervisor;
  typedef Detection_DetectionOsQuery DetectionOsQuery;
  typedef Detection_DetectionHwid DetectionHwid;
  typedef Detection_DetectionSignature DetectionSignature;
  typedef Detection_DetectionText DetectionText;
  typedef Detection_DetectionHook DetectionHook;
  typedef Detection_DetectionForeignCode DetectionForeignCode;
  typedef Detection_DetectionScreenshot DetectionScreenshot;
  typedef Detection_DetectionCodeIntegrity DetectionCodeIntegrity;
  typedef Detection_DetectionHeartbeatTimeout DetectionHeartbeatTimeout;
  typedef Detection_DetectionLoadtest DetectionLoadtest;

  // accessors -------------------------------------------------------

  // uint64 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::uint64 code() const;
  void set_code(::google::protobuf::uint64 value);

  // .Client.Detection.DetectionCanary canary = 2;
  bool has_canary() const;
  void clear_canary();
  static const int kCanaryFieldNumber = 2;
  const ::Client::Detection_DetectionCanary& canary() const;
  ::Client::Detection_DetectionCanary* mutable_canary();
  ::Client::Detection_DetectionCanary* release_canary();
  void set_allocated_canary(::Client::Detection_DetectionCanary* canary);

  // .Client.Detection.DetectionSignature signature = 3;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 3;
  const ::Client::Detection_DetectionSignature& signature() const;
  ::Client::Detection_DetectionSignature* mutable_signature();
  ::Client::Detection_DetectionSignature* release_signature();
  void set_allocated_signature(::Client::Detection_DetectionSignature* signature);

  // .Client.Detection.DetectionHook hook = 4;
  bool has_hook() const;
  void clear_hook();
  static const int kHookFieldNumber = 4;
  const ::Client::Detection_DetectionHook& hook() const;
  ::Client::Detection_DetectionHook* mutable_hook();
  ::Client::Detection_DetectionHook* release_hook();
  void set_allocated_hook(::Client::Detection_DetectionHook* hook);

  // .Client.Detection.DetectionHeartbeatTimeout heartbeatTimeout = 5;
  bool has_heartbeattimeout() const;
  void clear_heartbeattimeout();
  static const int kHeartbeatTimeoutFieldNumber = 5;
  const ::Client::Detection_DetectionHeartbeatTimeout& heartbeattimeout() const;
  ::Client::Detection_DetectionHeartbeatTimeout* mutable_heartbeattimeout();
  ::Client::Detection_DetectionHeartbeatTimeout* release_heartbeattimeout();
  void set_allocated_heartbeattimeout(::Client::Detection_DetectionHeartbeatTimeout* heartbeattimeout);

  // .Client.Detection.DetectionForeignCode foreignCode = 6;
  bool has_foreigncode() const;
  void clear_foreigncode();
  static const int kForeignCodeFieldNumber = 6;
  const ::Client::Detection_DetectionForeignCode& foreigncode() const;
  ::Client::Detection_DetectionForeignCode* mutable_foreigncode();
  ::Client::Detection_DetectionForeignCode* release_foreigncode();
  void set_allocated_foreigncode(::Client::Detection_DetectionForeignCode* foreigncode);

  // .Client.Detection.DetectionScreenshot screenshot = 7;
  bool has_screenshot() const;
  void clear_screenshot();
  static const int kScreenshotFieldNumber = 7;
  const ::Client::Detection_DetectionScreenshot& screenshot() const;
  ::Client::Detection_DetectionScreenshot* mutable_screenshot();
  ::Client::Detection_DetectionScreenshot* release_screenshot();
  void set_allocated_screenshot(::Client::Detection_DetectionScreenshot* screenshot);

  // .Client.Detection.DetectionCodeIntegrity codeIntegrity = 8;
  bool has_codeintegrity() const;
  void clear_codeintegrity();
  static const int kCodeIntegrityFieldNumber = 8;
  const ::Client::Detection_DetectionCodeIntegrity& codeintegrity() const;
  ::Client::Detection_DetectionCodeIntegrity* mutable_codeintegrity();
  ::Client::Detection_DetectionCodeIntegrity* release_codeintegrity();
  void set_allocated_codeintegrity(::Client::Detection_DetectionCodeIntegrity* codeintegrity);

  // .Client.Detection.DetectionDebugger debugger = 9;
  bool has_debugger() const;
  void clear_debugger();
  static const int kDebuggerFieldNumber = 9;
  const ::Client::Detection_DetectionDebugger& debugger() const;
  ::Client::Detection_DetectionDebugger* mutable_debugger();
  ::Client::Detection_DetectionDebugger* release_debugger();
  void set_allocated_debugger(::Client::Detection_DetectionDebugger* debugger);

  // .Client.Detection.DetectionHypervisor hypervisor = 10;
  bool has_hypervisor() const;
  void clear_hypervisor();
  static const int kHypervisorFieldNumber = 10;
  const ::Client::Detection_DetectionHypervisor& hypervisor() const;
  ::Client::Detection_DetectionHypervisor* mutable_hypervisor();
  ::Client::Detection_DetectionHypervisor* release_hypervisor();
  void set_allocated_hypervisor(::Client::Detection_DetectionHypervisor* hypervisor);

  // .Client.Detection.DetectionOsQuery osQuery = 11;
  bool has_osquery() const;
  void clear_osquery();
  static const int kOsQueryFieldNumber = 11;
  const ::Client::Detection_DetectionOsQuery& osquery() const;
  ::Client::Detection_DetectionOsQuery* mutable_osquery();
  ::Client::Detection_DetectionOsQuery* release_osquery();
  void set_allocated_osquery(::Client::Detection_DetectionOsQuery* osquery);

  // .Client.Detection.DetectionHwid hwid = 12;
  bool has_hwid() const;
  void clear_hwid();
  static const int kHwidFieldNumber = 12;
  const ::Client::Detection_DetectionHwid& hwid() const;
  ::Client::Detection_DetectionHwid* mutable_hwid();
  ::Client::Detection_DetectionHwid* release_hwid();
  void set_allocated_hwid(::Client::Detection_DetectionHwid* hwid);

  // .Client.Detection.DetectionText text = 13;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 13;
  const ::Client::Detection_DetectionText& text() const;
  ::Client::Detection_DetectionText* mutable_text();
  ::Client::Detection_DetectionText* release_text();
  void set_allocated_text(::Client::Detection_DetectionText* text);

  // .Client.Detection.DetectionLoadtest loadTest = 14;
  bool has_loadtest() const;
  void clear_loadtest();
  static const int kLoadTestFieldNumber = 14;
  const ::Client::Detection_DetectionLoadtest& loadtest() const;
  ::Client::Detection_DetectionLoadtest* mutable_loadtest();
  ::Client::Detection_DetectionLoadtest* release_loadtest();
  void set_allocated_loadtest(::Client::Detection_DetectionLoadtest* loadtest);

  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:Client.Detection)
 private:
  void set_has_canary();
  void set_has_signature();
  void set_has_hook();
  void set_has_heartbeattimeout();
  void set_has_foreigncode();
  void set_has_screenshot();
  void set_has_codeintegrity();
  void set_has_debugger();
  void set_has_hypervisor();
  void set_has_osquery();
  void set_has_hwid();
  void set_has_text();
  void set_has_loadtest();

  inline bool has_contents() const;
  void clear_contents();
  inline void clear_has_contents();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 code_;
  union ContentsUnion {
    ContentsUnion() {}
    ::Client::Detection_DetectionCanary* canary_;
    ::Client::Detection_DetectionSignature* signature_;
    ::Client::Detection_DetectionHook* hook_;
    ::Client::Detection_DetectionHeartbeatTimeout* heartbeattimeout_;
    ::Client::Detection_DetectionForeignCode* foreigncode_;
    ::Client::Detection_DetectionScreenshot* screenshot_;
    ::Client::Detection_DetectionCodeIntegrity* codeintegrity_;
    ::Client::Detection_DetectionDebugger* debugger_;
    ::Client::Detection_DetectionHypervisor* hypervisor_;
    ::Client::Detection_DetectionOsQuery* osquery_;
    ::Client::Detection_DetectionHwid* hwid_;
    ::Client::Detection_DetectionText* text_;
    ::Client::Detection_DetectionLoadtest* loadtest_;
  } contents_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtensionRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.ExtensionRequestMessage) */ {
 public:
  ExtensionRequestMessage();
  virtual ~ExtensionRequestMessage();

  ExtensionRequestMessage(const ExtensionRequestMessage& from);

  inline ExtensionRequestMessage& operator=(const ExtensionRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExtensionRequestMessage(ExtensionRequestMessage&& from) noexcept
    : ExtensionRequestMessage() {
    *this = ::std::move(from);
  }

  inline ExtensionRequestMessage& operator=(ExtensionRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtensionRequestMessage& default_instance();

  static inline const ExtensionRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ExtensionRequestMessage*>(
               &_ExtensionRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ExtensionRequestMessage* other);
  friend void swap(ExtensionRequestMessage& a, ExtensionRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtensionRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ExtensionRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExtensionRequestMessage& from);
  void MergeFrom(const ExtensionRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExtensionRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Client.Heartbeat heartbeats = 2;
  int heartbeats_size() const;
  void clear_heartbeats();
  static const int kHeartbeatsFieldNumber = 2;
  const ::Client::Heartbeat& heartbeats(int index) const;
  ::Client::Heartbeat* mutable_heartbeats(int index);
  ::Client::Heartbeat* add_heartbeats();
  ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >*
      mutable_heartbeats();
  const ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >&
      heartbeats() const;

  // repeated .Client.Diagnostic diagnostics = 3;
  int diagnostics_size() const;
  void clear_diagnostics();
  static const int kDiagnosticsFieldNumber = 3;
  const ::Client::Diagnostic& diagnostics(int index) const;
  ::Client::Diagnostic* mutable_diagnostics(int index);
  ::Client::Diagnostic* add_diagnostics();
  ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >*
      mutable_diagnostics();
  const ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >&
      diagnostics() const;

  // string extensionVersion = 1;
  void clear_extensionversion();
  static const int kExtensionVersionFieldNumber = 1;
  const ::std::string& extensionversion() const;
  void set_extensionversion(const ::std::string& value);
  #if LANG_CXX11
  void set_extensionversion(::std::string&& value);
  #endif
  void set_extensionversion(const char* value);
  void set_extensionversion(const char* value, size_t size);
  ::std::string* mutable_extensionversion();
  ::std::string* release_extensionversion();
  void set_allocated_extensionversion(::std::string* extensionversion);

  // @@protoc_insertion_point(class_scope:Client.ExtensionRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat > heartbeats_;
  ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic > diagnostics_;
  ::google::protobuf::internal::ArenaStringPtr extensionversion_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModuleRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.ModuleRequestMessage) */ {
 public:
  ModuleRequestMessage();
  virtual ~ModuleRequestMessage();

  ModuleRequestMessage(const ModuleRequestMessage& from);

  inline ModuleRequestMessage& operator=(const ModuleRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModuleRequestMessage(ModuleRequestMessage&& from) noexcept
    : ModuleRequestMessage() {
    *this = ::std::move(from);
  }

  inline ModuleRequestMessage& operator=(ModuleRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleRequestMessage& default_instance();

  static inline const ModuleRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ModuleRequestMessage*>(
               &_ModuleRequestMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ModuleRequestMessage* other);
  friend void swap(ModuleRequestMessage& a, ModuleRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModuleRequestMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ModuleRequestMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModuleRequestMessage& from);
  void MergeFrom(const ModuleRequestMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModuleRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Client.Heartbeat heartbeats = 2;
  int heartbeats_size() const;
  void clear_heartbeats();
  static const int kHeartbeatsFieldNumber = 2;
  const ::Client::Heartbeat& heartbeats(int index) const;
  ::Client::Heartbeat* mutable_heartbeats(int index);
  ::Client::Heartbeat* add_heartbeats();
  ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >*
      mutable_heartbeats();
  const ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >&
      heartbeats() const;

  // repeated .Client.Detection detections = 3;
  int detections_size() const;
  void clear_detections();
  static const int kDetectionsFieldNumber = 3;
  const ::Client::Detection& detections(int index) const;
  ::Client::Detection* mutable_detections(int index);
  ::Client::Detection* add_detections();
  ::google::protobuf::RepeatedPtrField< ::Client::Detection >*
      mutable_detections();
  const ::google::protobuf::RepeatedPtrField< ::Client::Detection >&
      detections() const;

  // repeated .Client.Diagnostic diagnostics = 4;
  int diagnostics_size() const;
  void clear_diagnostics();
  static const int kDiagnosticsFieldNumber = 4;
  const ::Client::Diagnostic& diagnostics(int index) const;
  ::Client::Diagnostic* mutable_diagnostics(int index);
  ::Client::Diagnostic* add_diagnostics();
  ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >*
      mutable_diagnostics();
  const ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >&
      diagnostics() const;

  // string moduleVersion = 1;
  void clear_moduleversion();
  static const int kModuleVersionFieldNumber = 1;
  const ::std::string& moduleversion() const;
  void set_moduleversion(const ::std::string& value);
  #if LANG_CXX11
  void set_moduleversion(::std::string&& value);
  #endif
  void set_moduleversion(const char* value);
  void set_moduleversion(const char* value, size_t size);
  ::std::string* mutable_moduleversion();
  ::std::string* release_moduleversion();
  void set_allocated_moduleversion(::std::string* moduleversion);

  // @@protoc_insertion_point(class_scope:Client.ModuleRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat > heartbeats_;
  ::google::protobuf::RepeatedPtrField< ::Client::Detection > detections_;
  ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic > diagnostics_;
  ::google::protobuf::internal::ArenaStringPtr moduleversion_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Client.ClientRequest) */ {
 public:
  ClientRequest();
  virtual ~ClientRequest();

  ClientRequest(const ClientRequest& from);

  inline ClientRequest& operator=(const ClientRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequest(ClientRequest&& from) noexcept
    : ClientRequest() {
    *this = ::std::move(from);
  }

  inline ClientRequest& operator=(ClientRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequest& default_instance();

  static inline const ClientRequest* internal_default_instance() {
    return reinterpret_cast<const ClientRequest*>(
               &_ClientRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ClientRequest* other);
  friend void swap(ClientRequest& a, ClientRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientRequest& from);
  void MergeFrom(const ClientRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes moduleMessage = 2;
  void clear_modulemessage();
  static const int kModuleMessageFieldNumber = 2;
  const ::std::string& modulemessage() const;
  void set_modulemessage(const ::std::string& value);
  #if LANG_CXX11
  void set_modulemessage(::std::string&& value);
  #endif
  void set_modulemessage(const char* value);
  void set_modulemessage(const void* value, size_t size);
  ::std::string* mutable_modulemessage();
  ::std::string* release_modulemessage();
  void set_allocated_modulemessage(::std::string* modulemessage);

  // .Client.ExtensionRequestMessage extensionMessage = 1;
  bool has_extensionmessage() const;
  void clear_extensionmessage();
  static const int kExtensionMessageFieldNumber = 1;
  const ::Client::ExtensionRequestMessage& extensionmessage() const;
  ::Client::ExtensionRequestMessage* mutable_extensionmessage();
  ::Client::ExtensionRequestMessage* release_extensionmessage();
  void set_allocated_extensionmessage(::Client::ExtensionRequestMessage* extensionmessage);

  // @@protoc_insertion_point(class_scope:Client.ClientRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr modulemessage_;
  ::Client::ExtensionRequestMessage* extensionmessage_;
  mutable int _cached_size_;
  friend struct protobuf_Client_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// -------------------------------------------------------------------

// Diagnostic

// uint64 code = 1;
inline void Diagnostic::clear_code() {
  code_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Diagnostic::code() const {
  // @@protoc_insertion_point(field_get:Client.Diagnostic.code)
  return code_;
}
inline void Diagnostic::set_code(::google::protobuf::uint64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Client.Diagnostic.code)
}

// -------------------------------------------------------------------

// SemanticVersion

// uint32 major = 1;
inline void SemanticVersion::clear_major() {
  major_ = 0u;
}
inline ::google::protobuf::uint32 SemanticVersion::major() const {
  // @@protoc_insertion_point(field_get:Client.SemanticVersion.major)
  return major_;
}
inline void SemanticVersion::set_major(::google::protobuf::uint32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:Client.SemanticVersion.major)
}

// uint32 minor = 2;
inline void SemanticVersion::clear_minor() {
  minor_ = 0u;
}
inline ::google::protobuf::uint32 SemanticVersion::minor() const {
  // @@protoc_insertion_point(field_get:Client.SemanticVersion.minor)
  return minor_;
}
inline void SemanticVersion::set_minor(::google::protobuf::uint32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:Client.SemanticVersion.minor)
}

// uint32 build = 3;
inline void SemanticVersion::clear_build() {
  build_ = 0u;
}
inline ::google::protobuf::uint32 SemanticVersion::build() const {
  // @@protoc_insertion_point(field_get:Client.SemanticVersion.build)
  return build_;
}
inline void SemanticVersion::set_build(::google::protobuf::uint32 value) {
  
  build_ = value;
  // @@protoc_insertion_point(field_set:Client.SemanticVersion.build)
}

// -------------------------------------------------------------------

// Detection_DetectionCanary

// -------------------------------------------------------------------

// Detection_DetectionDebugger

// -------------------------------------------------------------------

// Detection_DetectionHypervisor

// string name = 1;
inline void Detection_DetectionHypervisor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionHypervisor::name() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionHypervisor.name)
  return name_.GetNoArena();
}
inline void Detection_DetectionHypervisor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionHypervisor.name)
}
#if LANG_CXX11
inline void Detection_DetectionHypervisor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionHypervisor.name)
}
#endif
inline void Detection_DetectionHypervisor::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionHypervisor.name)
}
inline void Detection_DetectionHypervisor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionHypervisor.name)
}
inline ::std::string* Detection_DetectionHypervisor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionHypervisor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionHypervisor::release_name() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionHypervisor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionHypervisor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionHypervisor.name)
}

// -------------------------------------------------------------------

// Detection_DetectionOsQuery

// .Client.SemanticVersion version = 1;
inline bool Detection_DetectionOsQuery::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void Detection_DetectionOsQuery::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
inline const ::Client::SemanticVersion& Detection_DetectionOsQuery::version() const {
  const ::Client::SemanticVersion* p = version_;
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionOsQuery.version)
  return p != NULL ? *p : *reinterpret_cast<const ::Client::SemanticVersion*>(
      &::Client::_SemanticVersion_default_instance_);
}
inline ::Client::SemanticVersion* Detection_DetectionOsQuery::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::Client::SemanticVersion;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionOsQuery.version)
  return version_;
}
inline ::Client::SemanticVersion* Detection_DetectionOsQuery::release_version() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionOsQuery.version)
  
  ::Client::SemanticVersion* temp = version_;
  version_ = NULL;
  return temp;
}
inline void Detection_DetectionOsQuery::set_allocated_version(::Client::SemanticVersion* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionOsQuery.version)
}

// uint32 crashDumpFlag = 2;
inline void Detection_DetectionOsQuery::clear_crashdumpflag() {
  crashdumpflag_ = 0u;
}
inline ::google::protobuf::uint32 Detection_DetectionOsQuery::crashdumpflag() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionOsQuery.crashDumpFlag)
  return crashdumpflag_;
}
inline void Detection_DetectionOsQuery::set_crashdumpflag(::google::protobuf::uint32 value) {
  
  crashdumpflag_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionOsQuery.crashDumpFlag)
}

// -------------------------------------------------------------------

// Detection_DetectionHwid_HardwareId

// string name = 1;
inline void Detection_DetectionHwid_HardwareId::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionHwid_HardwareId::name() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionHwid.HardwareId.name)
  return name_.GetNoArena();
}
inline void Detection_DetectionHwid_HardwareId::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionHwid.HardwareId.name)
}
#if LANG_CXX11
inline void Detection_DetectionHwid_HardwareId::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionHwid.HardwareId.name)
}
#endif
inline void Detection_DetectionHwid_HardwareId::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionHwid.HardwareId.name)
}
inline void Detection_DetectionHwid_HardwareId::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionHwid.HardwareId.name)
}
inline ::std::string* Detection_DetectionHwid_HardwareId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionHwid.HardwareId.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionHwid_HardwareId::release_name() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionHwid.HardwareId.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionHwid_HardwareId::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionHwid.HardwareId.name)
}

// bytes value = 2;
inline void Detection_DetectionHwid_HardwareId::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionHwid_HardwareId::value() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionHwid.HardwareId.value)
  return value_.GetNoArena();
}
inline void Detection_DetectionHwid_HardwareId::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionHwid.HardwareId.value)
}
#if LANG_CXX11
inline void Detection_DetectionHwid_HardwareId::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionHwid.HardwareId.value)
}
#endif
inline void Detection_DetectionHwid_HardwareId::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionHwid.HardwareId.value)
}
inline void Detection_DetectionHwid_HardwareId::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionHwid.HardwareId.value)
}
inline ::std::string* Detection_DetectionHwid_HardwareId::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionHwid.HardwareId.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionHwid_HardwareId::release_value() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionHwid.HardwareId.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionHwid_HardwareId::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionHwid.HardwareId.value)
}

// -------------------------------------------------------------------

// Detection_DetectionHwid

// repeated .Client.Detection.DetectionHwid.HardwareId hwids = 1;
inline int Detection_DetectionHwid::hwids_size() const {
  return hwids_.size();
}
inline void Detection_DetectionHwid::clear_hwids() {
  hwids_.Clear();
}
inline const ::Client::Detection_DetectionHwid_HardwareId& Detection_DetectionHwid::hwids(int index) const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionHwid.hwids)
  return hwids_.Get(index);
}
inline ::Client::Detection_DetectionHwid_HardwareId* Detection_DetectionHwid::mutable_hwids(int index) {
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionHwid.hwids)
  return hwids_.Mutable(index);
}
inline ::Client::Detection_DetectionHwid_HardwareId* Detection_DetectionHwid::add_hwids() {
  // @@protoc_insertion_point(field_add:Client.Detection.DetectionHwid.hwids)
  return hwids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Detection_DetectionHwid_HardwareId >*
Detection_DetectionHwid::mutable_hwids() {
  // @@protoc_insertion_point(field_mutable_list:Client.Detection.DetectionHwid.hwids)
  return &hwids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Detection_DetectionHwid_HardwareId >&
Detection_DetectionHwid::hwids() const {
  // @@protoc_insertion_point(field_list:Client.Detection.DetectionHwid.hwids)
  return hwids_;
}

// -------------------------------------------------------------------

// Detection_DetectionSignature

// int64 streamOffset = 1;
inline void Detection_DetectionSignature::clear_streamoffset() {
  streamoffset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionSignature::streamoffset() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionSignature.streamOffset)
  return streamoffset_;
}
inline void Detection_DetectionSignature::set_streamoffset(::google::protobuf::int64 value) {
  
  streamoffset_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionSignature.streamOffset)
}

// int64 imageBase = 2;
inline void Detection_DetectionSignature::clear_imagebase() {
  imagebase_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionSignature::imagebase() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionSignature.imageBase)
  return imagebase_;
}
inline void Detection_DetectionSignature::set_imagebase(::google::protobuf::int64 value) {
  
  imagebase_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionSignature.imageBase)
}

// int64 imageSize = 3;
inline void Detection_DetectionSignature::clear_imagesize() {
  imagesize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionSignature::imagesize() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionSignature.imageSize)
  return imagesize_;
}
inline void Detection_DetectionSignature::set_imagesize(::google::protobuf::int64 value) {
  
  imagesize_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionSignature.imageSize)
}

// string imageName = 4;
inline void Detection_DetectionSignature::clear_imagename() {
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionSignature::imagename() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionSignature.imageName)
  return imagename_.GetNoArena();
}
inline void Detection_DetectionSignature::set_imagename(const ::std::string& value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionSignature.imageName)
}
#if LANG_CXX11
inline void Detection_DetectionSignature::set_imagename(::std::string&& value) {
  
  imagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionSignature.imageName)
}
#endif
inline void Detection_DetectionSignature::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionSignature.imageName)
}
inline void Detection_DetectionSignature::set_imagename(const char* value, size_t size) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionSignature.imageName)
}
inline ::std::string* Detection_DetectionSignature::mutable_imagename() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionSignature.imageName)
  return imagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionSignature::release_imagename() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionSignature.imageName)
  
  return imagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionSignature::set_allocated_imagename(::std::string* imagename) {
  if (imagename != NULL) {
    
  } else {
    
  }
  imagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagename);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionSignature.imageName)
}

// -------------------------------------------------------------------

// Detection_DetectionText

// int64 streamOffset = 1;
inline void Detection_DetectionText::clear_streamoffset() {
  streamoffset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionText::streamoffset() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionText.streamOffset)
  return streamoffset_;
}
inline void Detection_DetectionText::set_streamoffset(::google::protobuf::int64 value) {
  
  streamoffset_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionText.streamOffset)
}

// int64 imageBase = 2;
inline void Detection_DetectionText::clear_imagebase() {
  imagebase_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionText::imagebase() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionText.imageBase)
  return imagebase_;
}
inline void Detection_DetectionText::set_imagebase(::google::protobuf::int64 value) {
  
  imagebase_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionText.imageBase)
}

// int64 imageSize = 3;
inline void Detection_DetectionText::clear_imagesize() {
  imagesize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Detection_DetectionText::imagesize() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionText.imageSize)
  return imagesize_;
}
inline void Detection_DetectionText::set_imagesize(::google::protobuf::int64 value) {
  
  imagesize_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionText.imageSize)
}

// string imageName = 4;
inline void Detection_DetectionText::clear_imagename() {
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionText::imagename() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionText.imageName)
  return imagename_.GetNoArena();
}
inline void Detection_DetectionText::set_imagename(const ::std::string& value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionText.imageName)
}
#if LANG_CXX11
inline void Detection_DetectionText::set_imagename(::std::string&& value) {
  
  imagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionText.imageName)
}
#endif
inline void Detection_DetectionText::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionText.imageName)
}
inline void Detection_DetectionText::set_imagename(const char* value, size_t size) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionText.imageName)
}
inline ::std::string* Detection_DetectionText::mutable_imagename() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionText.imageName)
  return imagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionText::release_imagename() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionText.imageName)
  
  return imagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionText::set_allocated_imagename(::std::string* imagename) {
  if (imagename != NULL) {
    
  } else {
    
  }
  imagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagename);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionText.imageName)
}

// string text = 5;
inline void Detection_DetectionText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionText::text() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionText.text)
  return text_.GetNoArena();
}
inline void Detection_DetectionText::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionText.text)
}
#if LANG_CXX11
inline void Detection_DetectionText::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionText.text)
}
#endif
inline void Detection_DetectionText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionText.text)
}
inline void Detection_DetectionText::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionText.text)
}
inline ::std::string* Detection_DetectionText::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionText::release_text() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionText.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionText.text)
}

// -------------------------------------------------------------------

// Detection_DetectionHook

// .Client.HookType hookType = 1;
inline void Detection_DetectionHook::clear_hooktype() {
  hooktype_ = 0;
}
inline ::Client::HookType Detection_DetectionHook::hooktype() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionHook.hookType)
  return static_cast< ::Client::HookType >(hooktype_);
}
inline void Detection_DetectionHook::set_hooktype(::Client::HookType value) {
  
  hooktype_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionHook.hookType)
}

// -------------------------------------------------------------------

// Detection_DetectionForeignCode

// bool abnormalEntropy = 1;
inline void Detection_DetectionForeignCode::clear_abnormalentropy() {
  abnormalentropy_ = false;
}
inline bool Detection_DetectionForeignCode::abnormalentropy() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionForeignCode.abnormalEntropy)
  return abnormalentropy_;
}
inline void Detection_DetectionForeignCode::set_abnormalentropy(bool value) {
  
  abnormalentropy_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionForeignCode.abnormalEntropy)
}

// string imageName = 2;
inline void Detection_DetectionForeignCode::clear_imagename() {
  imagename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionForeignCode::imagename() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionForeignCode.imageName)
  return imagename_.GetNoArena();
}
inline void Detection_DetectionForeignCode::set_imagename(const ::std::string& value) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionForeignCode.imageName)
}
#if LANG_CXX11
inline void Detection_DetectionForeignCode::set_imagename(::std::string&& value) {
  
  imagename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionForeignCode.imageName)
}
#endif
inline void Detection_DetectionForeignCode::set_imagename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionForeignCode.imageName)
}
inline void Detection_DetectionForeignCode::set_imagename(const char* value, size_t size) {
  
  imagename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionForeignCode.imageName)
}
inline ::std::string* Detection_DetectionForeignCode::mutable_imagename() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionForeignCode.imageName)
  return imagename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionForeignCode::release_imagename() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionForeignCode.imageName)
  
  return imagename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionForeignCode::set_allocated_imagename(::std::string* imagename) {
  if (imagename != NULL) {
    
  } else {
    
  }
  imagename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagename);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionForeignCode.imageName)
}

// bytes imageData = 3;
inline void Detection_DetectionForeignCode::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionForeignCode::imagedata() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionForeignCode.imageData)
  return imagedata_.GetNoArena();
}
inline void Detection_DetectionForeignCode::set_imagedata(const ::std::string& value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionForeignCode.imageData)
}
#if LANG_CXX11
inline void Detection_DetectionForeignCode::set_imagedata(::std::string&& value) {
  
  imagedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionForeignCode.imageData)
}
#endif
inline void Detection_DetectionForeignCode::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionForeignCode.imageData)
}
inline void Detection_DetectionForeignCode::set_imagedata(const void* value, size_t size) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionForeignCode.imageData)
}
inline ::std::string* Detection_DetectionForeignCode::mutable_imagedata() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionForeignCode.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionForeignCode::release_imagedata() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionForeignCode.imageData)
  
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionForeignCode::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    
  } else {
    
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionForeignCode.imageData)
}

// -------------------------------------------------------------------

// Detection_DetectionScreenshot

// bytes data = 1;
inline void Detection_DetectionScreenshot::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionScreenshot::data() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionScreenshot.data)
  return data_.GetNoArena();
}
inline void Detection_DetectionScreenshot::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionScreenshot.data)
}
#if LANG_CXX11
inline void Detection_DetectionScreenshot::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionScreenshot.data)
}
#endif
inline void Detection_DetectionScreenshot::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionScreenshot.data)
}
inline void Detection_DetectionScreenshot::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionScreenshot.data)
}
inline ::std::string* Detection_DetectionScreenshot::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionScreenshot.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionScreenshot::release_data() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionScreenshot.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionScreenshot::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionScreenshot.data)
}

// .Client.ScreenshotSourceType sourceType = 2;
inline void Detection_DetectionScreenshot::clear_sourcetype() {
  sourcetype_ = 0;
}
inline ::Client::ScreenshotSourceType Detection_DetectionScreenshot::sourcetype() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionScreenshot.sourceType)
  return static_cast< ::Client::ScreenshotSourceType >(sourcetype_);
}
inline void Detection_DetectionScreenshot::set_sourcetype(::Client::ScreenshotSourceType value) {
  
  sourcetype_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionScreenshot.sourceType)
}

// -------------------------------------------------------------------

// Detection_DetectionCodeIntegrity

// -------------------------------------------------------------------

// Detection_DetectionHeartbeatTimeout

// -------------------------------------------------------------------

// Detection_DetectionLoadtest

// bytes imageData = 1;
inline void Detection_DetectionLoadtest::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detection_DetectionLoadtest::imagedata() const {
  // @@protoc_insertion_point(field_get:Client.Detection.DetectionLoadtest.imageData)
  return imagedata_.GetNoArena();
}
inline void Detection_DetectionLoadtest::set_imagedata(const ::std::string& value) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.Detection.DetectionLoadtest.imageData)
}
#if LANG_CXX11
inline void Detection_DetectionLoadtest::set_imagedata(::std::string&& value) {
  
  imagedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.Detection.DetectionLoadtest.imageData)
}
#endif
inline void Detection_DetectionLoadtest::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.Detection.DetectionLoadtest.imageData)
}
inline void Detection_DetectionLoadtest::set_imagedata(const void* value, size_t size) {
  
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.Detection.DetectionLoadtest.imageData)
}
inline ::std::string* Detection_DetectionLoadtest::mutable_imagedata() {
  
  // @@protoc_insertion_point(field_mutable:Client.Detection.DetectionLoadtest.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detection_DetectionLoadtest::release_imagedata() {
  // @@protoc_insertion_point(field_release:Client.Detection.DetectionLoadtest.imageData)
  
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detection_DetectionLoadtest::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    
  } else {
    
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.DetectionLoadtest.imageData)
}

// -------------------------------------------------------------------

// Detection

// uint64 code = 1;
inline void Detection::clear_code() {
  code_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Detection::code() const {
  // @@protoc_insertion_point(field_get:Client.Detection.code)
  return code_;
}
inline void Detection::set_code(::google::protobuf::uint64 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:Client.Detection.code)
}

// .Client.Detection.DetectionCanary canary = 2;
inline bool Detection::has_canary() const {
  return contents_case() == kCanary;
}
inline void Detection::set_has_canary() {
  _oneof_case_[0] = kCanary;
}
inline void Detection::clear_canary() {
  if (has_canary()) {
    delete contents_.canary_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionCanary& Detection::canary() const {
  // @@protoc_insertion_point(field_get:Client.Detection.canary)
  return has_canary()
      ? *contents_.canary_
      : ::Client::Detection_DetectionCanary::default_instance();
}
inline ::Client::Detection_DetectionCanary* Detection::mutable_canary() {
  if (!has_canary()) {
    clear_contents();
    set_has_canary();
    contents_.canary_ = new ::Client::Detection_DetectionCanary;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.canary)
  return contents_.canary_;
}
inline ::Client::Detection_DetectionCanary* Detection::release_canary() {
  // @@protoc_insertion_point(field_release:Client.Detection.canary)
  if (has_canary()) {
    clear_has_contents();
    ::Client::Detection_DetectionCanary* temp = contents_.canary_;
    contents_.canary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_canary(::Client::Detection_DetectionCanary* canary) {
  clear_contents();
  if (canary) {
    set_has_canary();
    contents_.canary_ = canary;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.canary)
}

// .Client.Detection.DetectionSignature signature = 3;
inline bool Detection::has_signature() const {
  return contents_case() == kSignature;
}
inline void Detection::set_has_signature() {
  _oneof_case_[0] = kSignature;
}
inline void Detection::clear_signature() {
  if (has_signature()) {
    delete contents_.signature_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionSignature& Detection::signature() const {
  // @@protoc_insertion_point(field_get:Client.Detection.signature)
  return has_signature()
      ? *contents_.signature_
      : ::Client::Detection_DetectionSignature::default_instance();
}
inline ::Client::Detection_DetectionSignature* Detection::mutable_signature() {
  if (!has_signature()) {
    clear_contents();
    set_has_signature();
    contents_.signature_ = new ::Client::Detection_DetectionSignature;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.signature)
  return contents_.signature_;
}
inline ::Client::Detection_DetectionSignature* Detection::release_signature() {
  // @@protoc_insertion_point(field_release:Client.Detection.signature)
  if (has_signature()) {
    clear_has_contents();
    ::Client::Detection_DetectionSignature* temp = contents_.signature_;
    contents_.signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_signature(::Client::Detection_DetectionSignature* signature) {
  clear_contents();
  if (signature) {
    set_has_signature();
    contents_.signature_ = signature;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.signature)
}

// .Client.Detection.DetectionHook hook = 4;
inline bool Detection::has_hook() const {
  return contents_case() == kHook;
}
inline void Detection::set_has_hook() {
  _oneof_case_[0] = kHook;
}
inline void Detection::clear_hook() {
  if (has_hook()) {
    delete contents_.hook_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionHook& Detection::hook() const {
  // @@protoc_insertion_point(field_get:Client.Detection.hook)
  return has_hook()
      ? *contents_.hook_
      : ::Client::Detection_DetectionHook::default_instance();
}
inline ::Client::Detection_DetectionHook* Detection::mutable_hook() {
  if (!has_hook()) {
    clear_contents();
    set_has_hook();
    contents_.hook_ = new ::Client::Detection_DetectionHook;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.hook)
  return contents_.hook_;
}
inline ::Client::Detection_DetectionHook* Detection::release_hook() {
  // @@protoc_insertion_point(field_release:Client.Detection.hook)
  if (has_hook()) {
    clear_has_contents();
    ::Client::Detection_DetectionHook* temp = contents_.hook_;
    contents_.hook_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_hook(::Client::Detection_DetectionHook* hook) {
  clear_contents();
  if (hook) {
    set_has_hook();
    contents_.hook_ = hook;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.hook)
}

// .Client.Detection.DetectionHeartbeatTimeout heartbeatTimeout = 5;
inline bool Detection::has_heartbeattimeout() const {
  return contents_case() == kHeartbeatTimeout;
}
inline void Detection::set_has_heartbeattimeout() {
  _oneof_case_[0] = kHeartbeatTimeout;
}
inline void Detection::clear_heartbeattimeout() {
  if (has_heartbeattimeout()) {
    delete contents_.heartbeattimeout_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionHeartbeatTimeout& Detection::heartbeattimeout() const {
  // @@protoc_insertion_point(field_get:Client.Detection.heartbeatTimeout)
  return has_heartbeattimeout()
      ? *contents_.heartbeattimeout_
      : ::Client::Detection_DetectionHeartbeatTimeout::default_instance();
}
inline ::Client::Detection_DetectionHeartbeatTimeout* Detection::mutable_heartbeattimeout() {
  if (!has_heartbeattimeout()) {
    clear_contents();
    set_has_heartbeattimeout();
    contents_.heartbeattimeout_ = new ::Client::Detection_DetectionHeartbeatTimeout;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.heartbeatTimeout)
  return contents_.heartbeattimeout_;
}
inline ::Client::Detection_DetectionHeartbeatTimeout* Detection::release_heartbeattimeout() {
  // @@protoc_insertion_point(field_release:Client.Detection.heartbeatTimeout)
  if (has_heartbeattimeout()) {
    clear_has_contents();
    ::Client::Detection_DetectionHeartbeatTimeout* temp = contents_.heartbeattimeout_;
    contents_.heartbeattimeout_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_heartbeattimeout(::Client::Detection_DetectionHeartbeatTimeout* heartbeattimeout) {
  clear_contents();
  if (heartbeattimeout) {
    set_has_heartbeattimeout();
    contents_.heartbeattimeout_ = heartbeattimeout;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.heartbeatTimeout)
}

// .Client.Detection.DetectionForeignCode foreignCode = 6;
inline bool Detection::has_foreigncode() const {
  return contents_case() == kForeignCode;
}
inline void Detection::set_has_foreigncode() {
  _oneof_case_[0] = kForeignCode;
}
inline void Detection::clear_foreigncode() {
  if (has_foreigncode()) {
    delete contents_.foreigncode_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionForeignCode& Detection::foreigncode() const {
  // @@protoc_insertion_point(field_get:Client.Detection.foreignCode)
  return has_foreigncode()
      ? *contents_.foreigncode_
      : ::Client::Detection_DetectionForeignCode::default_instance();
}
inline ::Client::Detection_DetectionForeignCode* Detection::mutable_foreigncode() {
  if (!has_foreigncode()) {
    clear_contents();
    set_has_foreigncode();
    contents_.foreigncode_ = new ::Client::Detection_DetectionForeignCode;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.foreignCode)
  return contents_.foreigncode_;
}
inline ::Client::Detection_DetectionForeignCode* Detection::release_foreigncode() {
  // @@protoc_insertion_point(field_release:Client.Detection.foreignCode)
  if (has_foreigncode()) {
    clear_has_contents();
    ::Client::Detection_DetectionForeignCode* temp = contents_.foreigncode_;
    contents_.foreigncode_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_foreigncode(::Client::Detection_DetectionForeignCode* foreigncode) {
  clear_contents();
  if (foreigncode) {
    set_has_foreigncode();
    contents_.foreigncode_ = foreigncode;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.foreignCode)
}

// .Client.Detection.DetectionScreenshot screenshot = 7;
inline bool Detection::has_screenshot() const {
  return contents_case() == kScreenshot;
}
inline void Detection::set_has_screenshot() {
  _oneof_case_[0] = kScreenshot;
}
inline void Detection::clear_screenshot() {
  if (has_screenshot()) {
    delete contents_.screenshot_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionScreenshot& Detection::screenshot() const {
  // @@protoc_insertion_point(field_get:Client.Detection.screenshot)
  return has_screenshot()
      ? *contents_.screenshot_
      : ::Client::Detection_DetectionScreenshot::default_instance();
}
inline ::Client::Detection_DetectionScreenshot* Detection::mutable_screenshot() {
  if (!has_screenshot()) {
    clear_contents();
    set_has_screenshot();
    contents_.screenshot_ = new ::Client::Detection_DetectionScreenshot;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.screenshot)
  return contents_.screenshot_;
}
inline ::Client::Detection_DetectionScreenshot* Detection::release_screenshot() {
  // @@protoc_insertion_point(field_release:Client.Detection.screenshot)
  if (has_screenshot()) {
    clear_has_contents();
    ::Client::Detection_DetectionScreenshot* temp = contents_.screenshot_;
    contents_.screenshot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_screenshot(::Client::Detection_DetectionScreenshot* screenshot) {
  clear_contents();
  if (screenshot) {
    set_has_screenshot();
    contents_.screenshot_ = screenshot;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.screenshot)
}

// .Client.Detection.DetectionCodeIntegrity codeIntegrity = 8;
inline bool Detection::has_codeintegrity() const {
  return contents_case() == kCodeIntegrity;
}
inline void Detection::set_has_codeintegrity() {
  _oneof_case_[0] = kCodeIntegrity;
}
inline void Detection::clear_codeintegrity() {
  if (has_codeintegrity()) {
    delete contents_.codeintegrity_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionCodeIntegrity& Detection::codeintegrity() const {
  // @@protoc_insertion_point(field_get:Client.Detection.codeIntegrity)
  return has_codeintegrity()
      ? *contents_.codeintegrity_
      : ::Client::Detection_DetectionCodeIntegrity::default_instance();
}
inline ::Client::Detection_DetectionCodeIntegrity* Detection::mutable_codeintegrity() {
  if (!has_codeintegrity()) {
    clear_contents();
    set_has_codeintegrity();
    contents_.codeintegrity_ = new ::Client::Detection_DetectionCodeIntegrity;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.codeIntegrity)
  return contents_.codeintegrity_;
}
inline ::Client::Detection_DetectionCodeIntegrity* Detection::release_codeintegrity() {
  // @@protoc_insertion_point(field_release:Client.Detection.codeIntegrity)
  if (has_codeintegrity()) {
    clear_has_contents();
    ::Client::Detection_DetectionCodeIntegrity* temp = contents_.codeintegrity_;
    contents_.codeintegrity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_codeintegrity(::Client::Detection_DetectionCodeIntegrity* codeintegrity) {
  clear_contents();
  if (codeintegrity) {
    set_has_codeintegrity();
    contents_.codeintegrity_ = codeintegrity;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.codeIntegrity)
}

// .Client.Detection.DetectionDebugger debugger = 9;
inline bool Detection::has_debugger() const {
  return contents_case() == kDebugger;
}
inline void Detection::set_has_debugger() {
  _oneof_case_[0] = kDebugger;
}
inline void Detection::clear_debugger() {
  if (has_debugger()) {
    delete contents_.debugger_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionDebugger& Detection::debugger() const {
  // @@protoc_insertion_point(field_get:Client.Detection.debugger)
  return has_debugger()
      ? *contents_.debugger_
      : ::Client::Detection_DetectionDebugger::default_instance();
}
inline ::Client::Detection_DetectionDebugger* Detection::mutable_debugger() {
  if (!has_debugger()) {
    clear_contents();
    set_has_debugger();
    contents_.debugger_ = new ::Client::Detection_DetectionDebugger;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.debugger)
  return contents_.debugger_;
}
inline ::Client::Detection_DetectionDebugger* Detection::release_debugger() {
  // @@protoc_insertion_point(field_release:Client.Detection.debugger)
  if (has_debugger()) {
    clear_has_contents();
    ::Client::Detection_DetectionDebugger* temp = contents_.debugger_;
    contents_.debugger_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_debugger(::Client::Detection_DetectionDebugger* debugger) {
  clear_contents();
  if (debugger) {
    set_has_debugger();
    contents_.debugger_ = debugger;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.debugger)
}

// .Client.Detection.DetectionHypervisor hypervisor = 10;
inline bool Detection::has_hypervisor() const {
  return contents_case() == kHypervisor;
}
inline void Detection::set_has_hypervisor() {
  _oneof_case_[0] = kHypervisor;
}
inline void Detection::clear_hypervisor() {
  if (has_hypervisor()) {
    delete contents_.hypervisor_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionHypervisor& Detection::hypervisor() const {
  // @@protoc_insertion_point(field_get:Client.Detection.hypervisor)
  return has_hypervisor()
      ? *contents_.hypervisor_
      : ::Client::Detection_DetectionHypervisor::default_instance();
}
inline ::Client::Detection_DetectionHypervisor* Detection::mutable_hypervisor() {
  if (!has_hypervisor()) {
    clear_contents();
    set_has_hypervisor();
    contents_.hypervisor_ = new ::Client::Detection_DetectionHypervisor;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.hypervisor)
  return contents_.hypervisor_;
}
inline ::Client::Detection_DetectionHypervisor* Detection::release_hypervisor() {
  // @@protoc_insertion_point(field_release:Client.Detection.hypervisor)
  if (has_hypervisor()) {
    clear_has_contents();
    ::Client::Detection_DetectionHypervisor* temp = contents_.hypervisor_;
    contents_.hypervisor_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_hypervisor(::Client::Detection_DetectionHypervisor* hypervisor) {
  clear_contents();
  if (hypervisor) {
    set_has_hypervisor();
    contents_.hypervisor_ = hypervisor;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.hypervisor)
}

// .Client.Detection.DetectionOsQuery osQuery = 11;
inline bool Detection::has_osquery() const {
  return contents_case() == kOsQuery;
}
inline void Detection::set_has_osquery() {
  _oneof_case_[0] = kOsQuery;
}
inline void Detection::clear_osquery() {
  if (has_osquery()) {
    delete contents_.osquery_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionOsQuery& Detection::osquery() const {
  // @@protoc_insertion_point(field_get:Client.Detection.osQuery)
  return has_osquery()
      ? *contents_.osquery_
      : ::Client::Detection_DetectionOsQuery::default_instance();
}
inline ::Client::Detection_DetectionOsQuery* Detection::mutable_osquery() {
  if (!has_osquery()) {
    clear_contents();
    set_has_osquery();
    contents_.osquery_ = new ::Client::Detection_DetectionOsQuery;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.osQuery)
  return contents_.osquery_;
}
inline ::Client::Detection_DetectionOsQuery* Detection::release_osquery() {
  // @@protoc_insertion_point(field_release:Client.Detection.osQuery)
  if (has_osquery()) {
    clear_has_contents();
    ::Client::Detection_DetectionOsQuery* temp = contents_.osquery_;
    contents_.osquery_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_osquery(::Client::Detection_DetectionOsQuery* osquery) {
  clear_contents();
  if (osquery) {
    set_has_osquery();
    contents_.osquery_ = osquery;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.osQuery)
}

// .Client.Detection.DetectionHwid hwid = 12;
inline bool Detection::has_hwid() const {
  return contents_case() == kHwid;
}
inline void Detection::set_has_hwid() {
  _oneof_case_[0] = kHwid;
}
inline void Detection::clear_hwid() {
  if (has_hwid()) {
    delete contents_.hwid_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionHwid& Detection::hwid() const {
  // @@protoc_insertion_point(field_get:Client.Detection.hwid)
  return has_hwid()
      ? *contents_.hwid_
      : ::Client::Detection_DetectionHwid::default_instance();
}
inline ::Client::Detection_DetectionHwid* Detection::mutable_hwid() {
  if (!has_hwid()) {
    clear_contents();
    set_has_hwid();
    contents_.hwid_ = new ::Client::Detection_DetectionHwid;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.hwid)
  return contents_.hwid_;
}
inline ::Client::Detection_DetectionHwid* Detection::release_hwid() {
  // @@protoc_insertion_point(field_release:Client.Detection.hwid)
  if (has_hwid()) {
    clear_has_contents();
    ::Client::Detection_DetectionHwid* temp = contents_.hwid_;
    contents_.hwid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_hwid(::Client::Detection_DetectionHwid* hwid) {
  clear_contents();
  if (hwid) {
    set_has_hwid();
    contents_.hwid_ = hwid;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.hwid)
}

// .Client.Detection.DetectionText text = 13;
inline bool Detection::has_text() const {
  return contents_case() == kText;
}
inline void Detection::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void Detection::clear_text() {
  if (has_text()) {
    delete contents_.text_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionText& Detection::text() const {
  // @@protoc_insertion_point(field_get:Client.Detection.text)
  return has_text()
      ? *contents_.text_
      : ::Client::Detection_DetectionText::default_instance();
}
inline ::Client::Detection_DetectionText* Detection::mutable_text() {
  if (!has_text()) {
    clear_contents();
    set_has_text();
    contents_.text_ = new ::Client::Detection_DetectionText;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.text)
  return contents_.text_;
}
inline ::Client::Detection_DetectionText* Detection::release_text() {
  // @@protoc_insertion_point(field_release:Client.Detection.text)
  if (has_text()) {
    clear_has_contents();
    ::Client::Detection_DetectionText* temp = contents_.text_;
    contents_.text_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_text(::Client::Detection_DetectionText* text) {
  clear_contents();
  if (text) {
    set_has_text();
    contents_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.text)
}

// .Client.Detection.DetectionLoadtest loadTest = 14;
inline bool Detection::has_loadtest() const {
  return contents_case() == kLoadTest;
}
inline void Detection::set_has_loadtest() {
  _oneof_case_[0] = kLoadTest;
}
inline void Detection::clear_loadtest() {
  if (has_loadtest()) {
    delete contents_.loadtest_;
    clear_has_contents();
  }
}
inline  const ::Client::Detection_DetectionLoadtest& Detection::loadtest() const {
  // @@protoc_insertion_point(field_get:Client.Detection.loadTest)
  return has_loadtest()
      ? *contents_.loadtest_
      : ::Client::Detection_DetectionLoadtest::default_instance();
}
inline ::Client::Detection_DetectionLoadtest* Detection::mutable_loadtest() {
  if (!has_loadtest()) {
    clear_contents();
    set_has_loadtest();
    contents_.loadtest_ = new ::Client::Detection_DetectionLoadtest;
  }
  // @@protoc_insertion_point(field_mutable:Client.Detection.loadTest)
  return contents_.loadtest_;
}
inline ::Client::Detection_DetectionLoadtest* Detection::release_loadtest() {
  // @@protoc_insertion_point(field_release:Client.Detection.loadTest)
  if (has_loadtest()) {
    clear_has_contents();
    ::Client::Detection_DetectionLoadtest* temp = contents_.loadtest_;
    contents_.loadtest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Detection::set_allocated_loadtest(::Client::Detection_DetectionLoadtest* loadtest) {
  clear_contents();
  if (loadtest) {
    set_has_loadtest();
    contents_.loadtest_ = loadtest;
  }
  // @@protoc_insertion_point(field_set_allocated:Client.Detection.loadTest)
}

inline bool Detection::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void Detection::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline Detection::ContentsCase Detection::contents_case() const {
  return Detection::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtensionRequestMessage

// string extensionVersion = 1;
inline void ExtensionRequestMessage::clear_extensionversion() {
  extensionversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExtensionRequestMessage::extensionversion() const {
  // @@protoc_insertion_point(field_get:Client.ExtensionRequestMessage.extensionVersion)
  return extensionversion_.GetNoArena();
}
inline void ExtensionRequestMessage::set_extensionversion(const ::std::string& value) {
  
  extensionversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.ExtensionRequestMessage.extensionVersion)
}
#if LANG_CXX11
inline void ExtensionRequestMessage::set_extensionversion(::std::string&& value) {
  
  extensionversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.ExtensionRequestMessage.extensionVersion)
}
#endif
inline void ExtensionRequestMessage::set_extensionversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extensionversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.ExtensionRequestMessage.extensionVersion)
}
inline void ExtensionRequestMessage::set_extensionversion(const char* value, size_t size) {
  
  extensionversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.ExtensionRequestMessage.extensionVersion)
}
inline ::std::string* ExtensionRequestMessage::mutable_extensionversion() {
  
  // @@protoc_insertion_point(field_mutable:Client.ExtensionRequestMessage.extensionVersion)
  return extensionversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtensionRequestMessage::release_extensionversion() {
  // @@protoc_insertion_point(field_release:Client.ExtensionRequestMessage.extensionVersion)
  
  return extensionversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionRequestMessage::set_allocated_extensionversion(::std::string* extensionversion) {
  if (extensionversion != NULL) {
    
  } else {
    
  }
  extensionversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensionversion);
  // @@protoc_insertion_point(field_set_allocated:Client.ExtensionRequestMessage.extensionVersion)
}

// repeated .Client.Heartbeat heartbeats = 2;
inline int ExtensionRequestMessage::heartbeats_size() const {
  return heartbeats_.size();
}
inline void ExtensionRequestMessage::clear_heartbeats() {
  heartbeats_.Clear();
}
inline const ::Client::Heartbeat& ExtensionRequestMessage::heartbeats(int index) const {
  // @@protoc_insertion_point(field_get:Client.ExtensionRequestMessage.heartbeats)
  return heartbeats_.Get(index);
}
inline ::Client::Heartbeat* ExtensionRequestMessage::mutable_heartbeats(int index) {
  // @@protoc_insertion_point(field_mutable:Client.ExtensionRequestMessage.heartbeats)
  return heartbeats_.Mutable(index);
}
inline ::Client::Heartbeat* ExtensionRequestMessage::add_heartbeats() {
  // @@protoc_insertion_point(field_add:Client.ExtensionRequestMessage.heartbeats)
  return heartbeats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >*
ExtensionRequestMessage::mutable_heartbeats() {
  // @@protoc_insertion_point(field_mutable_list:Client.ExtensionRequestMessage.heartbeats)
  return &heartbeats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >&
ExtensionRequestMessage::heartbeats() const {
  // @@protoc_insertion_point(field_list:Client.ExtensionRequestMessage.heartbeats)
  return heartbeats_;
}

// repeated .Client.Diagnostic diagnostics = 3;
inline int ExtensionRequestMessage::diagnostics_size() const {
  return diagnostics_.size();
}
inline void ExtensionRequestMessage::clear_diagnostics() {
  diagnostics_.Clear();
}
inline const ::Client::Diagnostic& ExtensionRequestMessage::diagnostics(int index) const {
  // @@protoc_insertion_point(field_get:Client.ExtensionRequestMessage.diagnostics)
  return diagnostics_.Get(index);
}
inline ::Client::Diagnostic* ExtensionRequestMessage::mutable_diagnostics(int index) {
  // @@protoc_insertion_point(field_mutable:Client.ExtensionRequestMessage.diagnostics)
  return diagnostics_.Mutable(index);
}
inline ::Client::Diagnostic* ExtensionRequestMessage::add_diagnostics() {
  // @@protoc_insertion_point(field_add:Client.ExtensionRequestMessage.diagnostics)
  return diagnostics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >*
ExtensionRequestMessage::mutable_diagnostics() {
  // @@protoc_insertion_point(field_mutable_list:Client.ExtensionRequestMessage.diagnostics)
  return &diagnostics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >&
ExtensionRequestMessage::diagnostics() const {
  // @@protoc_insertion_point(field_list:Client.ExtensionRequestMessage.diagnostics)
  return diagnostics_;
}

// -------------------------------------------------------------------

// ModuleRequestMessage

// string moduleVersion = 1;
inline void ModuleRequestMessage::clear_moduleversion() {
  moduleversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModuleRequestMessage::moduleversion() const {
  // @@protoc_insertion_point(field_get:Client.ModuleRequestMessage.moduleVersion)
  return moduleversion_.GetNoArena();
}
inline void ModuleRequestMessage::set_moduleversion(const ::std::string& value) {
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.ModuleRequestMessage.moduleVersion)
}
#if LANG_CXX11
inline void ModuleRequestMessage::set_moduleversion(::std::string&& value) {
  
  moduleversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.ModuleRequestMessage.moduleVersion)
}
#endif
inline void ModuleRequestMessage::set_moduleversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.ModuleRequestMessage.moduleVersion)
}
inline void ModuleRequestMessage::set_moduleversion(const char* value, size_t size) {
  
  moduleversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.ModuleRequestMessage.moduleVersion)
}
inline ::std::string* ModuleRequestMessage::mutable_moduleversion() {
  
  // @@protoc_insertion_point(field_mutable:Client.ModuleRequestMessage.moduleVersion)
  return moduleversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleRequestMessage::release_moduleversion() {
  // @@protoc_insertion_point(field_release:Client.ModuleRequestMessage.moduleVersion)
  
  return moduleversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleRequestMessage::set_allocated_moduleversion(::std::string* moduleversion) {
  if (moduleversion != NULL) {
    
  } else {
    
  }
  moduleversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleversion);
  // @@protoc_insertion_point(field_set_allocated:Client.ModuleRequestMessage.moduleVersion)
}

// repeated .Client.Heartbeat heartbeats = 2;
inline int ModuleRequestMessage::heartbeats_size() const {
  return heartbeats_.size();
}
inline void ModuleRequestMessage::clear_heartbeats() {
  heartbeats_.Clear();
}
inline const ::Client::Heartbeat& ModuleRequestMessage::heartbeats(int index) const {
  // @@protoc_insertion_point(field_get:Client.ModuleRequestMessage.heartbeats)
  return heartbeats_.Get(index);
}
inline ::Client::Heartbeat* ModuleRequestMessage::mutable_heartbeats(int index) {
  // @@protoc_insertion_point(field_mutable:Client.ModuleRequestMessage.heartbeats)
  return heartbeats_.Mutable(index);
}
inline ::Client::Heartbeat* ModuleRequestMessage::add_heartbeats() {
  // @@protoc_insertion_point(field_add:Client.ModuleRequestMessage.heartbeats)
  return heartbeats_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >*
ModuleRequestMessage::mutable_heartbeats() {
  // @@protoc_insertion_point(field_mutable_list:Client.ModuleRequestMessage.heartbeats)
  return &heartbeats_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Heartbeat >&
ModuleRequestMessage::heartbeats() const {
  // @@protoc_insertion_point(field_list:Client.ModuleRequestMessage.heartbeats)
  return heartbeats_;
}

// repeated .Client.Detection detections = 3;
inline int ModuleRequestMessage::detections_size() const {
  return detections_.size();
}
inline void ModuleRequestMessage::clear_detections() {
  detections_.Clear();
}
inline const ::Client::Detection& ModuleRequestMessage::detections(int index) const {
  // @@protoc_insertion_point(field_get:Client.ModuleRequestMessage.detections)
  return detections_.Get(index);
}
inline ::Client::Detection* ModuleRequestMessage::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:Client.ModuleRequestMessage.detections)
  return detections_.Mutable(index);
}
inline ::Client::Detection* ModuleRequestMessage::add_detections() {
  // @@protoc_insertion_point(field_add:Client.ModuleRequestMessage.detections)
  return detections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Detection >*
ModuleRequestMessage::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:Client.ModuleRequestMessage.detections)
  return &detections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Detection >&
ModuleRequestMessage::detections() const {
  // @@protoc_insertion_point(field_list:Client.ModuleRequestMessage.detections)
  return detections_;
}

// repeated .Client.Diagnostic diagnostics = 4;
inline int ModuleRequestMessage::diagnostics_size() const {
  return diagnostics_.size();
}
inline void ModuleRequestMessage::clear_diagnostics() {
  diagnostics_.Clear();
}
inline const ::Client::Diagnostic& ModuleRequestMessage::diagnostics(int index) const {
  // @@protoc_insertion_point(field_get:Client.ModuleRequestMessage.diagnostics)
  return diagnostics_.Get(index);
}
inline ::Client::Diagnostic* ModuleRequestMessage::mutable_diagnostics(int index) {
  // @@protoc_insertion_point(field_mutable:Client.ModuleRequestMessage.diagnostics)
  return diagnostics_.Mutable(index);
}
inline ::Client::Diagnostic* ModuleRequestMessage::add_diagnostics() {
  // @@protoc_insertion_point(field_add:Client.ModuleRequestMessage.diagnostics)
  return diagnostics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >*
ModuleRequestMessage::mutable_diagnostics() {
  // @@protoc_insertion_point(field_mutable_list:Client.ModuleRequestMessage.diagnostics)
  return &diagnostics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Client::Diagnostic >&
ModuleRequestMessage::diagnostics() const {
  // @@protoc_insertion_point(field_list:Client.ModuleRequestMessage.diagnostics)
  return diagnostics_;
}

// -------------------------------------------------------------------

// ClientRequest

// .Client.ExtensionRequestMessage extensionMessage = 1;
inline bool ClientRequest::has_extensionmessage() const {
  return this != internal_default_instance() && extensionmessage_ != NULL;
}
inline void ClientRequest::clear_extensionmessage() {
  if (GetArenaNoVirtual() == NULL && extensionmessage_ != NULL) delete extensionmessage_;
  extensionmessage_ = NULL;
}
inline const ::Client::ExtensionRequestMessage& ClientRequest::extensionmessage() const {
  const ::Client::ExtensionRequestMessage* p = extensionmessage_;
  // @@protoc_insertion_point(field_get:Client.ClientRequest.extensionMessage)
  return p != NULL ? *p : *reinterpret_cast<const ::Client::ExtensionRequestMessage*>(
      &::Client::_ExtensionRequestMessage_default_instance_);
}
inline ::Client::ExtensionRequestMessage* ClientRequest::mutable_extensionmessage() {
  
  if (extensionmessage_ == NULL) {
    extensionmessage_ = new ::Client::ExtensionRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:Client.ClientRequest.extensionMessage)
  return extensionmessage_;
}
inline ::Client::ExtensionRequestMessage* ClientRequest::release_extensionmessage() {
  // @@protoc_insertion_point(field_release:Client.ClientRequest.extensionMessage)
  
  ::Client::ExtensionRequestMessage* temp = extensionmessage_;
  extensionmessage_ = NULL;
  return temp;
}
inline void ClientRequest::set_allocated_extensionmessage(::Client::ExtensionRequestMessage* extensionmessage) {
  delete extensionmessage_;
  extensionmessage_ = extensionmessage;
  if (extensionmessage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Client.ClientRequest.extensionMessage)
}

// bytes moduleMessage = 2;
inline void ClientRequest::clear_modulemessage() {
  modulemessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequest::modulemessage() const {
  // @@protoc_insertion_point(field_get:Client.ClientRequest.moduleMessage)
  return modulemessage_.GetNoArena();
}
inline void ClientRequest::set_modulemessage(const ::std::string& value) {
  
  modulemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Client.ClientRequest.moduleMessage)
}
#if LANG_CXX11
inline void ClientRequest::set_modulemessage(::std::string&& value) {
  
  modulemessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Client.ClientRequest.moduleMessage)
}
#endif
inline void ClientRequest::set_modulemessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modulemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Client.ClientRequest.moduleMessage)
}
inline void ClientRequest::set_modulemessage(const void* value, size_t size) {
  
  modulemessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Client.ClientRequest.moduleMessage)
}
inline ::std::string* ClientRequest::mutable_modulemessage() {
  
  // @@protoc_insertion_point(field_mutable:Client.ClientRequest.moduleMessage)
  return modulemessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequest::release_modulemessage() {
  // @@protoc_insertion_point(field_release:Client.ClientRequest.moduleMessage)
  
  return modulemessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequest::set_allocated_modulemessage(::std::string* modulemessage) {
  if (modulemessage != NULL) {
    
  } else {
    
  }
  modulemessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulemessage);
  // @@protoc_insertion_point(field_set_allocated:Client.ClientRequest.moduleMessage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Client

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Client::HookType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client::HookType>() {
  return ::Client::HookType_descriptor();
}
template <> struct is_proto_enum< ::Client::ScreenshotSourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Client::ScreenshotSourceType>() {
  return ::Client::ScreenshotSourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Client_2eproto__INCLUDED
