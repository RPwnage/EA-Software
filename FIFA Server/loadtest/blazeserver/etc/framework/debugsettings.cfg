
debugSettingsConfig = {
    // must be set to true for any of the debug commands to be functional
    // THIS SHOULD ALWAYS BE SET TO false IN PRODUCTION!
    debugEnabled = false

    // Defines if the configured error code override is done before executing the RPC command.
    // If true and the override value (based on the config below) is not ERR_OK,
    // then the RPC command will not be executed.
    overrideBeforeExecution = false

    // defines a delay/nodelay rate = this many rpcs will proceed without delay and then 1 will have the delay, etc..
    // a number 1 will give you 1 with no delay and 1 with, a number 2 would give you 2 without delay and 1 with, etc.
    // a number 0 will force delayPerCommand for every command
    delayIgnoreRate = 0

    // Add an artificial delay to each command for debugging the client
    delayPerCommand = "50ms"

    // Defines a rate of returning the original code and the overridden error code
    // For example:
    //     0 means override with a given error code every time and ignore the original error code
    //     1 means 1 will return the original code and 1 will be overridden with a given error code
    //     3 means 3 will return the original code and 1 will be overridden with a given error code, etc
    errorSuccessRate = 0

    // This error code will be used for overriding original error code in every single
    // slave rpc command unless a specific command is overwritten in the overrides section below
    // The integer value of ERR_OK is 0 so setting forceError = 0 will return the original error code
    // even when errors are forced.
    forceError = 0

    // errorOverrides can be used to force specific RPCs to fail with a
    // given error code which will override the global error code specified in forceError.
    // Note that when errors are not overridden, the RPCs actually operate normally,
    // but merely return the original error code.
    // Example:
    // #define ERR_OK 0
    // #define ERR_SYSTEM 65536
    // authentication = {
    //      createAccount            = #ERR_OK#
    //      ...
    // }
    errorOverrides = {

    }

    // delayOverrides can be used to force specific RPCs to delay for the
    // specified amount of time.
    // Note that when delays are forced, the RPCs actually operate normally,
    // but merely add the specified delay.
    // Example:
    // authentication = {
    //      createAccount            = 0
    //      ...
    // }
    delayOverrides = {

    }

}
