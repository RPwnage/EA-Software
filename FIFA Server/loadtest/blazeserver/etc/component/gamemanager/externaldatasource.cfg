externalDataSourceConfig = {

#if (PLATFORM == "pc")
	componentConfigMap = {
		"shieldClientChallenge" = {
			component = "heatshield"
			command = "clientChallengeMatchmaking"
			requestAttributes = {
				"ClientChallengeMatchmakingRequest.gameTypeName" = { attrName = "GAME_MODE" }
			}
		}
	}
#endif

    //apiConfigMap = {
    //    "friends_getFriendsListPersona" = {
    //        externalDataSource = "friends"
    //        url = "/friends/2/personas/$personaId/friends?fields=personaId"
    //        urlPathParameters = {
    //            "$personaId" = { name = "blazeId", defaultValue = "$BLAZEID" }
    //        }
    //        headers = {
    //            "Authorization" = { defaultValue = "$S2S_ACCESS_TOKEN" }
    //        }
    //        output = {
    //            "TEMPLATE_ATTR.EVALUATED_FRIENDS_LIST" = { name = "/entries/*/personaId", defaultValue = "" }
    //        }
    //    }
    //    "friends_getConsolidatedFriendsListPersona" = {
    //        externalDataSource = "friends"
    //        url = "/friends/2/personas/$personaId/platforms/ea;psn;xbox/friends?fields=personaId,userId"
    //        urlPathParameters = {
    //            "$personaId" = { name = "blazeId", defaultValue = "$BLAZEID" }
    //        }
    //        headers = {
    //            "Authorization" = { defaultValue = "$S2S_ACCESS_TOKEN" }
    //        }
    //        output = {
    //            // {psn|xbox} syntax merges lists /psn/friends/*/personaId and /xbox/friends/*/personaId
    //            // This feature only applies to template attributes in API external data source definitions.
    //            // Note that there can be at most one set of {} per output path (nesting is not supported).
    //
    //            "TEMPLATE_ATTR.EVALUATED_FRIENDS_LIST" = { name = "/{psn|xbox}/friends/*/personaId", defaultValue = ""}
    //            "TEMPLATE_ATTR.EVALUATED_FRIENDS_ACCOUNT_LIST" = { name = "/EA-GLOBAL/friends/*/userId", defaultValue = "" } 
    //        }
    //      }
    //    "friendRecommendations_getUserRecommendations" = {
    //        externalDataSource = "friendRecommendations"
    //        url = "/v1/recommendations/$userId/friends?fields=id"
    //        urlPathParameters = {
    //            "$userId" = { name = "blazeId", defaultValue = "$BLAZEID" }
    //        }
    //        headers = {
    //            "Authorization" = { defaultValue = "$S2S_ACCESS_TOKEN_BEARER_PREFIX" }
    //            "Acting-UserType" = { defaultValue = "NUCLEUS_PERSONA" }
    //        }
    //        output = {
    //            "TEMPLATE_ATTR.EVALUATED_FRIENDS_LIST" = { name = "/recs/*/id", defaultValue = "" }
    //        }
    //    }
    //
    //  // Social Group Service requires a group instance id to be provided
    //  // Template attributes needs to include the SOCIAL_GROUP_ID_ATTR as key, group id as value
    //    "groups_listMembers" = {
    //        externalDataSource = "groups"
    //        url = "/group/instance/$groupGuid/members?fields=id"
    //        urlPathParameters = {
    //            "$groupGuid" = { name = "groupGuid", defaultValue = "$SOCIAL_GROUP_ID_ATTR" } 
    //        }
    //        headers = {
    //            "Authorization" = { defaultValue = "$S2S_ACCESS_TOKEN" }
    //        }
    //        output = {
    //            "TEMPLATE_ATTR.EVALUATED_FRIENDS_LIST" = { name = "/*/id", defaultValue = "" }
    //        }
    //    }
    //}

    //grpcConfigMap = {
    //    "stats_getEntityStats" = {
    //        externalDataSource = "statsService"
    //        service = "eadp::stats::EntityStatistics"
    //        command = "AsyncGetStatsUnary"
    //        commandType = "UNARY",
    //        requestType = "eadp.stats.GetEntityStatsRequest"
    //
    //        // This reads the template attributes and attempts to set the matching protobuf request field with the attribute value.
    //        requestAttributes = {
    //            "context_id" = {name="CONTEXT_ID", defaultValue="BlazeSample"}
    //            "category_id" = {name="CATEGORY_ID", defaultValue="IntegratedSampleStatsCategory"}
    //            "entity_id" = {name="ENTITY_ID", defaultValue="$BLAZEID"}
    //            "stat_ids" = {name="STAT_IDS"}
    //            "period_offset" = {name="PERIOD_OFFSET", defaultValue="0"}
    //            "target_instant" = {name="TARGET_INSTANT"}
    //        }
    //
    //        // name is required when decoding a specific response field
    //        output = {
    //            "TEMPLATE_ATTR.STATS" = {name = "/stat_values/hits/value", defaultValue = "123"}
    //            "UED.wins" = { name = "/stat_values/wins/value", defaultValue = "456"}
    //        }
    //
    //        // This sets the corresponding header in the gRPC clientContext
    //        // Header names must be specified lowercase according to HTTP2 specifications
    //        headers = {
    //            "authorization" = { defaultValue = "$S2S_ACCESS_TOKEN" }
    //        }
    //    }
    //}
}
