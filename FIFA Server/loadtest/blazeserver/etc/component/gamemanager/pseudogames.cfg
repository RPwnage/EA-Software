// Copyright Electronic Arts Inc.  All Rights Reserved.
//
pseudoGamesConfig = {

  // Set this value, and the pseudo games will be created upon startup:
    usePseudoGamesConfig = false

    pseudoGameConfigMap = {

        "BasicGame" = {
            baseConfig = ""

            minGameCount = 500
            // maxGameCount = 1

            minPlayerCount = 4
            maxPlayerCount = 64

            createGameValues = {

            // We always have to have a game mode attribute set (see gamesession.cfg for the name of the game mode attribute)
            // Here we have 4 modes, with DM/TeamDM being equally popular, Conquest 1/4 as common, and Seige 1/10 as popular:
                "CreateGameRequest.gameCreationData.gameAttribs[mode]" = { 
                    defaults = [{value = "DM"}, 
                                {value = "TeamDM"}, 
                                {value = "Conquest", percent = 0.25},   // Percent defaults to 1, and is normalized before usage.
                                {value = "Seige", percent = 0.1}] 
                }

            // If a range prefix is provided, you can use it to generate random string.  Here we choose a random game name of the form "fakeGame_##".
                "CreateGameRequest.gameCreationData.gameName" = {
                    minRangeInt = 10
                    maxRangeInt = 2000000000
                    rangePrefix = "fakeGame_"      // Note this is not sequential, it is random and may have overlaps.
                }

            // Since we do not specify the ping site per player, we must override it with the Alias setting here:
            // Valid ping sites can be found in the matchmaker_settings.cfg under the PingSiteRule
                "CreateGameRequest.gamePingSiteAlias" = { 
                    defaults = [{value = "bio-sjc"},
                                {value = "bio-iad"},
                                {value = "bio-dub"},
                                {value = "m3d-nrt"},
                                {value = "m3d-brz"},
                                {value = "bio-syd"}]
                }

            // All topologies are supported, but note that no real dedicated/dirtycast servers will be used.
                "CreateGameRequest.gameCreationData.networkTopology" = { defaults = {value = "CLIENT_SERVER_PEER_HOSTED"} }

            // Here we set the number of players the game supports:
                // Slot capacities is a 4-element, fixed-size array.
                // Unfortunately, there is no way to address individual list elements, so all must be set together:
                //   [Public, Private, Public Spectator, Private Spectator]
                "CreateGameRequest.slotCapacities" = { defaults = [{value = [64, 0, 0, 0] }] }

                // Max Capacity must be >= sum of slotCapacities:
                "CreateGameRequest.gameCreationData.maxPlayerCapacity" = { defaults = [{value = 64}] }

                "CreateGameRequest.gameCreationData.gameSettings" = { defaults = [{value = ["openToBrowsing",
                                                                                "openToMatchmaking", 
                                                                                "openToInvites", 
                                                                                "openToJoinByPlayer",
                                                                                "joinInProgressSupported",
                                                                                "hostMigratable",     
                                                                                "allowAnyReputation"] }] }

                //"CreateGameRequest.gameCreationData.gameModRegister" = { defaults = [{value = 0}]}
                "CreateGameRequest.gameCreationData.minPlayerCapacity" = { defaults = [{value = 1}]}
                //"CreateGameRequest.commonGameData.gameProtocolVersionString" = { defaults = [{value = "4200"}]}

            // The following are the other supported settings that 
            // (Listed here for reference.)
                //"CreateGameRequest.persistedGameId" = {}
                //"CreateGameRequest.persistedGameIdSecret" = {}
                //"CreateGameRequest.serverNotResetable" = {}
                //"CreateGameRequest.gameStatusUrl" = {}
                //"CreateGameRequest.gamePingSiteAlias" = {}
                //"CreateGameRequest.adminPlayerList" = {}
                //"CreateGameRequest.meshAttribs" = {}
                //"CreateGameRequest.gameReportName" = {}

                //"CreateGameRequest.gameCreationData.presenceMode" = {}
                //"CreateGameRequest.gameCreationData.networkTopology" = {}
                //"CreateGameRequest.gameCreationData.voipNetwork" = {}
                //"CreateGameRequest.gameCreationData.externalSessionIdentSetup.xone.templateName" = {}
                //"CreateGameRequest.gameCreationData.maxPlayerCapacity" = {}
                //"CreateGameRequest.gameCreationData.queueCapacity" = {}
                //"CreateGameRequest.gameCreationData.roleInformation" = {}
                //"CreateGameRequest.gameCreationData.entryCriteriaMap" = {}
                //"CreateGameRequest.gameCreationData.teamIds" = {}
                
                //"CreateGameRequest.gameCreationData.roleInformation.roleCriteriaMap[soldier].roleCapacity" = { defaults = [{value = 64}] }
            }

            perPlayerValues = {

            // Here we set some special per-player UED values: 
                // "UED_" is a special case that sets a UED attribute in Pseudo Games. 
                // This is *not* supported in non-pseudo games. (UED is normally set via stats or other external data)
                "PerPlayerJoinData.playerAttributes[UED_0]" = { 
                    minRangeInt = 10
                    maxRangeInt = 2000000000                        
                }

                // Stats UED data = (statid) + 458752 (Stats ComponentId (7) << 16)
                "PerPlayerJoinData.playerAttributes[UED_458823]" = {  // SkillA
                    minRangeInt = 0
                    maxRangeInt = 1000
                }
                "PerPlayerJoinData.playerAttributes[UED_458825]" = { // dnf
                    minRangeInt = 0
                    maxRangeInt = 100
                }

                // "PerPlayerJoinData.role" = {}
                // "PerPlayerJoinData.role" = { defaults = [{value = "soldier"}] }
            }

        }


    // This config uses inheritence to quickly setup a new config variant from the base version:
    // The variant creates games with 6-12 players, and 16 slots available:
        "SemiFullGame" = {
            baseConfig = "BasicGame"

            minGameCount = 500

            minPlayerCount = 6
            maxPlayerCount = 12

            createGameValues = {

                "CreateGameRequest.gameCreationData.gameName" = {
                    minRangeInt = 10
                    maxRangeInt = 2000000000
                    rangePrefix = "semiFull_"
                }

                "CreateGameRequest.slotCapacities" = { defaults = [{value = [16, 0, 0, 0] }] }
                "CreateGameRequest.gameCreationData.maxPlayerCapacity" = { defaults = [{value = 16}] }
            }
        }

    // Further examples: 
        // "Capture the Flag" = { ... }
        // "Full Server" = { ... }
        // ...
    }
}


