// EXAMPLES. CAN BE REMOVED
"singlePlatformGroup" = {

    // Basic joinable game group:
    baseRequest = {
        commonGameData = { gameType = "GAME_TYPE_GROUP" }
        gameCreationData = { 
            networkTopology = "NETWORK_DISABLED"
            voipNetwork = "VOIP_DISABLED"
            gameSettings = ["openToBrowsing",
                            "openToMatchmaking", 
                            "openToInvites", 
                            "openToJoinByPlayer",
                            "joinInProgressSupported", 
                            "hostMigratable", 
                            "allowAnyReputation" ]
         }
    }
     
    //  Attributes to let you set the group size (and Xbox game template)
    attributes = {
        "CreateGameRequest.gameCreationData.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"          = { attrName = "PLAYER_CAPACITY",            default = 4 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"                  = { attrName = "PLAYER_CAPACITY",            default = 4 }

#if PLATFORM == "xone" || PLATFORM == "xbsx" || XPLAY_HOST_XONE == "1" || XPLAY_HOST_XBSX == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.xone.templateName"          = { attrName = "XONE_GAME_SESSION_TEMPLATE", default = "" }
#endif
#if PLATFORM == "ps5" || XPLAY_HOST_PS5 == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.ps5.match.activityObjectId" = { attrName = "PS5_ACTIVITY_ID", default = "BlazeSampleActivityWithScore" }
#endif
    }
}

"crossplayGroup" = {

    // Basic joinable game group:
    baseRequest = {
        commonGameData = { gameType = "GAME_TYPE_GROUP" }
        gameCreationData = { 
            networkTopology = "NETWORK_DISABLED"
            voipNetwork = "VOIP_DISABLED"
            gameSettings = ["openToBrowsing",
                            "openToMatchmaking", 
                            "openToInvites", 
                            "openToJoinByPlayer",
                            "joinInProgressSupported", 
                            "hostMigratable", 
                            "allowAnyReputation" ]
         }
    }
     
    //  Attributes to let you set the group size (and Xbox game template)
    attributes = {
        "CreateGameRequest.gameCreationData.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"          = { attrName = "PLAYER_CAPACITY",            default = 4 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"                  = { attrName = "PLAYER_CAPACITY",            default = 4 }
        "CreateGameRequest.clientPlatformListOverride"    = { attrName = "CROSSPLAY_PLATFORMS", default = ["pc", "xone", "ps4", "xbsx", "ps5"]  }

#if PLATFORM == "xone" || PLATFORM == "xbsx" || XPLAY_HOST_XONE == "1" || XPLAY_HOST_XBSX == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.xone.templateName"          = { attrName = "XONE_GAME_SESSION_TEMPLATE", default = "" }
#endif
#if PLATFORM == "ps5" || XPLAY_HOST_PS5 == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.ps5.match.activityObjectId" = { attrName = "PS5_ACTIVITY_ID", default = "BlazeSampleActivityWithScore" }
#endif
    }
}


"singlePlatformDedicatedServerReset" = {

    // Set this to RESET_GAME if you want this to be a resetDedicatedServer request:
    createRequestType = "RESET_GAME"     // Other options: CREATE_OR_JOIN_GAME (join based on persisted id), RESET_GAME
    
    // The Base Request is just a CreateGameRequest value.  It's provides a simple 'Base' for the request:
    baseRequest = {
        gameCreationData = { 
            networkTopology = "CLIENT_SERVER_PEER_HOSTED"
            voipNetwork = "VOIP_DISABLED"

            gameSettings = ["openToBrowsing",
                            "openToMatchmaking", 
                            "openToInvites", 
                            "openToJoinByPlayer",
                            "hostMigratable",
                            "joinInProgressSupported",     
                            "allowAnyReputation" ]
                            
            gameAttribs = { "mode" = "oneplatform" }
         } 
         
    }

    // Attributes are (optionally) sent from the client, to configure the settings used:
    attributes = {
      // Player count is always required: 
        "CreateGameRequest.gameCreationData.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"       = { attrName = "PLAYER_CAPACITY",        default = 8 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"               = { attrName = "PLAYER_CAPACITY",        default = 8 }       // Max Capacity the game can be set to.
        
      // For game reporting collation handling, set gameReportName.
        "CreateGameRequest.gameCreationData.gameReportName" = { attrName = "GAME_REPORT_NAME", default="integratedSample"}

#if PLATFORM == "xone" || PLATFORM == "xbsx" || XPLAY_HOST_XONE == "1" || XPLAY_HOST_XBSX == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.xone.templateName"          = { attrName = "XONE_GAME_SESSION_TEMPLATE", default = "" }
#endif
#if PLATFORM == "ps5" || XPLAY_HOST_PS5 == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.ps5.match.activityObjectId" = { attrName = "PS5_ACTIVITY_ID", default = "BlazeSampleActivityWithScore" }
#endif
    }
}

// Dedicated server Game: (Used in scenario.cfg example)
"crossplayDedicatedServerReset" = {

    // Set this to RESET_GAME if you want this to be a resetDedicatedServer request:
    createRequestType = "RESET_GAME"     // Other options: CREATE_OR_JOIN_GAME (join based on persisted id), RESET_GAME
    
    // The Base Request is just a CreateGameRequest value.  It's provides a simple 'Base' for the request:
    baseRequest = {
        gameCreationData = { 
            networkTopology = "CLIENT_SERVER_DEDICATED"
            voipNetwork = "VOIP_DISABLED"

            gameSettings = ["openToBrowsing",
                            "openToMatchmaking", 
                            "openToInvites", 
                            "openToJoinByPlayer",
                            "hostMigratable",
                            "joinInProgressSupported",     
                            "allowAnyReputation" ]
                            
            gameAttribs = { "mode" = "crossplay" }
         } 
    }

    // Attributes are (optionally) sent from the client, to configure the settings used:
    attributes = {
      // Player count is always required: 
        "CreateGameRequest.gameCreationData.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"       = { attrName = "PLAYER_CAPACITY",        default = 8 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"               = { attrName = "PLAYER_CAPACITY",        default = 8 }       // Max Capacity the game can be set to.

        "CreateGameRequest.clientPlatformListOverride"    = { attrName = "CROSSPLAY_PLATFORMS", default = ["pc", "xone", "ps4", "xbsx", "ps5"]  }

      // For game reporting collation handling, set gameReportName.
        "CreateGameRequest.gameCreationData.gameReportName" = { attrName = "GAME_REPORT_NAME", default="integratedSample"}

#if PLATFORM == "xone" || PLATFORM == "xbsx" || XPLAY_HOST_XONE == "1" || XPLAY_HOST_XBSX == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.xone.templateName"          = { attrName = "XONE_GAME_SESSION_TEMPLATE", default = "" }
#endif
#if PLATFORM == "ps5" || XPLAY_HOST_PS5 == "1"
        "CreateGameRequest.gameCreationData.externalSessionIdentSetup.ps5.match.activityObjectId" = { attrName = "PS5_ACTIVITY_ID", default = "BlazeSampleActivityWithScore" }
#endif
    }

}
