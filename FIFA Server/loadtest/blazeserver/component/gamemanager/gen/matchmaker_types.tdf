/*! ************************************************************************************************/
/*!
    \file matchmaker_types.tdf

    Contains a few general types defined by the matchmaker.  The file was created as a workaround for a TdfComp deficiency.
    Typecomp doesn't support '#ifndef'-style guards on tdf files, so I get a redefinition error if I try to include matchmaker.tdf
    from gamemanager_server.tdf (since both tdfs include gamemanager.tdf, which defines a const string).
    
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

// NOTE: although Matchmaker has its own namespace in c++, 
//   the matchmaker RPCs are defined in the GameManager namespace (since the Matchmaker is not a component)
namespace Blaze
{
namespace GameManager
{

[description="The weight of a rule that specifies how much a rule influences the overall fitscore."]
typedef uint32_t RuleWeight;

[description="Each matchmaking rule has a unique name.  The name must match the name of the rule Definition (in the server's matchmaking config file)."]
typedef string(64) RuleName;

[description="Each MinFitThresholdList within a generic rule has a unique name (case insensitive).  Note: different rules may contain threshold lists with the same name.  The threshold name must match a threadholdList defined inside the ruleDefinition (in the server's matchmaking config file)."]
typedef string(32) MinFitThresholdName;

[description="Each matchmaking session is uniquely identified by a sessionId (assigned by the server).  Note: Zero is invalid, and indicates failure."]
typedef uint64_t MatchmakingSessionId;

[
    description = "The overall result of a matchmaking session."
]
enum MatchmakingResult
{
    [description="The session's CreateGame mode was a success; you've created a new game."]
        SUCCESS_CREATED_GAME,
    [description="The session's CreateGame mode was a success; you've joined a newly created game."]
        SUCCESS_JOINED_NEW_GAME,
    [description="The session's FindGame mode was a success; you've joined an existing game."]
        SUCCESS_JOINED_EXISTING_GAME,
    [description="The session timed out; it was unable to find any matches."]
        SESSION_TIMED_OUT,
    [description="The session was explicitly canceled."]
        SESSION_CANCELED,
    [description="The session was terminated by matchmaker due to reconfiguration."]
        SESSION_TERMINATED,
    [description="A system error occured while trying to setup the game on the client - see the client log for details."]
        SESSION_ERROR_GAME_SETUP_FAILED,
    [description="The match resulted in a game that failed QOS validation."]
        SESSION_QOS_VALIDATION_FAILED,
    [description="The session was a pseudo request, results were gathered, but no game was created as a result of finalizing in create game matchmaking"]
        SUCCESS_PSEUDO_CREATE_GAME,
    [description="The session was a pseudo request, results were gathered, but no game was joined as a result of finalizing in find game matchmaking. Results for any debug games specified in the pseudo request are returned with this MatchmakingResult, even if there was no match."]
        SUCCESS_PSEUDO_FIND_GAME
};

[description="The fit score represents the quality of a match, a higher fit score is better."]
typedef uint32_t FitScore;

[
    description = "The types of matchmaking contexts supported."
]
enum MatchmakingContextEnum
{
    [description="FIND_PEOPLE (Has self info)" ]
        MATCHMAKING_CONTEXT_MATCHMAKER_CREATE_GAME,
    [description="FIND_GAMES (Has self info, Joinable games only)" ]
        MATCHMAKING_CONTEXT_MATCHMAKER_FIND_GAME,
    [description="FIND_GAMES (No  self info, All games)" ]
        MATCHMAKING_CONTEXT_GAMEBROWSER,
    [description="FIND_GAMES (Has self info, Resettable games only)" ]
        MATCHMAKING_CONTEXT_FIND_DEDICATED_SERVER
};


} // namespace GameManager
} // namespace Blaze
