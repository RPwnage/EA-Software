// -------------------------------
// GameReporting config file
// -------------------------------

#if (PLATFORM == "ps4")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "xone")
    #define LOC_PLAYER "SDB_ST_GAMERTAG"
#elif (PLATFORM == "pc")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "nx")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "steam")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "stadia")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "common")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#endif

gamereporting = {
    // Database configuration
    dbName = "main"

    //  gameTypes:
    //      Stats and other attribute definitions have been moved to their respective report TDFs.   Use this section
    //      to define the report TDF used for the game type.  
    //      Also use this section to customize what the game type uses to collate and process the report.
    //      Developers can override the GameReportProcessor and GameReportCollator classes to customize game reporting for
    //      either a single GameType, or for a series of GameTypes.
    //
    //      reportTdf:
    //          This is the full namespace::class_name string identifying the custom game report TDF specified inside the 
    //          Blaze::GameReporting::GameReport TDF.
    //
    //      reportProcessorClass/reportCollatorClass:
    //          This value is passed to the GameReportProcessor::create()/GameReportCollator::create() to construct the
    //          custom report processor/collator for the report.  If writing custom code, developers should modify those methods to construct
    //          the desired class using this string key as an identifier.
    //              
    //          Blaze includes a simple report processor for reports that only require stat processing without game-specific modification 
    //          of the report beyond what is supported by the GameReport custom attributes used in the report TDF.   
    //          
    //          Consult documentation on constructing a custom GameReport TDF for more information.
    //      
    //      arbitraryUserOfflineReportProcessing: 
    //          If the value is false, the offline game report don't allow nothing change for the user specified in the report (if he didn¡¯t send it).
    //          When the setting is "true" (default), any user is allowed to update any other user stats via an offline report.
    //
    gameTypes = {
        gameType0 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            sponsoredEventId = "$GAMEATTRS$[^OSDK_sponsoredEventId]",
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_sponsoredEventId = "sponsoredEventId"
                                    OSDK_arenaChallengeId = "arenaChallengeId"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Sports::H2HPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                                DNFStats = {
                                                    category = "NormalGameStats",
                                                    entityId = "$INDEX$",
                                                    keyscopes = {
                                                        accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
                                                        controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
                                                    },
                                                    stats = {
                                                        totalGamesPlayed = { value="^1", type="INCREMENT"},
                                                        totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT"}
                                                    }
                                                },
                                                PlayerStats = {
                                                    category = "NormalGameStats",
                                                    entityId = "$INDEX$",
                                                    keyscopes = {
                                                        accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
                                                        controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
                                                    },
                                                    stats = {
                                                        goals = { value = "goals", type = "INCREMENT"},
                                                        ownGoals = { value = "ownGoals", type = "INCREMENT"},
                                                        possession = { value = "possession", type = "INCREMENT"},
                                                        shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
                                                        shotsFor = { value = "shots", type = "INCREMENT"},
                                                        tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
                                                        tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
                                                        passAttempts = { value = "passAttempts", type = "INCREMENT"},
                                                        passesMade = { value = "passesMade", type = "INCREMENT"},
                                                        fouls = { value = "fouls", type = "INCREMENT"},
                                                        yellowCards = { value = "yellowCard", type = "INCREMENT"},
                                                        redCards = { value = "redCard", type = "INCREMENT"},
                                                        corners = { value = "corners", type = "INCREMENT"},
                                                        offsides = { value = "offsides", type = "INCREMENT"},
                                                        wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                                        losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                                        ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                                    }
                                                } // PlayerStats
                                        } //statUpdates
                                    }, //CommonPlayerReport
                                    H2HCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Sports::H2HCustomPlayerData",
                                        skipComparison = true,
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "NormalGameStats",
                                                entityId = "$INDEX$",
                                                keyscopes = {
                                                    accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
                                                    controls = "controls"
                                                },
                                                stats = {
                                                    shotsAgainst = { value = "shotsAgainst", type = "INCREMENT"},
                                                    shotsAgainstOnGoal = { value = "shotsAgainstOnGoal", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalAgainst", type = "INCREMENT"}
                                                }
                                            } // PlayerStats
                                        } // statUpdates
                                    } //mH2HCustomPlayerData
                                },    //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",                                            
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport                        
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType0
        
        gameType1 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            sponsoredEventId = "$GAMEATTRS$[^OSDK_sponsoredEventId]",
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]"
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_sponsoredEventId = "sponsoredEventId"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Sports::H2HPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                                DNFStats = {
                                                    category = "NormalGameStats",
                                                    entityId = "$INDEX$",
                                                    keyscopes = {
                                                        accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
                                                        controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
                                                    },
                                                    stats = {
                                                        totalGamesPlayed = { value="^1", type="INCREMENT"},
                                                        totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT"}
                                                    }
                                                }
                                        } //statUpdates
                                    } //CommonPlayerReport
                                },    //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",                                            
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport                        
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType1
        
        gameType3 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        reportValues = {
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]"
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::CoopReportBase::PlayerReport",
                                skipComparison = true,
                                statUpdates = {
                                    DNFStats = {
                                        category = "CoopGameStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            totalGamesPlayed = { value="^1", type="INCREMENT" },
                                            totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT" }
                                        }
                                    },
                                    PlayerStats = {
                                        category = "CoopGameStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            pointsFor = { value = "$REPORT$.playerReports[$INDEX$].score", type = "increment" },
                                            wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "increment" },
                                            losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "increment" },
                                            skill = { value = "$REPORT$.playerReports[$INDEX$].skill", type = "assign" },
                                            overallSkillPoints = { value = "$REPORT$.playerReports[$INDEX$].skillPoints", type = "assign" },
                                            pointsAgainst = { value = "$REPORT$.playerReports[$INDEX$].pointsAgainst", type = "increment" },
                                            opponentCount = { value = "$REPORT$.playerReports[$INDEX$].opponentCount", type = "increment" },
                                            hits = { value = "hits", type = "increment" },
                                            misses = { value = "misses", type = "increment" },
                                            serves = { value = "serves", type = "increment" }
                                        }
                                    }
                                },
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            skill = "$REPORT$.playerReports[$INDEX$].skill",
                                            pointsAgainst = "$REPORT$.playerReports[$INDEX$].pointsAgainst",
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf",
                                            HITS = "hits",
                                            MISSES = "misses",
                                            SERVES = "serves"
                                        }
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType3

        gameType5 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]"
                        }
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SportsOTPReportBase::GameReport",
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member"
                                        }
                                    }
                                ]
                            }
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            PlayerStats = {
                                category = "ClubOTPPlayerStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                      ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                }
                            },
                            ClubOTPFAPlayerStats = {
                                category = "ClubOTPFAPlayerStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                      ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOTPReportBase::PlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "ClubOTPPlayerStats",
                                                entityId = "$INDEX$",
                                                keyscopes = {
                                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                                },
                                                stats = {
                                                    goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
                                                    assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
                                                    shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
                                                    passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
                                                    passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
                                                    tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
                                                    tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

                                                    goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
                                                    saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
                                                    redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                    
                                                    rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

                                                    cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsAny", type = "INCREMENT"},
                                                    cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsDef", type = "INCREMENT"},
                                                    cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
                                                    manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.manOfTheMatch", type = "INCREMENT"},
                                                    otpgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.otpgames", type = "INCREMENT"}
                                                }
                                            },
                                            ClubOTPFAPlayerStats = {
                                                category = "ClubOTPFAPlayerStats",
                                                entityId = "$INDEX$",
                                                keyscopes = {
                                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                                },
                                                stats = {
                                                    goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
                                                    assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
                                                    shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
                                                    passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
                                                    passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
                                                    tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
                                                    tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

                                                    goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
                                                    saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
                                                    redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                    
                                                    rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

                                                    cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsAny", type = "INCREMENT"},
                                                    cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsDef", type = "INCREMENT"},
                                                    cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
                                                    manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.manOfTheMatch", type = "INCREMENT"},
                                                    otpgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.otpgames", type = "INCREMENT"}
                                                }
                                            }
                                        } //statUpdates
                                    } //CommonPlayerReport
                                },
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {                                               
                                        player_id = "$INDEX$",
                                        SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                        wins = "$REPORT$.playerReports[$INDEX$].wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].losses",
                           
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.assists",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
                                        goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goalsConceded",
                                        saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.saves",

                                        cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsAny",
                                        cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsDef",
                                        cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsGoalKeeper",
                                        mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.manOfTheMatch",
                                        redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard"
                       
                                        //rating?
                                        }
                                      }
                                  ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,                        
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType5
        
        gameType6 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        reportValues = {
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]"
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::NPlayerReportBase::PlayerReport",
                                skipComparison = true,
                                statUpdates = {
                                    DNFStats = {
                                        category = "NPlayerGameStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            totalGamesPlayed = { value="^1", type="INCREMENT" },
                                            totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT" }
                                        }
                                    },
                                    PlayerStats = {
                                        category = "NPlayerGameStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            pointsFor = { value = "$REPORT$.playerReports[$INDEX$].score", type = "increment" },
                                            wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "increment" },
                                            losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "increment" },
                                            pointsAgainst = { value = "$REPORT$.playerReports[$INDEX$].pointsAgainst", type = "increment" },
                                            hits = { value = "hits", type = "increment" },
                                            misses = { value = "misses", type = "increment" },
                                            serves = { value = "serves", type = "increment" }
                                        }
                                    }
                                },
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            pointsAgainst = "$REPORT$.playerReports[$INDEX$].pointsAgainst",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf",
                                            HITS = "hits",
                                            MISSES = "misses",
                                            SERVES = "serves"
                                        }
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType6

        gameType7 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport"
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_sponsoredEventId = "sponsoredEventId"
                                    OSDK_arenaChallengeId = "arenaChallengeId"
                                }
                            }
                        ]
                    }, // gameReport
                    
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Sports::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "SoloGameStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    ownGoals = { value = "ownGoals", type = "INCREMENT"},
                                                    possession = { value = "possession", type = "INCREMENT"},
                                                    shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
                                                    shotsFor = { value = "shots", type = "INCREMENT"},
                                                    tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
                                                    tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
                                                    passAttempts = { value = "passAttempts", type = "INCREMENT"},
                                                    passesMade = { value = "passesMade", type = "INCREMENT"},
                                                    fouls = { value = "fouls", type = "INCREMENT"},
                                                    yellowCards = { value = "yellowCard", type = "INCREMENT"},
                                                    redCards = { value = "redCard", type = "INCREMENT"},
                                                    corners = { value = "corners", type = "INCREMENT"},
                                                    offsides = { value = "offsides", type = "INCREMENT"}
                                                }
                                            } // PlayerStats
                                        } //statUpdates
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Sports::SoloCustomPlayerData",
                                        skipComparison = true,
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "SoloGameStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    //team = { value = "team", type = "ASSIGN"},
                                                    wins = { value = "wins", type = "INCREMENT"},
                                                    losses = { value = "losses", type = "INCREMENT"},
                                                    ties = { value = "ties", type = "INCREMENT"},
                                                    result = { value = "result", type = "ASSIGN"},
                                                    shotsAgainst = { value = "shotsAgainst", type = "INCREMENT"},
                                                    shotsAgainstOnGoal = { value = "shotsAgainstOnGoal", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalAgainst", type = "INCREMENT"}
                                                }
                                            } // PlayerStats
                                        } // statUpdates
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",                                            
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
                                        
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport                        
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType7

        gameType9 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
      //  Custom configuration data local to game type - accessible via ProcessedGameReport::getGameType()::getConfig().getCustomGlobalConfig()
      //    customConfig = {
      //        tdf = "Blaze::GameReporting::BasicConfig",
      //        value = {
      //            strictStatsUpdates = true
      //        }
      //    },
      
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubGameReport",
                                reportValues = {
                                    challengeClubId = "$GAMEATTRS$[^OSDK_ChlngrClubId]"
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member",
                                            clubgamekey = "clubgamekey",
                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
                                    customClubGameReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsGameReport",
                                        gameHistory = [
                                            {
                                                table = "game",
                                                columns = {
                                                    mom = "mom"
                                                }
                                            }
                                        ]
                                    } // customClubGameReport
                                } // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            ClubOTPPlayerStats = {
                                category = "ClubOTPPlayerStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                    ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"},

                                    clubgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubGames", type = "INCREMENT"}
                                }
                            },
                            ClubMemberStats = {
                                category = "ClubMemberStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                     ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                               }
                            },
                            ClubUserCareerStats = {
                                category = "ClubUserCareerStats",
                                entityId = "$INDEX$",
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                    ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubPlayerReport",
                                skipComparison = true,
                                statUpdates = {
                                    ClubOTPPlayerStats = {
                                        category = "ClubOTPPlayerStats",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                        },
                                        stats = {
                                            clubgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubGames", type = "INCREMENT"}
                                        }
                                    },
                                    ClubMemberStats = {
                                        category = "ClubMemberStats",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
                                        },
                                        stats = {
                                        minutes = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.minutes", type = "INCREMENT"}
                                        }
                                    },
                                    ClubUserCareerStats = {
                                        category = "ClubUserCareerStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            challenge = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.challenge", type = "INCREMENT"}
                                        }    
                                    }
                                },
                                subreports = {
                                    customClubPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsPlayerReport",
                                        skipComparison = true,
                                        subreports = {
                                            CommonPlayerReport = {
                                                reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                                skipComparison = true,
                                                statUpdates = {
                                                    ClubOTPPlayerStats = {
                                                        category = "ClubOTPPlayerStats",
                                                        entityId = "$INDEX$",
                                                        keyscopes = {
                                                            pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                                        },
                                                        stats = {
                                                            goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
                                                            assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
                                                            shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
                                                            passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
                                                            passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
                                                            tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
                                                            tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

                                                            goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
                                                            saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
                                                            redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                            
                                                            rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

                                                            cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
                                                            cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
                                                            cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
                                                            manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
                                                        }
                                                    },
                                                    ClubMemberStats = {
                                                        category = "ClubMemberStats",
                                                        entityId = "$INDEX$",
                                                        keyscopes = {
                                                            club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
                                                        },
                                                        stats = {
                                                            goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
                                                            assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
                                                            shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
                                                            passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
                                                            passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
                                                            tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
                                                            tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},
                                                            
                                                            goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
                                                            saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},                                                    
                                                            redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                            
                                                            rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

                                                            cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
                                                            cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
                                                            cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
                                                            manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}

                                                        }
                                                    },
                                                    ClubUserCareerStats = {
                                                        category = "ClubUserCareerStats",
                                                        entityId = "$INDEX$",
                                                        stats = {
                                                            goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
                                                            assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
                                                            shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
                                                            passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
                                                            passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
                                                            tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
                                                            tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

                                                            goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
                                                            saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
                                                            redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                            
                                                            rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

                                                            cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
                                                            cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
                                                            cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
                                                            manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
                                                        }
                                                    }
                                                } //statUpdates
                                            } //CommonPlayerReport
                                        },
                                        gameHistory = [
                                        {
                                            table = "player",
                                            entityType = "usersessions/user",
                                            primaryKey = [ "player_id" ],
                                            columns = {                                               
                                                player_id = "$INDEX$",
                                                SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                                wins = "$REPORT$.playerReports[$INDEX$].wins",
                                                losses = "$REPORT$.playerReports[$INDEX$].losses",
                                                clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
                                   
                                                goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals",
                                                assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists",
                                                shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots",
                                                passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts",
                                                passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade",
                                                tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts",
                                                tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade",
                                                pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
                                                goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded",
                                                saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves",

                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny",
                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef",
                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper",
                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch",
                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard"
                               
                                                //rating?
                                   
                                                   //VPROHACKREASON = "privateIntAttributeMap[^VPROHACKREASON]"
                                                //VPROHACKATTR = "privateIntAttributeMap[^VPROHACKATTR]"
                                                }
                                              }
                                          ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,                          
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubReport"
                        subreports = {
                            clubReports = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubClubReport",
                                skipComparison = true,
                                statUpdates = {
                                    ClubRankStats = {
                                        category = "ClubRankStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            result5 = { value = "gameResult",  type = "assign" },
                                            wins = { value = "wins", type = "INCREMENT"},
                                            ties = { value = "ties", type = "INCREMENT"},
                                            losses = { value = "losses", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    customClubClubReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsClubReport",
                                        skipComparison = true,
                                        statUpdates = {
                                            ClubRankStats = {
                                                category = "ClubRankStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalsAgainst", type = "INCREMENT"},
                                                    cleanSheets = { value = "cleanSheets", type = "INCREMENT"}
                                                }
                                            }
                                        }
                                    } // customClubClubReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "club",
                                        primaryKey = [ "club_id" ],
                                        columns = {
                                            club_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goals",
                                            goalsAgainst = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goalsAgainst"
                                        }
                                    }
                                ] // gameHistory
                            } // clubReports
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType9

        gameType11 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::ClubChampReportBase::GameReport",
                                reportValues = {
                                    clubChampId = "$GAMEATTRS$[^OSDK_clubId]"
                                } // reportValues
                            } // customGameReport
                        } // subreports
                    } // gameReport
                } // subreports
            } // report
        } // gameType11

        gameType12 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport"
                subreports = {
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::H2HReportBase::PlayerReport",
                                statUpdates = {
                                    PlayerStats = {
                                        category = "NormalGamePlayoffStats",
                                        entityId = "$INDEX$",
                                        stats = {
                                            pointsFor = { value = "$REPORT$.playerReports[$INDEX$].score", type = "increment" },
                                            wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "increment" },
                                            losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "increment" },
                                            pointsAgainst = { value = "$REPORT$.playerReports[$INDEX$].pointsAgainst", type = "increment" },
                                            hits = { value = "hits", type = "increment" },
                                            misses = { value = "misses", type = "increment" },
                                            serves = { value = "serves", type = "increment" }
                                        }
                                    }
                                } // statUpdates
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType12

        gameType13 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubGameReport",
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member",
                                            clubgamekey = "clubgamekey",
                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
                                    customClubGameReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsGameReport",
                                        gameHistory = [
                                            {
                                                table = "game",
                                                columns = {
                                                    mom = "mom"
                                                }
                                            }
                                        ]
                                    } // customClubGameReport
                                } // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubPlayerReport",
                                skipComparison = true,
                                statUpdates = {
                                },
                                subreports = {
                                    customClubPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsPlayerReport",
                                        skipComparison = true,
                                        subreports = {
                                            CommonPlayerReport = {
                                                reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                                skipComparison = true,
                                                statUpdates = {
                                                } //statUpdates
                                            } //CommonPlayerReport
                                        },
                                        gameHistory = [
                                        {
                                            table = "player",
                                            entityType = "usersessions/user",
                                            primaryKey = [ "player_id" ],
                                            columns = {                                               
                                                player_id = "$INDEX$",
                                                SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                                wins = "$REPORT$.playerReports[$INDEX$].wins",
                                                losses = "$REPORT$.playerReports[$INDEX$].losses",
                                                clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
                                   
                                                goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals",
                                                assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists",
                                                shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots",
                                                passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts",
                                                passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade",
                                                tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts",
                                                tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade",
                                                pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
                                                goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded",
                                                saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves",

                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny",
                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef",
                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper",
                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch",
                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard"
                               
                                                //rating?
                                   
                                                   //VPROHACKREASON = "privateIntAttributeMap[^VPROHACKREASON]"
                                                //VPROHACKATTR = "privateIntAttributeMap[^VPROHACKATTR]"
                                                }
                                              }
                                          ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,                          
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubReport"
                        subreports = {
                            clubReports = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKClubGameReportBase::OSDKClubClubReport",
                                skipComparison = true,
                                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    customClubClubReport = {
                                        reportTdf = "Blaze::GameReporting::SportsClubReportBase::SportsClubsClubReport",
                                        skipComparison = true,
                                        statUpdates = {
                                        }
                                    } // customClubClubReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "club",
                                        primaryKey = [ "club_id" ],
                                        columns = {
                                            club_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goals",
                                            goalsAgainst = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goalsAgainst"
                                        }
                                    }
                                ] // gameHistory
                            } // clubReports
                        } // subreports
                    } // teamReports
                 } // subreports
            } // report
        } // gameType13

        gameType14 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport"
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport",
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::H2HReportBase::GameReport",
                                reportValues = {
                                    clubId = "$GAMEATTRS$[^OSDK_clubId]"
                                } // reportValues
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::H2HReportBase::PlayerReport",
                                statUpdates = {
                                    PlayerStats = {
                                        category = "ClubIntraH2HStats",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            club = "$REPORT$.gameReport.customGameReport.clubId"
                                        },
                                        stats = {
                                            pointsFor = { value = "$REPORT$.playerReports[$INDEX$].score", type = "increment" },
                                            wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "increment" },
                                            losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "increment" },
                                            skill = { value = "$REPORT$.playerReports[$INDEX$].skill", type = "assign" },
                                            overallSkillPoints = { value = "$REPORT$.playerReports[$INDEX$].skillPoints", type = "assign" },
                                            pointsAgainst = { value = "$REPORT$.playerReports[$INDEX$].pointsAgainst", type = "increment" },
                                            hits = { value = "hits", type = "increment" },
                                            misses = { value = "misses", type = "increment" },
                                            serves = { value = "serves", type = "increment" }
                                        }
                                    }
                                }, // statUpdates
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            pointsAgainst = "$REPORT$.playerReports[$INDEX$].pointsAgainst",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf",
                                            HITS = "hits",
                                            MISSES = "misses",
                                            SERVES = "serves"
                                        }
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType14
        
        gameType20 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            sponsoredEventId = "$GAMEATTRS$[^OSDK_sponsoredEventId]",
                            categoryId = "$GAMEATTRS$[^OSDK_categoryId]"
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_sponsoredEventId = "sponsoredEventId"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Sports::H2HPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Sports::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = { 
                                        //Friendlies do not update DNF
                                        } //statUpdates
                                    } //CommonPlayerReport
                                },    //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",                                            
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                            pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::SportsOSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,                         
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType20

        gameType21 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::Sports::SkillGameReport",
                statUpdates = {
                    PlayerStats = {
                        category = "SkillGameStats",
                        entityId = "$REPORT$.playerid",
                        keyscopes = {
                            skillgame        = "$REPORT$.skillgame"
                        },
                        stats = {
                            highscore = { value="score", type="MAX" }
                        }
                    }
                }
            } // report
        } // gameType21

    }, //gameTypes
    
    // GameHistory MetaData
    //
    // First  Param: Style
    // Second Param: No data string
    // Third  Param: User column index
    // Fourth Param: Number of rows in the spreadsheet
    // Fifth  Param: Vertical offset of the spreadsheet (to move it down on the screen)
    // Sixth  Param: Number of static columns in the spreadsheet

    // GameHistory Column MetaData
    //
    // First  Param: Column Width
    // Second Param: Column Alignment (0 = left, 1 = center, 2 = right)
    // Third  Param: Game Specific Param
    // Fourth Param: Extension specific data (e.g. For Club, "M" = Members, "FA" = Free Agent)
    gameHistory = {

        // the max number of games will be purged in each interval
        maxGamesToPurgePerInterval = 10000,

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 1 min
        lowFrequentPurgeInterval = "1m",

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 30 secs
        highFrequentPurgeInterval = "30s",

        // format 0d:0h:0m:0s; governs the delay before a game report becomes eligible for purge; 0d to disable expiry
        historyExpiry = "180d"
    },
    
    gameHistoryReporting = {

        queries = [
            {   name = "gameType0_skill_damping_query",
                typeName = "gameType0",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "gameType3_skill_damping_query",
                typeName = "gameType3",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "gameType6_skill_damping_query",
                typeName = "gameType6",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "SponsoredEvent_skill_damping_query",
                typeName = "gameType0",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" },
                    { table = "game",   name = "OSDK_sponsoredEventId", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "gameType14_skill_damping_query",
                typeName = "gameType14",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "club_skill_damping_query",
                typeName = "gameType9",
                maxGamesToReturn = 10,
                filters = [
                    { table = "club",   name = "club_id",  expression = "? = $s" },
                    { table = "club",   name = "result",   expression = "? IN (1,16385)" }
                ]
                columns = [
                    { table = "club", name = "club_id" }
                    { table = "club", name = "losses" }
                    { table = "club", name = "winnerByDnf" }
                ]
            },
            {   name = "club_games_in_last_hour_query",
                typeName = "gameType9",
                maxGamesToReturn = 1,
                filters = [ 
                    { table = "club",   name = "club_id",   expression = "? = $s" },
                    { table = "game",   name = "timestamp", expression = "(? BETWEEN DATE_SUB(NOW(), INTERVAL 1 HOUR) AND NOW())" }
                ]
            },
            {   name = "osdkticker_gamestats_query",
                typeName = "gameType0",
                // there is no value to disable maxGamesToReturn, just pass in a very big number.
                maxGamesToReturn = 10000,
                filters = [ 
                    { table = "game",   name = "timestamp", expression = "(? BETWEEN DATE_SUB(NOW(), INTERVAL $s SECOND) AND NOW())" }
                ]
               columns = [
                    { table = "game",   name = "timestamp" },
                    { table = "game",   name = "OSDK_sponsoredEventId" }, //MMA. knock out/submission/draw etc. Change to "finishType" when the column is availabe.
                    { table = "game",   name = "OSDK_sponsoredEventId" }, //MMA. end round.  Change to "finishRound" when the column is availabe.
                    { table = "player", name = "player_id" },
                    { table = "player", name = "result" },
                    { table = "player", name = "SCORE" }
               ]
             }           
        ] // queries

        views = [
            // Missing skill level, result, status and game mode
            {   name = "NormalRecentGames",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType0",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", entityType = "usersessions.user", shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0|1000" },
                    { table = "player", index = 0, name = "result", shortDesc = "SDB_RESULT_S",    longDesc = "SDB_RESULT",    type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "SCORE",  shortDesc = "SDB_SCORES",      longDesc = "SDB_SCOREL",    type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "player", index = 1, name = "SCORE",  shortDesc = "SDB_OS_S",        longDesc = "SDB_OS",        type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    //{ table = "player", index = 0, name = "skill",  shortDesc = "SDB_LVL",         longDesc = "SDB_GS_SKILL",  type = "int", format = "%d", kind = "~num", metadata = "100|0|" },
                    //{ table = "player", index = 1, name = "skill",  shortDesc = "SDB_OPPS_LVL_S",  longDesc = "SDB_OPPS_LVL",  type = "int", format = "%d", kind = "~num", metadata = "100|0|" },
                    { table = "player", index = 0, name = "TEAM",   shortDesc = "SDB_TEAM_USED_S", longDesc = "SDB_TEAM_USED", type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "player", index = 1, name = "TEAM",   shortDesc = "SDB_TEAM_FACED_S",longDesc = "SDB_TEAM_FACED",type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
                    { table = "player", index = 0, name = "result", shortDesc = "SDB_STATUS",      longDesc = "SDB_STATUS",    type = "int", format = "%d", kind = "~num", metadata = "200|0|1007" }
                    { table = "game",   index = 0, name = "OSDK_sponsoredEventId", shortDesc = "SDB_SPONSOREDEVENT", longDesc = "SDB_SPONSOREDEVENT", type = "int", format = "%d", kind = "~num", metadata = "200|0|1010" }
                ]
            },
            {   name = "CoopRecentGames",
                desc = "PSDB_1PLUS_COOP",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType3",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", entityType = "usersessions.user", shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0|1000" },
                    //{ table = "player", index = 1, name = "skill",shortDesc = "SDB_LVL",         longDesc = "SDB_GS_SKILL",   type = "int", format = "%s", kind = "~num", metadata = "100|0|1000" },
                    { table = "player", index = 0, name = "result", shortDesc = "SDB_RESULT_S",    longDesc = "SDB_RESULT",    type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "SCORE",  shortDesc = "SDB_SCORES",      longDesc = "SDB_SCOREL",    type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "player", index = 1, name = "SCORE",  shortDesc = "SDB_OS_S",        longDesc = "SDB_OS",        type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    //{ table = "player", index = 0, name = "skill",  shortDesc = "SDB_LVL",         longDesc = "SDB_GS_SKILL",  type = "int", format = "%d", kind = "~num", metadata = "100|0|" },
                    //{ table = "player", index = 1, name = "skill",  shortDesc = "SDB_OPPS_LVL_S",  longDesc = "SDB_OPPS_LVL",  type = "int", format = "%d", kind = "~num", metadata = "100|0|" },
                    { table = "player", index = 0, name = "TEAM",   shortDesc = "SDB_TEAM_USED_S", longDesc = "SDB_TEAM_USED", type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "player", index = 1, name = "TEAM",   shortDesc = "SDB_TEAM_FACED_S",longDesc = "SDB_TEAM_FACED",type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
                    { table = "player", index = 0, name = "result", shortDesc = "SDB_STATUS",      longDesc = "SDB_STATUS",    type = "int", format = "%d", kind = "~num", metadata = "200|0|1007" }
                ]
            },
            {   name = "ClubRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC",  type = "int", format = "%d", kind = "~num", metadata = "130|0" }
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",              type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",              type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                  type = "int", format = "%d", kind = "~num", metadata = "100|0" }
                ]
            },
            {   name = "ClubQMChallengeRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id",   expression = "? = $s" },
                    { table = "game", index = 0, name = "challenge", expression = "? = $s" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC", type = "int", format = "%d", kind = "~num", metadata = "130|0" }
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",             type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",             type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                 type = "int", format = "%d", kind = "~num", metadata = "100|0" }
                ]
            },
            //  EASW Only Game History View
            {   name = "ClubQMChallengeRecentGamesWithinPeriod",
                desc = "SDB_RECENT",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id",   expression = "?  = $s" },
                    { table = "game", index = 0, name = "challenge", expression = "?  = $s" },
                    { table = "game", index = 0, name = "timestamp", expression = "? >= '$s'" },
                    { table = "game", index = 0, name = "timestamp", expression = "? <= '$s'" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 0, name = "club_id",   shortDesc = "SDB_OPPONENT_S", longDesc = "OPPONENT_ID", type = "int", format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "club", index = 0, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id",   shortDesc = "SDB_OPPONENT_S", longDesc = "OPPONENT_ID", type = "int", format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S", longDesc = "SDB_RESULT",  type = "int",    format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",   longDesc = "SDB_SCOREL",  type = "int",    format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",     longDesc = "SDB_OS",      type = "int",    format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "game", index = 0, name = "clubgamekey", shortDesc = "KEY",     longDesc = "KEY",         type = "string", format = "%s", kind = "~str", metadata = "320|0" }
                ]
            },
            {   name = "ClubMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "? = $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "300|0" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_MEMS",                  longDesc = "SDB_MEML",                   type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|M" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_CLUBS_COL_FREE_AGENT_S",longDesc = "SDB_CLUBS_COL_FREE_AGENT",   type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|FA" },
                    { table = "player", name = "SCORE",  shortDesc = "SDB_SCORES",                longDesc = "SDB_SCOREL",                 type = "int", format = "%d", kind = "~num", metadata = "60|0" }
                ]
            },
            {   name = "ClubOppMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "?  =  $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "?  <> $s" }
                ]
                columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "300|0" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_MEMS",                  longDesc = "SDB_MEML",                 type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|M" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_CLUBS_COL_FREE_AGENT_S",longDesc = "SDB_CLUBS_COL_FREE_AGENT", type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|FA" },
                    { table = "player", name = "SCORE",  shortDesc = "SDB_SCORES",                longDesc = "SDB_SCOREL",               type = "int", format = "%d", kind = "~num", metadata = "60|0" }
                ]
            }
        ] // views
    },

    metricsInfo = {
        reportsToStore = 5   // calculate the averate over the last N reports
        // these attributes will be added to health check status page
        // keep track the average of these attribute values
        storeAverage = [
            { name = "GENDPHASE" },
            { name = "GDESYNCEND" },
            { name = "GDESYNCRSN" },
            { name = "USERSSTRT0" },
            { name = "USERSSTRT1" },
            { name = "USERSEND0" },
            { name = "USERSEND1" },
            { name = "GUESTS0" },
            { name = "GUESTS1" },
            { name = "VOIPSTRT0" },
            { name = "VOIPSTRT1" },
            { name = "VOIPEND0" },
            { name = "VOIPEND1" },
            { name = "LATELOWGM" },
            { name = "LATEHIGM" },
            { name = "LATEAVGGM" },
            { name = "LATESDEVGM" },
            { name = "LATELOWNET" },
            { name = "LATEHINET" },
            { name = "LATEAVGNET" },
            { name = "LATESDEVNET" },
            { name = "BANDLOWGM" },
            { name = "BANDHIGM" },
            { name = "BANDAVGGM" },
            { name = "BYTESSENTGM" },
            { name = "BYTESRCVDGM" },
            { name = "BANDLOWNET" },
            { name = "BANDHINET" },
            { name = "BANDAVGNET" },
            { name = "BYTESSENTNET" },
            { name = "BYTESRCVDNET" },
            { name = "DROPPKTS" },
            { name = "PKTLOSS" },
            { name = "FPSLOW" },
            { name = "FPSHI" },
            { name = "FPSAVG" },
            { name = "FPSDEV" }
        ]
        // keep track the total number of each value
        storeByValue = [
            { name = "GRPTVER" },
            { name = "GRPTTYPE" },
            { name = "GRESULT" }
        ]
     },

    //Configuration section for skill-related functionality.
    skillInfo = {
        //Each entry in "dampingTables" creates a lookup table (from 0-x) for percentages to reduce skill gain by.
        //Any request for an index past what is defined in the configuration uses the last defined value.
        //Application of this configuration is in custom/reportprocessor.cpp, so a game team can choose to multiply the results from various lookups
        //or just go with the minimum damping returned after lookup.
        //Name field is used to identify the tables when passed into SkillDampingUtil::lookupDampingPercent()
        dampingTables = [
            { name = "rematchDamping"
              table = [ 100, 100, 80, 60, 40, 20, 0 ]
            },
            { name = "dnfDamping"
              table = [ 100, 90, 80, 50, 30, 0 ]
            }
        ]

        // max skill value (cap)
        // if not specified, then no capping
        //maxValue = 10000
    }, // skillInfo
    
    //Configuration for the "basic" report processor
    basicConfig = {
        // if true, then the basic report processor will not publish stats if the stats request contains *any* invalid stat entries
        //    for example, is stat A and B are in a request, A points to a valid stat update but B points to invalid update, then the
        //    stat update request will fail - meaning no stats are published.
        // if false, then the request will publish stat A but not B.  No errors are returned from game reporting.
        strictStatsUpdates = true
        mergeReports = true
    }
}
