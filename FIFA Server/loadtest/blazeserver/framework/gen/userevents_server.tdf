[headername="framework/tdf/userextendeddatatypes.h"]
#include "framework/gen/userextendeddatatypes.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

// TODO: Disabling proto generation because of circular import caused by Blaze::Util namespace
[headername="framework/tdf/qosdatatypesnetwork.h", includeProto=false]
#include "framework/gen/qosdatatypesnetwork.tdf"

[headername="framework/tdf/qosdatatypes.h"]
#include "framework/gen/qosdatatypes.tdf"

[headername="framework/tdf/metricsdatatypes.h"]
#include "framework/gen/metricsdatatypes.tdf"

namespace Blaze
{

[tdfid = "hash"]
class Login
{
    [tag="id", description="The user's BlazeId"]
    BlazeId mBlazeId;

    [tag="svcn", description="The service name that the client used to connect to the Blaze Server."]
    ServiceName mServiceName;

    [tag="pid", description="The Nucleus project id associated with the service name."]
    string(64) mProjectId;

    [tag="sid", description="The globally unique id of the user's session."]
    UserSessionId mSessionId;

    [tag="styp", description="The type of session logging in."]
    UserSessionType mSessionType;

    [tag="nid", description="The Account id of the user's master account."] 
    AccountId mAccountId;

    [tag="exid", description="DEPRECATED (Use PlatformInfo) - The user's ExternaId (XUID or PSN ID)"]
    ExternalId mExternalId;

    [tag="aids", description="Contains platform ids and current client platform."] 
    PlatformInfo mPlatformInfo;

    [tag="plat", default=INVALID, description="DEPRECATED (Use PlatformInfo) - Client platform type"] 
    ClientPlatformType mClientPlatform;

    [tag="pnam", description="The name of the logged in persona."] 
    string(MAX_PERSONA_LENGTH) mPersonaName;

    [tag="cloc", description="The locale of the session."]
    string(4) mConnectionLocale;

    [tag="ccty", description="The country/region of the session."]
    string(4) mConnectionCountry;

    [tag="loc", description="The locale of the Nucleus user."]
    string(4) mLocale;

    [tag="acty", description="The country of the Nucleus user."]
    string(4) mCountry;

    [tag="ctyp", description="The client type of the session."]
    string(64) mClientType;

    [tag="addr", description="The user's IP address."] 
    string(256) mIpAddress;

    [tag="err", description="If not login, Blaze error code string; otherwise, always ERR_OK."]
    string(64) mError;
    
    [tag="cnty", description="Country Code provided by the GeoIp lookup."]
    string(MAX_GEOCOUNTRY_LENGTH) mGeoCountry;
    
    [tag="cty", description="City provided by the GeoIp lookup."]
    string(MAX_GEOCITY_LENGTH) mGeoCity;
    
    [tag="st", description="The state or region provided by the GeoIp lookup."]
    string(MAX_GEOSTATE_LENGTH) mGeoStateRegion;
    
    [tag="lat", description="The latitude value provided by the GeoIp lookup."]
    float mLatitude;
    
    [tag="lon", description="The longitude value provided by the GeoIp lookup."]
    float mLongitude;

    [tag="tz", description="The time zone provided by the GeoIp lookup."]
    string(MAX_TIMEZONE_LENGTH) mTimeZone;

    [tag="isp", description="The ISP provided by the GeoIp lookup."]
    string(MAX_ISP_LENGTH) mISP;

    [tag="udid", description="The unique device Id."]
    string(UNIQUE_DEVICE_ID_MAX) mUniqueDeviceId;

    [tag="dvtp", description="Device Locality: local vs cloud."]
    DeviceLocality mDeviceLocality;
};

// TODO: Disabling proto generation because of circular import caused by Blaze::Util::NetworkQosData
[tdfid = "hash", generateProto=false]
class Logout
{
    [tag="id", description="The user's BlazeId"]
    BlazeId mBlazeId;

    [tag="svcn", description="The service name that the client used to connect to the Blaze Server."]
    ServiceName mServiceName;

    [tag="pid", description="The Nucleus project id associated with the service name."]
    string(64) mProjectId;

    [tag="sid", description="The globally unique id of the user's session."]
    UserSessionId mSessionId;

    [tag="styp", description="The type of session logging out."]
    UserSessionType mSessionType;

    [tag="ctyp", description="The client type of the session."]
    string(64) mClientType;

    [tag="dur", description="Time online (in seconds)."]
    uint32_t mTimeOnline;

    [tag="ntwk", description="QOS data like ping site latency."]
    string(256) mNetworkInfo;
    
    [tag="qdat", description="Bandwidth and NAT type info."]    
    Blaze::Util::NetworkQosData mQosData;

    [tag="cmet", description="Upnp client metrics."]
    ClientMetrics mClientMetrics;

    [tag="cume", description="Contains metrics gathered by the console."]
    ClientUserMetrics mClientUserMetrics;

    [tag="reas", description="UserSessionDisconnectType enum string (eg. CLIENT_LOGOUT, DUPLICATE_LOGIN)."]
    string(64) mCloseReason;

    [tag="serr", description="Channel socket error code (if applicable)."]
    int32_t mSocketError;

    [tag="err", description="If not logout, Blaze error code string; otherwise, always ERR_OK."]
    string(64) mError;

    [tag="csta", description="Client-specified state."]
    ClientState mClientState;

    [tag="nid", description="DEPRECATED (Use PlatformInfo) - The Account id of the user's master account."] 
    AccountId mAccountId;

    [tag="exid", description="DEPRECATED (Use PlatformInfo) - The user's ExternaId (XUID or PSN ID)"]
    ExternalId mExternalId;

    [tag="pnam", description="The name of the logged in persona."] 
    string(MAX_PERSONA_LENGTH) mPersonaName;

    [tag="aids", description="Contains platform ids and current client platform."] 
    PlatformInfo mPlatformInfo;

    [tag="addr", description="The user's IP address."] 
    string(256) mIpAddress;

    [tag="udid", description="The unique device Id."]
    string(UNIQUE_DEVICE_ID_MAX) mUniqueDeviceId;
    
    [tag="dvlo", description="Device Locality: local vs cloud."]
    DeviceLocality mDeviceLocality;

    [tag="cidl", description="A list of EADP ContentIds associated with the servicename (used for Early Access Trials)."]
    TrialContentIdList mTrialContentIds;
};
} // namespace Blaze

