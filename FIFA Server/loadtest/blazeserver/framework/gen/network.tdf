/*! ************************************************************************************************/
/*!
    \file network.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="framework/tdf/networkaddress.h"]
#include "framework/gen/networkaddress.tdf"

namespace Blaze
{
    [description="General recommended minimum value for server-server, server-client related timeouts. Warnings may be logged a timeout is configured to be less than this value."]
    const int64_t NETWORK_CONNECTIONS_RECOMMENDED_MINIMUM_TIMEOUT_MS = 30000;

    typedef string(64) NpSessionId;
    [description="SlotId is tied to maximum player capacity. Maximum player capacity cannot be greater than 256."]
    typedef uint8_t SlotId; //If a game requires more than 256 slots, SlotId should be changed to a uint16_t to match the player capacity field and allow more slots to be assigned.

    typedef string(-1) CCSConnectionSetId;

    [description="The network topology for VOIP connections (voice over IP).  These settings are interpreted by your BlazeNetworkAdapter."]
    enum VoipTopology
    {
        [description="VOIP is disabled (for a game)"]
        VOIP_DISABLED,
        [description="VOIP uses a star topology; typically some form of 3rd party server dedicated to mixing/broadcasting voip streams.  Actual implementation depends on your BlazeNetworkAdapter."]
        VOIP_DEDICATED_SERVER,
        [description="VOIP uses a full mesh topology; each player makes peer connections to the other players/members for voip traffic.  Actual implementation depends on your BlazeNetworkAdapter."]
        VOIP_PEER_TO_PEER
    };
    
    [description="enumeration of network topology, mainly two types of topology, client server and peer to peer 8th bit holds type of topology "]
    enum GameNetworkTopology
    {
        [description="client server peer hosted network topology"]
        CLIENT_SERVER_PEER_HOSTED = 0x00,
        [description="client server dedicated server topology"]
        CLIENT_SERVER_DEDICATED = 0x01,
        [description="Peer to peer full mesh network topology"]
        PEER_TO_PEER_FULL_MESH = 0x82,

        [description="disabled network topology"]
        NETWORK_DISABLED = 0xFF
    };

    [description="Enumeration of presence support as defined by the client platform (Currently supported for Xbox/PS only, all other platforms should specify PRESENCE_MODE_NONE)."]
    enum PresenceMode
    {
        [description="No presence management. E.g. For games that should never be advertised in shell UX and cannot be used for 1st party invites."]
        PRESENCE_MODE_NONE = 0,
        [description="Full presence as defined by the platform."]
        PRESENCE_MODE_STANDARD = 1,
        [description="Private presence as defined by the platform. For private games which are closed to uninvited/outside users."]
        PRESENCE_MODE_PRIVATE = 2,
        [description="Same as PRESENCE_MODE_NONE but with a non-zero value that allows it to be serialized over the wire for grpc. Needed because non-zero PRESENCE_MODE_STANDARD is defined as default in GameCreationData tdf."]
        PRESENCE_MODE_NONE_2 = 3
    };
    
    [description="Enumeration of endpoint bind type"]
    enum BindType
    {
        [description="This endpoint binds on both the external and internal interfaces of the server."]
        BIND_ALL,  
        
        [description="This endpoint binds on the internal interface of the server."]
        BIND_INTERNAL,
        
        [description="This endpoint binds on the external interface of the server."]
        BIND_EXTERNAL
    };
    
    
} // namespace Blaze
