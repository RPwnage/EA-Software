[ headername="ccs/tdf/ccs.h" ]
#include "ccs/gen/ccs.tdf"

namespace Blaze
{
namespace CCS
{

[
    id = core/1030,
    description = "Component used for access to the Connection Concierge Service",
    details = "CCS supports RESTful APIs for communicating with the Connection Concierge Service.",
    proxyOnly = true,
    http = {
        apiVersion = "",
        payloadEncoderSubType = "NORMAL"
    }
]
component CCS
{
    errors
    {
        [description = "The issued request is bad."]
        CCS_ERR_REQUEST_BAD = 1;
        [description = "The authorization header is not provided or expired."]
        CCS_ERR_REQUEST_UNAUTHORIZED = 2;
        [description = "The provided authorization does not contain correct scope privileges."]
        CCS_ERR_REQUEST_FORBIDDEN = 3;
        [description = "The requested resource not found."]
        CCS_ERR_REQUEST_RESOURCE_NOTFOUND = 4;
        [description = "The requested entity too large."]
        CCS_ERR_REQUEST_TOOLARGE = 5;
        [description = "The request issued with a Content-Type other than application/json."]
        CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE = 6;
        [description = "The request ran into an error."]
        CCS_ERR_REQUEST_CUSTOM = 7;
        [description = "The service encountered an internal error"]
        CCS_ERR_INTERNAL_SERVICE_ERROR = 8;
    }
    slave 
    {
        methods
        {
            [
              id = 1,
              description = "[DEPRECATED - Use getHostedConsoleConnection instead] Get resource for making a hosted connection.",
              details = "Get resource for making a hosted connection.",
              errors = {CCS_ERR_REQUEST_BAD, CCS_ERR_REQUEST_UNAUTHORIZED, CCS_ERR_REQUEST_FORBIDDEN, CCS_ERR_REQUEST_RESOURCE_NOTFOUND, CCS_ERR_REQUEST_TOOLARGE, CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE, CCS_ERR_REQUEST_CUSTOM, CCS_ERR_INTERNAL_SERVICE_ERROR},
              requires_authentication = false,
              client_export = false,
              errortype = CCSErrorResponse,
              http = {
                resource = "/cc/{APIVersion}/hosted_connections/{connectionSetId}",
                method = "POST",
                custom_request_headers = { 
                  "Authorization" = "accessToken",
                  "Accept" = "acceptHeader"
                },
                url_params = {
                  "data_center" = "dataCenter",
                  "pool" = "pool"
                },
                status_code_errors = {
                    400 = CCS_ERR_REQUEST_BAD,
                    401 = CCS_ERR_REQUEST_UNAUTHORIZED,
                    403 = CCS_ERR_REQUEST_FORBIDDEN,
                    404 = CCS_ERR_REQUEST_RESOURCE_NOTFOUND,
                    413 = CCS_ERR_REQUEST_TOOLARGE,
                    415 = CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE,
                    425 = CCS_ERR_REQUEST_CUSTOM, 
                    500 = CCS_ERR_INTERNAL_SERVICE_ERROR 
                },
                addEncodedPayload = true,
                requestPayloadMember = "requestBody", // The encoded payload should only be "requestBody" member
                urlParamEncoderSubType = "DEFAULTDIFFERNCE" 
              }
            ]
            GetHostedConnectionResponse getHostedConnection(GetHostedConnectionRequest);

            [
              id = 2,
              description = "Free hosted connection resource.",
              details = "Free hosted connection resource.",
              errors = {CCS_ERR_REQUEST_BAD, CCS_ERR_REQUEST_UNAUTHORIZED, CCS_ERR_REQUEST_FORBIDDEN, CCS_ERR_REQUEST_RESOURCE_NOTFOUND, CCS_ERR_REQUEST_TOOLARGE, CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE, CCS_ERR_REQUEST_CUSTOM, CCS_ERR_INTERNAL_SERVICE_ERROR},
              requires_authentication = false,
              client_export = false,
              errortype = CCSErrorResponse,
              http = {
                resource = "/cc/{APIVersion}/hosted_connections/{connectionSetId}",
                method = "DELETE",
                custom_request_headers = { 
                  "Authorization" = "accessToken",
                  "Accept" = "acceptHeader"
                },
                url_params = {
                  "game_console_id_1" = "gameConsoleId1",
                  "game_console_id_2" = "gameConsoleId2"
                },
                status_code_errors = {
                    400 = CCS_ERR_REQUEST_BAD,
                    401 = CCS_ERR_REQUEST_UNAUTHORIZED,
                    403 = CCS_ERR_REQUEST_FORBIDDEN,
                    404 = CCS_ERR_REQUEST_RESOURCE_NOTFOUND,
                    413 = CCS_ERR_REQUEST_TOOLARGE,
                    415 = CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE,
                    425 = CCS_ERR_REQUEST_CUSTOM, 
                    500 = CCS_ERR_INTERNAL_SERVICE_ERROR 
                },
                addEncodedPayload = true,
                requestPayloadMember = "requestBody", // The encoded payload should only be "requestBody" member
                urlParamEncoderSubType = "DEFAULTDIFFERNCE" 
              }
            ]
            FreeHostedConnectionResponse freeHostedConnection(FreeHostedConnectionRequest);

            [
              id = 3,
              description = "Extend lease of a connection set.",
              details = "Extend lease of a connection set.",
              errors = {CCS_ERR_REQUEST_BAD, CCS_ERR_REQUEST_UNAUTHORIZED, CCS_ERR_REQUEST_FORBIDDEN, CCS_ERR_REQUEST_RESOURCE_NOTFOUND, CCS_ERR_REQUEST_TOOLARGE, CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE, CCS_ERR_REQUEST_CUSTOM, CCS_ERR_INTERNAL_SERVICE_ERROR},
              requires_authentication = false,
              client_export = false,
              errortype = CCSErrorResponse,
              http = {
                resource = "/cc/{APIVersion}/hosted_connections/{connectionSetId}",
                method = "POST",
                custom_request_headers = { 
                  "Authorization" = "accessToken",
                  "Accept" = "acceptHeader"
                },
                status_code_errors = {
                    400 = CCS_ERR_REQUEST_BAD,
                    401 = CCS_ERR_REQUEST_UNAUTHORIZED,
                    403 = CCS_ERR_REQUEST_FORBIDDEN,
                    404 = CCS_ERR_REQUEST_RESOURCE_NOTFOUND,
                    413 = CCS_ERR_REQUEST_TOOLARGE,
                    415 = CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE,
                    425 = CCS_ERR_REQUEST_CUSTOM, 
                    500 = CCS_ERR_INTERNAL_SERVICE_ERROR 
                },
                addEncodedPayload = true,
                requestPayloadMember = "requestBody" // The encoded payload should only be "requestBody" member
              }
            ]
            LeaseExtensionResponse extendLease(LeaseExtensionRequest);

            [
              id = 4,
              description = "Free hosted connection resources associated with a client.",
              details = "To be executed at the start up in dev environment to safeguard against blaze server kill.",
              errors = {CCS_ERR_REQUEST_BAD, CCS_ERR_REQUEST_UNAUTHORIZED, CCS_ERR_REQUEST_FORBIDDEN, CCS_ERR_REQUEST_RESOURCE_NOTFOUND, CCS_ERR_REQUEST_TOOLARGE, CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE, CCS_ERR_REQUEST_CUSTOM, CCS_ERR_INTERNAL_SERVICE_ERROR},
              requires_authentication = false,
              client_export = false,
              errortype = CCSErrorResponse,
              http = {
                resource = "/cc/{APIVersion}/hosted_connections/",
                method = "DELETE",
                custom_request_headers = { 
                  "Authorization" = "accessToken",
                  "Accept" = "acceptHeader"
                },
                url_params = {
                  "pool" = "pool",
                  "ccs_client_id" = "cCSClientId"
                },
                status_code_errors = {
                    400 = CCS_ERR_REQUEST_BAD,
                    401 = CCS_ERR_REQUEST_UNAUTHORIZED,
                    403 = CCS_ERR_REQUEST_FORBIDDEN,
                    404 = CCS_ERR_REQUEST_RESOURCE_NOTFOUND,
                    413 = CCS_ERR_REQUEST_TOOLARGE,
                    415 = CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE,
                    425 = CCS_ERR_REQUEST_CUSTOM, 
                    500 = CCS_ERR_INTERNAL_SERVICE_ERROR 
                },
                addEncodedPayload = true,
                requestPayloadMember = "requestId", 
                urlParamEncoderSubType = "DEFAULTDIFFERNCE"
              }
            ]
            FreeClientHostedConnectionsResponse freeClientHostedConnections(FreeClientHostedConnectionsRequest);

            [
              id = 5,
              description = "Get resource for making a hosted connection.",
              details = "Get resource for making a hosted connection.",
              errors = {CCS_ERR_REQUEST_BAD, CCS_ERR_REQUEST_UNAUTHORIZED, CCS_ERR_REQUEST_FORBIDDEN, CCS_ERR_REQUEST_RESOURCE_NOTFOUND, CCS_ERR_REQUEST_TOOLARGE, CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE, CCS_ERR_REQUEST_CUSTOM, CCS_ERR_INTERNAL_SERVICE_ERROR},
              requires_authentication = false,
              client_export = false,
              errortype = CCSErrorResponse,
              http = {
                resource = "/cc/{APIVersion}/hosted_connections/{connectionSetId}",
                method = "POST",
                custom_request_headers = { 
                  "Authorization" = "accessToken",
                  "Accept" = "acceptHeader"
                },
                url_params = {
                  "data_center" = "dataCenter",
                  "pool" = "pool"
                },
                status_code_errors = {
                    400 = CCS_ERR_REQUEST_BAD,
                    401 = CCS_ERR_REQUEST_UNAUTHORIZED,
                    403 = CCS_ERR_REQUEST_FORBIDDEN,
                    404 = CCS_ERR_REQUEST_RESOURCE_NOTFOUND,
                    413 = CCS_ERR_REQUEST_TOOLARGE,
                    415 = CCS_ERR_REQUEST_UNSUPPORTED_MEDIATYPE,
                    425 = CCS_ERR_REQUEST_CUSTOM, 
                    500 = CCS_ERR_INTERNAL_SERVICE_ERROR 
                },
                addEncodedPayload = true,
                requestPayloadMember = "requestBody", // The encoded payload should only be "requestBody" member
                urlParamEncoderSubType = "DEFAULTDIFFERNCE" 
              }
            ]
            GetHostedConnectionResponse getHostedConsoleConnection(GetHostedConsoleConnectionRequest);
        }
    }
}

} // namespace CCS
} // namespace Blaze
