<!-- 
     (c) Electronic Arts. All Rights Reserved.
==============================================================================

targets-init.xml

API Information

All targets
  ${package.configs}                           Property containing the list of configurations for the project
  ${package.usedependencies}                   Property containing the list of any use dependent packages by name (must be placed before the package command)
  ${package.usedependencies.${config-system}}  Property containing the list of any system specific use dependent packages by name (must be placed before the package command)

All build style targets
  ${package.buildtype}                          Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.builddependencies}                  Property containing the list of any build dependent packages by name (not required)
  ${package.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.headerfiles}                        Fileset containing the header files for the project (default provided)
  ${package.headerfiles.${config-system}}       System specific header files
  ${package.sourcefiles}                        Fileset containing the source files for the project (default provided)
  ${package.sourcefiles.${config-system}}       System specific source files, if necessary
  ${package.defines}                            Property containing the list of any build defines needed for the builds (not required)
  ${package.defines.${config-system}}           System specific defines (May not need this long term)

  ${package.includedirs}                        Property containing the list of any include directories needed for the builds (not required)
                                                Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.includedirs.${config-system}}       System specific includedirs, if necessary
  ${package.libs}                               Property containing the list of any build defines needed for the builds (not required)
                                                Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.libs.${config-system}}              System specific libraries, if necessary

  ${pacakge.buildmodules}
  ${package.${module}.buildtype}                     Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.${module}.builddependencies}             Property containing the list of any build dependent packages by name (not required)
  ${package.${module}.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.${module}.headerfiles}                   Fileset containing the header files for the project (default provided)
  ${package.${module}.headerfiles.${config-system}}  System specific header files
  ${package.${module}.sourcefiles}                   Fileset containing the source files for the project (default provided)
  ${package.${module}.sourcefiles.${config-system}}  System specific source files, if necessary
  ${package.${module}.defines}                       Property containing the list of any build defines needed for the builds (not required)
  ${package.${module}.defines.${config-system}}      System specific defines (May not need this long term)

  ${package.${module}.includedirs}                   Property containing the list of any include directories needed for the builds (not required)
                                                     Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.includedirs.${config-system}}  System specific includedirs, if necessary
  ${package.${module}.libs}                          Property containing the list of any build defines needed for the builds (not required)
                                                     Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.libs.${config-system}}         System specific libraries, if necessary


doxygen target
  ${package.doxygenfiles}            Fileset containing the doxygen files for the project (default provided)

==============================================================================
-->

<project xmlns="schemas/ea/framework3.xsd">

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <!-- Do some common set up for all targets -->
  <property name="package.configbuilddir" value="${package.configbuilddir ?? ${package.builddir}/${config}/build}"/>
  <property name="package.configbindir" value="${package.configbindir ?? ${package.builddir}/${config}/bin}"/>
  <property name="package.configlibdir" value="${package.configlibdir ?? ${package.builddir}/${config}/lib}"/>

  <property name="package.buildtype" value="none" unless="@{PropertyExists('package.buildtype')}"/>

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
  <include file="target-clean.xml" /> <!-- clean target is a recursive call down the dependencies so we need to define clean even if not top level -->
  <include file="target-build.xml" /> <!-- if a package as a target assigned with "build" style, doing a "dependent" task will trigger a build target for dependent package. -->
  <include file="target-create-app-package.xml" />  <!-- The app packaging copy asset targets need to be accessable by all projects.  Not just top level. -->
  <include file="target-iphone.xml"/>
  <include file="target-osx.xml"/>

  <parallel.do if="${nant.project.istoplevel??true}">
    <include file="target-additional.xml" />
    <include file="target-build-custom.xml" />
    <include file="target-create-prebuilt-package.xml"/>
    <include file="target-distributed-build.xml"/>
    <include file="target-doc.xml" />
    <include file="target-example.xml" />
    <include file="target-frostbite.xml" />
    <include file="target-make.xml" />
    <include file="target-msbuild.xml"/>
    <include file="target-package.xml" />
    <include file="target-remotebuild.xml" />
    <include file="target-run.xml" />
    <include file="target-shorthands.xml"/>
    <include file="target-standard.xml" />
    <include file="target-test.xml" />
    <include file="target-tool.xml" />
    <include file="target-vcproj.xml" />
    <include file="target-verify-includes.xml" />
    <include file="target-viewbuildinfo.xml" />
    <include file="target-visualstudio.xml" />
    <include file="target-projectize.xml" />
  </parallel.do>

  <!-- eaconfig target override defined by user -->
  <do if="@{PropertyExists('eaconfig.target-override.file')}">

    <!-- expand input property-->
    <eval type="Property" code="${eaconfig.target-override.file}" property="__target-override.expanded-path"/>

    <!-- relative path is combined with masterconfig file directory -->
    <property name="__target-override.masterconfig-dir" value="@{PathGetDirectoryName('${nant.project.masterconfigfile}')}" local="true"/>
    <property name="__target-override.expanded-path" value="@{PathCombine('${__target-override.masterconfig-dir}', '${__target-override.expanded-path}')}"/>
    <property name="__target-override.expanded-path" value="@{PathGetFullPath('${__target-override.expanded-path}')}" />

    <property name="__target-override.path"  value="@{PathGetDirectoryName('${__target-override.expanded-path}')}"              local="true"/>
    <property name="__target-override.file"  value="@{PathGetFileNameWithoutExtension('${__target-override.expanded-path}')}"   local="true"/>
    <property name="__target-override.ext"   value="@{PathGetExtension('${__target-override.expanded-path}')}"                  local="true"/>

    <property name="__target-override.file.1"   value="@{PathCombine('${__target-override.path}', '${__target-override.file}.${config-platform}${__target-override.ext}')}"  local="true"/>
    <property name="__target-override.file.2"   value="@{PathCombine('${__target-override.path}', '${__target-override.file}.${config-system}${__target-override.ext}')}"  local="true"/>
    <property name="__target-override.file.3"   value="@{PathCombine('${__target-override.path}', '${__target-override.file}${__target-override.ext}')}"  local="true"/>

    <choose>
      <do if="@{FileExists('${__target-override.file.1}')}">
        <include file="${__target-override.file.1}" />
      </do>
      <do if="@{FileExists('${__target-override.file.2}')}">
        <include file="${__target-override.file.2}" />
      </do>
      <do if="@{FileExists('${__target-override.file.3}')}">
        <include file="${__target-override.file.3}" />
      </do>
      <do>
        <warn message="Property eaconfig.target-override.file='${eaconfig.target-override.file}' but none of the files: '${__target-override.file.1}' or '${__target-override.file.2}' or '${__target-override.file.3}' exists."/>
      </do>
    </choose>
  </do>

</project>
