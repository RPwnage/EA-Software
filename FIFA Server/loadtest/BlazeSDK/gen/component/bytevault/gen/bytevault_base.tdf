[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/attributes.h"]
#include "framework/gen/attributes.tdf"

[headername="framework/tdf/networkaddress.h"]
#include "framework/gen/networkaddress.tdf"

namespace Blaze
{
namespace ByteVault
{

typedef string(32) LabelName;
typedef string(32) ContextName;
typedef string(32) CategoryName;
typedef string(32) RecordName;
typedef string(256) AdminEmail;
typedef string(256) ContentType;
typedef string(1024) Description;

enum TokenType
{
    INVALID_TOKEN_TYPE = 0,
    NUCLEUS_AUTH_TOKEN,
    NUCLEUS_ACCESS_TOKEN,
    MAX_TOKEN_TYPE
};

bitfield Permission
{
    PERMISSION_READ : 1;
    PERMISSION_WRITE : 1;
    PERMISSION_VIEW_DELETED : 1;
};

enum ActionType
{
    ACTION_TYPE_INVALID = 0,
    ACTION_TYPE_ADMIN,
    ACTION_TYPE_CONTEXT,
    ACTION_TYPE_CATEGORY,
    ACTION_TYPE_RECORD,
    ACTION_TYPE_HISTORY
};

enum AdminType
{
    ADMIN_TYPE_INVALID = 0,
    ADMIN_TYPE_SERVICE,
    ADMIN_TYPE_DATA,
    ADMIN_TYPE_CONTEXT_DEVELOPMENT,
    ADMIN_TYPE_CONTEXT_DATA
};
typedef list<AdminType> AdminTypeList;
typedef map<ContextName, AdminTypeList> AdminTypeListByContextMap;

class AccessPermission
{
    [tag="ownr", description="Access permission for owners"]
    Permission mOwner;

    [tag="trst", description="Access permission for trusted source"]
    Permission mTrusted;

    [tag="othr", description="Access permission for non-owners from untrustworthy source"]
    Permission mOthers;
};

class History
{
    [tag="hcnt", description="Maximum number of history records per record name and user. Archived records do not count towards the max.", default=0]
    uint64_t mMaxHistoryRecords;

    [tag="hgap", description="Minimum time gap between history records specified in minutes", default=1440]
    uint64_t mMinHistoryGap;
};

class CategorySettings
{
    [tag="rcnt", description="Max record count per user", default=0]
    uint64_t mMaxRecordsPerUser;

    [tag="rsiz", description="Max record payload size", default=0]
    uint64_t mMaxRecordPayloadSize;

    [tag="alle", description="Boolean flag indicating whether all of the record names in this category are editable. If true, then the list of editable record names is ignored."]
    bool mAllRecordsEditable;

    [tag="edit", description="The list of editable record names"]
    list<RecordName> mEditableRecordNames;

    [tag="perm", description="Access permission definition for this category"]
    AccessPermission mAccessPermission;

    [tag="gprm", description="Global permission definition for this category. For global permissions, the owner permission is ignored."]
    AccessPermission mGlobalPermission;

    [tag="hist", description="Record History settings for this category"]
    History mHistory;

    [tag="vers", description="Version of this category.  Version number is incremented with each update when autoIncrementVersion is set to true.", default=0]
    uint32_t mVersion;
};

class Category
{
    [tag="cat", description="Name of this category"]
    CategoryName mCategoryName;

    [tag="desc", description="Description of this category"]
    Description mDescription;

    [tag="conf", description="Configuration of this category."]
    CategorySettings mConfiguration;

    [tag="trst", description="List of inet filters that make up our trust settings."]
    NetworkFilterConfig mTrustedSources;

    [tag="recs", description="Total number of active records in this category"]
    int64_t mNumOfRecords;

    [tag="dlts", description="Total number of soft deleted records in this category"]
    int64_t mNumOfDeletedRecords;

    [tag="rcnt", description="Map of record name to number of active records under each record name"]
    map<RecordName, int64_t> mRecordCountByName;

    [tag="dcnt", description="Map of record name to number of soft deleted records under each record name"]
    map<RecordName, int64_t> mDeletedRecordCountByName;

    [tag="crea", description="The creation time of this category"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this category"]
    TimeValue mLastUpdateTime;

    [tag="del", description="Boolean flag indicating whether this category has been deleted"]
    bool mDeleted;
};

class Context
{
    [tag="name", description="Name of this context"]
    ContextName mName;

    [tag="labl", description="Label that this context belongs to"]
    LabelName mLabel;

    [tag="desc", description="Description of this context"]
    Description mDescription;

    [tag="dadm", description="The list of email addresses of context development admins", printFormat="hash"]
    list<AdminEmail> mDevAdmins;

    [tag="cadm", description="The list of email addresses of context data admins", printFormat="hash"]
    list<AdminEmail> mDataAdmins;

    [tag="recs", description="Total number of active records in this context"]
    int64_t mNumOfRecords;

    [tag="dlts", description="Total number of soft deleted records in this context"]
    int64_t mNumOfDeletedRecords;

    [tag="rcnt", description="Map of category name to number of unique record names under each category"]
    map<CategoryName, int64_t> mRecordNamesCountByCategory;
    
    [tag="acnt", description="Map of category name to number of active records under each category"]
    map<CategoryName, int64_t> mRecordCountByCategory;

    [tag="dcnt", description="Map of category name to number of deleted records under each category"]
    map<CategoryName, int64_t> mDeletedRecordCountByCategory;

    [tag="crea", description="The creation time of this context"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this context"]
    TimeValue mLastUpdateTime;

    [tag="del", description="Boolean flag indicating whether this context has been deleted"]
    bool mDeleted;

    [tag="vers", description="Version of this context.  Version number is incremented with each update when autoIncrementVersion is set to true.", default=0]
    uint32_t mVersion;
};

// can expand this enum to include new owner types in the future
enum UserType
{
    USER_TYPE_INVALID = 0,
    NUCLEUS_USER,
    NUCLEUS_PERSONA,
    GLOBAL
};

class User
{
    [tag="id", description="Numeric identifier for the user", default=INVALID_BLAZE_ID]
    int64_t mId;

    [tag="type", useEnumName=true, description="The type of id specified for the user", default=USER_TYPE_INVALID]
    UserType mType;
};
typedef list<User> UserList;

class RecordAddress
{
    [tag="ctxt", description="The context of the record"]
    ContextName mContext;

    [tag="cat", description="The category of the record"]
    CategoryName mCategoryName;

    [tag="rec", description="The name of the record"]
    RecordName mRecordName;

    [tag="ownr", description="The owner of this record"]
    User mOwner;
};

class RecordInfo
{
    [tag="rec", description="The name of the record"]
    RecordName mRecordName;

    [tag="ownr", description="The owner of this record"]
    User mOwner;

    [tag="crea", description="The creation time of this record"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this record"]
    TimeValue mLastUpdateTime;
};

class HistoryRecordInfo
{
    [tag="rec", description="The name of the record"]
    RecordName mRecordName;

    [tag="ownr", description="The owner of this record"]
    User mOwner;

    [tag="crea", description="The creation time of this record"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this record"]
    TimeValue mLastUpdateTime;

    [tag="arch", description="Boolean flag indicating whether this history record was manually archived"]
    bool mArchived;
};

class UpsertRecordInfo
{
    [tag="rec", description="The name of the record"]
    RecordName mRecordName;

    [tag="ownr", description="The owner of this record"]
    User mOwner;

    [tag="updt", description="The last update time of this record"]
    TimeValue mLastUpdateTime;
};

class DeletedRecordInfo
{
    [tag="rec", description="The name of the record"]
    RecordName mRecordName;

    [tag="ownr", description="The owner of this record"]
    User mOwner;

    [tag="crea", description="The creation time of this record"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this record"]
    TimeValue mLastUpdateTime;

    [tag="delt", description="The deleted time of this record"]
    TimeValue mDeletedTime;
};

class RecordPayload
{
    [tag="mime", description="The MIME content type of the payload data"]
    ContentType mContentType;

    [tag="data", description="The payload data"]
    blob mBlob;
};

[tdfid="hash"]
class Record
{
    [tag="info", description="The metadata for this record"]
    RecordInfo mInfo;

    [tag="load", description="The payload of this record"]
    RecordPayload mPayload;

    [tag="delt", description="The deleted time of this record"]
    TimeValue mDeletedTime;
};

class AuthenticationCredentials
{
    [tag="tokn", description="The token to use for authentication"]
    string(-1) mToken;

    [tag="ttyp", useEnumName=true, description="The token type", default=INVALID_TOKEN_TYPE]
    TokenType mTokenType;

    [tag="user", description="The user identification (id and type)"]
    User mUser;
};

[tdfid="hash"]
class AdminHistory
{
    [tag="admn", description="Email address of admin user", printFormat="hash"]
    AdminEmail mAdminEmail;

    [tag="map", description="Admin type list per context for this admin user"]
    AdminTypeListByContextMap mAdminTypeListByContextMap;
};

[tdfid="hash"]
class CategoryHistory
{
    [tag="cat", description="Name of this category"]
    CategoryName mCategoryName;

    [tag="desc", description="Description of this category"]
    Description mDescription;

    [tag="conf", description="Configuration of this category."]
    CategorySettings mConfiguration;

    [tag="trst", description="List of inet filters that make up our trust settings."]
    NetworkFilterConfig mTrustedSources;

    [tag="crea", description="The creation time of this category"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this category"]
    TimeValue mLastUpdateTime;

    [tag="del", description="Boolean flag indicating whether this category has been deleted"]
    bool mDeleted;
};

[tdfid="hash"]
class ContextHistory
{
    [tag="name", description="Name of this context"]
    ContextName mName;

    [tag="labl", description="Label that this context belongs to"]
    LabelName mLabel;

    [tag="desc", description="Description of this context"]
    Description mDescription;

    [tag="crea", description="The creation time of this context"]
    TimeValue mCreationTime;

    [tag="updt", description="The last update time of this context"]
    TimeValue mLastUpdateTime;

    [tag="del", description="Boolean flag indicating whether this context has been deleted"]
    bool mDeleted;

    [tag="vers", description="Version of this context.  Version number is incremented with each update when autoIncrementVersion is set to true.", default=0]
    uint32_t mVersion;
};

class JsonRecordPayload
{
    [tag="mime", description="The MIME content type of the payload data"]
    ContentType mContentType;

    [tag="sdat", description="The payload data"]
    string(-1) mBlob;
};

[tdfid="hash"]
class JsonRecord
{
    [tag="info", description="The metadata for this record"]
    RecordInfo mInfo;

    [tag="jloa", description="The payload of this record"]
    JsonRecordPayload mPayload;

    [tag="delt", description="The deleted time of this record"]
    TimeValue mDeletedTime;
};

}
}

