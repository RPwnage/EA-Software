[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/attributes.h"]
#include "framework/gen/attributes.tdf"


namespace Blaze
{
namespace Social
{
namespace Friends
{

class AuthenticationCredentials
{
    [tag="bact", description="Bearer access token"]
    string(-1) mAuthorization;

    [tag="appk", description="X-Application-Key"]
    string(-1) mApplicationKey;
    
    [tag="apiv", description="X-Api-Version"]
    string(-1) mApiVersion;
};

class MuteUserRequest
{
    [tag="unid", description="Nucleus user ID of requesting user"]
    int64_t mNucleusId;

    [tag="fnid", description="nucleus user ID of the target user"]
    int64_t mFriendId;

    [tag="auth", description="Authentication credentials for the request"]
    AuthenticationCredentials mAuthCredentials;
};

class CheckMuteStatusRequest 
{
    [tag="unid", description="Nucleus user ID of requesting user"]
    int64_t mNucleusId;

    [tag="strt", description="Starting record index (used if no ID list is specified)"]
    int32_t mStart;

    [tag="cont", description="Maximum number of records to return (used if no ID list is specified)"]
    int32_t mCount;
        
    [tag="name", description="Return persona names with records (used if no ID list is specified)"]
    bool mNames;

    [tag="lids", description="ID list of users to check for mute status"]
    list<int64_t> mIds;

    [tag="auth", description="Authentication credentials for the request"]
    AuthenticationCredentials mAuthCredentials;
};

class User
{
    [tag="unid", description="Nucleus user ID"]
    int64_t mUserId;

    [tag="pnid", description="Persona ID for the user EAID persona"]
    int64_t mPersonaId;

    [tag="tmst", description="Millisecond-precision epoch timestamp for when the relationship was established"]
    int64_t mTimestamp;
   
    [tag="dpnm", description="Display name for the user EAID persona"]
    string(-1) mDisplayName;

    [tag="sorc", description="The name of the source of the relationship, if known. This value is specified when the relationship is established, and the meaning is caller-defined"]
    string(-1) mSource;

    [tag="ftyp", description="Type of friendship, if applicable. This value will either be OLD or NEW depending on if the friendship exists on the legacy friends list or the expanded one respectively"]
    string(-1) mFriendType;

    [tag="fvrt", description="Whether or not the friendship is a favourite, if applicable. Favourite friendships will appear at the top of the paged result list, so favourite friends can always be found in a minimum number of calls"]
    bool mFavorite;
    
    [tag="dttm", description="An ISO8601 string representation of the timestamp field"]
    string(-1) mDateTime;
};

typedef list<User> UserList;

class PagingInfo
{
    [tag="size", description="Number of results returned in the response"]
    int32_t mSize;

    [tag="ofst", description="Offset of the returned values within the total result set"]
    int32_t mOffset;
   
    [tag="trsz", description="Total number of results available, may be greater than the number returned"]
    int32_t mTotalSize;
};

class PagedListUser
{
    [tag="entr", description="A list of Users"]
    UserList mEntries;

    [tag="pinf", description="Paging information, which will contain data on where the returned elements fit within the total result set"]
    PagingInfo mPagingInfo;
};

} //namespace Friends
} //namespace Social
} //namespace Blaze
