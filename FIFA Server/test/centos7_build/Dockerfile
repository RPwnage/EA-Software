ARG BASE_IMAGE
FROM $BASE_IMAGE

# Install developer packages
# Note that gcc is required for linking, even for clang blazeserver builds
# gcc-c++ is required by several package builds and is uninstalled at the end of this Dockerfile
RUN yum -y install \
        bison \
        dos2unix \
       # flex \
        gcc \
        gcc-c++ \
        libpcap-devel \
        libuuid-devel \
        wget \
        which \
        yum-utils \
        OpenSSL-1.1.1d-1.x86_64 

RUN echo "OPENSSL_ROOT_DIR=/opt/ea/openssl" > /etc/profile.d/openssl.sh && \
    echo "export OPENSSL_ROOT_DIR" >> /etc/profile.d/openssl.sh && \
    echo "PATH=\$PATH:\$OPENSSL_ROOT_DIR/bin" >> /etc/profile.d/openssl.sh && \
    echo "export PATH" >> /etc/profile.d/openssl.sh && \
    chmod +x /etc/profile.d/openssl.sh && \
    source /etc/profile.d/openssl.sh

RUN echo "/opt/ea/openssl/lib" > /etc/ld.so.conf.d/openssl-1.1.1d.conf
# Refresh ldconfig
RUN rm -f /etc/ld.so.cache && ldconfig

# lsb-release is required by the UnixClang package
RUN yum -y install --nogpgcheck redhat-lsb-core

# Install perforce client.
# (Instructions found here: https://www.perforce.com/perforce/doc.current/manuals/p4sag/index.html#P4SAG/install.linux.packages.install.html)
COPY perforce.repo /etc/yum.repos.d/
RUN rpm --import https://package.perforce.com/perforce.pubkey && \
    yum -y install helix-cli

# TEMPORARY: Copy in a prebuilt flex 2.6.0 binary
# The 'register' storage class specifier generated by flex < 2.6 is deprecated and incompatible with C++1z (breaks Clang builds)
# Currently, the highest flex version available in CentOS 7 yum repos is 2.5.37
COPY flex /usr/bin
COPY FlexLexer.h /usr/include

# Build and install hiredis (latest)
RUN wget --no-check-certificate https://github.com/redis/hiredis/archive/v0.13.3.tar.gz && \
    tar -xvf v*.tar.gz && cd hiredis-* && make && \
    mkdir -p /external-builds/hiredis/include/hiredis && cp *.h /external-builds/hiredis/include/hiredis/ && \
    mkdir -p /external-builds/hiredis/lib && cp libhiredis.a /external-builds/hiredis/lib/ && \
    cd .. && rm -f v*.tar.gz && rm -rf hiredis-*

# Build and install Google Performance Tools (latest)
RUN wget --no-check-certificate https://github.com/gperftools/gperftools/releases/download/gperftools-2.6.1/gperftools-2.6.1.tar.gz && \
    tar -xvf gperftools-*.tar.gz && cd gperftools-* && mkdir -p /external-builds/gperftools && \
    ./configure --prefix=/external-builds/gperftools --enable-frame-pointers && \
    make && make install && cd .. && rm -rf gperftools-*

# Build and install libssh2 (latest)
RUN wget https://www.libssh2.org/download/libssh2-1.8.0.tar.gz && \
    tar -xvf libssh2-*.tar.gz && cd libssh2-* && mkdir -p /external-builds/libssh2 && \
    ./configure --with-openssl --enable-shared=no --prefix=/external-builds/libssh2 CPPFLAGS=-I/opt/ea/openssl/include LDFLAGS=-L/opt/ea/openssl/lib/ && \
    make && make install && cd .. && rm -rf libssh2-*

# Build and install c-ares (latest)
RUN wget https://c-ares.haxx.se/download/c-ares-1.13.0.tar.gz && \
    tar -xvf c-ares-*.tar.gz && cd c-ares-* && mkdir -p /external-builds/c-ares && \
    ./configure --prefix=/external-builds/c-ares && \
    make && make install && cd .. && rm -rf c-ares-*

# Build and install curl (latest)
RUN wget https://curl.haxx.se/download/curl-7.62.0.tar.gz && \
    tar -xvf curl-*.tar.gz && cd curl-* && mkdir -p /external-builds/libcurl && \
    ./configure --prefix=/external-builds/libcurl --enable-ares=/external-builds/c-ares --with-ssl=/opt/ea/openssl --with-libssh2=/external-builds/libssh2 --enable-shared=no --enable-static --enable-ftp --disable-tftp --disable-ldap --disable-telnet --disable-dict --disable-file --disable-rtsp --disable-imap --disable-pop3 --disable-smtp && \
    make && make install && cd .. && rm -rf curl-*

# Install mono and java.
# (Instructions for installing mono found here: http://www.mono-project.com/download/#download-lin-centos)
# Note that the latest mono version currently in our yum repos is 4.2.4,
# but as of Framework 7.05.01 the .Net 4.6.1 runtime is required for nant commands.
# Also, both mono and java currently fail the gpg check
# ("Public key for lyx-fonts-2.2.2-5.el7.noarch.rpm is not installed")
RUN rpm --import http://repos.azulsystems.com/RPM-GPG-KEY-azulsystems && \
    curl -o /etc/yum.repos.d/zulu.repo http://repos.azulsystems.com/rhel/zulu.repo && \
    yum -y install zulu-8
RUN rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF" && \
    yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/ && \
    yum -y install --nogpgcheck mono-devel

# Build and install MariaDB C Connector
RUN yum -y install cmake && \ 
    wget https://downloads.mariadb.com/Connectors/c/connector-c-3.0.6/mariadb-connector-c-3.0.6-src.tar.gz && \
    tar -xvf mariadb-connector-*.tar.gz && cd mariadb-connector-c-* && mkdir build && cd build && \
    cmake .. -DOPENSSL_ROOT_DIR=/opt/ea/openssl && \
    cmake --build . --config RelWithDebInfo && \
    mkdir /usr/include/mariadb && \
    cd include && find . -name '*.h' | cpio -pdm /usr/include/mariadb && \
    cd ../../include && find . -name '*.h' | cpio -pdm /usr/include/mariadb && \
    cp -p ../build/libmariadb/lib* /usr/lib64/ && rm -f /usr/lib64/libmariadb.so.2 && \
    rm -rf ../../mariadb-connector-c-* && yum -y remove cmake

# Build and install google coredumper (latest from madscientist, which is the most well-maintained fork and fixes an issue where shared libs cannot be loaded by 
# gdb for cores generated from executables built on CentOS 7)
RUN wget --no-check-certificate https://github.com/madscientist/google-coredumper/archive/1b64fbc282ba08654853f34c2bda00ffe5e26855.zip && \
    yum -y install unzip gcc-c++ && unzip 1b64fbc282ba08654853f34c2bda00ffe5e26855.zip && cd google-coredumper-* && mkdir -p /external-builds/google-coredumper && \
    ./configure --prefix=/external-builds/google-coredumper && make && make install && \
    cd .. && rm -rf 1b64fbc282ba08654853f34c2bda00ffe5e26855.zip google-coredumper-* && yum -y remove unzip gcc-c++

# Refresh ldconfig
RUN rm -f /etc/ld.so.cache && ldconfig
