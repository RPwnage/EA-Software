<!-- 
     (c) Electronic Arts. All Rights Reserved.
-->
<project xmlns="schemas/ea/framework3.xsd">

	<do if="${config-system} == 'iphone'">

		<target name="sanitize-iphone-program-outputname">
			<property name="build.module" value="${build.module??${buildStepModuleName??${package.name}}}"/>
			<property name="eaconfig.build.group" value="${eaconfig.build.group??${buildStepGroup??runtime}}"/>
			<sanitize-iphone-program-outputname buildgroup="${eaconfig.build.group}" modulename="${build.module}"/>
		</target>

		<target name="copy-asset-files.iphone" style="use" description="Deploy files to the package" hidden="true">

			<!-- The properties 'buildStepGroup', 'buildStepModuleName', and 'buildStepModuleGroupName' are passed in from XcodeProjectizer. -->

			<property name="build.module" value="${build.module??${buildStepModuleName??${package.name}}}"/>
			<property name="eaconfig.build.group" value="${eaconfig.build.group??${buildStepGroup??runtime}}"/>

			<property name="bundle-name-override-prop" value="app-bundle-name"/>
			<property name="bundle-folder-extension" value="app"/>
			<do if="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.is-app-extension??false}">
				<property name="bundle-name-override-prop" value="app-extension-name"/>
				<property name="bundle-folder-extension" value="appex"/>
			</do>

			<property name="build.app-package-name" value="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.${bundle-name-override-prop}??${build.module}}" local="true"/>

			<!-- We really should clean this up and have one single function in Framework doing all these instead of having these type of mess everywhere.  
			Should clean this up at some point. -->
			<property name="build.remapped-exe-name" value="@{GetModuleOutputName('bin','${package.name}','${build.module}')}" local="true"/>
			<property name="build.exe-name" value="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.outputname??${build.remapped-exe-name}}" local="true"/>

			<property name="build-module-output-dir" local="true" value="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.outputdir??@{GetModuleOutputDir('bin','${package.name}')}}"/>

			<property name="package.asset-configbuilddir" value="${build-module-output-dir}/${build.app-package-name}.${bundle-folder-extension}"/>
			<property name="asset-deploy-basedir.iphone" value="${package.asset-configbuilddir}"/>

			<!-- 
			Note that if people need to exclude additional files, they can setup one of these filesets:
				[build_group].[module_name].additional-assetfiles.${config-system}
				[build_group].[module_name].additional-assetfiles
				package.[package_name].additional-assetfiles
			-->
			<fileset name="eaconfig-copy-asset-files.additional-excludedfiles" basedir="${package.asset-configbuilddir}" append="false" failonmissing="false">
				<includes name="_CodeSignature/**"/>
				<includes name="${build.exe-name}"/>
				<includes name="Info.plist"/>
				<!-- embedded.mobileprovision file is added by Xcode after the postbuild step. -->
				<includes name="embedded.mobileprovision"/>
				<includes name="PkgInfo"/>
				<!-- ResourceRules.plist only seems to be present for iphone-* configs (in opposition to iphonesim-*). -->
				<includes name="ResourceRules.plist"/>
			</fileset>

			<!-- If we use Xcode's Copy Resource phase to handle the assets, Xcode will copy the asset files flattened.  -->
			<property name="isUsingXcodeIncludeAssets_1" value="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.${config-system}.xcode-include-assets??false}" local="true"/>
			<property name="isUsingXcodeIncludeAssets_2" value="${${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.xcode-include-assets??false}" local="true"/>
			<property name="isUsingXcodeIncludeAssets_3" value="${xcode-include-assets??false}" local="true"/>
			<do if="${isUsingXcodeIncludeAssets_1} or ${isUsingXcodeIncludeAssets_2} or ${isUsingXcodeIncludeAssets_3}">
				<property name="${groupname??${buildStepModuleGroupName??runtime.${build.module}}}.__synctargetdir_copy_assets_flattened__" value="true"/>
			</do>

			<call target="copy-asset-files"/>
		</target>

		<target name="iphone-bundle" hidden="true">
			<!-- 
			We only want this target to be executed by nant-build and not under XCodeProjectizer.
			The property buildPostBuildTargets only get created by XCodeProjectizer.  So we detect presence
			of this property.  We may want to have better way of doing this in the future (like having 
			nant-build task create a special property on execution and then clear that property on finish).
			-->
			<do unless="@{PropertyExists('buildPostBuildTargets')}">
				<property name="iphonePackageExeName" value="${${groupname}.outputname??${build.module}}" local="true"/>
				<property name="iphonePackageDefaultExeBinDir" value="${package.configbindir}" local="true"/>
				<do if="${eaconfig.build.group} != 'runtime'">
					<property name="iphonePackageDefaultExeBinDir" value="${property.value}/${eaconfig.build.group}" local="true"/>
				</do>
				<property name="iphonePackageExeBinDir" value="${${groupname}.outputdir??${iphonePackageDefaultExeBinDir}}" local="true"/>
				<!-- Basic error check to make sure that the built exe is there in the first place. -->
				<choose>
					<do if="@{FileExists('${iphonePackageExeBinDir}/${iphonePackageExeName}')}">
						<echo message="Create an XCode wrapper project to package an app bundle ... "/>
						<property name="bundle-name-override-prop" value="app-bundle-name" local="true"/>
						<do if="${${groupname??runtime.${build.module}}.is-app-extension??false}">
							<property name="bundle-name-override-prop" value="app-extension-name"/>
						</do>
						<property name="appbundlename" value="${${groupname??runtime.${build.module}}.${bundle-name-override-prop}??${build.module}}" local="true"/>
						<IPhonePackageTask ExeName="${iphonePackageExeName}" ExeBinDir="${iphonePackageExeBinDir}" BundleName="${appbundlename}" XCodeProjDir="${package.configbuilddir}" GroupModuleName="${groupname}" />
					</do>
					<do>
						<warn message="Skipping app bundle packaging because of missing expected output binary file: ${iphonePackageExeBinDir}/${iphonePackageExeName}"/>
					</do>
				</choose>
			</do>
		</target>

		<!-- Mainly used by Frostbite's buildlayout generation to get the actual app bundle (or ipa export output) full path -->
		<target name="iphone.get-packaging-output">

            <!-- App bundle output name is changed between XcodeProjectizer 3 and 4 -->
            <dependent name="XcodeProjectizer"/>
            
            <property name="iphoneModuleOutputName" value="${${groupname}.outputname??${build.module}}" local="true"/>

            <property name="iphonePackageDefaultExeBinDir" value="${package.configbindir}" local="true"/>
			<do if="${eaconfig.build.group} != 'runtime'">
				<property name="iphonePackageDefaultExeBinDir" value="${property.value}/${eaconfig.build.group}" local="true"/>
			</do>
			<property name="iphonePackageExeBinDir" value="@{PathGetFullPath(${${groupname}.outputdir??${iphonePackageDefaultExeBinDir}})}" local="true"/>
			<property name="bundle-name-override-prop" value="app-bundle-name" local="true"/>
			<do if="${${groupname??runtime.${build.module}}.is-app-extension??false}">
				<property name="bundle-name-override-prop" value="app-extension-name"/>
			</do>
            <choose>
                <do if="'${package.XcodeProjectizer.version}' == 'dev' or @{StrCompareVersions('${package.XcodeProjectizer.version}','4.0.0')} lt 0">
                    <property name="appbundlename" value="${${groupname??runtime.${build.module}}.${bundle-name-override-prop}??${build.module}}" local="true"/>
                </do>
                <do>
	        		<property name="appbundlename" value="${${groupname??runtime.${build.module}}.${bundle-name-override-prop}??${iphoneModuleOutputName??${build.module}}}" local="true"/>
                </do>
            </choose>
            <property name="iphone.get-packaging-output.resolved-path" value="@{PathCombine(${iPhonePackageExeBinDir},${appbundlename})}"/>
			<property name="iphone.get-packaging-output.resolved-path" value="${property.value}.${iphone.get-packaging-output.output-type}"/>
		</target>

	</do>

</project>
