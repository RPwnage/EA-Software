<!-- (c) Electronic Arts. All Rights Reserved. -->
<project xmlns="schemas/ea/framework3.xsd">

	<do if="${config-system} == 'android'">

		<property name="android-use-target" value="auto" unless="@{PropertyExists('android-use-target')}"/>
		<property name="internal-android-use-target" value="${android-use-target}"/>
		<property name="internal-android-device-serial" value=""/>

		<!-- Auto use target setting, useful for build farm that occasionally runs tests on machines with devices and wants to auto detect, 
			 and start an emulator if no device is found. -->
		<target name="set-android-use-target">
			<do if="${internal-android-use-target} == auto">
				<SetTarget/>
			</do>
		</target>

		<property name='eaconfig.android-gcc.application-package-target' value='application-package.android'/>

		<!-- =========================================================================================== -->

		<!-- Generates an updated makefile and then executes the packaging step from the makefile. Allows repackaging without rebuilding. -->

		<!-- =========================================================================================== -->

		<!-- We kill ADB here in case someone is piping the test run to a log since the forked ADB never closes, it forces the pipe to remain open indefinitely -->
		<target name="android-kill-adb">
			<AdbKill killprocess="false" timeout="2000" failonerror="false" />
		</target>

		<!-- =========================================================================================== -->

		<!-- Properties that need to be set within an extension of the eaconfig-run target -->
		<createtask name="InitEaconfigRunProperties">
			<code>
				<property name="android-apk" value="@{PathCombine('${eaconfig-run-programfolder}', '${modulename}.apk')}"/>

				<!-- Default Timeout Values -->
				<property name="eaconfig-run-timeout" value="1200" unless="@{PropertyExists('eaconfig-run-timeout')}"/>
				<property name="android-timeout" value="@{MathMul('${eaconfig-run-timeout}', '1000')}" unless="@{PropertyExists('android-timeout')}"/>
				<property name="android-emulator-timeout" value="${android-timeout}" unless="@{PropertyExists('android-emulator-timeout')}"/>
				<property name="android-deploy-timeout" value="@{MathMul('${eaconfig-run-timeout}', '200')}" unless="@{PropertyExists('android-deploy-timeout')}"/>
			</code>
		</createtask>

		<!-- =========================================================================================== -->

		<target name="eaconfig-deploy.android" style="build" description="Run the current component on Android devices" hidden="true">
			<echo message="Deploying to '${internal-android-use-target}' '${internal-android-device-serial}'"/>

			<trycatch>
				<try>
					<DeployAndroidPackage packagefile="${android-apk}" timeout="${android-deploy-timeout}"/>
					<DeployToSdCard groupname="${groupname}" modulename="${modulename}" timeout="${android-deploy-timeout}"/>
				</try>
				<catch>
					<echo message="${trycatch.error}"/>
					<!-- We need to do a proper clean up to release all processes first and then re-throw the exception. -->
					<AdbKill killprocess="false" timeout="2000" failonerror="false" />
					<do if="${android-runtarget-emulator-restart??true}">
						<call target="android-testrun-finalize"/>
					</do>
					<throw/>
				</catch>
			</trycatch>
		</target>

		<!-- =========================================================================================== -->

		<target name="eaconfig-run.android" style="build" description="Run the current component on Android devices" hidden="true">
			<dependent name="AndroidSDK"/>

			<trycatch>
				<try>
					<task name="InitEaconfigRunProperties"/>

					<call target="android-testrun-initialize"/>
					<call target="eaconfig-deploy.android"/>

					<choose>
						<do if="${android-testrun-with-debugger??false}">
							<!-- if true we will call the target to run the tests using the gdb debugger -->
							<call target="androidsdk-debugger"/>
						</do>
						<do>
							<AndroidTestRunner timeout="${android-timeout}" args="${android-config-cmd-args??${eaconfig-run-args}}" apkfile="${android-apk}"/>
						</do>
					</choose>

					<UninstallAndroidPackage packagename="${package.android_config.deploypackagename}" timeout="${android-deploy-timeout}"/>

					<!-- if false we assume the user will handle stopping the emulator themselves -->
					<do if="${android-runtarget-emulator-restart??true}">
						<call target="android-testrun-finalize"/>
					</do>
				</try>
				<catch>

					<!-- 
						 Failed tests can accumulate on the device which can cause the device to run out of space later.

						 First check to see if the deploypackagename property is set though, if we error out in the 
						 deploy then we arguably do not need to uninstall the package.
				-->
					<do if="@{PropertyExists('package.android_config.deploypackagename')}">
						<do unless="${package.android_config.keepfailedrunbinaries??false}">
							<UninstallAndroidPackage
								packagename="${package.android_config.deploypackagename}"
								timeout="${android-deploy-timeout}"/>
						</do>
					</do>

					<do if="${android-runtarget-emulator-restart??true}">
						<AdbKill killprocess="true" timeout="2000" failonerror="false" />
					</do>
					<throw/>
				</catch>
			</trycatch>
		</target>

		<!-- =========================================================================================== -->

		<target name="android-testrun-initialize" description="Starts android connection and emulator" hidden="true">
			<echo message="Initializing the android test run..." />

			<!-- first check to see if there is a device(emulator or physical) that is already active that can be used -->
			<call target="set-android-use-target"/>

			<do if="'${internal-android-use-target}' == 'emulator' and '${internal-android-device-serial}' == ''"> <!-- if a isable emulator was already running it will be picked up by SetTarget and a serial will be set so we can skip this -->
				<AndroidEmulatorInit/>
			</do>
		</target>

		<target name="android-testrun-finalize" description="Shuts down android connection and emulator" hidden="true">
			<echo message="Finalizing the android test run..." />

			<!-- We kill ADB here in case someone is piping the test run to a log since the forked ADB never closes, it forces the pipe to remain open indefinitely -->
			<AdbKill killprocess="true" timeout="2000" failonerror="false" />

			<do if="'${internal-android-use-target}' == 'emulator'">
				<property name="android-emulator-temp" value="${sys.os.folder.temp}/AndroidEmulator"/>
				<echo message="Deleting android emulator temp directory '${android-emulator-temp}'..."/>
				<delete dir="${android-emulator-temp}" failonerror="false" failonmissing="false" verbose="true"/>
			</do>
		</target>

		<!-- =========================================================================================== -->

		<target name="androidsdk-debugger">
			<foreach item="String" in="${${eaconfig.build.group}.buildmodules}" property="androidsdk.test-run-name" delim=" \n">
				<echo message="Buildtype ${${eaconfig.build.group}.${androidsdk.test-run-name}.buildtype}"/>

				<AndroidTestRunner timeout="${android-timeout}" args="${android-config-cmd-args??${eaconfig-run-args}}" apkfile="${android-apk}" debug="true"
					sopath="${package.android_config.solib-search-path}"/>
			</foreach>
		</target>

		<!-- =========================================================================================== -->

		<target name="android-multidex-postpackage">
			<fail message="Target 'android-multidex-postpackage' no longer supported. If you need to use multidex setup please configure it in your android Gradle files."/>
		</target>
		<target name="android-repackage">
			<fail message="Target 'android-repackage' no longer supported. Please rebuild your package through normal build flow."/>
		</target>
	</do>
</project>
