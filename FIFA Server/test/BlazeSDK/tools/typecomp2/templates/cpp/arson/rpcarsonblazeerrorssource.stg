group rpcarsonblazeerrorssource : servercommon;

masterComponent(fileNode, component) ::= <<>>
slaveComponent(fileNode, component) ::= <<>>

rootComponent(fileNode, node) ::= <<

<standardFileHeader()>

<node.Components:{<if(!it.IsCompTypeArson)>#include "BlazeSDK/component/<it.Name; format="toLower">component.h"<endif>}; separator="\n">

const char8_t* getBlazeErrorName( Blaze::BlazeError blazeError ) 
{ 
    switch( blazeError )
    {
        case Blaze::ERR_OK                                                      :return( "ERR_OK" );
        
        // System errors:
        <node.Errors:{e | case Blaze::<e.Name; format="@%1$-60s">:return( "<e.Name> (<e.description>)" );}; separator="\n">

        // SDK errors:
        <node.SdkErrors:{e | case Blaze::<e.Name; format="@%1$-60s">:return( "<e.Name> (<e.description>)" );}; separator="\n">

        // Component errors (this is just a centralized list for reference only of errors defined in the
        // standard components; the actual constants are defined in components' own headers):
<node.Components: printBlazeComponentErrors(component=it); separator="\n">
        default                                                                 :return( "???" ); 
    }
}

<standardFileFooter()>

>>



printBlazeComponentErrors(component) ::= <<
<if(component.Errors)>

        // <compName(component=component)> errors:
        <component.Errors:{e | case Blaze::<e.Name; format="@%1$-60s">:return( "<e.Name> (<e.description>)" );}; separator="\n">
<endif>
>>







