/*! ************************************************************************************************/
/*!
    \file legacyrules.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="gamemanager/tdf/gamemanager.h"]
#include "gamemanager/gen/gamemanager.tdf"

[headername="gamemanager/tdf/matchmaker_types.h"]
#include "gamemanager/gen/matchmaker_types.tdf"

[headername="framework/tdf/userextendeddatatypes.h"]
#include "framework/gen/userextendeddatatypes.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameManager
{

//////////////////////////////////////////////////////
// Ranked Game Rule
//////////////////////////////////////////////////////

[description="Settings used to instantiate a RankedGameRule instance in a matchmaking session."]
class RankedGameRulePrefs
{
    [
        description = "The possible desired values for a game's 'ranked' setting."
    ]
    enum RankedGameDesiredValue
    {
        [description="placeholder invalid"]
        INVALID =      0x0,
        
        [description="we want an unranked game"]
        UNRANKED =      0x1,
        
        [description="we want a ranked game"]
        RANKED =        0x2,

        [description="we want a random ranked setting (we'll cast a random vote for the setting)"]
        RANDOM =        0x4,
        
        [description="we don't care about the game's ranked setting (we won't vote on the setting)"]
        ABSTAIN =       0x8
        
    };

    [tag="thld", description="The name of the minFitThreshold list to use when calculating the fitScore for the rankedGameRule.  Setting the name to the empty string (default) will disable the rule (all evaluations are a match, returning the maxPossibleFitScore for the rule."]
        MinFitThresholdName mMinFitThresholdName;
    
    [tag="valu", default=UNRANKED, description="Your desired value for the game's ranked setting."]
        RankedGameDesiredValue mDesiredRankedGameValue;
};


[description="Settings used to send the ranking rule information back to client for a matchmaking session."]
class RankRuleStatus
{
    [tag="rval", description="Flags representing the ranked game values (or player's desired values) that we'll currently match. See RankedGameRulePrefs::RankedGameDesiredValue."]
    uint8_t mMatchedRankFlags; 
};

//////////////////////////////////////////////////////
// Roster Size Rule
//////////////////////////////////////////////////////
// NOTE: This rule, despite mentioning Players only accounts for Game Participants. Spectators are ignored.
const uint16_t INVALID_ROSTER_SIZE_RULE_MAX_SIZE = 65535; //can't use UINT16_MAX because typecomp doesn't like assigning constants to constants.
[description="DEPRECATED - Use PlayerCountRule if needed - Settings used to instantiate the RosterSizeRule instance for a matchmaking session."]
class RosterSizeRulePrefs
{
    [tag="pmin", default=0, description="The min number of Participants in the game"]
        uint16_t mMinPlayerCount;

    [tag="pcap", default=INVALID_ROSTER_SIZE_RULE_MAX_SIZE, description="The max number of Participants in the game"]
        uint16_t mMaxPlayerCount;   
};

//////////////////////////////////////////////////////
// Host Balancing Rule
//////////////////////////////////////////////////////

[description="Settings used to instantiate the HostBalancingRule instance for a matchmaking session."]
class HostBalancingRulePrefs
{
    [tag="thld", description="The name of the minFitThreshold list to use when calculating the fitScore for the HostBalancingRule."]
        MinFitThresholdName mMinFitThresholdName;
};

[description="Settings used to send the host balance rule information back to client for a matchmaking session."]
class HostBalanceRuleStatus
{
    enum HostBalanceValues
    {
        [description="only matching players who are strictly balanced compared to me."]
        HOSTS_STRICTLY_BALANCED,
        
        [description="matching players who are strictly balanced or regularly balanced compared to me."]
        HOSTS_BALANCED,

        [description="matching any players; host balancing is ignored/disabled."]
        HOSTS_UNBALANCED
    };
    [tag="bval", description="host balance value the session current expects."]
    HostBalanceValues mMatchedHostBalanceValue;
};

//////////////////////////////////////////////////////
// Host Viability Rule
//////////////////////////////////////////////////////

[description="Settings used to instantiate the HostViabilityRule instance for a matchmaking session."]
class HostViabilityRulePrefs
{
    [tag="thld", description="The name of the minFitThreshold list to use when calculating the fitScore for the HostViabilityRule."]
        MinFitThresholdName mMinFitThresholdName;
};

[description="Settings used to send the host vaiablity rule information back to client for a matchmaking session."]
class HostViabilityRuleStatus
{
    enum HostViabilityValues
    {
        [description="this session will match an assured connection."]
        CONNECTION_ASSURED,
        
        [description="this session will match a likely connection."]
        CONNECTION_LIKELY,

        [description="this session will match a connection that's possible eg. strict to moderate on PC."]
        CONNECTION_FEASIBLE,

        [description="this session will match an unlikely connection."]
        CONNECTION_UNLIKELY
    };
    [tag="vval", description="host viability value the session current expects."]   
        HostViabilityValues mMatchedHostViabilityValue;
};


} // namespace GameManager
} // namespace Blaze
