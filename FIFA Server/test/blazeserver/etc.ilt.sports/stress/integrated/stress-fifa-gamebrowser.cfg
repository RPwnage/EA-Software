// Rete 3.05 config for fifa testing. Note this file is for a game-setup CG client,
// using CG to setup. Meat of the testing is done in other file which includes FG
// Configuration file for the stress tester
// 
// this test case serves as a general estimate of peak / worst case normal use (see WORST-CASE estimate notes in body below)
// WORST-CASE GB, high: 1)  2) number of subscrn lists alive 3) lifespan of subscrn list
// FIFA11-RETE-TEST: lifespan given 300 lists estimate 175s
// WORSE-CASE GB, high: 1) rate of games turnover 2) number of games (here 3.5) 3) lifespan of games
// FIFA11-RETE-TEST: lifespan given 7k games estimate 140s


// Configuration file for the stress tester
//

// Define the connection and protocol parameters
connection-info = {
    protocol = fire2
    encoder = heat2
    decoder = heat2

    // Total number of connections to use
    num-connections = #NUM_CONNECTIONS#

    // Control whether SSL is used or not
    secure = #STRESS_SECURE#
}

//
//This following block controls how instances are started up.
//
startup = {
    //Number of instances to start up in a given pass
    //A block size of 0 will start all instances simultaneously
    
    // parser does not allow expressions in variable value 
    #define SERVER_NUCLEUS_POOL_SIZE_TIMES_INT #SERVER_NUCLEUS_POOL_SIZE# * 4
    block-size = #SERVER_NUCLEUS_POOL_SIZE_TIMES_INT#

    //Delay between starting instances in milliseconds
    instance-delay = #CONN_INSTANCE_DELAY#

    //Delay between starting blocks in milliseconds
    // parser does not allow expressions in variable value 
    #define SERVER_NUCLEUS_POOL_SIZE_INT #SERVER_NUCLEUS_POOL_SIZE# * 4 * #CONN_INSTANCE_DELAY#
    block-delay = #SERVER_NUCLEUS_POOL_SIZE_INT#
}

// 
// Define the account/authentication parameters used for account creation and authentication
// 
#include "../etc.ilt.sports/stress/stress-account.cfg"

// 
// Define the list of stress modules that will be instantiated
// 
modules = [ gamebrowser ]

// 
// Define how the available instances/connections are distributed amongst the different modules
// 
distribution = {
    gamebrowser = 1.0
}

#if PLATFORM == "common"
// define the distribution of platform types for available instances/connections used in shared cluster testing
platform-distribution = {
    pc = 0.4
    ps4 = 0.4
    xone = 0.2
}
#else
// define the specification of platform type for available instances/connections used in single platform testing
platform-specification = {
    platform = "#PLATFORM#"
}
#endif

// 
// Configuration data specific to the dummy module
// 
gamebrowser = {
    useScenarios = #USE_SCENARIOS#
    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    useServerQosSettings = #USE_SERVER_QOS#

    // Define the number of milliseconds between RPC calls (cycles)
    delay= 5000

    login = true
    logout = false
    opt_in_chance = 100
    num_execs_per_trial = 1
    num_trials = 2147483647
    
    dumpStats = DUMP_STATS_NONE

    // Define which action to execute
    action = noop
//    action = getGameData

    gameCreators = 0.0 // the fraction of instances that create games.  The rest join
    gameSearchers = 1.0 // the fraction of instances that create gb lists.

    // Game Browser stress configs
    // Note: the cycles might be 1-2s long, not necessarily 1s. Rough ests
    listConfigName = default
    
    listLife = 97500 // the minimum duration of a list subscription in milliseconds
    listDestroyChance = 0.90 // Once minimum listLife is hit, chance list gets deleted (for dispersing create/destroys)
    subscriptionLists = true // if using subscription lists, otherwise snapshots
    gameBrowserDelay = 0 // delay before game browser functionality initiates
    gameListSize = 5 // Allowed size of game browser lists
    listGetDataChance = 0.00
    
     // autosuffix: if count > 1, makes consequetive numeric suffixes starting from 2
    gbGameAttributes = [
        {
            prefix = "gameSpeed",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 0, create = 90 },
                { value = 1, create = 5 },
                { value = 2, create = 5 }
            ]
        }
        {
            prefix = "gamePoints",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 1, create = 90 },
                { value = 3, create = 1 },
                { value = 5, create = 1 },
                { value = 10, create = 1 },
                { value = 15, create = 1 },
                { value = 20, create = 6 }
            ]
        }
        {
            prefix = "OSDK_clubId",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 1000, create = 50 },
                { value = 2000, create = 50 }
            ]
        }
        {
            prefix = "OSDK_gameMode",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 0, create = 90 }
                { value = 9, create = 10 }
            ]
        }
        {
            prefix = "OSDK_matchupHash",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 0, create = 90 },
                { value = 1, create = 1 },
                { value = 2, create = 1 },
                { value = 3, create = 1 },
                { value = 4, create = 1 },
                { value = 5, create = 1 },
                { value = 6, create = 1 },
                { value = 7, create = 1 },
                { value = 8, create = 1 },
                { value = 9, create = 1 },
                { value = 10, create = 1 }
            ]
        }
        {
            prefix = "OSDK_rosterVersion",
            autoSuffixCount = 0,
            possibleValues = [
                { value = 0, create = 90 },
                { value = 1, create = 1 },
                { value = 2, create = 1 },
                { value = 3, create = 1 },
                { value = 4, create = 1 },
                { value = 5, create = 1 },
                { value = 6, create = 1 },
                { value = 7, create = 1 },
                { value = 8, create = 1 },
                { value = 9, create = 1 },
                { value = 10, create = 1 }
            ]
        }
    ]
    
    //
    // GameBrowser Frequencyr Criteria section
    //
    // predefined rule preferences
    
    // game protocol version rule
    // disabling game protocol version rule is part of the game manager configuration
    // if false, use below game protocol version string for matchmaking
    useRandomizedGameProtocolVersionString = false
    // to match ensure same as created games
    gmGameProtocolVersionString = FIFA11_1.00
    gameProtocolVersionString = match_any_protocol
     
    // Game size rule type to use new slot based rules
    sizeRule = GAME_SIZE_AND_PLAYER_SLOT_RULES
    
    // playerslotutilization rule
    playerSlotUtilizationRangeList = matchAny
    minPlayerSlotUtilizationLowerBound = 1
    minPlayerSlotUtilizationSeed = 2
    maxPlayerSlotUtilizationLowerBound = 98
    maxPlayerSlotUtilizationSeed = 2
    desiredplayerSlotUtilizationPercent = 100
    
    // FreePlayerSlotsRule
    minFreePlayerSlotsLowerBound = 0
    minFreePlayerSlotsSeed = 1
    maxFreePlayerSlotsLowerBound = 20
    maxFreePlayerSlotsSeed = 2
    
    // game size rule
    // comment out threshold name to disable rule
    // if using GAME_AND_TEAM_SIZE_RULE player count settings are overriden by ones set in team size rule's config.
    // Possible values for NHL:
    // OSDK_matchAny   = [0:0.0]
    // OSDK_matchExact = [0:1.0]
    // OSDK_matchRelax = [0:1.0, 1:0.5]
    // maxPlayerCountSeed, adds random value between 0 and seed-1
    // minPlayerCountSeed, adds random value between 0 and seed-1
    // maxPlayerCount, the lowerbound max desired size (added with random value between 0 and seed-1)
    // minPlayerCount, the lowerbound min desired size (added with random value between 0 and seed-1)
    // rete fifa 3.05: note we ensure here to create a solo game via create-mode
    gameSizeMinFitThresholdName = OSDK_matchAny
    minPlayerCount = 2
    minPlayerCountSeed = 1
    maxPlayerCount = 22  // WORST-CASE: more players match same games so max size for MM and varied matchable sizes for games in GM
    maxPlayerCountSeed = 1
    // this is the percentage of the difference between min & max player count to use as the desired player count
    desiredGameSizePercent = 100
    
    // ranked game rule
    // possible values
    // OSDK_matchExact = [0:1.0]
    // OSDK_matchAny = [0:0.0]
    rankedGameFitThresholdName = OSDK_matchAny
    unrankedFrequency = 0
    rankedFrequency = 100
    randomFrequency = 0
    abstainFrequency = 0
    
    // FIFA11-RETE-TEST: TODO: can this be disabled, matchAny?
    // skill rule
    skillRuleName = skillLevel
    // possible values
    // fitFormula FIT_FORMULA_GAUSSIAN, fiftyPercentFitValueDifference = 40
    // OSDK_matchExact    = [0:1.0]
    // OSDK_matchAny      = [0:0.0]
    // OSDK_matchRelax    = [0:REM, 1:INF]
    // OSDK_skillWithin5  = [0:5]
    // OSDK_skillWithin10 = [0:10]
    // OSDK_skillWithin20 = [0:20]
    // OSDK_skillWithin30 = [0:30]
    // OSDK_skillWithin40 = [0:40]
    //skillRuleFitThresholdName = OSDK_matchAny
    userSkillValueOverrride = true
    minimumSkill = 1
    maximumSkill = 99
    // Rete3.04, note: assuming skill within 100 for now, come back and check actual max range
    
    // dnf rule
    // the maximum acceptable DNF value
    maxDNFValue = 101

    // host balancing rule
    // comment out threshold name to disable rule
    // possible values
    // OSDK_matchAny = [ 0:HOSTS_UNBALANCED ]
    //hostBalancingFitThresholdName = OSDK_matchAny
    
    // host viability rule
    // comment out threshold name to disable rule
    // possible values
    // OSDK_connAssured = [0:CONNECTION_ASSURED]
    // OSDK_connLikely = [0:CONNECTION_LIKELY]
    // OSDK_connUnlikely = [0:CONNECTION_UNLIKELY]
    //hostViabilityFitThresholdName = OSDK_connUnlikely
    
    // expanded ping site rule
    // comment out range offset list name to disable rule
    // possible values
    // OSDK_matchExact    = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }]
    // OSDK_matchAny      = [{ t=0, offset=["INF"]}]
    // OSDK_matchRelax    = [{ t=0, offset=[100]}, { t=5, offset=[200]}]
    pingSiteRangeOffsetListName = OSDK_matchAny
    
    overrideUserGeoIpSampleDbFilename = "#GEOIP_SAMPLES_DB#"
    //
    // GameBrowser Frequency Criteria section
    //
    // generic rule configs
    #include "../etc.ilt.sports/stress/integrated/otp-rules.cfg"

    // generic attribute configs
    #include "../etc.ilt.sports/stress/integrated/otp-attributes.cfg"

}

