[headername="osdktournaments/tdf/osdktournamentstypes.h"]
#include "osdktournaments/gen/osdktournamentstypes.tdf"

namespace Blaze
{
namespace OSDKTournaments
{

class JoinTournamentNotification
{
    [tag="tnid", description = "The unique identifier for the tournament to join."]
    TournamentId mTournId;

    [tag="tmid", description = "The id of the member joining the tournament."]
    TournamentMemberId mMemberId;

    [tag="actv", description = "True if the member was inactive in another tournament when joining the new one."]
    bool mWasInactive;
};

class LeaveTournamentNotification
{
    [tag="tnid", description = "The unique identifier for the tournament to leave."]
    TournamentId mTournId;

    [tag="tmid", description = "The id of the member leaving the tournament."]
    TournamentMemberId mMemberId;
};

class TournamentMemberLoginNotification
{
    [tag="tnid", description = "The unique identifier for the tournament that the current session user is participating in."]
    TournamentId mTournId;

    [tag="usid", description = "The user session id of the tournament member."]
    UserSessionId mSessionId;
};

class TournamentMemberData 
{
    [tag="tmid", description = "The member's id."]
    TournamentMemberId mMemberId;

    [tag="tnid", description = "The member's tournamnet id."]
    TournamentId mTournamentId;
    
    [tag="isac", description = "True if the member has unplayed matches left, false otherwise."]
    bool mIsActive;
    
    [tag="lmch", description = "The id of the last match that the member played (root node of the tree)."]
    uint32_t mLastMatchId;
    
    [tag="levl", description = "The member's current place in the tournament."]
    uint32_t mLevel;
    
    [tag="attr", description = "The game specific attribute associated with this member for this tournament."]
    string(TOURN_ATTRIBUTE_MAX_LENGTH) mTournAttribute;

    [tag="team", description = "The last team that the member played a match with, or if no matches have been played, the team specified at join time."]
    TeamId mTeamId;
};

class TournamentsConfigData
{
	[tag="tnid", default=0, description = "The tournament's id."]
    TournamentId mId;

    [tag="name", default="", description = "The tournament's name."]
    string(TOURN_NAME_MAX_LENGTH) mName;
	
	[tag="mode", default=0, description = "The tournament's mode."]
	TournamentMode mMode;

    [tag="desc", default="", description = "A description of the tournament."]
    string(TOURN_DESC_MAX_LENGTH) mDescription;

    [tag="tnam", default="", description = "The name of the trophy awarded to winners of the tournament."]
    string(TOURN_TROPHY_NAME_MAX_LENGTH) mTrophyName;

    [tag="tmet", default="", description = "Client specific meta data for the tournamnet trophy."]
    string(TOURN_TROPHY_META_MAX_LENGTH) mTrophyMetaData;

    [tag="rnds", default=0, description = "The number of rounds in the tournament."]
    uint32_t mNumRounds;
    
    [tag="enab", default=true, description = "Optional - set to false to disable the tournament."]
    bool mEnable;
};

typedef list<TournamentsConfigData> TournamentsConfigDataList;

class OsdkTournamentsConfig 
{
    [tag="taga", default="main", reconfigurable="no", description = "OSDK Tournaments database name."]
    string(64) mDbName;

    [tag="tagb", reconfigurable="no", description = "Configuration data."]
    TournamentsConfigDataList mTournaments;
};
} //namespace OsdkTournaments
} //namespace Blaze
