/*! ************************************************************************************************/
/*!
    \file psnmatches.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="framework/tdf/externalsessiontypes.h"]//for PsnServiceLabel etc
#include "framework/gen/externalsessiontypes.tdf"

[ headername="psnsessionmanager/tdf/psncommondefines.h" ]//for PsnWebApiHeader, PsnOnlineId etc
#include "psnsessionmanager/gen/psncommondefines.tdf"


namespace Blaze
{

namespace PSNServices
{

namespace Matches
{

[description="1P match's player id max string len."]
const uint16_t MAX_PSNMATCH_PLAYERID_LEN = 64;

[description="1P match's player name max string len."]
const uint16_t MAX_PSNMATCH_PLAYERNAME_LEN = 32;

[description="1P match's team id max string len."]
const uint16_t MAX_PSNMATCH_TEAMID_LEN = 64;

[description="1P match's team name max string len."]
const uint16_t MAX_PSNMATCH_TEAMNAME_LEN = 32;

[description="Enum for parsing valid PSN playerTypes."]
enum PsnPlayerTypeEnum
{
    INVALID_PLAYER_TYPE,//Blaze sentinel
    PSN_PLAYER,
    NON_PSN_PLAYER,
    NPC_NON_PSN_PLAYER
};
[description="Match playerType max string len (15 chars max for NPC_NON_PSN_PLAYER)"]
const uint16_t MAX_PSNMATCH_PLAYERTYPE_LEN = 15;

[description="Enum for parsing valid PSN Match statuses."]
enum PsnMatchStatusEnum
{
    INVALID_MATCH_STATUS_TYPE,//Blaze sentinel
    SCHEDULED,
    WAITING,
    PLAYING,
    CANCELLED,
    ONHOLD,
    COMPLETED
};
[description="Match status max string len (9 chars max for COMPLETED)"]
const uint16_t MAX_PSNMATCH_STATUS_LEN = 9;

[description="Enum for parsing valid PSN leaveReasons."]
enum PsnLeaveReasonEnum
{
    INVALID_LEAVE_REASON_TYPE,//Blaze sentinel
    DISCONNECTED,
    FINISHED,
    QUIT
};
[description="Match leaveReason max string len (12 chars max for DISCONNECTED)"]
const uint16_t MAX_PSNMATCH_LEAVE_REASON_LEN = 12;

[description="Enum for parsing valid PSN GroupingTypes."]
enum PsnGroupingTypeEnum
{
    INVALID_GROUPING_TYPE,//Blaze sentinel
    TEAM_MATCH,
    NON_TEAM_MATCH
};
[description="Match GroupingType max string len (14 chars max for NON_TEAM_MATCH)"]
const uint16_t MAX_PSNMATCH_GROUPINGTYPE_LEN = 14;

[description="Enum for parsing valid PSN competitionTypes."]
enum PsnCompetitionTypeEnum
{
    INVALID_COMPETITION_TYPE,//Blaze sentinel
    COMPETITIVE,
    COOPERATIVE
};
[description="Match competitionType max string len (11 chars max for COMPETITIVE, or COOPERATIVE)"]
const uint16_t MAX_PSNMATCH_COMPETITIONTYPE_LEN = 11;

[description="Enum for parsing valid PSN Match resultTypes."]
enum PsnResultTypeEnum
{
    INVALID_RESULT_TYPE,//Blaze sentinel
    SCORE,
    RESULT
};
[description="Match resultType max string len (6 chars max for RESULT)"]
const uint16_t MAX_PSNMATCH_RESULTTYPE_LEN = 6;

[description="Enum for parsing valid PSN Match cooperativeResult."]
enum PsnCooperativeResultEnum
{
    INVALID_COOPRESULT_TYPE,//Blaze sentinel
    SUCCESS,
    UNFINISHED,
    FAILED
};
[description="Match cooperativeResult max string len (11 chars max for UNFINISHED)"]
const uint16_t MAX_PSNMATCH_COOPERATIVERESULT_LEN = 11;

[description="Enum for parsing valid PSN Match playerReviewEligibility."]
enum PsnPlayerReviewEligibilityEnum
{
    INVALID_ELLIGIBILITY_TYPE,//Blaze sentinel
    ENABLED,
    DISABLED
};
[description="Match playerReviewEligibility max string len (8 chars max for DISABLED)"]
const uint16_t MAX_PSNMATCH_PLAYERREVIEWELIGIBILITY_LEN = 8;

[description="Match stats key max string len."]
const uint16_t MAX_PSNMATCH_STATSKEY_LEN = 32;

[description="Match stats value max string len."]
const uint16_t MAX_PSNMATCH_STATSVALUE_LEN = 32;


/////////////////////////////////////////////////////////////////////////////////////////
//      Common PSN Match Player Structures
/////////////////////////////////////////////////////////////////////////////////////////

[description="Match Player in PSN reqs and rsps", trackChanges = true]
class MatchPlayer
{
    [tag="plid", description="Application-defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;

    [tag="plnm", description="Application-defined name of player used when displaying match results on the platform. If nothing is specified, the default name will be displayed by the system software"]
    string(MAX_PSNMATCH_PLAYERNAME_LEN) mPlayerName;
    
    [tag="plty", description="PSN_PLAYER indicates a PlayStation Network player, NON_PSN_PLAYER a player other than a PlayStation Network player, and NPC a non-player character"]
    string(MAX_PSNMATCH_PLAYERTYPE_LEN) mPlayerType;
    
    [tag="psid", description="The PSN SCE Online Id."]
    PsnOnlineId mOnlineId;

    [tag="acid", description="The PSN SCE Account Id."]
    PsnAccountId mAccountId;

    [tag="join", description="Whether the player is currently participating in a match."]
    bool mJoinFlag;

    [tag="tmid", description="Application-defined team ID alpha numeric match team id"]
    string(MAX_PSNMATCH_TEAMID_LEN) mTeamId;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Common PSN Match Team Structures
/////////////////////////////////////////////////////////////////////////////////////////

[description="Match Team Member Entry in PSN reqs and rsps", trackChanges = true]
class MatchTeamMember
{
    [tag="plid", description="Application-defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;

    [tag="join", description="Whether the player belongs to the currently specified team."]
    bool mJoinFlag;
};
[description="Match Team in PSN reqs and rsps", trackChanges = true]
class MatchTeam
{
    [tag="tmid", description="Application-defined team ID alpha numeric match team id"]
    string(MAX_PSNMATCH_TEAMID_LEN) mTeamId;

    [tag="tmnm", description="Application-defined name of team used when displaying match results on the platform. If nothing is specified, the default name will be displayed by the system software"]
    string(MAX_PSNMATCH_TEAMNAME_LEN) mTeamName;

    [tag="mbrs", description="List of players belonging to the team"]
    list<MatchTeamMember> mMembers;
};


[description="Match roster in PSN reqs and rsps", trackChanges = true]
class MatchInGameRoster
{
    [tag="plyr", description="List of players participating in the match"]
    list<MatchPlayer> mPlayers;

    [tag="team", description="List of teams participating in the match"]
    list<MatchTeam> mTeams;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Common PSN Match Result Structures
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class MatchPlayerResult
{
    [tag="plid", description="Application-defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;
    
    [tag="rank", description="Value indicating the ranking of the player/team"]
    int32_t mRank;

    [tag="scor", description="Score of the player/team. Required if the match resultType is SCORE."]
    float mScore;
};
[trackChanges = true]
class MatchTeamMemberResult
{
    [tag="plid", description="Application-defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;

    [tag="scor", description="Scores of each member who contributed to the team's overall score."]
    float mScore;
};

[trackChanges = true]
class MatchTeamResult
{
    [tag="tmid", description="Application-defined team ID alpha numeric match player id"]
    string(MAX_PSNMATCH_TEAMID_LEN) mTeamId;

    [tag="rank", description="Value indicating the ranking of the player/team"]
    int32_t mRank;

    [tag="scor", description="Score of the player/team. Required if the match resultType is SCORE."]
    float mScore;

    [tag="memb", description="Results for each member of the team. Used to display the scores (degree of contribution to the team) of each member of the team."]
    list<MatchTeamMemberResult> mTeamMemberResults;
};
[trackChanges = true]
class MatchCompetitiveResult
{
    [tag="plrs", description="Results for each player that competed. Only set when the match's groupingType is NON_TEAM_MATCH."]
    list<MatchPlayerResult> mPlayerResults;

    [tag="tmrs", description="Results for each team that competed. Only set when the match's groupingType is TEAM_MATCH."]
    list<MatchTeamResult> mTeamResults;
};
[trackChanges = true]
class MatchResults
{
    [tag="vers", default="1", description="Version of the results."]//Sony spec currently the only possible value is 1.
    string(-1) mVersion;

    [tag="coop", description="Results of cooperative play. Possible Values: SUCCESS, UNFINISHED, FAILED"]
    string(MAX_PSNMATCH_COOPERATIVERESULT_LEN) mCooperativeResult;

    [tag="comp", description="Results of competitive play"]
    MatchCompetitiveResult mCompetitiveResult;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Common PSN Match Statistics Structures
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class MatchStat
{
    [tag="stak", description="Additional stats key"]
    string (MAX_PSNMATCH_STATSKEY_LEN) mStatsKey;

    [tag="stav", description="Additional stats value"]
    string (MAX_PSNMATCH_STATSVALUE_LEN) mStatsValue;
};
[trackChanges = true]
class MatchPlayerStats
{
    [tag="plid", description="Application-defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;

    [tag="stat", description="Additional stats of a player. (See Sony docs for max items)"]
    list<MatchStat> mStats;
};
[trackChanges = true]
class MatchTeamStats
{
    [tag="tmid", description="Application-defined team ID alpha numeric match team id"]
    string(MAX_PSNMATCH_TEAMID_LEN) mTeamId;

    [tag="stat", description="Additional stats of a team. (See Sony docs for max items)"]
    list<MatchStat> mStats;

    [tag="memb", description="Stats of each member of the team. (See Sony docs for max items)"]
    list<MatchPlayerStats> mTeamMemberStatistics;
};
[trackChanges = true]
class MatchStatistics
{
    [tag="plyr", description="Additional stats per player. (See Sony docs for max items)"]
    list<MatchPlayerStats> mPlayerStatistics;

    [tag="team", description="Additional stats per team. (See Sony docs for max items)"]
    list<MatchTeamStats> mTeamStatistics;
};



/////////////////////////////////////////////////////////////////////////////////////////
//      Create Match Request & Response Objects
/////////////////////////////////////////////////////////////////////////////////////////

[description="create 1P match request body.", trackChanges = true]
class CreateMatchRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="acid", description="objectId of an activity relating to a match. The following values are determined by the activity definition, groupingType, competitionType, resultType"]
    PsnUdsObjectId mActivityId;

    [tag="exti", default=2678400, description="Grace period until a match is canceled in seconds, starting when the status of the match becomes either WAITING or ONHOLD, if neither the status nor expirationTime are updated by the period specified for expirationTime, the match may be canceled. Sony enforces Min Value: 60. Max Value: 2678400 (see Sony docs)."]
    int32_t mExpirationTime;

    [tag="rost", description="Information about the players and teams participating in a match."]
    MatchInGameRoster mInGameRoster;
};

[description="create 1P match request.", trackChanges = true]
class CreateMatchRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="body", description="The payload data"]
    CreateMatchRequestBody mBody;
};

[description="create 1P match response.", trackChanges = true]
class CreateMatchResponse
{
    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Join Match Request & Response Objects
/////////////////////////////////////////////////////////////////////////////////////////

[description="join 1P match request body.", trackChanges = true]
class JoinMatchRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="plys", description="List of players to make join. Each playerId must be unique. If a player's playerType is PSN_PLAYER, an accountId is required (existence checked). In other cases, specifying an accountId results in error. More than one playerId can be linked to a single accountId. If a teamId is specified, the player will move to that team. A teamId that does not exist gets error. If match's groupingType is NON_TEAM_MATCH, a teamId cannot be specified. A player can only belong to a single team at once. Min items is 1 (See Sony docs for max players)"]
    list<MatchPlayer> mPlayers;
};

[description="join 1P match request.", trackChanges = true]
class JoinMatchRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;

    [tag="body", description="The payload data"]
    JoinMatchRequestBody mBody;
};



/////////////////////////////////////////////////////////////////////////////////////////
//      Leave Match Request & Response Objects
/////////////////////////////////////////////////////////////////////////////////////////

[description="leave 1P match request body player item.", trackChanges = true]
class LeaveMatchRequestPlayerItem
{
    [tag="plid", description="Application defined player ID alpha numeric match player id"]
    string(MAX_PSNMATCH_PLAYERID_LEN) mPlayerId;

    [tag="reas", description="Reasons players leave matches. If a network problem resulted in player leaving, specify DISCONNECTED. If player left in accordance with the rules of the game, specify FINISHED. If player left in the middle of a match by his or her choice, specify QUIT."]
    string(MAX_PSNMATCH_LEAVE_REASON_LEN) mReason;
};

[description="leave 1P match request body.", trackChanges = true]
class LeaveMatchRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="plys", description="List of players to leave. You can make up to 100 players leave a match at once. Min items is 1 (See Sony docs for max players)"]
    list<LeaveMatchRequestPlayerItem> mPlayers;
};

[description="leave 1P match request.", trackChanges = true]
class LeaveMatchRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;

    [tag="body", description="The payload data"]
    LeaveMatchRequestBody mBody;
};



/////////////////////////////////////////////////////////////////////////////////////////
//      Get Match Detail Request & Response Objects
/////////////////////////////////////////////////////////////////////////////////////////
[description="get 1P match detail request. Used to obtain the details of the match", trackChanges = true]
class GetMatchDetailRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;
};

[trackChanges = true]
class GetMatchDetailResponse
{
    [tag="stau", description="If SCHEDULED: will later begin at the specified time (see Sony docs). WAITING: waiting for players to participate. PLAYING: underway. ONHOLD: temporarily paused. CANCELLED: terminated without it reporting results. COMPLETED: concluded with results reported. A match created as SCHEDULED may automatically change to the WAITING once the time arrives (see Sony docs)."]
    string(MAX_PSNMATCH_STATUS_LEN) mStatus;

    [tag="rost", description="Information about the players and teams participating in a match."]
    MatchInGameRoster mInGameRoster;

    [tag="grty", description="Whether the match is a team match. If the value of isTeamActivity is true in the activity, the groupingType is TEAM_MATCH. Otherwise, it will be NON_TEAM_MATCH."]
    string(MAX_PSNMATCH_GROUPINGTYPE_LEN) mGroupingType;

    // Fields included for potential Match Results handling below

    [tag="cmty", description="Whether a match is a competitive match. If the value of category is Competitive in the activity, the competitionType is COMPETITIVE. Otherwise, it will be COOPERATIVE."]
    string(MAX_PSNMATCH_COMPETITIONTYPE_LEN) mCompetitionType;

    [tag="rsty", description="Whether there are scores in the match results. If a value for scoreStatistics exists in the activity, the resultType is SCORE. Otherwise, it will be RESULT."]
    string(MAX_PSNMATCH_RESULTTYPE_LEN) mResultType;

    [tag="rslt", description="Match results."]
    MatchResults mMatchResults;

    [tag="stat", description="Additional stats of a match. Only playerStatistics is specified if the match's competitionType is COOPERATIVE, or COMPETITIVE and groupingType is NON_TEAM_MATCH. Only teamStatistics is specified if the match's competitionType is COMPETITIVE and groupingType is TEAM_MATCH."]
    MatchStatistics mMatchStatistics;

    [tag="acid", description="objectId of an activity relating to a match. These values are determined by the activity's definition: groupingType, competitionType, resultType"]
    PsnUdsObjectId mActivityId; //included for logging and debugging

    [tag="exti", description="Grace period until a match is canceled in seconds, starting when the status of the match becomes either WAITING or ONHOLD, if neither the status nor expirationTime are updated by the period specified for expirationTime, the match may be canceled (see Sony docs, including min, max and default values)."]
    int32_t mExpirationTime;

    [tag="stti", description="Date and time the match was started (the date and time status first became PLAYING)."]
    string(MAX_PSN_TIMESTAMP_LEN) mMatchStartTimestamp; //included for logging and debugging

    [tag="enti", description="Date and time the match concluded (the date and time status became either CANCELLED or COMPLETED)."]
    string(MAX_PSN_TIMESTAMP_LEN) mMatchEndTimestamp;
};



/////////////////////////////////////////////////////////////////////////////////////////
//      Update Match Status Request
/////////////////////////////////////////////////////////////////////////////////////////

[description="update 1P match status request body.", trackChanges = true]
class UpdateMatchStatusRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="stau", description="WAITING: waiting for players to participate. PLAYING: underway. ONHOLD: temporarily paused. CANCELLED: terminated without it reporting results. COMPLETED: concluded with results reported."]
    string(MAX_PSNMATCH_STATUS_LEN) mStatus;
};

[description="update 1P match status request.", trackChanges = true]
class UpdateMatchStatusRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;

    [tag="body", description="The payload data"]
    UpdateMatchStatusRequestBody mBody;
};



/////////////////////////////////////////////////////////////////////////////////////////
//      Report Match Results Request
/////////////////////////////////////////////////////////////////////////////////////////
[trackChanges = true]
class ReportMatchResultsRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;
    
    [tag="prel", default="ENABLED", description="Setting of whether a match participant can write a review of other participants. Specify ENABLED to enable reviews to be written about all the participants. Specify DISABLED to disable reviews to be written about all the participants. (see Sony docs)."]
    string(MAX_PSNMATCH_PLAYERREVIEWELIGIBILITY_LEN) mPlayerReviewEligibility;

    [tag="rslt", description="Final results of the match. cooperativeResult must be specified if the match's competitionType is COOPERATIVE. competitiveResult must be specified if the match's competitionType is COMPETITIVE."]
    MatchResults mMatchResults;

    [tag="stat", description="Additional stats of a match. Only playerStatistics is specified if the match's competitionType is COOPERATIVE, or COMPETITIVE and groupingType is NON_TEAM_MATCH. Only teamStatistics is specified if the match's competitionType is COMPETITIVE and groupingType is TEAM_MATCH."]
    MatchStatistics mMatchStatistics;
};

[trackChanges = true]
class ReportMatchResultsRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;

    [tag="body", description="Request body"]
    ReportMatchResultsRequestBody mBody;
};


/////////////////////////////////////////////////////////////////////////////////////////
//      Update Match Detail Request & Response Objects
/////////////////////////////////////////////////////////////////////////////////////////

[description="update 1P match detail request body.", trackChanges = true]
class UpdateMatchDetailRequestBody
{
    [tag="svcl", description="The PSN service label"]
    PsnServiceLabel mNpServiceLabel;

    [tag="rost", description="Information about the players and teams participating in a match."]
    MatchInGameRoster mInGameRoster;

    [tag="stat", description="Additional stats of a match. Only playerStatistics is specified if the match's competitionType is COOPERATIVE, or COMPETITIVE and groupingType is NON_TEAM_MATCH. Only teamStatistics is specified if the match's competitionType is COMPETITIVE and groupingType is TEAM_MATCH."]
    MatchStatistics mMatchStatistics;

};

[description="update 1P match detail request.", trackChanges = true]
class UpdateMatchDetailRequest
{
    [tag="head", description="Request header"]
    PsnWebApiHeader mHeader;

    [tag="maid", description="The match Id."]
    PsnMatchId mMatchId;

    [tag="body", description="The payload data"]
    UpdateMatchDetailRequestBody mBody;
};


}//ns Matches
}//ns PSNServices
}//ns Blaze
