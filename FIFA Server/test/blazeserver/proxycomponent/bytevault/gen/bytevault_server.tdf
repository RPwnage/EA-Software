[headername="framework/tdf/frameworkconfigtypes_server.h"]
#include "framework/gen/frameworkconfigtypes_server.tdf"

[headername="bytevault.h"]
#include "bytevault.tdf"

namespace Blaze
{
namespace ByteVault
{

typedef string(64) SourceName;

class PurgeConfig
{
    [tag="pghr", description="The hour time to perform the purge", default=8]
    uint32_t mHour;

    [tag="pgrt", description="How many days to retain before purging", default=7]
    uint32_t mDaysToRetain;
};

class SSLConfig
{
    [tag="ikey", default="", description="Set location for the pem file associated with the client cert configuration for connecting to Nucleus.", 
     details="If not set, no client cert will be used"]
    string(128) nucleusKey;

    [tag="icrt", default="", description="Set location for the pem file associated with the client key configuration for connecting to Nucleus.", 
     details="If not set, no client cert will be used"]
    string(128) nucleusCert;
};

class ByteVaultConfig
{
    [tag="sadm", reconfigurable="yes", description="The list of email addresses of service admins"]
    list<AdminEmail> mServiceAdmins;

    [tag="purg", reconfigurable="yes", description="Purge configuration"]
    PurgeConfig mPurge;

    [tag="audt", reconfigurable="yes", description="List of users/owners to audit"]
    UserList mAuditUsers;

    [tag="dbna", reconfigurable="no", description="Name of the database", default="main"]
    string(64) mDbName;

    [tag="amdb", reconfigurable="no", description="Name of the database using admin credential"]
    string(64) mAdminDbName;

    [tag="rcnt", reconfigurable="yes", description="Max record count per category per owner", default=100]
    uint32_t mMaxRecordsPerCategoryPerOwner;

    [tag="rsiz", reconfigurable="yes", description="Max record size", default=4194304]
    uint64_t mMaxRecordSize;

    [tag="hrct", reconfigurable="yes", description="Max history record count per category per owner", default=10]
    uint32_t mMaxHistoryRecordsPerCategoryPerOwner;

    [tag="memc", reconfigurable="yes", description="Name of the memcache server"]
    string(64) mMemcacheServer;

    [tag="incv", reconfigurable="yes", description="Boolean flag indicating whether context and category versions are to be auto-incremented. Should be false for non-dev environments as the promotion tool will provide the correct version number being promoted.", default=true]
    bool mAutoIncrementVersion;

    [tag="snrc", reconfigurable="yes", description="List of trusted sources for non-record changes"]
    NetworkFilterConfig mTrustedSourcesForNonRecordChanges;

    [tag="nsvr", reconfigurable="yes", description="Address of the Nucleus server"]
    string(64) mNucleusServer;

    [tag="ncnt", reconfigurable="yes", description="Max size of the Nucleus web connection pool", default=1024, advanced=true]
    int32_t mNucleusPoolSize;

    [tag="nrlm", reconfigurable="yes", description="Max number of overall requests allowed to Nucleus per second", default=128]
    uint32_t mNucleusRateLimit;

    [tag="rexp", reconfigurable="yes", description="For Redis, the timeout (in seconds) for expiring non-token authentication related keys.  After the timeout has expired, the key will be automatically deleted from Redis.", default=300]
    int32_t mRedisAuthExpiry;

    [tag="rdep", reconfigurable="yes", description="For Redis, the timeout (in seconds) for expiring document related keys.  After the timeout has expired, the key will be automatically deleted from Redis.", default=43200]
    int32_t mRedisDocExpiry;

    [tag="ssl", description="Define the SSL client cert and key that will be used to connect to Nucleus"]
    SSLConfig mSSL;
};

class NucleusResult
{
    [tag="acid", description="account ID"]
    AccountId mAccountId;

    [tag="stts", description="Persona or account status"]
    int32_t mStatus;

    [tag="pnam", description="Persona name (if applicable)"]
    string(MAX_PERSONA_LENGTH) mPersonaName;
};

}
}

