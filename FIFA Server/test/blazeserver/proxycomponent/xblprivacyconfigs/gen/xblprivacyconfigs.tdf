/*! ************************************************************************************************/
/*!
    \file xblprivacyconfigs.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/
[headername="framework/tdf/externalsessiontypes.h"]
#include "framework/gen/externalsessiontypes.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{

namespace XBLPrivacy
{

class GetBlockedListRequestHeader
{
    [tag="atkn", description=""]
    string(-1) mAuthToken;
};

/////////////////////////////////////////////////////////////////////////////////////////
//      Get Reputation Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////
class GetBlockedListRequest
{
    [tag="xuid", description=""]
    ExternalXblAccountId mXuid;

    [tag="grrh", description=""]
    GetBlockedListRequestHeader mGetBlockedListRequestHeader;
};

class User
{
    [tag="xuid", description=""]
    string(-1) mXuid;
};
typedef list<User> UserList;

class GetBlockedListResponse
{
    [tag="usrs", description="Blocked users"]
    UserList mUsers;
};


/////////////////////////////////////////////////////////////////////////////////////////
// Permission Request:
/////////////////////////////////////////////////////////////////////////////////////////

class PermissionCheckBatchRequestHeader
{
    [tag="atkn", description=""]
    string(-1) mAuthToken;

    [tag="srvc", description=""]
    string(-1) mServiceVersion;
};


class PermissionCheckBatchRequestBody
{
    [tag="reas", description="Xbox User ID (XUID) objects representing the targets against which to check permission."]
    UserList mUsers;
    [tag="perm", description="The permissions to check against each user."]
    list<string(-1)> mPermissions;
};

class PermissionCheckBatchRequest
{
    [tag="pcbh", description=""]
    PermissionCheckBatchRequestHeader mPermissionCheckBatchRequestHeader;

    [tag="xuid", description=""]
    ExternalXblAccountId mXuid;

    [tag="pcbr", description=""]
    PermissionCheckBatchRequestBody mPermissionCheckBatchRequestBody;
};


/////////////////////////////////////////////////////////////////////////////////////////
// Permission Response:
/////////////////////////////////////////////////////////////////////////////////////////

class PermissionCheckReason
{
    [tag="reas", description="Optional. A PermissionResultCode value that indicates why the permission was denied if IsAllowed was false."]
    string(-1) mReason;

    [tag="rest", description="Optional. If the PermissionResultCode value in the reason member indicates that a privilege check for the requestor failed, this indicates which privilege failed."]
    string(-1) mRestrictedSetting;
};
typedef list<PermissionCheckReason> PermissionCheckReasonList;

class PermissionCheckResponse
{
    [tag="isal", description="This member is true if the requesting user is allowed to perform the requested action with the target user."]
    bool mIsAllowed;

    [tag="pcrl", description="Array of PermissionCheckReason"]
    PermissionCheckReasonList mReasons;
};
typedef list<PermissionCheckResponse> PermissionCheckResponseList;

class PermissionCheckUser 
{
    [tag="xuid", description="The user's xuid."]
    string(-1) mXuid;
};

class PermissionCheckBatchUserResponse 
{
    [tag="user", description="The target user."]
    PermissionCheckUser mUser;

    [tag="pcrl", description="Array of PermissionCheckResponse."]
    PermissionCheckResponseList mPermissions;
};
typedef list<PermissionCheckBatchUserResponse> PermissionCheckBatchUserResponseList;

class PermissionCheckBatchResponse
{
    [tag="pcbu", description="Array of PermissionCheckBatchUserResponse"]
    PermissionCheckBatchUserResponseList mResponses;
};




}
}
