[headername="framework/tdf/networkaddress.h"]
#include "framework/gen/networkaddress.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/frameworkconfigtypes_server.h"]
#include "framework/gen/frameworkconfigtypes_server.tdf"

[headername="redirector/tdf/redirectortypes.h"]
#include "redirector/gen/redirectortypes.tdf"

namespace Blaze
{
namespace Redirector
{

class SingleProfilesData
{   
    [tag="chal", default="tcp", description="The type of channel."]
    string(64) mChannel; 
    
    [tag="potc", default="", description="The type of protocol."]
    string(64) mProtocol;
    
    [tag="ecod", default="", description="Encoder type."]
    string(64) mEncoder;
    
    [tag="dcod", default="", description="Decoder type."]
    string(64) mDecoder;
    
    [tag="inre", default=false, description="Flag of include remaps."]
    bool mIncludeRemaps;
    
    [tag="adtp", default=EXTERNAL_IPPORT, description="Address Type."]
    ServerAddressType mAddressType; 
    
    [tag="secu", default=false, description="Secure flag."]
    bool mSecure;
};

class SunsetDefaultsData
{
    [tag="warn", default="", description="Default message to display to warn."]
    string(64) mWarn;
    
    [tag="down", default="", description="Default message to display to down."]
    string(64) mDown;
};

class SunsetConfigData
{
    [tag="deft", description="", description="Default sunset data."]
    SunsetDefaultsData mDefaults;

    [tag="titl", description="", description="Map of sunset titles and relevant details."]
    SunsetDataMap mTitles;
};

class InputData
{
    [tag="svna", default="", description="Name of service."]
    ServiceName mServiceName;
    
    [tag="evit", default="", description="Environment parameter vlaue."]
    string(64) mEnvironment;
    
    [tag="plat", default="", description="The type of Platform."]
    string(64) mPlatform;
    
    [tag="conn", default="", description="The profile of Connection."]
    string(64) mConnectionProfile;
    
    [tag="clin", default="", description="Client name."]
    string(64) mClientName;
    
    [tag="cliv", default="", description="Version name of Client."]
    string(64) mClientVersion;
    
    [tag="clis", default="", description="SkuId of Client."]
    string(64) mClientSkuId;
    
    [tag="clil", default="", description="The locale of Client."]
    string(64) mClientLocale;
    
    [tag="blzv", default="", description="Blaze SDK version."]
    string(64) mBlazeSDKVersion;
    
    [tag="bldt", default="", description="BlazeSDK build date."]
    string(64) mBlazeSDKBuildDate;
    
    [tag="dtvr", default="", description="DirtySDK version."]
    string(64) mDirtySDKVersion;

    [tag="clit", default="", description="The ClientType of the client."]
    string(64) mClientType;
};
    
class ServiceNameTransformData
{
    [tag="nsvr", default="", description=" New service name."]
    ServiceName mNewServiceName;
    
    [tag="newc", default="", description="New connection profile."]
    string(64) mNewConnectionProfile;

    [tag="newt", default=CLIENT_TYPE_INVALID, description="New client type."]
    ClientType mNewClientType;
    
    [tag="igno", default=false, description="The flag of ignore case."]
    bool mIgnoreCase; 
    
    [tag="rege", default=REGEX_NONE, description="Regex type."]
    RegexType mRegexType;
    
    [tag="inpt", description="", description="Input infomation(s)."]
    InputData mInput;
};

class Address
{
    [tag="host"] string(MAX_HOSTNAME_LENGTH) mAddress;
    [tag="port"] uint16_t mPort;
};

[description="Address list."]
typedef list<Address> AddressList;

class AddressOverrideData
{
    [tag="name", description="Service name."] string(64) mName;
    [tag="addr", description="Addresses."] AddressList mAddresses;
};

class DowntimeMessage
{
    [tag="warn", description="Warning message."] string(64) mWarnMsg;
    [tag="down", description="Down message"] string(64) mDownMsg;
};

[description="Downtime information."]
typedef map<string(64), DowntimeMessage, ignorecase>DowntimeMessageMap;

[description="Address overrides information."]
typedef list<AddressOverrideData> AddressOverrideDataList;

class TitleRedirectData
{
    const uint32_t MAX_PERSONA_LENGTH = 256;
    typedef list<string(MAX_PERSONA_LENGTH)> PersonaNameList;

    [tag="ercp", default="", description="Connection profile for redirect."]
    string(64) mConnectionProfile;

    [tag="pmns", description="Personas to redirect service name for."]
    PersonaNameList mAllowedPersonas;

    [tag="ipwl", description="IPs to redirect service name for."]
    NetworkFilterConfig mAllowedIps;
};

[description="Server instance environment redirect information."]
typedef map<string(64), TitleRedirectData> TitleRedirectMap;

class EnvironmentRedirectData
{
    [tag="erdr", description="Address of the redirector for the environment we want to communicate with."]
    string(64) mAddress;

    [tag="upit", description="Update interval"]
    TimeValue mUpdateInterval;

    [tag="titl", description="List of titles to forward requests for."]
    TitleRedirectMap mTitles;
};

typedef list<string(64)> CACertificateFileList;
typedef map<string(32), CACertificateFileList> ClientPlatformToCACertificateFileMap;
typedef map<ServiceName, CACertificateFileList> ServiceNameToCACertificateFileMap;

class CACertificateFileData
{
    [tag="aval", description="A list of additional PEM files that will be sent down in response to getCertificate() request that includes X509Entriy maatch criteria"]
    CACertificateFileList mAvailable;

    [tag="glbl", description="A list of PEM files that will be sent down in response to all getServerInstance() and getCertificate() requests"]
    CACertificateFileList mGlobal;

    [tag="plat", description="A map of platform names (e.g. pc, xbl2, ps3, iphone) to a list of PEM files that will be sent down in response to getServerInstance() and getCertificate() requests that specify the associated platform"]
    ClientPlatformToCACertificateFileMap mClientPlatforms;

    [tag="titl", description="A map of service names (e.g. battlefield-3-pc, monopoly-xbl2) to a list of PEM files that will be sent down in response to getServerInstance() and getCertificate() requests that specify the associated service name"]
    ServiceNameToCACertificateFileMap mServiceNames;
};

class LoadFormulaInfo
{
    typedef string(8192) FormulaExpression;
    typedef map<ServiceName,FormulaExpression> LoadFormulaMap;

    [tag="load", reconfigurable="yes", description="Formulas for calculating load value for a server instance (used as input to the load balancing algorithm)"]
    LoadFormulaMap mLoadFormulas;

    [tag="dflt", reconfigurable="yes", description="Default formula used if no service-name specific formula is provided."]
    FormulaExpression mDefault;
};

} // namespace Redirector
} // namespace Blaze

