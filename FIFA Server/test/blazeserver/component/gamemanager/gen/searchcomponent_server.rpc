/*****************************************************************************************


    (c) Electronic Arts. All Rights Reserved.
*****************************************************************************************/

[ headername="gamemanager/tdf/search_config_server.h" ]
#include "gamemanager/gen/search_config_server.tdf"

[ headername="gamemanager/tdf/search_server.h" ]
#include "gamemanager/gen/search_server.tdf"

[ client_include = false ]
#include "gamemanager/rpc/searchslave_stub.h"

namespace Blaze
{

namespace Search
{


[ 
  id = core/401,
  preconfigurationType = SearchSlavePreconfig,
  configurationType = SearchConfig
]
component Search
{
    errors 
    {
        // search slave specific errors
        [ description = "Unknown matchmaking session ID." ]
        SEARCH_ERR_UNKNOWN_MATCHMAKING_SESSION_ID = 100;
        [ description = "Unknown Game Browser list ID." ]
        SEARCH_ERR_UNKNOWN_GAME_BROWSER_LIST_ID = 101;
        [ description = "This search slave is transitioning to set of games originating in another Game Manager master." ]
        SEARCH_ERR_IN_TRANSITION = 110;
        [ description = "This search slave is currently overloaded, and is rejecting new requests." ]
        SEARCH_ERR_OVERLOADED = 111;
        
        // matchmaking errors        
        [ description = "Problem parsing your matchmaking criteria.  See StartMatchmakingError's err msg for details." ]
        SEARCH_ERR_INVALID_MATCHMAKING_CRITERIA         = 200;
        [ description = "The owning user session for the session was not found." ]
        SEARCH_ERR_MATCHMAKING_USERSESSION_NOT_FOUND    = 205;
        [description = "The type of entry requested is not valid for the join method.  Matchmaking does not allow claiming reservations."]
        SEARCH_ERR_INVALID_GAME_ENTRY_TYPE              = 207;
        
        // game browser errors
        [ description = "Problem parsing your game browsing criteria.  See GetGameListError's err msg for details." ]
        SEARCH_ERR_INVALID_CRITERIA                     = 401;
        [ description = "A list's capacity must be GAME_LIST_CAPACITY_UNLIMITED, or greater than zero." ]
        SEARCH_ERR_INVALID_CAPACITY                     = 402;
        [ description = "No list subscription found on the blazeServer with the supplied id." ]
        SEARCH_ERR_INVALID_LIST_ID                      = 403;
        [ description = "The gameBrowser can't find a list configuration with the supplied listConfigName.  (list configurations are defined in the server's gamebrowser config file)." ]
        SEARCH_ERR_INVALID_LIST_CONFIG_NAME             = 405; 
        [ description = "[DEPRECATED] Search slave cannot handle more than configured number of game lists and that number has been exceeded." ]
        SEARCH_ERR_MAX_TOTAL_NUMBER_OF_LISTS_EXCEEDED   = 450; 

        [ description = "There was a mismatch in game protocol versions" ]
        SEARCH_ERR_GAME_PROTOCOL_VERSION_MISMATCH       = 460;

        // group match errors
        [ description = "The blazeServer wasn't able to find a user group with the supplied id." ]
        SEARCH_ERR_INVALID_GROUP_ID                     = 501;
        [ description = "The player is not a member of the specified group." ]
        SEARCH_ERR_PLAYER_NOT_IN_GROUP                  = 502;
        [ description = "In valid game capacity settings, the desired capacity of the game to be created is less than the number of people that need to join the game." ]
        SEARCH_ERR_GAME_CAPACITY_TOO_SMALL              = 503;
        
                 
    }

    [setCurrentUserSession=false]
    slave
    {
        methods
        {
            [
             id = 2,
             description = "Start a new game search session.",
             errortype = GameManager::MatchmakingCriteriaError,
             errors = {
                SEARCH_ERR_OVERLOADED,
                SEARCH_ERR_IN_TRANSITION,
                SEARCH_ERR_MATCHMAKING_USERSESSION_NOT_FOUND,
                SEARCH_ERR_INVALID_GAME_ENTRY_TYPE,
                SEARCH_ERR_INVALID_MATCHMAKING_CRITERIA
             },
             generate_command_class = true,
             requires_authentication = false,
             internal = true
            ]
            StartFindGameMatchmakingResponse startFindGameMatchmaking(StartFindGameMatchmakingRequest);

            [
             id = 3,
             description = "Terminate existing game search session.",
             errors = {
                SEARCH_ERR_UNKNOWN_MATCHMAKING_SESSION_ID
             },
             generate_command_class = false,
             requires_authentication = false,
             internal = true
            ]
            void terminateFindGameMatchmaking(TerminateFindGameMatchmakingRequest);

            
            [
             id = 4,
             errortype = GameManager::MatchmakingCriteriaError,
             description = "Creates a game list by obtaining games that match criteria from RETE tree.",
             errors = {
                SEARCH_ERR_OVERLOADED,
                SEARCH_ERR_INVALID_CRITERIA,
                SEARCH_ERR_INVALID_CAPACITY,
                SEARCH_ERR_INVALID_LIST_CONFIG_NAME,
                SEARCH_ERR_MAX_TOTAL_NUMBER_OF_LISTS_EXCEEDED                
             },
             generate_command_class = false,
             requires_authentication = false,
             internal = true
            ]
            CreateGameListResponse createGameList(CreateGameListRequest);
            
            [
             id = 5,
             description = "Terminate existing game list.",
             errors = {
                SEARCH_ERR_UNKNOWN_GAME_BROWSER_LIST_ID
             },
             generate_command_class = false,
             requires_authentication = false,
             internal = true
            ]
            void terminateGameList(TerminateGameListRequest);

            [
             id = 6,
             generate_command_class = false,
             description = "Allows the current player to override matchmaking and always attempt to match into the provided game.",
             requires_authentication = false,
             client_export = false,
             internal = true
            ]
            void matchmakingDedicatedServerOverride(GameManager::MatchmakingDedicatedServerOverrideRequest);
            
            [
             id = 7,
             description = "Dumps debug output to a file.",
             generate_command_class = false,
             requires_authentication = false,
             internal = true
            ]
            void dumpDebugInfo();

            [
              id = 8,
              description = "Gets a list of games matching ids/persistent ids/users for this shard.",
              generate_command_class = false,
              requires_authentication = false,
              internal = true,
              allowGuestCall = true,
              errors = {
                SEARCH_ERR_INVALID_LIST_CONFIG_NAME,
                SEARCH_ERR_GAME_PROTOCOL_VERSION_MISMATCH
              }
            ]
            GetGamesResponse getGames(GetGamesRequest);
            
            [
              id = 9,
              description = "Creates a user set search list.",
              generate_command_class = false,
              requires_authentication = false,
              internal = true,
              errors = {
                SEARCH_ERR_INVALID_LIST_CONFIG_NAME,
                SEARCH_ERR_MAX_TOTAL_NUMBER_OF_LISTS_EXCEEDED
              }
            ]
            CreateGameListResponse createUserSetGameList(CreateUserSetGameListRequest);

            [
              id = 10,
              description = "Updates the list of users to track in a user set list.",
              generate_command_class = false,
              requires_authentication = false,
              internal = true,
              errors = {
                SEARCH_ERR_INVALID_LIST_ID
              }
            ]
            void updateUserSetGameList(UserSetWatchListUpdate);

            [
                id = 35,
                generate_command_class = false,
                description = "Allows GOSCC to override matchmaking for all players and always attempt to match into the provided games first.",
                 requires_authentication = false,
                 client_export = false,
                 internal = true
            ]
            void matchmakingFillServersOverride(Blaze::GameManager::MatchmakingFillServersOverrideList);

        } // slave methods
        
        notifications
        { 
            [
              id = 20,
              description = "Notifies subscriber that they should attempt finalization for given games",
              details = "Sent on each Search slave idle. Notifications are sent to each slave subscriber with full information about how to join games for each session originating on that slave.",
              client_export = false
            ]
            NotifyFindGameFinalizationUpdate(Blaze::Search::NotifyFindGameFinalizationUpdate);
            

            [
              id = 30,
              description = "Notifies subscriber about change in game list.",
              details = "Notifies subscriber about change in game list.",
              client_export = false
            ]
            NotifyGameListUpdate(Blaze::Search::NotifyGameListUpdate);
            
        } // slave notifications
        
    } // search slave
    
} // component Search
} // namespace Search
} // namespace Blaze
