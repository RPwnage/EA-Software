[headername="gamemanager/tdf/gamemanager.h"]
#include "gamemanager/gen/gamemanager.tdf"

[headername="gamemanager/tdf/gamemanager_server.h"]
#include "gamemanager/gen/gamemanager_server.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/network.h"]
#include "framework/gen/network.tdf"

[headername="framework/tdf/qosdatatypesnetwork.h"]
#include "framework/gen/qosdatatypesnetwork.tdf"

namespace Blaze
{
namespace GameManager
{
[generateProto=true]
class DisconnectedEndpointData
{
    [tag="gnt", description="The game network topology used by the endpoint"]
    GameNetworkTopology mGameNetworkTopology;

    [tag="ps", description="The ping site for the user on this endpoint"]
    PingSiteAlias mPingSite;

    [tag="ctry", description="The country (from the Nucleus account) of the user on this endpoint"]
    string(16) mCountry;

    [tag="gm", description="The game mode attribute set on this endpoint"]
    Collections::AttributeName mGameMode;

    [tag="ct", description="The client type of the user on this endpoint"]
    ClientType mClientType;

    [tag="cic", description="True if this endpoint connection was initiated by the client"]
    bool mClientInitiatedConnection;

    [tag="qosr", description="True if this connection was terminated due to the MM QoS rule"]
    bool mQosRuleEnabled;

    [tag="lip"]
    uint32_t mLocalIp;

    [tag="lprt"]
    uint16_t mLocalPort;

    [tag="rip"]
    uint32_t mRemoteIp;

    [tag="rprt"]
    uint16_t mRemotePort;

    [tag="dres", description="The reason this connection was terminated."]
    PlayerRemovedReason mDisconnectReason;

    [tag="conn", description="Whether the connection was successful or failed and if the demangler was used."]
    DemanglerConnectionHealthcheck mConnectionStatus;

    [tag="tpl", description="The total amount of packet loss experienced by this endpoint", default=-1]
    int16_t mTotalPacketLoss;

    [tag="tla", description="The average latency experienced by this endpoint", default=-1]
    int64_t mTotalLatencyAvg;

    [tag="tlm", description="The maximum latency experienced by this endpoint", default=-1]
    int64_t mTotalLatencyMax;

    [tag="tpls", description="The amount of packet loss experienced by this endpoint at each interval"]
    list<uint8_t> mTotalPacketLossSample;

    [tag="tls", description="The latency experienced by this endpoint at each interval"]
    list<uint16_t> mTotalLatencySample;

    [tag="jtyp", description="The join type for the connection."]
    ConnectionJoinType mJoinType;

    [tag="impc", description="Indicates whether the connection success or failure was impacting."]
    ConnImpactingMetricEnum mImpacting;

    [tag="ccsr", description="Indicates the CCS mode when connection concierge connectivity was used. CC_UNUSED, if connection concierge connectivity was not used."]
    ConnConciergeModeMetricEnum mConnectionConciergeMode;
};

[generateProto = true]
union UserAuditIdentifier
{
    [tag="blid"] BlazeId mBlazeId;
    [tag="pern"] string(64) mPersonaName;
};

[generateProto = true]
class UserAuditInfoRequest
{
    [tag="idnt", description="List of identifiers of the users to audit."]
    list<UserAuditIdentifier> mUserIdentifiers;

    [tag="plat", description="Platform of the users to audit (required when identifying users by persona name on shared-cluster deployments)"]
    ClientPlatformType mPlatform;

    [tag="exp", description="Expiration of the auditing of these users", default="5d"]
    TimeValue mExpiration;
};

class UserAuditInfoMasterRequest
{
    [tag="idnt", description="List of BlazeIds of the users to audit."]
    BlazeIdList mBlazeIds;

    [tag="exp", description="Expiration of the auditing of these users", default="5d"]
    TimeValue mExpiration;
};

[generateProto = true]
class AuditedUser
{
    [tag="crid"]
    CoreIdentification mCoreIdentification;

    [tag="exp", description="User's audit expiration"]
    TimeValue mExpiration;
};

[generateProto = true]
class FetchAuditedUsersRequest
{
    [tag="actv"]
    bool mFetchActiveAudits;
};

[generateProto = true]
class FetchAuditedUsersResponse
{
    [tag="usrl", description="A list of audited users and the expiration of their audit."]
    list<AuditedUser> mAuditedUsers;
};

[generateProto = true]
class FetchAuditedUserDataRequest
{
    [tag="bid"]
    BlazeId mBlazeId;
};

[generateProto = true]
class AuditedUserData
{
    [tag="bid"]
    BlazeId mBlazeId;

    [tag="gid"]
    GameId mGameId;

    [tag="lip"]
    uint32_t mLocalIp;

    [tag="lprt"]
    uint16_t mLocalPort;

    [tag="lct"]
    ClientType mLocalClientType;

    [tag="lcty"]
    string(16) mLocalCountry;

    [tag="rip"]
    uint32_t mRemoteIp;

    [tag="rprt"]
    uint16_t mRemotePort;

    [tag="rct"]
    ClientType mRemoteClientType;

    [tag="rcty"]
    string(16) mRemoteCountry;

    [tag="mode"]
    string(64) mGameMode;

    [tag="top"]
    GameNetworkTopology mTopology;

    [tag="mxlt", default=-1]
    int64_t mMaxLatency;

    [tag="alat", default=-1]
    int64_t mAverageLatency;

    [tag="milt", default=-1]
    int64_t mMinLatency;

    [tag="plos", default=-1]
    int16_t mPacketLoss;

    [tag="trsn"]
    PlayerRemovedReason mConnTermReason;

    [tag="init"]
    TimeValue mConnInitTime;

    [tag="term"]
    TimeValue mConnTermTime;

    [tag="cic", description="True if the client initiated the connection (e.g., direct join)"]
    bool mClientInitiatedConnection;

    [tag="qosr", description="True if this connection was terminated due to the MM QoS rule"]
    bool mQosRuleEnabled;

    [tag="lnat"]
    Util::NatType mLocalNatType;

    [tag="rnat"]
    Util::NatType mRemoteNatType;

    [tag="linf"]
    string(128) mLocalRouterInfo;

    [tag="rinf"]
    string(128) mRemoteRouterInfo;
};

[generateProto = true]
class FetchAuditedUserDataResponse
{
    [tag="data", description="The audit data for the requested BlazeId."]
    list<AuditedUserData> mAuditedUserDataList;
};

[generateProto = true]
class DeleteUserAuditMetricDataRequest
{
    [tag="bid"]
    BlazeId mBlazeId;
};


////////////////////////////////////////////////////////////////////////////////
// Connection Metrics TDFs 
////////////////////////////////////////////////////////////////////////////////

typedef map<string(256), int64_t> ConnectionMetricsMap;

[description = "Map of connection metric data"]
class GetConnectionMetricsResponse
{
    [tag="conm"] ConnectionMetricsMap mConnectionMetricsMap;
};


class GameModeMetricsByJoinMethod
{
    [tag="ttjo", description="Total Number of Starts", default=0]
    uint32_t mTotalStarts;
    [tag="ttmd", description="Total Match Duration", default=0]
    int64_t mTotalMatchDuration;
    [tag="ttle", description="Total Left Early", default=0]
    uint32_t mTotalLeftEarly;
    [tag="ttfm", description="Total Finished Match", default=0]
    uint32_t mTotalFinishedMatch;
};

class GameModeMetrics
{
    [tag="djgm", description="Direct Join Game Mode Metrics"]
    GameModeMetricsByJoinMethod mDirectJoinGameModeMetrics;
    [tag="mgmm", description="Matchmaking Game Mode Metrics"]
    GameModeMetricsByJoinMethod mMatchMakingGameModeMetrics;
    [tag="rgmm", description="Matchmaking Game Mode Metrics"]
    GameModeMetricsByJoinMethod mRematchGameModeMetrics;
};
 
typedef map<Collections::AttributeValue, GameModeMetrics> GameModeMetricsMap;
 
class GetGameModeMetrics
{
   [tag="gmmm",description="Game Mode Metrics Map"]
   GameModeMetricsMap mMetrics;
}; 

} // GameManager
} // Blaze
