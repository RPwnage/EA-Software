/*! ************************************************************************************************/
/*!
    \file matchmaker.tdf

    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="gamemanager/tdf/gamemanager.h"]
#include "gamemanager/gen/gamemanager.tdf"

[headername="framework/tdf/entrycriteria.h"]
#include "framework/gen/entrycriteria.tdf"

[headername="framework/tdf/network.h"]
#include "framework/gen/network.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="gamemanager/tdf/matchmaker_types.h"]
#include "gamemanager/gen/matchmaker_types.tdf"

[headername="gamemanager/tdf/legacyrules.h"]
#include "gamemanager/gen/legacyrules.tdf"

[headername="gamemanager/tdf/rules.h"]
#include "gamemanager/gen/rules.tdf"

[headername="gamemanager/tdf/customrules.h"]
#include "gamemanager/gen/customrules.tdf"


// NOTE: although Matchmaker has its own namespace in c++, 
//   the matchmaker RPCs are defined in the GameManager namespace (since the Matchmaker is not a component)
namespace Blaze
{
namespace GameManager
{

////////////////////////////////////////////////////////////////////////////////
// Matchmaking TDFs ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[description="Zero is an invalid matchmaking session id."]
const MatchmakingSessionId INVALID_MATCHMAKING_SESSION_ID = 0;

[
    description = "The collection of predefined and generic rules to use for a matchmaking session."
]
class MatchmakingCriteriaData
{
    // predefined rule impls:
    [tag="rank", description="The preferences for the predefined rankedGameRule."]
        RankedGameRulePrefs mRankedGameRulePrefs;
        
    [tag="virt", description="The preferences for the predefined virtualGameRule."]
        VirtualGameRulePrefs mVirtualGameRulePrefs;
        
    [tag="rep", description="The preferences for the predefined reputationRule."]
        ReputationRulePrefs mReputationRulePrefs;

    [tag="tbr", description="The preferences for the predefined teamBalanceRule."]
        TeamBalanceRulePrefs mTeamBalanceRulePrefs;

    [tag="tur", description="The preferences for the predefined TeamUEDBalanceRule. Note: specifying a team ued balance rule is optional, but all matching sessions must use the same rule."]
        TeamUEDBalanceRulePrefs mTeamUEDBalanceRulePrefs;
    
    [tag="tppu", description="The preferences for the predefined TeamUEDPositionParityRule. Note: this rule is optional, but all matching sessions must use the same rule."]
        TeamUEDPositionParityRulePrefs mTeamUEDPositionParityRulePrefs;

    [tag="tcr", description="The preferences for the predefined TeamCompositionRule. Note: specifying a team composition rule is optional, but all matching sessions must use the same rule."]
        TeamCompositionRulePrefs mTeamCompositionRulePrefs;

    [tag="tmsr", description="The preferences for the predefined teamMinSizeRule."]
        TeamMinSizeRulePrefs mTeamMinSizeRulePrefs;

    [tag="tcnr", description="The preferences for the predefined teamCountRule."]
        TeamCountRulePrefs mTeamCountRulePrefs;

    [tag="nat", description="The preferences for the predefined hostBalancingRule."]
        HostBalancingRulePrefs mHostBalancingRulePrefs;
        
    [tag="viab", description="The preferences for the predefined hostViabilityRule."]
        HostViabilityRulePrefs mHostViabilityRulePrefs;

    [tag="epsr", description="The preferences for the predefined ExpandedPingSiteRule."]
        ExpandedPingSiteRuleCriteria mExpandedPingSiteRuleCriteria;

    [tag="prc", description="The preferences for the predefined PlatformRule."]
        PlatformRuleCriteria mPlatformRuleCriteria;

    [tag="garc", description="A map of game attribute matchmaking rules to use for this matchmaking session."]
        GameAttributeRuleCriteriaMap mGameAttributeRuleCriteriaMap;

    [tag="dsrc", description="A map of dedicated server attribute matchmaking rules to use for this matchmaking session."]
        DedicatedServerAttributeRuleCriteriaMap mDedicatedServerAttributeRuleCriteriaMap;

    [tag="parc", description="A map of player attribute matchmaking rules to use for this matchmaking session."]
        PlayerAttributeRuleCriteriaMap mPlayerAttributeRuleCriteriaMap;
        
    [tag="rszr", description="Number of participants within the range specified."]
        RosterSizeRulePrefs mRosterSizeRulePrefs;   
        
    [tag="geo", description="A geo locational rule that will determine distance between two IPs."]
        GeoLocationRuleCriteria mGeoLocationRuleCriteria;

    [tag="gnam", description="The preferences for the predefined GameNameRule."]
        GameNameRuleCriteria mGameNameRuleCriteria;

    [tag="agam", description="The preferences for the predefined AvoidGamesRule."]
        AvoidGamesRuleCriteria mAvoidGamesRuleCriteria;

    [tag="aplr", description="The preferences for the predefined AvoidPlayersRule."]
        AvoidPlayersRuleCriteria mAvoidPlayersRuleCriteria;

    [tag="xplr", description="The preferences for the predefined XblBlockPlayersRule."]
        XblBlockPlayersRuleCriteria mXblBlockPlayersRuleCriteria;

    [tag="pplr", description="The preferences for the predefined PreferredPlayersRule."]
        PreferredPlayersRuleCriteria mPreferredPlayersRuleCriteria;
        
    [tag="pgr", description="The preferences for the predefined PreferredGamesRule."]
        PreferredGamesRuleCriteria mPreferredGamesRuleCriteria;
        
    [tag="ued", description="A user extended data rule searches based off of a value in the UED."]
        UEDRuleCriteriaMap mUEDRuleCriteriaMap;

    [tag="modr", description="Client/server mod rule defined as bitset where each bit corresponds to one mod."]
        ModRuleCriteria mModRuleCriteria;

    [tag="cvar", description="Container of custom defined rules."]
        map<RuleName, variable> mVariableCustomRulePrefs;

    [tag="pcnt", description="The preferences for the predefined PlayerCountRule. Note that this rule only evaluates Participants and ignores Spectators."]
        PlayerCountRuleCriteria mPlayerCountRuleCriteria;
        
    [tag="tots", description="The preferences for the predefined TotalPlayerSlotsRule. Note that this rule only evaluates Participant slots and ignores Spectator slots."]
        TotalPlayerSlotsRuleCriteria mTotalPlayerSlotsRuleCriteria;
        
    [tag="fres", description="The preferences for the predefined FreePlayerSlotsRule. Note that this rule only evaluates Participant slots and ignores Spectator slots."]
        FreePlayerSlotsRuleCriteria mFreePlayerSlotsRuleCriteria;

    [tag="pctf", description="The preferences for the predefined PlayerSlotUtilizationRule. Note that this rule only evaluates Participant slots and ignores Spectator slots."]
        PlayerSlotUtilizationRuleCriteria mPlayerSlotUtilizationRuleCriteria;
};

[description="Settings used to send generic find game status info for a matchmaking session."]
class FindGameStatus
{
    [tag="gnum", description="number of games on the server."]
        uint32_t mNumOfGames;
};

[description="Settings used to send generic create game status info for a matchmaking session."]
class CreateGameStatus
{
    bitfield EvaluateStatus
    {
        [description="The matched Partcipant number is sufficient/insufficient to create a new game."]
        PlayerCountSufficient : 1;
        
        [description="An qualified viable host is found/not found."]
        AcceptableHostFound   : 1;

        [description="Have my team size requirements been met."]
        TeamSizesSufficient : 1;
    };
    
    [tag="mmsn", description="number of matchmaking sessions currently server started"]
        uint32_t mNumOfMatchmakingSession;
    
    [tag="nomp", description="number of players matched."]
        uint32_t mNumOfMatchedPlayers;

    [tag="evst", description="indicate if the player count is sufficient to create a game at the moment."]  
        EvaluateStatus mEvaluateStatus;
};

[
    description = "The data collection for built-in and generic rules for a matchmaking session at some point."
]
class MatchmakingAsyncStatus
{
    [tag="tbrs", description="the team sizes that are an acceptable match for your matchmaking session at this point in time."]
        TeamBalanceRuleStatus mTeamBalanceRuleStatus;

    [tag="tubs", description="the team ued balance rule values that are an acceptable match for your matchmaking session at this point in time."]
        TeamUEDBalanceRuleStatus mTeamUEDBalanceRuleStatus;
    
    [tag="tpps", description="current parameters for the position parity rule."]
        TeamUEDPositionParityRuleStatus mTeamUEDPositionParityRuleStatus;

    [tag="tcps", description="the team composition rule values that are an acceptable match for your matchmaking session at this point in time."]
        TeamCompositionRuleStatus mTeamCompositionRuleStatus;

    [tag="tmss", description="the min team sizes that are an acceptable match for your matchmaking session at this point in time."]
        TeamMinSizeRuleStatus mTeamMinSizeRuleStatus;

    [tag="rrda", description="rank rule data the matchmaking session has at this point."]
        RankRuleStatus  mRankRuleStatus;
        
    [tag="vgrs", description="virtual rule data the matchmaking session has at this point."]
       VirtualGameRuleStatus  mVirtualGameRuleStatus;
    
    [tag="hbrd", description="host balance rule data the matchmaking session has at this point."]
        HostBalanceRuleStatus   mHostBalanceRuleStatus;
    
    [tag="hvrd", description="host viability rule data the matchmaking session has at this point."]
        HostViabilityRuleStatus mHostViabilityRuleStatus;

    [tag="epsr", description="Container for the Expanded Ping Site Rule Status."]
        ExpandedPingSiteRuleStatus mExpandedPingSiteRuleStatus;

    [tag="gasm", description="game attribute rule data the matchmaking session has at this point."]
        GameAttributeRuleStatusMap    mGameAttributeRuleStatusMap;

    [tag="pasm", description="player attribute rule data the matchmaking session has at this point."]
        PlayerAttributeRuleStatusMap    mPlayerAttributeRuleStatusMap;
    
    [tag="fgs", description="generic status information specific for find game session."]
        FindGameStatus  mFindGameStatus;
    
    [tag="cgs", description="Generic status information specific for create game session."]
       CreateGameStatus    mCreateGameStatus;

    [tag="geos", description="Geo location rule data the matchmaking session has at this point."]
       GeoLocationRuleStatus mGeoLocationRuleStatus;
    
    [tag="ueds", description="UED rule search data the matchmaking session has at this point."]
       UEDRuleStatusMap mUEDRuleStatusMap;
    
    [tag="cvar", description="Container of custom matchmaking rules async status objects."]
       map<RuleName, variable> mVariableCustomAsyncStatus;     
       
     [tag="plcn", description="Player count rule data the matchmaking session has at this point."]
       PlayerCountRuleStatus mPlayerCountRuleStatus;
       
     [tag="tots", description="Total player slots rule data the matchmaking session has at this point."]
        TotalPlayerSlotsRuleStatus mTotalPlayerSlotsRuleStatus;
        
     [tag="plut", description="Player slot utilization rule data the matchmaking session has at this point."]
        PlayerSlotUtilizationRuleStatus mPlayerSlotUtilizationRuleStatus;
};

typedef list<MatchmakingAsyncStatus> MatchmakingAsyncStatusList;

[
    description = "A matchmaking session can support a combination of FindGame or CreateGame modes (either a single mode, or both at once).  At least one mode must be specified.",
    details = "Note: If both matchmaking modes are satisfied at the same time, findGame wins out (we prefer joining games to creating new games)."
]
bitfield MatchmakingSessionMode
{
    [description = "FindGame mode scans existing joinable games, and attempts to join the best game."]
        FindGame : 1;
        
    [description = "CreateGame mode scans other matchmaking sessions, and attempts to create a new game with like minded players."]
        CreateGame : 1;
};

[
    description = "Game packer status."
]
class PackerAsyncStatus
{
    typedef list<float> QualityFactorScoreList;

    [tag="ovrl", description="The usersession id of the matchmaking session."]
        float mOverallQualityFactorScore;
    
    [tag="scor", description="The list of scores corresponding to quality factors."]
        QualityFactorScoreList mQualityFactorScores;
};

[
    description = "The matchmaking data collection for a matchmaking session, could be a list when a session is a sessions pool(session has subsessions)."
]
class NotifyMatchmakingAsyncStatus
{
    [tag="usid", description="The usersession id of the matchmaking session."]
        UserSessionId mUserSessionId;
    
    [tag="msid", description="The matchmaking session id."]
        MatchmakingSessionId mMatchmakingSessionId;

    [tag="mscd", description="The matchmaking scenario id."]
        MatchmakingScenarioId mMatchmakingScenarioId;

    [tag="asil", description="A list of matchmaking async information. With the removal of create game sub sessions, this list will only ever contain 1 value.  Kept as a list for backward compatability."]
        MatchmakingAsyncStatusList mMatchmakingAsyncStatusList;

    [tag="past", description="A set of packer session information, only present for matchmaking sessions utilizing the packer backend."]
        PackerAsyncStatus mPackerStatus;

    [tag="sage", description="The age of the session in seconds."]
        uint32_t mMatchmakingSessionAge;

    [tag="inst", description="The id of the instance that is currently assigned the request."]
        uint16_t mInstanceId;
};

[
    description = "Defines the session data used by StartMatchmakingRequest and the scenario sessions."
]
class MatchmakingSessionData
{
// Session values - May want to move these to the session information class...
    [tag="mode", description="The matchmaking mode(s) to use for this session."]
        MatchmakingSessionMode mSessionMode;            // For clarity with Scenarios & Sessions, it may be better to have 2 distinct classes
        
    [tag="dur", description="The max amount of time the session should try to match for. Note: zero is valid, and will allow for a single matchmaking attempt."]
        TimeValue mSessionDuration;

    [tag="sdec", default="0s", description="The starting decay age for the matchmaking session."]
        TimeValue mStartingDecayAge;
    [tag="psdo", default=false, description="debugging matchmaking request, summarizes results but does not actually add the requesting user to any game created or found."]
        bool mPseudoRequest;
    [tag="self", default=false, description="If this is a debugging matchmaking request, enables the ability to match matchmaking sessions started by the calling user. Ignored if not a pseudo request."]
        bool mMatchSelf;
    [tag="froz", default=false, description="Freeze decay on the session, it will not expand thresholds "]
        bool mDebugFreezeDecay;

    [tag="sdel", default="0s", description="Delay the start of matchmaking. FindGame will not attempt to find matches, and CreateGame will not match with other games."]
        TimeValue mStartDelay;


// Matchmaking-only values:
    [tag="mstn", description="External matchmaking session template name"]
        XblSessionTemplateName mExternalMmSessionTemplateName;
};

[
    description = "Start a new matchmaking session.",
    details = ""
]
class StartMatchmakingRequest
{
    [tag="ssdt", description="The matchmaking session data that defines how the session works."]
        MatchmakingSessionData mSessionData;

    [tag="crd", description="The Matchmaking criteria to use for this matchmaking session."]
        MatchmakingCriteriaData mCriteriaData;

    [tag="gmcd", description="The data used to create the game. Holds the common data between "]
        GameCreationData mGameCreationData;

    [tag="pljd", description="Info on the players that may join the GB request. Includes Team choice, Roles, etc."]
        PlayerJoinData mPlayerJoinData;

    [tag="cmgd", description="Common data provided directly from the SDK. Used in Matchmaking, Join Game, and GB Requests. Includes game protocol version string."]
        CommonGameRequestData mCommonGameData;
};






[
    description = "Response to a StartMatchmakingRequest; returns the matchmaking session id of the newly started session."
]
class StartMatchmakingResponse
{
    [tag="msid", description="The matchmaking session id."]
        MatchmakingSessionId mSessionId;

    [tag="scid", description="External Session service config identifier"]
        XblScid mScid;
    [tag="stmn", description="External Session template name"]
        XblSessionTemplateName mExternalSessionTemplateName;
    [tag="esnm", description="External Session name"]
        XblSessionName mExternalSessionName;
    [tag="coid"]
        XblCorrelationId mExternalSessionCorrelationId;
};

[
    description = "Provides a non-localized error message describing the error code returned by the StartMatchmaking RPC.",
    details = "This error message is for developer use only, and should not be surfaced in the title's UI."
]
class MatchmakingCriteriaError
{
    [tag="msg", description="a detailed error message about the StartMatchmaking failure."]
        string(160) mErrMessage;
};

[
    description = "Cancel one of your existing matchmaking requests."
]
class CancelMatchmakingRequest
{
    [tag="msid", description="The matchmaking session id to cancel."]
        MatchmakingSessionId mMatchmakingSessionId;
};


[
    description = "An async notification sent when a matchmaking session/scenario has failed (a timeout, or a cancellation).  Successful matchmaking sessions are marked by NotifyGameSetup when the player enters the game."
]
class NotifyMatchmakingFinished
{
    [tag="usid", description="The usersession id of the matchmaking session owner."]
        UserSessionId mUserSessionId;
    
    [tag="msid", description="The matchmaking session id."]
        MatchmakingSessionId mSessionId;
        
    [tag="mscd", description="The matchmaking scenario id."]
        MatchmakingScenarioId mScenarioId;
        
    [tag="rslt", description="The overall result of the session: timedOut, or cancelled."]
        MatchmakingResult mMatchmakingResult;
        
    [tag="maxf", description="The max possible fit score for the matchmaking criteria."]
        FitScore mMaxPossibleFitScore;
        
    [tag="dura", description="The duration of this matchmaking session."]
        TimeValue mSessionDuration;
};

typedef NotifyMatchmakingFinished NotifyMatchmakingFailed;

[description="Notification that the local player has been pulled into matchmaking by another user."]
class NotifyRemoteMatchmakingStarted
{
    [tag="usid", description="The usersession id of the matchmaking session member."]
        UserSessionId mUserSessionId;
    [tag="info", description="Information about the initiator/group."]
        RemoteInitiatorInformation mRemoteUserInfo;
    [tag="msid", description="The new matchmaking session id."]
        MatchmakingSessionId mMMSessionId;
    [tag="mscd", default=INVALID_MATCHMAKING_SESSION_ID, description="The new matchmaking scenario id."]
        MatchmakingScenarioId mMMScenarioId;
};

[description="Notification that the matchkmaking session/scenario started by another user has ended."]
class NotifyRemoteMatchmakingEnded
{
    [tag="usid", description="The usersession id of the matchmaking session member."]
        UserSessionId mUserSessionId;
    [tag="info", description="Information about the initiator/group."]
        RemoteInitiatorInformation mRemoteUserInfo;
    [tag="msid", description="The new matchmaking session id."]
        MatchmakingSessionId mMMSessionId;
    [tag="mscd", default=INVALID_MATCHMAKING_SESSION_ID, description="The new matchmaking scenario id."]
        MatchmakingScenarioId mMMScenarioId;
    [tag="rslt", description="The overall result of the session: success, timeout, or cancelled."]
        MatchmakingResult mMatchmakingResult;
    [tag="gid", default=INVALID_GAME_ID, description="The game matchmaking found in case of success- will be INVALID_GAME_ID in non-success cases."]
        GameId mGameId;
};

[
    description = "Supplies an update to connection avoid lists for caching on the GameManager slave."
]
class ConnectionValidationResults
{
    [tag="ntop", description="The network topology that this avoid list applies to."]
        GameNetworkTopology mNetworkTopology;
 
    [tag="gidl", description="New list of game ids to avoid due to connectivity issues."]
        Blaze::GameManager::GameIdList  mAvoidGameIdList;
    
    [tag="alst", description="New list of player ids to avoid due to connectivity issues."]
        BlazeIdList  mAvoidPlayerIdList;
    
    [tag="tier", description="Matchmaking QoS evaluation tier, the tier determines what the maximum allowed latency and packet loss are."]
        uint16_t mTier;
     
    [tag="fcnt", description="New count of matchmaking finalization failures due to connection issues."]
        uint16_t mFailCount;
};
 
[
    description = "An async notification sent when a matchmaking session/scenario has failed (a failed connection, a timeout, or a cancellation).  Successful matchmaking sessions/scenarios are marked by NotifyMatchmakingSessionConnectionValidated when the player enters the game."
]
class NotifyMatchmakingSessionConnectionValidated 
{
    [tag="usid", description="The usersession id of the matchmaking session."]
        UserSessionId mUserSessionId;
        
    [tag="grid", description="The user group id related to the matchmaking session, required to dispatch to group memebers."] 
        UserGroupId mUserGroupId;
        
    [tag="msid", description="The matchmaking session id."]
        MatchmakingSessionId mSessionId;

    [tag="mscd", description="The matchmaking scenario id."]
        MatchmakingScenarioId mScenarioId;
 
    [tag="gid", description="The Game Id that was matched."]
        GameId mGameId;
        
    [tag="disp", description="If true, the client SDK should dispatch GameManagerAPIListener::onMatchmakingSessionFinished(), if false, the connection validation failed, and the game will be cleaned up silently."]
        bool mDispatchSessionFinished;
 
    // This needs to be updated even after success, as there may have been connection failures in the finalized game.
    [tag="conv", description="A new set of connection validation results to store for this user session."]
        ConnectionValidationResults mConnectionValidatedResults;

    [tag="qsvr", description="Whether qos validation was performed (qos validation is performed only if there is an applicable qos validation rule configured for the game network topology)"]
        bool mQosValidationPerformed;
};

typedef list<MinFitThresholdName> MinFitThresholdNameList;

[description="Class containing client information on a predefined rule's configuration"]
class PredefinedRuleConfig
{
    [tag="rnme", description="The name of this matchmaking rule."]
        RuleName mRuleName;
        
    [tag="thls", description="The names of threshold lists for this matchmaking rule."]
        MinFitThresholdNameList mThresholdNames;
        
    [tag="wght", description="The weight of this matchmaking rule."]
        RuleWeight mWeight;
};

// DEPRECATED
enum GenericRuleAttributeType
{
    PLAYER_ATTRIBUTE,
    GAME_ATTRIBUTE
};

[description="DEPRECATED - Class containing client information on a generic rule's configuration"]
class GenericRuleConfig
{
    [tag="rnme", description="The name of this matchmaking rule."]
        RuleName mRuleName;
    
    [tag="anme", description="The attribute name for this matchmaking rule."]
        Collections::AttributeName mAttributeName;

    [tag="atyp", description="The attribute type for this matchmaking rule."]
        GenericRuleAttributeType mAttributeType;
    
    [tag="posv", description="The possible values for this matchmaking rule."]
        Collections::AttributeValueList mPossibleValues;
        
    [tag="thls", description="The names of threshold lists for this matchmaking rule."]
        MinFitThresholdNameList mThresholdNames;
        
    [tag="wght", description="The weight of this matchmaking rule."]
        RuleWeight mWeight;
};

[description="DEPRECATED - Incomplete class contains partial list of predefined and generic rule configs for dispatch to client"]
class GetMatchmakingConfigResponse
{
    [tag="rlst", description="A list of all predefined matchmaking rules on the server."]
        list<PredefinedRuleConfig> mPredefinedRules;

    [tag="glst", description="A list of all generic matchmaking rules on the server."]
        list<GenericRuleConfig> mGenericRules;
};

[
    description = "Contains list of players from the original matchmaking request's reserved external players list, who were reserved into the game."
]
class NotifyMatchmakingReservedExternalPlayers
{
    [tag="gmid", description="The matched game id."]
        GameId mGameId;

    [tag="rei", description="Identities of users that joined the game, from the reserved external players list."]
        UserIdentificationList mJoinedReservedPlayerIdentifications;
};

//
// Debugging class information
//

enum DebugEvaluationResult
{
    MATCH,
    NO_MATCH
};
typedef string(256) ReadableRuleCondition;
typedef list<ReadableRuleCondition> ReadableRuleConditionList;

[description="Debug rule result information"]
class DebugRuleResult
{   
    [tag="res", description="The evaluation result for this rule"]
    DebugEvaluationResult mResult;
    
    [tag="fit", description="The fit score this rule provided to the match."]
    FitScore mFitScore;
    
    [tag="mfit", description="The maximum fit score this rule could provide."]
    FitScore mMaxFitScore;
    
    [tag="cond", description="The conditions met or not met during this rules evaluation."]
    ReadableRuleConditionList mConditions;
};

typedef map<RuleName, DebugRuleResult> DebugRuleResultMap;

[description="Debugging top matched results."]
class DebugTopResult
{
    [tag="gid", description="The matched game"]
    GameId mGameId;

    [tag="gnam", description="The games name"]
    GameName mGameName;
  
    [tag="ttm", description="Time it took to find the matching game."]
    TimeValue mTimeToMatch;
    
    [tag="ores", description="The everall result of the match against this game."]
    DebugEvaluationResult mOverallResult;
    
    [tag="ofit", description="The overall fit score for the game."]
    FitScore mOverallFitScore;
    
    [tag="mfit", description="The maximum fit score for the game."]
    FitScore mMaxFitScore;
    
    [tag="ruls", description="The debug information provided by each rule."]
    DebugRuleResultMap mRuleResults;
};
typedef list<DebugTopResult> DebugTopResultList;

// TODO: Proto generation is disabled for ListGameData
[description="Debugging find game results", generateProto=false]
class DebugFindGameResults
{
    [tag="fgam", description="Replicated game data of the game matched."]
    ListGameData mFoundGame;
    
    [tag="ffit", description="The overall fit score for the game."]
    FitScore mFoundGameFitScore;

    [tag="mfit", description="The maximum fit score for the found game."]
    FitScore mMaxFitScore;

    [tag="fttm", description="How long it took to find our found game"]
    TimeValue mFoundGameTimeToMatch;

    [tag="dtr", description="Debugging top match result information."]
    DebugTopResultList mTopResultList;

    [tag="size", description="The number of users that would have been joined to the found game, add this to the roster's size to see what the found game was evaluated as for player count."]
    uint16_t mJoinedPlayerCount;
};

[description="Debugging information about a matched session"]
class DebugSessionResult
{
    [tag="mmsi", description="The matchmaking session id of the matched session"]
    MatchmakingSessionId mMatchedSessionId;

    [tag="plna", description="The owner player of the matchmaking session."]
    string(MAX_PERSONA_LENGTH) mOwnerPlayerName;
    
    [tag="obid", description="The owners blaze id."]
    BlazeId mOwnerBlazeId;
    
    [tag="ttm", description="Time it took to find the matching session."]
    TimeValue mTimeToMatch;

    [tag="ofit", description="The overall fit score for the game."]
    FitScore mOverallFitScore;

    [tag="size", description="The number of users in this matchmaking session."]
    uint16_t mPlayerCount;

    [tag="ruls", description="The debug information provided by each rule."]
    DebugRuleResultMap mRuleResults;
};
typedef list<DebugSessionResult> DebugSessionResultList;

[description="Debugging create game results"]
class DebugCreateGameResults
{
    [tag="ttm", description="Time it took to find the match"]
    TimeValue mTimeToMatch;
    
    [tag="cgr", description="The create game request that would have been issued to create the game"]
    CreateGameRequest mCreateGameRequest;
    
    [tag="cbid", description="The blaze id of the player issuing the create request, the host unless client server dedicated topologies."]
    BlazeId mCreatorId;

    [tag="fits", description="The fit score for the create game."]
    FitScore mFitScore;

    [tag="mfit", description="The maximum fit score for the created game."]
    FitScore mMaxFitScore;
    
    [tag="dsrl", description="The debug information provided by evaluating each session."]
    DebugSessionResultList mSessionResultList;

    [tag="frsl", description="The finalization-related information for this session."]
    DebugRuleResultMap mFinalizationRuleResults;
};

// TODO: Proto generation is disabled for DebugFindGameResults
[description="Result information from a pseudo request matchmaking session", generateProto=false]
class NotifyMatchmakingPseudoSuccess
{
    [tag="usid", description="The usersession id of the user who started matchmaking session."]
    UserSessionId mUserSessionId;
    
    [tag="mmsi", description="The matchmaking session id that was debugged"]
    MatchmakingSessionId mSessionId;

    [tag="msci", description="The matchmaking scenario id that was debugged"]
    MatchmakingScenarioId mScenarioId;

    [tag="mmr", description="The result of the matchmaking request"]
    MatchmakingResult mMatchmakingResult;
    
    [tag="dfgr", description="Set of find game debugging results"]
    DebugFindGameResults mFindGameResults;
    
    [tag="dcgr", description="Set of create game debugging results"]
    DebugCreateGameResults mCreateGameResults;

    [tag="subn", description="SubSession Name"]
    SubSessionName mSubSessionName;
};

typedef list<NotifyMatchmakingPseudoSuccess> PseudoSuccessList;

// TODO: Proto generation is disabled for PseudoSuccessList
[description="Result information from a pseudo request matchmaking scenario", generateProto=false]
class NotifyMatchmakingScenarioPseudoSuccess
{
    [tag="usid", description="The usersession id of the user who started matchmaking session."]
    UserSessionId mUserSessionId;
    
    [tag="msci", description="The matchmaking scenario id that was debugged"]
    MatchmakingScenarioId mScenarioId;

    [tag="pssl", description="List fo the Pseudo Success results for each subsession the scenario created."]
    PseudoSuccessList mPseudoSuccessList;
    
    [tag="scnm"]
    ScenarioName mScenarioName;
    
    [tag="scev", description="Scenario Variant's Version"]
    ScenarioVersion mScenarioVersion;
    
    [tag="scva", description="Scenario's Variant"]
    ScenarioVariantName mScenarioVariant;
    
    [tag="tout", description="The maximum duration allowed for this session."]
    TimeValue mScenarioTimeoutDuration;

};

} // namespace GameManager
} // namespace Blaze
