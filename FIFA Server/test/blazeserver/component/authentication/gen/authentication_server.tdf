[headername="framework/tdf/nucleuscodes.h"]
#include "framework/gen/nucleuscodes.tdf"

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
namespace Authentication
{

typedef list<string(64)> ClientWhitelistList;

enum EntitlementCheckType
{
    STANDARD = 0,
    PERIOD_TRIAL,
    TIMED_TRIAL,
    INVALID_TYPE
};

class PeriodTrial
{
    [tag="strt", description="The start of trial period."]
    string(64) mStart;
    
    [tag="pend", description="The end of trial time."]
    string(64) mEnd;
};

typedef list<ClientType> ClientTypeList;

class Access
{
    [tag="tagn", default="", description="The ID of Project."]
    string(64) mProjectId;

    [tag="tag1", default=""]
    string(64) mProductId;

    [tag="tagp", default=""]
    string(64) mEntitlementTag;

    [tag="oaeg", default=""]
    string(64) mOnlineAccessEntitlementGroup;

    [tag="tagw", default=true]    
    bool mAutoEntitlementEnabled;

    [tag="etyp", default=Blaze::Nucleus::EntitlementType::DEFAULT, description="The type of entitlement."]
    Blaze::Nucleus::EntitlementType::Code mEntitlementType;

    [tag="type", description="The type of check to perform on the entitlement."]
    EntitlementCheckType mType;

    [tag="time", description="The trial time."]
    TimeValue mTime; 

    [tag="prid", description="The trial period."]
    PeriodTrial mPeriod;

    [tag="umlc", description="The flag whether to use managed life cycle."]
    bool mUseManagedLifecycle;

    [tag="pcof", description="The cut off of PSU."]
    uint32_t mPsuCutOff;

    [tag="ctyp", description="A list of client types which to apply this access entitlement."]
    ClientTypeList mEnforcedClientTypes;

    [tag="soft", default=false, description="If soft check, only check for entitlement but don't fail on it."]
    bool mSoftCheck;
};

typedef list<Access> AccessList;

class UnderageLoginOverride
{
    [tag="etyp", default=Blaze::Nucleus::EntitlementType::DEFAULT, description="Entitlement Type for UnderageLoginOverride entitlement"]
    Blaze::Nucleus::EntitlementType::Code mEntitlementType;

    [tag="etag", default="", description="Entitlement Tag for UnderageLoginOverride entitlement"]
    string(64) mEntitlementTag;

    [tag="egrp", default="", description="Entitlement Group for UnderageLoginOverride entitlement"]
    string(64) mEntitlementGroup;

    [tag="pjid", default="", description="The ID of Project."]
    string(64) mProjectId;
};

enum DeviceIdLogLevel
{
    LOG_WHEN_EMPTY = 0,
    LOG_ALWAYS,
    LOG_NEVER
};

class Product
{
    [tag="rsrc", default="", description="The registration source to send to Nucleus for new accounts"]
    string(64) mRegistrationSource;

    [tag="esrc", default="", description="The entitlement source to send to Nucleus for new entitlements"]
    string(64) mEntitlementSource;

    [tag="asrc", default="", description="The authentication source to send to Nucleus"]
    string(64) mAuthenticationSource;

    [tag="nshe", default="", description="The source of this opt-in update request"]
    string(64) mNucleusSourceHeader;

    [tag="auda", default=false]
    bool mAllowUnderage; 

    [tag="acss", description="The Access of Entitlement."]
    AccessList mAccess;

    [tag="oulo", description="Underage Login Override entitlement settings specific to the Origin login flow."]
    UnderageLoginOverride mUnderageLoginOverride;
    
    [tag="cgwl", reconfigurable="yes", description="Client grant whitelist"]
    ClientWhitelistList mClientEntitlementGrantWhitelist;
    
    [tag="cmwl", reconfigurable="yes", description="Client modify whitelist"]
    ClientWhitelistList mClientEntitlementModifyWhitelist;
    
    [tag="enck", reconfigurable="yes", description="Turn on/off entitlement status check for the product.", default=false]
    bool mEntitlementStatusCheckEnabled;

    [tag="cidl", description="A list of EADP ContentIds associated with the servicename (used for Early Access Trials)."]
    TrialContentIdList mTrialContentIds;

    [tag="dill", description="Controls when to log deviceId information.", default=LOG_NEVER]
    DeviceIdLogLevel deviceIdLogLevel;

    [tag="rdid", description="Prevents login if the user's deviceId is missing.", default=false]
    bool requireDeviceId;
};

typedef map<ProductName, Product, ignorecase> ProductMap;

[description="Class to describe a nucleus bypass URI used for testing."]
class NucleusBypassURI
{
    [tag="uri", description="The URI we represent"]
    string(512) URI;

    [description="Maps of parameter names and XML response for each set of arguments we support for this URI"]
    typedef map<string(512), string(65536), ignorecase> ParamMap;

    [tag="xml", description="List of params and responses for this URI."]
    list<ParamMap> XML;
};

typedef list<string(64)> ConsoleEnvironments;

class AuthenticationConfig
{
    [tag="tagy", default=false, reconfigurable="yes"]
    bool mAllowStressLogin;

    [tag="ebds", default=false, reconfigurable="yes"]
    bool mEnableBypassForDedicatedServers;

    [tag="limt", default=10000, reconfigurable="yes", description="The total number of login that may occur each minute"]
    uint32_t mTotalLoginsPerMinute;

    [tag="rlbt", reconfigurable="yes", description="The list of client types which are allowed to bypass the login rate limiter."]
    ClientTypeList mBypassRateLimiterClientTypes;

    [tag="pild", default="", reconfigurable="yes", description="Specify game identifier for Legal documents retrieval."]
    string(64) mLegalDocGameIdentifier;
    
    [tag="ccld", default="30s", reconfigurable="yes", description="If the legal doc isn't already cached, and the TOS server is thought to be down, this is the amount of time in between requests for legal docs that are not yet cached.", advanced=true]
    TimeValue mCheckCachedLegalDocInterval;

    [tag="ctit", default="60m", reconfigurable="yes", description="The LegalDoc documents should be checked for update by each blaze server at some regular interval.", advanced=true]
    TimeValue mCheckLegalDocIntervalTime;

    [tag="stds", default="24h", reconfigurable="yes", description="Stop serving this document at all if the legal web service has been down for more than 1 day", advanced=true]
    TimeValue mStopLegalDocServiceIntervalTime;

    [tag="plst", reconfigurable="yes", description="map of products"]
    ProductMap mProducts;

    [tag="nuke", description="Nucleus bypass info.", details="This configuration supplies 'fake data' used only used for testing.  Should never be filled out for prod."]
    list<NucleusBypassURI> mNucleusBypass;

    [tag="enck", reconfigurable="yes", description="The amount of time before checking for entitlement statuses (for logged in users). Set to 0s to turn off the status check for all products.", default="0s"]
    TimeValue mEntitlementStatusCheckPeriod;
    
    [tag="encp", reconfigurable="yes", description="The list of platforms for which entitlement check should be enabled."]
    ClientPlatformTypeList mEnableEntitlementCheckPlatforms;

    [tag="teck", reconfigurable="yes", description="The total number of entitlement status checks that may occur each second", default=1000]
    uint32_t mTotalEntitlementStatusCheckPerSecond;
    
    [tag="asbi", reconfigurable="yes", description="Alternative (acceptable) sandbox IDs."]
    ConsoleEnvironments mAltSandboxIds;

    [tag="nenv", reconfigurable="yes", description="Acceptable Nintendo server environments."]
    ConsoleEnvironments mNintendoEnvironments;

    [tag="trst", reconfigurable="yes", description="List of inet filters that make up our trusted sources. Certain RPCs like ExpressLogin and TrustedLogin can only be called from trusted sources."]
    NetworkFilterConfig mTrustedSources;

    [tag="eexp", description="True if the server allows expressLogin to be executed."]
    bool mEnableExpressCommands;
    
    [tag="elst", description="White-list of emails allowed by expressLogin. Supports wild carding with '*'"]
    list<string(256)> mExpressLoginEmailWhitelist;

    [tag="psul", reconfigurable="yes", description="The maximum number of users allowed online for a given client type."]
    map<ClientType, uint32_t> mPsuLimits;

    [tag="ausr", default=true, reconfigurable="yes", description="Verify the auth source when the user logs in."]
    bool mVerifyAuthSource;

    [tag="psss", default="invalid", reconfigurable="yes", description="Schema (settings) name in Player Settings Service for core Blaze integration (not for custom use)."]
    string(64) mPssSchemaName;
};


}
}

