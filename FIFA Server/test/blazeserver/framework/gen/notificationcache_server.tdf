// (c) Electronic Arts. All Rights Reserved.

[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{


typedef string(64) NotificationName;

[ 
    description="Defines a notification queued by Blaze and fetched by client applications."
]
class NotificationCacheConfig
{
    [tag="expr",description="Expiry time for unhandled cached notifications.",default="60s"]
    TimeValue expiryTime;
    [tag="comp",description="Components enabled for caching notifications."]
    list<ComponentName> components;
};

[ 
    description="Defines a notification queued by Blaze and fetched by client applications."
]
class FetchAsyncNotificationDesc
{
    [tag="sid",description="Recipient session of the notification."]
    UserSessionId sessionId;
    [tag="comp",description="Component ID indiciating source of async notification."]
    ComponentName componentName;
    [tag="id",description="Notification ID specific to the component."]
    NotificationName notificationName;
    [tag="time",description="Time when notification was sent by the component."]
    TimeValue timeSent;
    [tag="obj",description="TDF of notification."]
    variable notification;
    [tag="bid",description="Recipient BlazeId of the notification."]
    BlazeId blazeId;
};

typedef list<FetchAsyncNotificationDesc> FetchAsyncNotificationList;

[ 
    description="Notifications (if any) retrieved as a result of a fetch request.",
    details="May contain a list of notifications matching the fetch/peek command issuing the request. 
        Also returned is an iterator handle that can be used to retrieve subsequent notfications."
]
class FetchNotificationResult
{
    [tag="list",description="List of FetchAsyncNotificationDesc objects."]
    FetchAsyncNotificationList notificationDescs;
};


[ 
    description="Request to fetch notifications triggered by RPCs, using the sequence number returned by the triggering request."
]
class FetchBySeqNoRequest
{
    [tag="seqn", description="Sequence number tagging notifications fired off due to an RPC request."]
    uint32_t seqNo;
    [tag="cnt", description="Retrieved notification count"]
    uint32_t count;
};

[ 
    description="Request to fetch notifications by component and notification type."
]
class FetchByTypeRequest
{
    [tag="comp", description="Component name of notifications to return."]
    ComponentName componentName;
    [tag="not", description="Notification name of notifications to return based on component."]
    NotificationName notificationName;
    [tag="cnt", description="Retrieved notification count"]
    uint32_t count;
};

[ 
    description="Request to fetch notifications by component and notification type, allowing retrieval of notifications from the specified sessions."
]
class FetchByTypeAndSessionRequest
{
    [tag="type", description="Specifies the type and count of notifications to fetch."]
    FetchByTypeRequest type;
    [tag="sids", description="Filter retrieval by sessions specified in the list.  If empty, then returns notifications for all sessions."]
    list<UserSessionId> sessionIds;
};

}

