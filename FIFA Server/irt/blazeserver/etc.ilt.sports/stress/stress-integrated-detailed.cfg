//
// Configuration file for the stress tester
//

//
// define the connection and protocol parameters
//

connection-info = {
    protocol = "fire2"
    encoder = "heat2"
    decoder = "heat2"

    // Total number of connections to use
    num-connections = #NUM_CONNECTIONS#

    // Control whether SSL is used or not
    secure = #STRESS_SECURE#
}

//
//This following block controls how instances are started up.
//
startup = {
    //Number of instances to start up in a given pass
    //A block size of 0 will start all instances simultaneously
    
    // parser does not allow expressions in variable value 
    #define SERVER_NUCLEUS_POOL_SIZE_TIMES_INT #SERVER_NUCLEUS_POOL_SIZE# * 4
    block-size = #SERVER_NUCLEUS_POOL_SIZE_TIMES_INT#

    //Delay between starting instances in milliseconds
    instance-delay = #CONN_INSTANCE_DELAY#

    //Delay between starting blocks in milliseconds
    // parser does not allow expressions in variable value 
    #define SERVER_NUCLEUS_POOL_SIZE_INT #SERVER_NUCLEUS_POOL_SIZE# * 4 * #CONN_INSTANCE_DELAY#
    block-delay = #SERVER_NUCLEUS_POOL_SIZE_INT#
}

// 
// Define the account/authentication parameters used for account creation and authentication
// 
#include "../etc.ilt.sports/stress/stress-account.cfg"

//
// define the list of stress modules that will be instantiated
//
modules = [ 
    util, messaging, stats, gamereporting, example 
    ]

//
// define how the available instances/connections are distributed amongst the different modules
//
distribution = {
    util = 0.2
    messaging = 0.2
    stats = 0.3
    gamereporting = 0.25
    example = 0.05
}

#if PLATFORM == "common"
// define the distribution of platform types for available instances/connections used in shared cluster testing
platform-distribution = {
    pc = 0.2
    ps4 = 0.4
    xone = 0.3
    steam = 0.1
}
#else
// define the specification of platform type for available instances/connections used in single platform testing
platform-specification = {
    platform = "#PLATFORM#"
}
#endif

// Configuration data specific to the stats module
//
stats = {

    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    useServerQosSettings = #USE_SERVER_QOS#

    // Define the number of milliseconds between RPC calls
    delay = 55000
    login = true
    logout = true
    delay_per_trial = 10
    num_execs_per_trial = 120   
    
    action = runAllTests
    // Random generator seed, if < 0, used srand(time)
    randSeed = -1
    seqEntityId = 10 // if != 0, it generates entities sequentially, otherwise randomly
    minEntityId = 1000000000000
    maxEntityId = 1000005000000
    maxLbStartRank = 100000
    maxPeriodOffset = 0
    sampleSize = 0 // number of 5 sec periods
    
    normalGames = [ NormalGameStats ]
    soloGames = [ SoloGameStats ]
    otpGames = [ MultiplayerGameStats ]
    
    // hitRate expresses probability of hitting RPC. Values are relative and are normalized aginst sum 
    // type of value is 'double'.
    // rowCtr is a number of rows involved in the operation
    rpcList = {
        updateStats = { hitRate = 0, rowCtr = 64 },
        updateNormalGameStats = { hitRate = 0, rowCtr = 2 },
        updateSoloGameStats = { hitRate = 0, rowCtr = 1 },
        updateOtpGameStats = { hitRate = 0, rowCtr = 12 },
        getLeaderboard = { hitRate = 2, rowCtr = 50 },
        getCenteredLeaderboard = { hitRate = 1, rowCtr = 50 },
        getFilteredLeaderboard = { hitRate = 30, rowCtr = 50 },
        getStatsByGroup = { hitRate = 30, rowCtr = 50 },
        getLeaderboardTree = { hitRate = 16, rowCtr = 50 }
        getStatsByGroupAsync = { hitRate = 25, rowCtr = 50 }
        getStats = { hitRate = 0, rowCtr = 50 }
        getLeaderboardFolder = { hitRate = 25, rowCtr = 50 }
        getStatGroup = { hitRate = 25, rowCtr = 50 }
        getLeaderboardGroup = { hitRate = 30, rowCtr = 50 }
        deleteStats = { hitRate = 0, rowCtr = 50 }
    }
}


//
// Configuration data specific to the messaging module
//
messaging = {
    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    useServerQosSettings = #USE_SERVER_QOS#

    // Define the number of milliseconds between RPC calls
    delay = 30000
    login = true
    logout = true
    delay_per_trial = 2
    num_execs_per_trial = 80

    // Define the account locale
    locale = "enUS"

    // Define which RPC to use
    //action = sendMessages 
    //action = fetchMessages 
    //action = purgeMessages
    //action = touchMessages
    action = simulateProd

    // only applies to simulateProd
    sim = {
        probability = {
            sendMessages = 16
            fetchMessages = 76
            purgeMessages = 2
            touchMessages = 0   // this RPC is not used in OSDK
        }
        maxSleep = 1000
    }

    fetchMessage = {
        matchType = true
        type = 2 
    }

    waitForLogins = false
    joinGamegroup = false
    gamegroupLimit = 250
    gamegroupMemberLimit = 10
    purge = false
    purgeDelay = 0

    // Client Message
    messages = [
        {
            type = 1
            tag = 888
            persistent = true 
            profanityFilter = true
            localize = true
            attrMap = [
                1, "borderhopper", 
                4, "OSDK_CLUBS_EASW_AFFILIATE", 
                77, "OSDK_CLUB_PETITION_REVOKED", 
                357, "SDB_SHR"
            ]
        }
        {
            type = 2
            tag = 72
            persistent = true
            profanityFilter = true
            localize = true
            attrMap = [
                10, "CLB_TICKER_PETITION_ACCEPTED",
                42, "quick game?",
                7, "long long long long long long long long long long long long long long message",
                92, "trousertroutxxxxx"
            ]
        }
        {
            type = 3
            tag = 6530
            persistent = true
            profanityFilter = true
            localize = true 
            attrMap = [
                53, "  ",
                441, "SDB_SERV_MAINT_ROUTINE",
                2, "asfd sdf a dfed 3425 ghkm,j wichser awe 43 rdsa sdfasdf",
                613, "SDB_SHR SDB_SHR SDB_SHR SDB_SHR SDB_SHR"
            ]
        }
    ]
}

//
// Configuration data specific to the util module
//
util = {
    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    useServerQosSettings = #USE_SERVER_QOS#
    
    #if PLATFORM == "common"
        crossplayLookup = true
    #else
        crossplayLookup = false
    #endif

    // Define the number of milliseconds between RPC calls
    delay = 100000

    // Control whether an instance needs to authenticate its user before issuing its configured
    // RPC calls.
    login = true
    logout = true
    delay_per_trial = 200
    num_execs_per_trial = 1
    
    // hitRate expresses probability of hitting RPC. Values are relative and are normalized against sum 
    // type of value is 'double'.
    scenarioList = {
        fetchClientConfig = { hitRate = 0 },
        loadUserSettingsAll = { hitRate = 90 },
        saveUserSettings = { hitRate = 3 },
        lookupUsersByPersona = { hitRate = 100 }
        idle = { hitRate = 0 }
    }

    clientConfig = "BlazeSDK"
    
    // fifa12 performed lookups as follows (on average) per single RPC req:
    // 2 online users, 12 offline users, 12 unknown users
    // the numbers below are configured assuming 500K PSU, and 5M total valid users
    personaLookup = {
        online = {
            persona = "s%05x"
            count = 2
            minIndex = 0
            maxIndex = 500000
        }
        offline = {
            persona = "s%05x"
            count = 12
            minIndex = 600000
            maxIndex = 650000
        }
        invalid = {
            persona = "fake%05x"
            count = 12
            minIndex = 1000000
            maxIndex = 5000000
        }
    }
}

//
// Configuration data specific to the gamereporting module
//
gamereporting = {
    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    useServerQosSettings = #USE_SERVER_QOS#

    // Control whether an instance needs to authenticate its user before issuing its configured
    // RPC calls.
    delay = 975000
    login = true
    logout = false
    delay_per_trial = 0
    num_execs_per_trial = 1
    waitActive = false

    // Define parameters used for the RPC action
    grSubmitReports = true
    
    // Define which RPC to use
    //action = submitOfflineGameReport
    //action = getGameReports
    //action = getGameReportViewInfoList
    //action = getGameReportView
    action = simulateProd
    
    // the game types to use to send reports
    onlineReportGameTypes = [ 
        { typeName = "gameType0",  weight = 30 }
        { typeName = "gameType1",  weight = 5 }
        { typeName = "gameType3",  weight = 5 }
        { typeName = "gameType5",  weight = 5 }
        { typeName = "gameType6",  weight = 5 }
        { typeName = "gameType9",  weight = 5 }
        { typeName = "gameType11", weight = 5 }
        { typeName = "gameType12", weight = 5 }
        { typeName = "gameType13", weight = 5 }
        { typeName = "gameType14", weight = 5 }
        { typeName = "gameType20", weight = 25 }
    ]

    offlineReportGameTypes = [ 
        { typeName = "gameType7", weight = 100 }
        { typeName = "gameType21", weight = 0 }
    ]

    // only applies to getGameReports
    queries = [ 
        gameType0_skill_damping_query,
        gameType3_skill_damping_query,
        gameType6_skill_damping_query,
        SponsoredEvent_skill_damping_query,
        gameType14_skill_damping_query,
        osdkticker_gamestats_query
    ]
   
    // only applies to getGameReportView
    views = [
        NormalRecentGames,
        CoopRecentGames
    ]

    filterValues = [
        { table = "player", name = "player_id", value = "$USERID$" }
        { table = "player", name = "game_id", value = "$GAMEID$" }
        { table = "game", name = "challenge", range = [0,4] }
        { table = "game", name = "timestamp", possibleValues = [5,10,20,30] }
        { table = "game", name = "OSDK_sponsoredEventId", range = [1,80] }
    ]

    // only applies to simulateProd
    sim = {
        probability = {
            submitOfflineGameReport   = 20
            getGameReports            = 10
            getGameReportViewInfoList = 35
            getGameReportView         = 35 
        }
        maxSleep = 2000
    }


}


//
// Configuration data specific to the util module
//
example = {
    // Common setting shared by all stress modules (found within the StressModule class)
    // ---------------------------------------------------------------------------------
    pingPeriod_ms = #PING_PERIOD_MS#
    inactivityTimeout_ms = #INACTIVITY_TIMEOUT_MS#
    
    login = true
    logout = true

    initial-delay = 0           // Number of milliseconds between start and first action executed.
    num_trials = -1             // Max number of logins/logouts that will occur during the execution of this StressInstance (-1 means no maximum)
    delay_per_trial = 200       // Number of milliseconds to delay one logout and the next login.
    num_execs_per_trial = 10    // How many times will an "action" be called during one logged in session
    delay = 10000               // Number of milliseconds between each time an action is called.
    // ---------------------------------------------------------------------------------

    // Settings specific to this module
    actionWeights = {
        poke = 2
        rpcPassthrough = 10
        requestToUserSessionOwner = 10
    }
}
