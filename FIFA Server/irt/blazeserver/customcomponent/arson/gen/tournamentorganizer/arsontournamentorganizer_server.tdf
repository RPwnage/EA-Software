/*! ************************************************************************************************/
/*!
    \file arsontournamentorganizer_server.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="gamemanager/tdf/externalsessionconfig_server.h"]
#include "gamemanager/gen/externalsessionconfig_server.tdf" // For ExternalSessionServerConfig

[headername="arson/tournamentorganizer/tdf/arsontournamentorganizer.h"]
#include "arson/gen/tournamentorganizer/arsontournamentorganizer.tdf"

[headername="gamemanager/tdf/externalsessiontypes_server.h"]
#include "gamemanager/gen/externalsessiontypes_server.tdf" // for ExternalUserAuthInfo in CreateTournamentTeamParameters

namespace Blaze
{

namespace Arson
{

[description="Server configuration For Tournament Organizer component"]
class ArsonTournamentOrganizerConfig
{
    [tag="ecfg", description="external sessions configuration"]
    Blaze::GameManager::ExternalSessionServerConfig mExternalSessions;

    [tag="url", default="https://tournamentshub.xboxlive.com", description="The url to establish the connection to for external/first party tournament hub service."]
    string(256) mExternalTournamentHubServiceUrl;
    
    [tag="ourl", default="https://organizer-tournamentshub.xboxlive.com", description="The url to establish the connection to for external/first party tournament organizer hub service."]
    string(256) mExternalTournamentOrganizerHubServiceUrl;

    [tag="ttry", default=2, reconfigurable="yes", description="For tournament games, if a send tournament game event call fails, Blaze may back off and retry up to this number of times."]
    uint8_t mSendTournamentEventRetryLimit;
};

////////////////////////////////////////////////////////////////////////////////
// External Sessions / First Party Tournament Service TDFs /////////////////////
////////////////////////////////////////////////////////////////////////////////

[description="ExternalTournamentUtil::createTournament parameters"]
typedef CreateTournamentRequest CreateTournamentParameters;

[description="ExternalTournamentUtil::updateTournament parameters"]
typedef UpdateTournamentRequest UpdateTournamentParameters;

[description="ExternalTournamentUtil::getTournament parameters"]
typedef GetTournamentRequest GetTournamentParameters;

[description="ExternalTournamentUtil::removeTournament parameters"]
typedef RemoveTournamentRequest RemoveTournamentParameters;

[description="ExternalTournamentUtil::createTeam parameters"]
typedef TournamentTeamInfo CreateTournamentTeamParameters;

[description="ExternalTournamentUtil::joinTeam parameters"]
typedef JoinTournamentTeamRequest JoinTournamentTeamParameters;

[description="ExternalTournamentUtil::updateTeam parameters"]
typedef UpdateTournamentTeamRequest UpdateTournamentTeamParameters;

[description="ExternalTournamentUtil::leaveTeam parameters"]
typedef LeaveTournamentTeamRequest LeaveTournamentTeamParameters;

[description="ExternalTournamentUtil::getTeam parameters"]
typedef GetTournamentTeamRequest GetTournamentTeamParameters;

[description="ExternalTournamentUtil::getTeams parameters"]
typedef GetTournamentTeamsRequest GetTournamentTeamsParameters;

[description="ExternalTournamentUtil::setTeamMatch parameters"]
class SetTournamentTeamMatchParameters
{
    [tag="calr", description="Optional caller info, used to fetch auth token etc. If unspecified, will use the current local user session. Required for calls from WAL"]
    UserIdentification mCaller;

    [tag="tmid"] TournamentTeamIdentification mTeamIdentification;
    [tag="trid"] GameManager::TournamentIdentification mTournamentIdentification;
    [tag="esid"] ExternalSessionIdentification mMatchIdentification;

    [tag="frmt", description="A label that describes the match. This generic formatted string provides organizers the flexibility to label the match with richer text such as Final or Heat 1. This is required. This was previously round which was just a number."]
    ArsonArenaFormattedString mLabel;//QA_todo implement as needed

    [tag="bye"] bool mBye;
    
    [tag="endt", description="end time for the match"]
    UtcTimeString mEndTime;
};

[description="ExternalTournamentUtil::submitResult parameters"]
class SubmitTournamentMatchResultParameters
{
    [tag="calr"] UserIdentification mReporter;
    [tag="trid"] GameManager::TournamentIdentification mTournamentIdentification;
    [tag="mtid"] ExternalSessionIdentification mMatchIdentification;
    [tag="outc"] TournamentMatchTeamResultList mTeamResults;
};

[description="ExternalTournamentUtil::getTournaments parameters"]
typedef GetTournamentsRequest GetTournamentsParameters;

[description="ExternalTournamentUtil::getTournaments result"]
typedef GetTournamentsResponse GetTournamentsResult;

}
}
