// EXAMPLES. CAN BE REMOVED - RECOMMEND COMMENTING OUT #include in scenarios.cfg rather than editing this file

"normalHostViability" = { 
    "Predefined_HostViabilityRule" = {
        "minFitThreshold"      = { default = "hostViability" }
    }
}
"normalPlayerCountRule" = { 
    "Predefined_PlayerCountRule" = {        // This rule checks the game's current player count                 
        "rangeOffsetList"     = { default = "testDecay" }      // By default, this expands to +/- 2 from desired value.  May need an update depending on your game's size.
        "desiredPlayerCount"  = { attrName = "DESIRED_PLAYER_COUNT", default = 2 }              // Attempt to find games with at least 2 players (including self)
        "maxPlayerCount"      = { attrName = "PLAYER_CAPACITY",      default = 8 }              // (These totals must include the joining player count)
        "minPlayerCount"      = { attrName = "MIN_PLAYER_COUNT",     default = 2 }              // (These totals must include the joining player count)
    }
}

"createGameTotalPlayerSlotsRule" = { 
    "Predefined_TotalPlayerSlotsRule" = {        // This rule is *required* when running createGame matchmaking (or the TeamCompositionRule)                
        "rangeOffsetList"           = { default = "testDecay" }
        "desiredTotalPlayerSlots"   = { attrName = "PLAYER_CAPACITY",     default = 8 }
        "minTotalPlayerSlots"       = { attrName = "PLAYER_CAPACITY",     default = 8 }
        "maxTotalPlayerSlots"       = { attrName = "PLAYER_CAPACITY",     default = 8 }
    }
}

"findGameModeRule" = { 
    "gameAttributeRules.gameModeMatchRule" = {
        "desiredValues"        = { attrName = "GAME_MODE_DESIRE", default = ["1"] }    // These are just strings that happen to be numbers, not ints. 
        "minFitThreshold"      = { default = "quickMatch" }
    } 
}
"findGameMapRule" = { 
    "gameAttributeRules.gameMapMatchRule" = {
        "desiredValues"        = { attrName = "GAME_MAP_DESIRE", default = ["1"] }
        "minFitThreshold"      = { default = "quickMatch" }
    }
}

"avoidPlayersRuleByBlazeId" = { 
    "Predefined_AvoidPlayersRule" = {
        "avoidList"         = { attrName = "AVOID_IDS", default = [] }
    }
}

// An alternative to the ping site rule:
"normalGeoLocationRule" = { 
    "geoLocationRule" = {
        "minFitThreshold"   = { default = "quickMatch" }
    }
}

"expandedPingSiteRule_any" = {
    "Predefined_ExpandedPingSiteRule" = {
        "rangeOffsetList"        = { default = "matchAny" }
        "latencyCalcMethod"      = { attrName = "LATENCY_CALC_METHOD", default = "MEDIAN_LATENCY" }
        "sessionMatchCalcMethod" = { attrName = "SESSSION_MATCH_CALC_METHOD", default = "MUTUAL_BEST" }
        "pingSiteSelectionMethod" = { attrName = "PING_SITE_SELECTION_METHOD", default = "AVERAGE_FOR_ALL_PLAYERS" }
    }
}

// Quickmatch Fill Lobby Example Rules:
// Example rule that assumes GAME_MODE=0 is a 'lobby' value, which would be set to non-0 when the game is being played.
"findGameLobby" = { 
    "gameAttributeRules.gameModeMatchRule" = {
        "desiredValues"        = { default = ["0"] }    
        "minFitThreshold"      = { default = "requireExactMatch" }
    } 
}
"findGameNotLobby" = { 
    "gameAttributeRules.gameModeMatchRule" = {
        "desiredValues"        = { default = ["1"] }    
        "minFitThreshold"      = { default = "quickMatch" }
    } 
}
"findAnyPlayerCountRule" = { 
    "Predefined_PlayerCountRule" = {        // This rule checks the game's current player count                 
        "rangeOffsetList"     = { default = "matchAny" }      // Match any will match any game, but prefers games closer to the desired value:
        "desiredPlayerCount"  = { attrName = "PLAYER_CAPACITY",      default = 8 }              // Prefer full games
        "maxPlayerCount"      = { attrName = "PLAYER_CAPACITY",      default = 8 }
        "minPlayerCount"      = { default = 1 }              
    }
}

// Selective rule examples:  Here we have 2 versions of the gameModeMatchRule, one for 'Big' mode, and one for 'Small' modes.
// The selectiveSubsessions scenario will only enable the subsession for a given size, if the corresponding *_GAME_MODE_DESIRE value is sent up.
"findBigGameModeRule" = { 
    "gameAttributeRules.gameModeMatchRule" = {
        "desiredValues"        = { attrName = "BIG_GAME_MODE_DESIRE" }
        "minFitThreshold"      = { default = "quickMatch" }
    } 
}
"findSmallGameModeRule" = { 
    "gameAttributeRules.gameModeMatchRule" = {
        "desiredValues"        = { attrName = "SMALL_GAME_MODE_DESIRE" }
        "minFitThreshold"      = { default = "quickMatch" }
    } 
}
"createBigGameTotalPlayerSlotsRule" = { 
    "Predefined_TotalPlayerSlotsRule" = {
        "rangeOffsetList"           = { default = "testDecay" }
        "desiredTotalPlayerSlots"   = { default = 40 }
        "minTotalPlayerSlots"       = { default = 40 }
        "maxTotalPlayerSlots"       = { default = 40 }
    }
}
"createSmallGameTotalPlayerSlotsRule" = { 
    "Predefined_TotalPlayerSlotsRule" = {
        "rangeOffsetList"           = { default = "testDecay" }
        "desiredTotalPlayerSlots"   = { default = 20 }
        "minTotalPlayerSlots"       = { default = 20 }
        "maxTotalPlayerSlots"       = { default = 20 }
    }
}