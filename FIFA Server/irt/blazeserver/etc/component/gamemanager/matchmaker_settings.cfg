#ifndef HIGH_WEIGHT
#define HIGH_WEIGHT            5000
#endif

#ifndef MEDIUM_WEIGHT
#define MEDIUM_WEIGHT          1000
#endif

#ifndef LOW_WEIGHT
#define LOW_WEIGHT             100
#endif

#ifndef MATCH_EXACT_WEIGHT
#define MATCH_EXACT_WEIGHT     0
#endif

// matchmaker config file
matchmakerSettings = {
    #include "component/gamemanager/custommatchmakingrules.cfg"     

    gameSizeRange = {min = 1, max = 23} //max should be the maximum game size this title supports in any mode.
  
    // Salience -- rules are evaluated in the order presented in the salience config.
    // defined rules not present in the list are processed at the end of the list in order of definition
    // any rules not in this list generate a warning on server startup
    // rules in this list not defined in the rules block cause the mm config to fail
    // NON-rete rules are always evaluated after RETE rules for find game matchmaking and gamebrowser, regardless of position in this list.
    // 
    // RETE performance is a trade off of memory for speed.  That speed however is effected in two ways.  The speed we can process
    // a match per session, and the speed we can update facts about games.  Moving rules like GameSize which update often to the top of the list
    // will speed up our fact updates.  At the same time, rules with large numbers of possible values (arbitrary rules) can widen the tree if
    // put too close to the top, which could degrade speed while matching a session.
    ruleSalience = {
        salienceList = [
            "Predefined_GameTypeRule",
            "Predefined_TeamCountRule",
            "Predefined_VirtualGameRule",
            "Predefined_PseudoGameRule",
            "Predefined_GameStateRule",
            "Predefined_GameSettingsRule", 
            "Predefined_RankedGameRule",
            "Predefined_ExpandedPingSiteRule",
            "Predefined_TeamChoiceRule",                // (No config settings for this rule. Only filters games.)
            "Predefined_PlayerCountRule",
            "Predefined_TotalPlayerSlotsRule",	

            "Predefined_TeamBalanceRule",
            // generally this is where config-defined rules, such as UED and Attribute rules should be placed.
            // FIFA SPECIFIC CODE START
            "Predefined_TeamMinSizeRule", 
            "Predefined_RankedGameRule",
            "Predefined_VirtualGameRule",
            "Predefined_PingSiteRule",
            "OSDK_DDPToFullVersion",
            "OSDK_gameMode",
            "OSDK_rosterVersion",
            "OSDK_categoryId",
            "OSDK_sponsoredEventId",
            "OSDK_arenaChallengeId",
            "gameSpeed",
            "gamePoints",
            "skillLevel",
            "dnfPercent",
            "clubSkillLevel",
            "OSDK_feedback",
            "OSDK_maxDNF",
            //"gameAttribRule",
            //"playerClassRule",
            //"playerAttribRule",
            //"multiMatchRule",
            //"sparseMatrixRule",
            //"sparseFitTable",
            //"playerArbitraryMatchRule",
            //"gameArbitraryMatchRule",
            //"gameModeMatchRule",
            //"gameMapMatchRule",
            //"playerStressArbitraryMatchRule",
            //"gameStressArbitraryMatchRule",
            // FIFA SPECIFIC CODE END
            "Predefined_HostBalancingRule",
            "Predefined_HostViabilityRule",
            // FIFA SPECIFIC CODE START
            "OSDK_coop",
            "OSDK_playerMyTeam",
            "OSDK_playerOppTeam",
            "OSDK_playerMyTeamAnyBoost",
            "OSDK_playerOppTeamAnyBoost",
            "OSDK_ChlngrClubId",
            "OSDK_clubId",
            "OSDK_clubIdInverse",
            "OSDK_clubLeagueId",
            "OSDK_clubPlaygroupSize",
            "OSDK_clubIsDDP",
            "OSDK_language",
            "OSDK_tourTeamIdInverse",
            "OSDK_tourId",
            "OSDK_tourTier",
            // FIFA SPECIFIC CODE END
            "geoLocationRule",
            // FIFA SPECIFIC CODE START
            //"skillA_Rule",
            //"integratedSampleSkill_Rule",
            //"DNF_Rule",
            // FIFA SPECIFIC CODE END
            // these predefined rules are intentionally put at the end of the salience list for performance reasons
            // any custom, or config defined rules should generally be placed ahead of these in the salience list
            "Predefined_GameNameRule",
            "Predefined_PreferredPlayersRule",
            "Predefined_XblBlockPlayersRule",
            "Predefined_AvoidPlayersRule",
            "Predefined_QosAvoidPlayersRule"
       ]
    }

    rules = {

        // predefined player count preference rule (min/max requirements & desired game participant count preferences)
        //
        // The Player Count rule defines how to match entities (user or groups) based upon the
        // number of participants in the game or the size of the group.  More information can be found on
        // how this rule is evaluated in playercountrule.h.
        // 
        // NOTE: Desipite being called "Player Count" rule, this rule only evaluates game Participants, and ignores game Spectators.
        //
        // The acceptable range of values that this rule operates on is in the gameSizeRange above
        // Any value outside of this range is clamped to the min/max accordingly.
        // The amount of system memory consumed is directly proportional to
        // the product of the series of the range of this rule.
        // Take care to only specify the range that contains the game sizes usable by your title.
        //
        // fitFormula is the formula used to calculate the fit score between two
        // values, your session's calculated value against another session's
        // or game's calculated value.  This allows for for different values
        // to have more preference as the range expands.
         // FIT_FORMULA_GAUSSIAN
        // fitFormula = {name = FIT_FORMULA_GAUSSIAN, params = {fiftyPercentFitValueDifference = 200}}
        // 
        // Uses the gaussian formula to determine the fit.
        // 
        // params
        // fiftyPercentFitValueDifference is the difference between two values that yeilds a 
        // 0.5 fit percent.  This value controls the width of the bell curve used to calculate the
        // fit percent between 2 entities.
        // 
        // Below is a table of examples given a fiftyPercentFitValueDifference of 200.
        //
        // Fit Score : Difference
        //       1.0 : +/- 0 (exact match)
        //       .90 : +/- 77
        //       .75 : +/- 128
        //       .50 : +/- 200
        //       .25 : +/- 282
        //       .10 : +/- 364
        //       .00 : INFINITE (match anything)
        //
        //      At heart, we're evaluating: fit percent = e^( - ((x-b)^2 / (c * 1.2011225)^2 )) where
        //          (x - b) is the difference between the two entities
        //          c is the fiftyPercentFitValueDifference which determines the width of the bell curve.
        //
        // NOTE: see gaussianfunction.h GausianFunction.calculate for the implementation.
        //
        // FIT_FORMULA_LINEAR
        // fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=10, maxVal=10}}
        // 
        // Uses a linear function starting at the desired value to +maxVal and -minVal using
        // minFit and maxFit to determine the slope.
        //
        // Anyvalues outside of +maxVal and -minVal have value minFit.
        //
        // minFit defaults to 0.0
        // maxFit defaults to 1.0
        // minVal defaults to the smallest minValue of all lists in the rangeOffsetList [minValue, maxValue]
        // maxVal defaults to the largest maxValue of all lists in the rangeOffsetList [minValue, maxValue]
        //
        // FIT_FORMULA_BINARY
        // fitFormula = {name = FIT_FORMULA_BINARY}
        //
        // Uses a binary comparison.  If it is in the range offset 1.0 perfect match
        // if it is not in range then then NO_MATCH.
        //
        // rangeOffsetLists are lists of ranges that can be used by the client
        // to determine the sessions "acceptable value range".  The range works
        // against the calculated UED value or the search value specified by
        // the client.
        // Syntax of the rangeOffsetList:
        // decay = [{ t=0, offset = [100,100]}, { t=5, offset = [200,200]}, { t=10, offset = [INF]}]
        //
        // t is the time since this session has started searching; +0, +5, +10.
        // offset is the acceptable offset around the desired value that indicates
        // a match; +/-100, +/-200, +/-INF.  Offsets don't have to be symetric
        // and if only one value is specified, that value will be used for both the + and - Value.
        // The first value in the offset is the negative expansion, while the second is the positive expansion.
        //
        // Acceptable well known values are
        //   EXACT_MATCH_REQUIRED = 0
        //   INF = infinity (min or max range)
        //
		 
         //===========================================================================
        // MATCH EXACT BEGIN
        //===========================================================================

        // predefined game ranking preference rule (ranked/unranked game preferences).
        // instead of a fitTable, we provide the fitPercents for matches (ranked/ranked) and non-matches (ranked/unranked)
        // abstain & random are valid values, and are considered matches to either ranked or unranked
        Predefined_RankedGameRule = {
                votingMethod = "VOTE_PLURALITY"
                matchingFitPercent = 1.0
                mismatchFitPercent = 0
                weight = #MATCH_EXACT_WEIGHT#
                minFitThresholdLists = {
                OSDK_matchExact = ["0:EXACT_MATCH_REQUIRED"]
                OSDK_matchAny = ["0:0.0"]
                }
        }

        //===========================================================================
        // MATCH EXACT END
        //===========================================================================

        //===========================================================================
        // MATCH RELAX BEGIN
        //===========================================================================

        Predefined_PlayerCountRule = {
            weight =  #LOW_WEIGHT#
            fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 22}}
            //
            // OSDK: Ping does only do exact or any matches, specified by threshold
            //
            rangeOffsetLists = [    
                //values are clamped by the min and max player counts specified in the matchmaking request and gameSizeRange above.
                { name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
                { name = "OSDK_matchRelax", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"]}, { t=2, offset=[22,22]}] }
                { name = "OSDK_matchAny",   rangeOffsets = [{ t=0, offset=["INF"]}] }
            ]
        }

        // Predefined rule matchmaking via the total participant slot count of games (including public, private, filled or free).
        // This rule ignores any spectator slots in a game.
        // For use with PlayerCountRule or PlayerSlotUtilizationRule.
        //
        Predefined_TotalPlayerSlotsRule = {
            weight = #LOW_WEIGHT#
            fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 22}}

            rangeOffsetLists = [    
                //values are clamped by the min and max player counts specified in the matchmaking request and gameSizeRange above.
                { name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
                { name = "OSDK_matchRelax", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"]}, { t=2, offset=[22,22]}] }
                { name = "OSDK_matchAny",   rangeOffsets = [{ t=0, offset=["INF"]}] }
            ]
        }

        //===========================================================================
        // MATCH RELAX END
        //===========================================================================

        //===========================================================================
        // DISABLED BEGIN
        //===========================================================================

        // Predefined rule matching percent of the total participant slots in games that would be filled by participants.
        // This rule disregards spectators and spectator slots.
        //
        Predefined_PlayerSlotUtilizationRule = {
            weight = 10000
            fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 200}}

            rangeOffsetLists = [
                 { name = "desiredOrMore", rangeOffsets = [{ t=0, offset=[0,"INF"]}, { t=5, offset=[25,"INF"]}, { t=10, offset=[50,"INF"]} { t=15, offset=["INF","INF"]}] }
                 { name = "desiredOrLess", rangeOffsets = [{ t=0, offset=["INF",0]}, { t=5, offset=["INF",25]}, { t=10, offset=["INF",50]} { t=15, offset=["INF","INF"]}] }
                 { name = "matchAny", rangeOffsets = [{ t=0, offset=["INF"]}] }
                 { name = "testDecay", rangeOffsets = [{ t=0, offset=[0,0]}, { t=5, offset=[20,20]}, { t=10, offset=["INF"]}] }
            ]
        }

        Predefined_TeamBalanceRule = {
            weight = 100
            fitFormula = { name = "FIT_FORMULA_LINEAR" }
            rangeOffsetLists = [
                { name = "requireExactMatch", rangeOffsets = [{ t=0, offset=[0]}] }
                { name = "testDecay",         rangeOffsets = [{ t=0, offset=[0]}, { t=5, offset=[2]}, { t=10, offset=[10]}] }
                { name = "testLongDecay",     rangeOffsets = [{ t=0, offset=[0]}, { t=2, offset=[1]}, { t=4, offset=[2]}, { t=6, offset=[4]}, { t=8, offset=[8]}, { t=10, offset=[16]}] }
            ]
        }
 
        Predefined_TeamMinSizeRule = {
            weight = 100
            fitFormula = { name = "FIT_FORMULA_LINEAR"}
 
            rangeOffsetLists = [
                { name = "requireExactMatch", rangeOffsets = [{ t=0, offset=[0]}] }
                { name = "testDecay",         rangeOffsets = [{ t=0, offset=[0]}, { t=5, offset=[2]}, { t=10, offset=[10]}] }
                { name = "testLongDecay",     rangeOffsets = [{ t=0, offset=[0]}, { t=2, offset=[1]}, { t=4, offset=[2]}, { t=6, offset=[4]}, { t=8, offset=[8]}, { t=10, offset=[16]}] }
            ]
        }

        // predefined game virtualized preference rule - checks the game setting flag 'isVirtualized'
        // Only operates in find game mode, as all games created by MM are 'standard'
        // instead of a fitTable, we provide the fitPercents for matches (virtualized/virtualized) and non-matches (virtualized/standard)
        // abstain is a valid values, and are considered matches to either virtualized or standard
        // ***** Note: OSDK does not currently expose this functionality *****
        Predefined_VirtualGameRule = {
            matchingFitPercent = 1.0
            mismatchFitPercent = .5
            weight = 100
            minFitThresholdLists = {
                requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
                testDecay = [ "0:1.0", "5:.5" ]
            }
        }

        // predefined QoS HostBalancing rule
        // This rule groups good game hosts with bad game hosts (as determined by Network QOS info).
        // The goal is to ration the 'good' hosts and distribute them amongst the bad hosts so that
        // all game members can connect to each other (according to the game's network topology).
        //    NOTE: this rule is ignored during FindGame matchmaking session evaluation; it only applies
        //          to CreateGame matchmaking sessions.
        //
        // The rule has 3 literals used in the minFitThreshold lists:
        //     HOSTS_STRICTLY_BALANCED: 1.0  (good host matched with a bad host)
        //     HOSTS_BALANCED: 0.5  (good host matched with a bad or moderate host)
        //     HOSTS_UNBALANCED: 0.0  (bad hosts are grouped together)
        //
        //  Per email with Al Mundy of Microsoft, this matchmaking rule should not impact compliance with Xbox 360 TCR # 098:
        //  "As long as players with a  strict NAT are able to play online, this is fine. Strict-Strict matches are not required."
        //  Allowing this rule to decay to HOSTS_UNBALANCED can result in players that are unable to connect to each other matching
        //  in create game mode. Titles must allow players with strict NATs to play online, but we can configure matchmaking to prevent
        //  them from matching each other or hosting a game session by only decaying this rule to the HOSTS_BALANCED threshold.
        // ***** Note: OSDK does not currently expose this functionality *****
        //
        Predefined_HostBalancingRule = {
            weight = #MEDIUM_WEIGHT#
            minFitThresholdLists = {
                hostBalancing = [ "0:HOSTS_STRICTLY_BALANCED", "1:HOSTS_BALANCED" ]
                matchAny = [ "0:HOSTS_UNBALANCED" ]
            }
        }

        // GameNameRule
        // Allows searching for games whose names contain a specified substring.
        // To disable this rule set minLength to 0.
        //
        // relevantChars override allows explicitly specifying search-relevant characters from
        // (extended) 8-bit ascii. If omitted, or empty, defaults relevant characters to a-z, A-Z, and 0-9.
        // Non search-relevant characters are stripped from names/search strings, for matching with this rule.
        // Side: If ignoreCase=true, any character in a-z, A-Z put in relevantChars, gets both upper/lower cases relevant.
        //
        // ignoreCase if true, treat upper and lower case ascii alphabet characters in a-z, A-Z
        // (0x41-0x5A, 0x61-0x7A) as same in terms of searches. Omitting sets to default true.
        //
        // minLength is the min allowed char length (in relevant characters) enforced on all searches.
        // The lowest allowed value for minLength is 3. Omitting sets to default 3. 0 disables rule.
        //
        // weight is the weight of this rule as compared to other rules in MM.
        // ***** Note: OSDK does not currently expose this functionality *****
        Predefined_GameNameRule = {  
            weight = #LOW_WEIGHT#
            ignoreCase = true
            minLength = 3
            relevantChars = "" // e.g. relevantChars = "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()-=_+;:[]{}"
        }

        // PreferredPlayersRule
        // Allows matchmaking sessions to increase chance of matching games or other matchmaking
        // sessions having specific preferred players.
        //
        // weight is the weight of this rule as compared to other rules in MM.
        //
        // maxPlayersUsed specifies the cutoff number of preferred players, actually used for
        // matchmaking by this rule.  Clients specifying more than this, only get 'maxUsedPlayers'
        // of the players used.  If the combined total of preferred BlazeIds and NucleusAccountIds
        // specified exceeds maxPlayersUsed, players are used in the following order:
        // (1) Online players specified by BlazeId
        // (2) Online players specified by NucleusAccountId
        // (3) Offline players specified by BlazeId
        // (4) Offline players specified by NucleusAccountId
        // 
        // Higher values of maxPlayersUsed can lower search performance.
        //
        // Rule is usable in the GameBrowser, but integrators should first consider the UserSetGameBrowserList
        // feature before using this rule as part of a game browser request.
        Predefined_PreferredPlayersRule = {  
            weight = #LOW_WEIGHT#
            maxPlayersUsed = 1000
        }

        // PreferredGamesRule
        // Allows matchmaking sessions to increase chance of matching specific games
        //
        // weight is the weight of this rule as compared to other rules in MM.
        //
        // maxGamesUsed specifies the cut-off number of games, actually used for
        // matchmaking by this rule.  Clients specifying more than this, only get 'maxGamesUsed'
        // games.  Higher values can lower search performance.
        //
        Predefined_PreferredGamesRule = {  
            weight = #LOW_WEIGHT#
            maxGamesUsed = 1000
        }

        //===========================================================================
        // DISABLED END
        //===========================================================================
        
        //===========================================================================

        // The HostViabilityRule is a special case, it behaves slightly differently for FindGame and CreateGame matchmaking sessions.
        //  For full mesh peer to peer games, which can have at most 1 player with a strict firewall, this rule attempts to limit
        //      the number of strict connections in a game.
        //  For peer hosted topologies, the goal is to ration the 'good' hosts and distribute them amongst the bad hosts so that
        //      all game members can connect to each other (according to the game's network topology).
        //  During findGame the rule evaluates your ability to connect to a game (the viability of connection to the game host)
        //      We compare your NAT type (firewall type) against the game's NAT type, allowing you to avoid games you're
        //      unlikely to connect to.
        //  For createGame matchmaking sessions, the rule is only evaluated _after_ all of the players have been collected.  The
        //      rule acts like a filter, only allowing the matchmaking session to create a game if at least 1 player
        //      is a viable host (for the other players to connect to).
        //
        //    The rule has 4 tiers of fitScore:
        //            CONNECTION_ASSURED: 1.0
        //            CONNECTION_LIKELY: 0.75
        //            CONNECTION_FEASIBLE: 0.5
        //            CONNECTION_UNLIKELY: 0.25
        //    
        //    The rule is satisfied when at least 1 of the matched players (including the matchmaking session creator)
        //        has a NAT type (aka Network Address Translation / firewall type) that allows other players to connect.
        //
        //    For example, Let's say I'm behind a strict firewall and trying to create a 3 player peer hosted client server game.
        //       If I've matched 2 other players, the session's gameSize is satisfied and it could try to create a game.
        //        However, we must also satisfy the hostViability rule; if the other two players are also behind strict firewalls,
        //        the matchmaker will continue looking for other players (until the hostViability rule decays), since none of us
        //        are viable hosts.
        //
        //    The relationship between the NAT type and threshold fitscore is:
        //            OPEN to Any NAT Type ---> CONNECTION_ASSURED
        //            MODERATE to MODERATE ---> CONNECTION_LIKELY
        //            MODERATE to STRICT   ---> CONNECTION_FEASIBLE (possible on PC where opens are often classified as moderate)
        //            Any other NAT Type combinations ---> CONNECTION_UNLIKELY
        //
        //    Note: this rule can also be customized in the blazeServer code if you want to check the host's bandwidth.
        //        (ex, if your title might require the host to have 1024kbps up in order to host a 32 player game)
        //        See MatchmakingCriteria::isViableGameHost in <blazeServerRootDir>/component/gamemanager/matchmaker/matchmakingcriteria.h
        //
        Predefined_HostViabilityRule = {
            weight = #LOW_WEIGHT#
            minFitThresholdLists = {
                OSDK_connAssured = ["0:CONNECTION_ASSURED"]
                OSDK_connLikely = ["0:CONNECTION_LIKELY"]
                OSDK_connFeasible = ["0:CONNECTION_FEASIBLE"]
            #if (ENV == "dev" || ENV == "test" || ENV == "cert")
                OSDK_connUnlikely = ["0:CONNECTION_UNLIKELY"]
            #else
                OSDK_connUnlikely = ["0:CONNECTION_LIKELY", "30:CONNECTION_FEASIBLE", "50:CONNECTION_UNLIKELY"]
            #endif
            }
        }

        //===========================================================================

        //===========================================================================
        //   MATCH RELAX BEGIN
        //===========================================================================

        // The ExpandedPingSiterule does CreateGame and FindGame based on the latency to ping sites (data centers). Client side will try to ping QOS latency servers
        // (configured in qossettings.cfg) one by one to retrieve latency for each server as soon as a user logged in. A latency map keyed by server alias
        // is maintained in UserExtendedData for each user, which gets updated every time a QOS latency server ping happens.
        // During FindGame -
        //    The rule evaluates your set of data centers ("best" and all other DCs with latency under the current decay range offset) and attempts to find an existing game
        //    in one of those DCs. For groups of players, the latency value used to determine "best" and other DCs can be controlled via scenario attribute.
        // During CreateGame -
        //    The rule evaluates your set of data centers ("best" and all other DCs with latency under the current decay range offset) against other Matchmaking sessions
        //    in an attempt to find sessions that match one or more of your data centers. For groups of players, the latency value used to determine "best" and other DCs
        //    can be controlled via scenario attribute. How a match is determined can also be controlled via scenario attribute.
        //    When creating dedicated server games via Matchmaking, this rule can control (via scenario attribute) which data center
        //    (if multiple matches are available) the game will be hosted in.

        Predefined_ExpandedPingSiteRule = {
            weight = #HIGH_WEIGHT#
            fitFormula = {name = "FIT_FORMULA_LINEAR" ,params = {maxVal=1000}}
            minLatencyOverride = 15
            rangeOffsetLists = [
                { name = "exactMatch", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
                { name = "decay",      rangeOffsets = [{ t=0, offset=[100]}, { t=5, offset=[200]}] }
                { name = "relaxedDecay",    rangeOffsets = [{ t=0, offset=[30]}, { t=2, offset=[50]}, { t=10, offset=[75]}, { t=25, offset=[100]}, { t=45, offset=[125]}] }
                { name = "normalDecay",     rangeOffsets = [{ t=0, offset=[30]}, { t=2, offset=[50]}, { t=10, offset=[60]}, { t=25, offset=[70]}, { t=45, offset=[75]}] }
                { name = "restrictedDecay", rangeOffsets = [{ t=0, offset=[15]}, { t=2, offset=[30]}, { t=10, offset=[45]}, { t=25, offset=[60]}, { t=45, offset=[75]}] }
                { name = "limitedDecay", 	  rangeOffsets = [{ t=0, offset=[20]}, { t=10, offset=[25]}, { t=30, offset=[35]}, { t=45, offset=[50]}] }
                { name = "matchAny",   rangeOffsets = [{ t=0, offset=["INF"]}] }
            ]
        }

        // geoLocationRule is a matchmaking rule to work off geo location data.
        // 'useGeoipData' must be turned on in usersessions.cfg.  Otherwise, this rule will fail to initialize.
        //
        // The latitude and longitude of each user is stored in their user session when the login. When matching against
        // other users, both user's information is compared.  When matching against a game session, the game session's
        // topology host's location information is used.  We do not take into account other users in the game, so this
        // rule does not make much sense for Peer 2 Peer topologies.
        //
        // You should avoid using this rule in conjuction with the ping site rule.  While it is possible, the two different
        // rules could counteract each other.
        //
        // range is the acceptable range of distances this rule operates on
        // Any value outside of the range is clamped to the min/max accordingly.
        // Evaluations of sessions or games closer than the min value are considered an exact match.
        // Evaluations of sessions or games farther than the max value are considered a 0 match.
        //
        // FitScore is calculated as a percentage you are from the range’s min and max.
        //  - If distance is <= min it is considered a perfect match (1.0 fit score)
        //  - If distance is > max it is considered a zero match (0.0 fit score)
        //  - Otherwise, we calculate the fit score linearly based on the distance between the min & max.
        //  1.0 - ((distance - min) / (max - min))
        //
        // Accuracy Note:
        // The Geo IP database only provides approximations of location. The distance calculations are accurate to ~5 miles.
        // Overall, the results should have an accuracy of around 50 miles in the average case.
        // Accuracy Note:
        // The Geo IP database only provides approximations of location. The distance calculations are accurate to ~5 miles.
        // Overall, the results should have an accuracy of around 50 miles in the average case.
		// Long Distance References: 
        //  (Opposite Side of World) - 12500 mi
        //   Miami to Sao Paulo - 4200 mi
        //   NY to London - 3500 mi
        //   NY to LA, British Columbia to NB - 2700 mi
        //   Hawaii to San Francisco - 2300 mi
        //   Portugal to Finland, Tokyo to Hong Kong - 1800 mi
        //   Austrailia to New Zealand, Anchorage to Seattle - 1400 mi
        //   LA to Seattle, Miami to NY - 1000 mi
        //   London to Berlin - 600 mi
        //   LA to San Francisco - 350 mi
        geoLocationRule = {
            weight = #HIGH_WEIGHT#
            range = { min = 50, max = 4800 } // in miles, the minimum describes the distance considered an exact match, the max is the distance considered a 0% match
            rangeOffsetLists = [
                    //we use a single value in the range list here because the GeoLocation rule is searching within a given radius.
                    { name = "OSDK_matchRelax", rangeOffsets = [    { t=0,  offset=["EXACT_MATCH_REQUIRED"] },
                                                                    { t=3,  offset=[300] },
                                                                    { t=8, offset=[600] },
                                                                    { t=15, offset=[1200] },
                                                                    { t=35, offset=[2500] },
                                                                    // offset can't equal or excess max range, otherwise any distance can match up until GOS issue https://developer.origin.com/support/browse/GOSOPS-33891 is fixed.
                                                                    { t=40, offset=[4799] } ] } 
			    ]
        }

        //===========================================================================
        //   MATCH RELAX END
        //===========================================================================

        //===========================================================================
        //   NO PARAMS SPECIFIED BEGIN
        //===========================================================================

        // QoS validation rule does a post-match evaluation of QoS to a game session
        // Network topologies in this map are tested versus measured packet loss and latency
        // Matchmaking session that fail a QoS check update an internal avoid list of players of games (as appropriate)
        // and either re-enter matchmaking, if not yet expired, or report a matchmaking failure dependent on the setting of 
        // continueMatchingAfterValidationFailure.
        // Omitted network topologies do not have QoS validation performed, and sessions matchmaking to create a reservation do not
        // perform QoS validation.
        // A user's avoid list and QoS tier persist for the life of their usersession, and packet loss and latency values higher
        // than that provided in a topology's highest tier are never accepted, regardless of failure count.
        // When being promoted to the next QoS tier, a user's avoid lists are cleared.

        qosValidationRule = {
		//	// if true matchmaking will continue after validation failure
            continueMatchingAfterValidationFailure = true
            connectionValidationCriteriaMap = {
                PEER_TO_PEER_FULL_MESH = {
                    qosSettings = { durationMs = 4500
                                    intervalMs = 200
                                    packetSize = 100 // bytes
                                  }
                    qosCriteriaList = [{ name = "Tier1"
                                         maximumLatencyMs = 250
                                         maximumPacketLoss = 15.00
                                         attemptsAtTier = 2
                                       },
									   { name = "Tier2"
                                         maximumLatencyMs = 500
                                         maximumPacketLoss = 30.00
                                         attemptsAtTier = 1
                                       }]
                }
            }
        } 

        // AvoidGamesRule
        // Allows preventing matching specific games
        // 
        // maxGameIdListSize is max game ids sessions can specify. Higher values can lower search performance.
        // 
        Predefined_AvoidGamesRule = {  
            maxGameIdListSize = 4
        }

        // AvoidPlayersRule
        // Allows preventing matching games/sessions having specific players.
        //
        // maxPlayersUsed specifies the cutoff number of avoid players actually used for
        // matchmaking by this rule.  Clients specifying more than this, only get 'maxUsedPlayers'
        // of the players used.  Higher values can lower search performance.
        //
        Predefined_AvoidPlayersRule = {
            maxPlayersUsed = 1000
        }

        //===========================================================================
        //   NO PARAMS SPECIFIED END
        //===========================================================================

        gameAttributeRules = {

            //===========================================================================
            //   gameAttributeRules - EXACT MATCH BEGIN
            //===========================================================================

			// OSDK Predefined Rule - Roster Version Rule
            OSDK_rosterVersion = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"       
                attributeName = "OSDK_rosterVersion"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                }        
            }

            // OSDK Predefined Rule - Category ID Rule
            OSDK_categoryId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"          
                attributeName = "OSDK_categoryId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                }        
            }

			// OSDK Predefined Rule - Sponsored Event ID Rule
            OSDK_sponsoredEventId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"
                attributeName = "OSDK_sponsoredEventId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
       		        OSDK_matchAny = ["0:0.0"]
                }
            }
            
            // OSDK Predefined Rule - Arena Challenge ID Rule
            OSDK_arenaChallengeId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"          
                attributeName = "OSDK_arenaChallengeId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                }        
            }

            // OSDK Predefined Rule - Challenge Club ID Rule
            OSDK_ChlngrClubId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"
                attributeName = "OSDK_ChlngrClubId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                }
            }

            // OSDK Predefined Rule - Club ID Rule
            OSDK_clubId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"          
                attributeName = "OSDK_clubId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                }        
            }

            // OSDK Predefined Rule - Tournament ID Rule
            OSDK_tourId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"         
                attributeName = "OSDK_tourId"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }        
            }
            
            // OSDK Predefined Rule - Tournament Tier Rule
            OSDK_tourTier = {
                weight = #MATCH_EXACT_WEIGHT#
                attributeName = "OSDK_tourTier"
                votingMethod = "VOTE_PLURALITY"
                defaultAbstainValue = "1"
                possibleValues = ["1", "2", "3", "4", "5"]
                fitTable = [
                    1.0, 0.7, 0.4, 0.2, 0.1,
                    0.7, 1.0, 0.7, 0.4, 0.2,
                    0.4, 0.7, 1.0, 0.7, 0.4,
                    0.2, 0.4, 0.7, 1.0, 0.7,
                    0.1, 0.2, 0.4, 0.7, 1.0
                ]
         
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                       OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "5:0.7", "10:0.4", "15:0.2", "20:0.1"]
                }
            }

            // OSDK Predefined Rule - Game Mode Rule
            OSDK_gameMode = {
                weight = #MATCH_EXACT_WEIGHT#
                attributeName = "OSDK_gameMode"
                votingMethod = "VOTE_PLURALITY"
                defaultAbstainValue = "abstain" // This should not occur and isn't handled by the Ping client
                possibleValues = ["abstain", "0", "1", "2", "3", "4", "5", "6", "8", "9", "10", "11", "12", "13", "14", "20", "25", "26", "33", "31", "35", "40", "41", "42", "70", "72", "73", "75", "76", "79", "80", "81", "82", "88", "201"]      

                sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.0
                    randomValue = 0
                    sparseValues = []
                }            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }

            // OSDK Predefined Rule - Co-op Rule
            OSDK_coop = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"
                attributeName = "OSDK_coop"
                votingMethod = "OWNER_WINS"

                matchingFitPercent = 1.0
                mismatchFitPercent = 0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }        
            }
            
            
            //
            // fifaHalfLength Rule
            // Possible values for Team Level Rule: 
            //      "-1" = no restriction, "0" = 2 min, "1" = 3 min, "2" = 4 min, "3" = 5 min,
            //      "4" = 6 min, "5" = 7 min, "6" = 8 min, "7" = 9 min,
            //      "8" = 10 min, "9" = 15 min, "10" = 20 min
            //
            //  Fit table is linearly distributed across half lengths, with respect to the 2 inputs
            //                                        
            fifaHalfLength = {
                    weight = #MATCH_EXACT_WEIGHT#
                    ruleType = "EXPLICIT_TYPE"
                    attributeName = "fifaHalfLength"
                    votingMethod = "OWNER_WINS"
                    possibleValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" ]
            
                    fitTable = [
                            "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", 
                            "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", 
                            "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", 
                            "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", 
                            "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", 
                            "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0",
                            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0",
                            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0",
                            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0",
                            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0",
                            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0"			  
                            ] 
            
                            minFitThresholdLists = {
                                    OSDK_matchExact = ["0:1.0"]
                                    OSDK_matchAny = ["0:0.0"]
                            }			
            }
            
            // fifaGameSpeed Rule
            // Possible values for Game Speed Rule: 
            //      "0" = slow, "1" = normal, "2" = fast
            //  fitTable = {
            //	  "1.0", "0.0", "0.0",
            //	  "0.0", "1.0", "0.0",
            //	  "0.0", "0.0", "1.0"
            //	}						
            fifaGameSpeed = {
                    weight = #MATCH_EXACT_WEIGHT#
                    ruleType = "EXPLICIT_TYPE"
                    attributeName = "fifaGameSpeed"
                    votingMethod = "OWNER_WINS"
                    possibleValues = ["0","1","2"]
            
                    fitTable = [
                            "1.0", "0.0", "0.0", 
                            "0.0", "1.0", "0.0", 
                            "0.0", "0.0", "1.0"
                    ] 
            
                    minFitThresholdLists = {
                            OSDK_matchExact = ["0:1.0"]
                            OSDK_matchAny = ["0:0.0"]
                    }			
            }
            
            // fifaPPT Rule
            // Possible values for OTP game player per team: 
            //      "0" = 5 , "1" = 10
            //  fitTable = {
            //	  "1.0", "0.0",
            //	  "0.0", "1.0",
            //	}						
            //  Relaxtion goes: 0-10 sec 100% match, 10+ sec 50% match
            fifaPPT = {
                    weight = #MATCH_EXACT_WEIGHT#
                    ruleType = "EXPLICIT_TYPE"
                    attributeName = "fifaPPT"
                    votingMethod = "OWNER_WINS"
                    possibleValues = ["0","1"]
            
                    fitTable = [
                            "1.0", "0.0",  
                            "0.0", "1.0"
                    ] 
            
                    minFitThresholdLists = {
                            OSDK_matchExact = ["0:EXACT_MATCH_REQUIRED"]
                            OSDK_matchAny = ["0:0.0"]
                    }			
            }
            
            // fifaClubMMAny Rule
            // Possible values for rule: 
            //      "00" = no restriction, Any CPU controlled; "01" = no restriction, Any user controlled; "10" = require match, Any CPU controlled; "11" = require match, Any user controlled
            //			
            fifaClubMMAny = {
                    weight = #MATCH_EXACT_WEIGHT#
                    ruleType = "EXPLICIT_TYPE"
                    attributeName = "fifaClubMMAny"
                    votingMethod = "OWNER_WINS"
                    possibleValues = ["0","1","10","11"]
            
                    fitTable = [
                            "1.0", "1.0", "1.0", "0.0" 
                            "1.0", "1.0", "0.0", "1.0"
                            "1.0", "0.0", "1.0", "0.0"
                            "0.0", "1.0", "0.0", "1.0"
                    ]
            
                    minFitThresholdLists = {
                            OSDK_matchExact = ["0:1.0"]
                            OSDK_matchAny = ["0:0.0"]
                    }			
            }		
            
            // fifaClubMMGK Rule
            // Possible values for rule: 
            //      "00" = no restriction, GK CPU controlled; "01" = no restriction, GK user controlled; "10" = require match, GK CPU controlled; "11" = require match, GK user controlled
            //			
            fifaClubMMGK = {
                    weight = #MATCH_EXACT_WEIGHT#
                    ruleType = "EXPLICIT_TYPE"
                    attributeName = "fifaClubMMGK"
                    votingMethod = "OWNER_WINS"
                    possibleValues = ["0","1","10","11"]
            
                    fitTable = [
                            "1.0", "1.0", "1.0", "0.0" 
                            "1.0", "1.0", "0.0", "1.0"
                            "1.0", "0.0", "1.0", "0.0"
                            "0.0", "1.0", "0.0", "1.0"
                    ]
            
                    minFitThresholdLists = {
                            OSDK_matchExact = ["0:1.0"]
                            OSDK_matchAny = ["0:0.0"]
                    }			
            }
            
            // fifaMatchClubType Rule
            // Possible values for rule: 
            //      "00" = match any, club chosen; "01" = match any, nat team chosen; "10" = match type, club chosen; "11" = match type, nat team chosen
            //			
            fifaMatchClubType = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaMatchClubType"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["0","1","10","11"]
            
            	fitTable = [
            	  "1.0", "1.0", "1.0", "0.0" 
            	  "1.0", "1.0", "0.0", "1.0"
            	  "1.0", "0.0", "1.0", "0.0"
            	  "0.0", "1.0", "0.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}			
            }
            
            // fifaMatchGuests Rule
            // Possible values for rule: 
            //      "00" = match any, no guests, "01" = match any, guest; "10" = match same, no guest; "11" = match same, guest
            //			
            fifaMatchGuests = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaMatchGuests"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["0","1","10","11"]
            
            	fitTable = [
            	  "1.0", "1.0", "1.0", "0.0" 
            	  "1.0", "1.0", "0.0", "1.0"
            	  "1.0", "0.0", "1.0", "0.0"
            	  "0.0", "1.0", "0.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}			
            }
            
            // used to explicitly avoid the value that is assigned to this rule (note fit percent values)
            fifaAvoidTeam = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"
            	attributeName = "fifaAvoidTeam"
            	votingMethod = "OWNER_WINS"
            
            	matchingFitPercent = 0
            	mismatchFitPercent = 1.0
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0", "15:0.0"]
            	}        
            }
            
            // FIFA MatchupHash rule
            // This rule allows specific builds to matchup with each other without compromising the use of game version protocol string
            // the game version protocol string is used by rebroadcaster to find the proper match between DEV builds, QA builds, and loadtesting bots
            // we have to add in this rule below to allow further unique matchup behavior within all DEB builds, 
            // otherwise we wil have to setup various set of rebroadcaster per SE local build.
            fifaMatchupHash = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"       
            	attributeName = "fifaMatchupHash"
            	votingMethod = "OWNER_WINS"
            
            	matchingFitPercent = 1.0
            	mismatchFitPercent = 0
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}
            }

            // fifaAttribDBRule is used to ensure that players have the same AttribDB
            fifaAttribDBRule = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"       
            	attributeName = "fifaAttribDBRule"
            	votingMethod = "OWNER_WINS"
            
            	matchingFitPercent = 1.0
            	mismatchFitPercent = 0
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}
            }

            fifaWomenRule = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"
            	attributeName = "fifaWomenRule"
            	votingMethod = "OWNER_WINS"
            
            	matchingFitPercent = 1.0
            	mismatchFitPercent = 0.0
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchRelax = ["0:1.0"]
            		OSDK_matchAny = ["0:1.0"]
            	}
            }
            		
            ssfNewUser = {
            	weight = #MEDIUM_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"
            	attributeName = "ssfNewUser"
            	votingMethod = "OWNER_WINS"
			
            	matchingFitPercent = 1.0
            	mismatchFitPercent = 0.0
			
            	minFitThresholdLists = {
            		matchSimilar = [0:1.0, 20:0.0]
            	}
            }

            ssfOpponentType = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "ssfOpponentType"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["0","1","2"]
			
            	sparseFitTable = {
            		diagonalValue = 1.0
            		offDiagonalValue = 0.0
            		sparseValues = []
            	}
			
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            	}
            }

            ssfMatchType = {
            weight = #MATCH_EXACT_WEIGHT#
            ruleType = "EXPLICIT_TYPE"
            attributeName = "ssfMatchType"
            votingMethod = "VOTE_PLURALITY"
            defaultAbstainValue = "random"
            possibleValues = [
                "5", "6", "abstain", "random"
            ]

            sparseFitTable = {
               diagonalValue = 1.0
               offDiagonalValue = 0.0
               sparseValues = [["sparseFitTableFillColumn", "abstain", 0.8],
                               ["sparseFitTableFillRow", "abstain", 0.8],
                               ["abstain", "abstain", 1.0],
                               ["sparseFitTableFillColumn", "random", 0.0],
                               ["sparseFitTableFillRow", "random", 0.0]]
            }

            minFitThresholdLists = {
                     OSDK_matchExact = [0:1.0, 30:0.8]
                 }
            }

            ssfWalls = {
            weight = #MATCH_EXACT_WEIGHT#
            ruleType = "EXPLICIT_TYPE"
            attributeName = "ssfWalls"
            votingMethod = "VOTE_PLURALITY"
            defaultAbstainValue = "random"
            possibleValues = [
                "0", "1", "abstain", "random"
            ]

            sparseFitTable = {
               diagonalValue = 1.0
               offDiagonalValue = 0.0
               sparseValues = [["sparseFitTableFillColumn", "abstain", 0.8],
                               ["sparseFitTableFillRow", "abstain", 0.8],
                               ["abstain", "abstain", 1.0],
                               ["sparseFitTableFillColumn", "random", 0.0],
                               ["sparseFitTableFillRow", "random", 0.0]]
            }

            minFitThresholdLists = {
                     OSDK_matchExact = [0:1.0, 30:0.8]
                 }
            }
            
            futHouseRuleDropInTeamId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"
                attributeName = "futHouseRuleDropInTeamId"
                votingMethod = "OWNER_WINS"
                matchingFitPercent = 1.0
                mismatchFitPercent = 0
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "5:0.0"]
                }
            }

            futHouseRuleDropInOpponentTeamId = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "ARBITRARY_TYPE"
                attributeName = "futHouseRuleDropInOpponentTeamId"
                votingMethod = "OWNER_WINS"
                matchingFitPercent = 0
                mismatchFitPercent = 1.0
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "5:0.0"]
                }
            }

            futHouseRuleDropInExpanded = {
                weight = #MATCH_EXACT_WEIGHT#
                ruleType = "EXPLICIT_TYPE"
                attributeName = "futHouseRuleDropInExpanded"
                votingMethod = "OWNER_WINS"
                possibleValues = [ "0", "1", "2" ] // drop-in, house rules classic, house rules other

                fitTable = [
                    "1.0", "0.5", "0.0",
                    "0.5", "1.0", "0.0",
                    "0.0", "0.0", "1.0"
                ]

                minFitThresholdLists = {
                    OSDK_matchRelax = ["0:1.0", "5:0.5"]
                }
            }

            //===========================================================================
            //   gameAttributeRules - EXACT MATCH END
            //===========================================================================
            
            //===========================================================================
            //   gameAttributeRules - NOT SPECIFIED BY FIFA BEGIN
            //===========================================================================
            
            // OSDK Predefined Rule - Club Is DDP Version Rule
            OSDK_clubIsDDP = {
                weight = 100
                ruleType = "ARBITRARY_TYPE"           
                attributeName = "OSDK_clubIsDDP"
                votingMethod = "OWNER_WINS"
            
                matchingFitPercent = 1.0
                mismatchFitPercent = 0
            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                }        
            }        
            
            
            // OSDK Predefined Rule - Language Rule
            OSDK_language = {
                weight = 100
                attributeName = "OSDK_language"
                votingMethod = "VOTE_PLURALITY"            
                possibleValues = ["abstain", "-1", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "random"]
                sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.0
                    randomValue = 0
                    sparseValues = []
                }            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }
            
            // OSDK Predefined Rule - Tournament team ID inverse Rule
            // This rule prevents the same tournament team ID from matching up. It works opposite ("not equal") by reversing
            // the matching and mismatch fit percentage.
            OSDK_tourTeamIdInverse = {
                weight = 100
                ruleType = "ARBITRARY_TYPE"          
                attributeName = "OSDK_tourTeamIdInverse"
                votingMethod = "OWNER_WINS"
            
                matchingFitPercent = 0
                mismatchFitPercent = 1.0
            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0", "5:0.0"]
                    OSDK_matchAny = ["0:0.0"]
                }        
            }
            
            // OSDK Predefined Rule - Seasonal Play Playoff Division Rule
            OSDK_playoffDivision = {
                weight = 100
                attributeName = "OSDK_playoffDivision"
                votingMethod = "VOTE_PLURALITY"
                defaultAbstainValue = "1"
                possibleValues = ["0", "1", "2", "3", "4"]
                sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.3
                    randomValue = 0
                    sparseValues = [["0", "1", 0.1],
                                   ["0", "2", 0.1],
                                   ["0", "3", 0.1],
                                   ["0", "4", 0.1],
                                   ["1", "0", 0.1],
                                   ["2", "0", 0.1],
                                   ["3", "0", 0.1],
                                   ["4", "0", 0.1]]
                }
            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "3:0.3", "23:0.0"]
                }
            }
            
            
             // Ping game only Rule - Game Speed Rule
            gameSpeed = {
                weight = 100
                attributeName = "gameSpeed"
                votingMethod = "VOTE_PLURALITY"
                defaultAbstainValue = "1"
                possibleValues = ["abstain", "0", "1", "2"]
            
                sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.0
                    randomValue = 0
                    sparseValues = []
                }            
            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }
            
            // Ping game only Rule - Game Points Rule
            gamePoints = {
                weight = 100
                attributeName = "gamePoints"
                votingMethod = "VOTE_PLURALITY"
                defaultAbstainValue = "5"
                possibleValues = ["abstain", "1", "3", "5", "10", "15", "20"]
            
                sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.0
                    randomValue = 0
                    sparseValues = []
                }
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }
            
            //===========================================================================
            //   gameAttributeRules - NOT SPECIFIED BY FIFA END
            //===========================================================================
            
            // FIFA Club Tournament Rule
            fifaClubTournament = {
            	weight = 100
            	attributeName = "fifaClubTournament"
            	votingMethod = "OWNER_WINS"
            	defaultAbstainValue = "0"
            	possibleValues = ["0", "1", "2", "3", "4", "5"]
            
            	sparseFitTable = {
            		diagonalValue = 1.0
            		offDiagonalValue = 0.0
            		randomValue = 0
            		sparseValues = []
            	}            
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}
            }
            
            fifaGameMode = {
            	weight = 100
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaGameMode"
            	votingMethod = "OWNER_WINS"
            	possibleValues = [ "-1", "0", "1", "2", "3", "4", "5", "6"]      
            
            	fitTable = [
            	  "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            	  "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            	  "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            	  "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0", "0.0",
            	  "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0", "0.0",
            	  "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0", "0.0",
            	  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0", "0.0",
            	  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:EXACT_MATCH_REQUIRED"]
            	}
            }
            
            //
            // fifaTeamLevel Rule
            // Possible values for Team Level Rule: 
            //      "-1" = no restriction, "0" = 0.5-1.5 star, "1" = 2.0-3.5 star, "2" =4.0-5.0 star
            //  Fit table is linearly distributed across star levels, with respect to the 2 inputs
            //  
            //
            //  Relaxtion goes: 0-10 sec 100% match, 10-15 sec 80% match, 15-20 sec 50% match, 20+ sec match any
            //
            fifaTeamLevel = {
            	weight = 100
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaTeamLevel"
            	votingMethod = "OWNER_WINS"
            	defaultAbstainValue = "0" 
            	possibleValues = ["0", "1", "2","3","4"]
            
            	fitTable = [
            	  "1.0", "0.0", "0.0", "0.0", "0.0",
            	  "0.0", "1.0", "0.0", "0.0", "0.0",
            	  "0.0", "0.0", "1.0", "0.0", "0.0",
            	  "0.0", "0.0", "0.0", "1.0", "0.0",
            	  "0.0", "0.0", "0.0", "0.0", "1.0"
            	  ]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}			
            }		
            
            //
            // fifaTeamStarRating Rule
            // Possible values for Team Star Rating Rule: 
            //	 "0" = 0.0 star
            //   "5" = 0.5 star
            //	"10" = 1.0 star
            //	"15" = 1.5 star
            //	"20" = 2.0 star
            //	"25" = 2.5 star
            //	"30" = 3.0 star
            //	"35" = 3.5 star 
            //	"40" = 4.0 star
            //	"45" = 4.5 star
            //	"50" = 5.0 star
            fifaTeamStarRating = {
            	weight = 5000
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaTeamStarRating"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["0", "5", "10", "15", "20", "25", "30", "35", "40", "45", "50"]
            	fitTable = [
            		"1.0", "0.9", "0.8", "0.7", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.9", "1.0", "0.9", "0.8", "0.7", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.7", "0.8", "0.9", "1.0", "0.9",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.7", "0.8", "0.9", "1.0"
            	]         
            	minFitThresholdLists = {
            		OSDK_matchRelax = ["0:1.0", "20:0.9", "35:0.8"]
            	}			
            }
            
            // fifaRoster Rule
            // Possible values for Roster Rule: 
            // 	"0" = custom, "1" = online
            fifaRoster = {
            	weight = 100
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaRoster"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["0", "1"]
            	fitTable = [
            		"1.0", "0.0",
            		"0.0", "1.0"
            	] 
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}			
            }

            //===========================================================================
            //   gameAttributeRules - MATCH RELAX BEGIN
            //===========================================================================
            
			// OSDK Predefined Rule - Club League ID (season) Rule
            // !!!*** NOTE: ***!!! IMPORTANT: When you update the fit table here, make sure to update the 
            // corresponding items in osdk_clubs_custom.cfg
            OSDK_clubLeagueId = {
                weight = #LOW_WEIGHT#
                attributeName = "OSDK_clubLeagueId"
                votingMethod = "OWNER_WINS"
                
                possibleValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]
                sparseFitTable = {
                diagonalValue = 1.0
                offDiagonalValue = 0.0
                randomValue = 0
                sparseValues = [["1", "2", 0.8],
                                ["1", "3", 0.8],
                                ["2", "1", 0.8],
                                ["2", "4", 0.8],
                                ["3", "1", 0.8],
                                ["4", "2", 0.8],
                                ["5", "5", 1.0],
                                ["6", "6", 0.0]]
                }
            
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "5:0.0"]
                    OSDK_matchBrowse = ["0:0.0"]
                }
            }
            
            // OSDK Predefined Rule - Club Playgroup Size Rule
            OSDK_clubPlaygroupSize = {
                weight = #LOW_WEIGHT#
                attributeName = "OSDK_clubPlaygroupSize"
                votingMethod = "OWNER_WINS"
                
                possibleValues = ["11", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]
                fitTable = [
                    1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.1,
                    0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1,
                    0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2,
                    0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3,
                    0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4,
                    0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5,
                    0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6,
                    0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7,
                    0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8,
                    0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9,
                    0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0
                ]
                
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                    OSDK_matchRelax = ["0:1.0", "3:0.9", "5:0.8", "11:0.7", "14:0.6", "17:0.5", "20:0.0"]
                }          
            }

            // 38 x 38 matrix. brute force ftw.
            fifaTeamOVR = {
            	weight = #MEDIUM_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaTeamOVR"
            	possibleValues = [
            		"53", "54", "55", "56", "57", "58", "59", "60",
            		"61", "62", "63", "64", "65", "66", "67", "68", "69", "70", 
            		"71", "72", "73", "74", "75", "76", "77", "78", "79", "80", 
            		"81", "82", "83", "84", "85", "86", "87", "88", "89", "90"
            	]
            
            	fitTable = [
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.7", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.7", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.7", "0.7", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.7", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.7", "0.7", "0.7", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.7", "0.7", "0.7", "0.7", "0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.5", "0.5", "0.7", "0.7", "0.7", "0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.5", "0.5", "0.5", "0.5", "0.7", "0.7", "0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.7", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.7", "0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.7", "0.8", "0.8", "0.8", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.5", "0.7", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.5", "0.7", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.7", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.5", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.5", "0.5", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5", "0.5", "0.5", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.5", "0.5", "0.5",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8", "0.5",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8", "0.8",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.8",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.5", "0.5", "0.8", "0.8", "1.0", "1.0", "1.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = [0:EXACT_MATCH_REQUIRED, 20:1.0]
            		OSDK_matchAny = [0:0.0]
            		OSDK_matchRelax = [0:1.0, 10:0.9, 15:0.8, 20:0.7, 25:0.6, 30:0.5]
            	}
            }

            // 38 x 38 matrix. brute force ftw.
            fifaTeamOVRLowPop = {
            	weight = #MEDIUM_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaTeamOVR"
            	possibleValues = [
            		"53", "54", "55", "56", "57", "58", "59", "60",
            		"61", "62", "63", "64", "65", "66", "67", "68", "69", "70", 
            		"71", "72", "73", "74", "75", "76", "77", "78", "79", "80", 
            		"81", "82", "83", "84", "85", "86", "87", "88", "89", "90"
            	]
            
            	fitTable = [
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7", "0.6",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8", "0.7",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9", "0.8",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "0.9",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = [0:EXACT_MATCH_REQUIRED, 20:1.0]
            		OSDK_matchAny = [0:0.0]
            		OSDK_matchRelax = [0:1.0, 10:0.8, 20:0.6, 30:0.4, 40:0.2, 50:0.0]
            	}
            }
			
            ssfTeamOVR = {
            	weight = #MEDIUM_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "ssfTeamOVR"
            	possibleValues = ["65",  "66",  "67",  "68",  "69",  "70",  "71",  "72",  "73",  "74",  "75",  "76",  "77",  "78",  "79",  "80",  "81",  "82",  "83",  "84",  "85",  "86",  "87",  "88",  "89",  "90"]         
            	fitTable = [
				                  "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0", "0.0",
				                  "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0", "0.0",
				                  "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0", "0.0",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0", "0.0",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "0.0",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7",
			                      "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9",
				                  "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"
            	]            
            	minFitThresholdLists = {
					matchLimited		= ["0:1.0",  "2:0.9",  "4:0.8",  "6:0.7",  "8:0.6", "10:0.5"			]
					matchRestrictive	= ["0:1.0",  "5:0.9", "10:0.8"											]
					OSDK_matchRelax		= ["0:1.0"																]
            		OSDK_matchRelaxAll	= ["0:1.0", "10:0.9", "15:0.8", "20:0.7", "25:0.6", "30:0.5", "60:0.0"	]
            	}
            }

            ssfDivision = {
            	weight = #HIGH_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "ssfDivision"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["1",   "2",   "3",   "4",   "5",   "6",   "7",   "8",   "9",   "10"]
            	fitTable = [
				                  "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1",
				                  "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2",
				                  "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3",
				                  "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4",
				                  "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5",
				                  "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6",
				                  "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7",
				                  "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8",
				                  "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9",
				                  "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0",
            	]         
            	minFitThresholdLists = {
					matchLimited		= ["0:1.0", "5:0.9", "10:0.8", "15:0.7", "20:0.6"	]
					matchRestrictive	= ["0:1.0"											]
            		OSDK_matchAny		= ["0:0.0"											]
            	}			
            }
            
            fifaDivision = {
            	weight = #HIGH_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaDivision"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
            	fitTable = [
            		"1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1",
            		"0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2",
            		"0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3",
            		"0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4",
            		"0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6", "0.5",
            		"0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7", "0.6",
            		"0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8", "0.7",
            		"0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9", "0.8",
            		"0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0", "0.9",
            		"0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"
            	]         
            	minFitThresholdLists = {
            		OSDK_matchRelax = ["0:1.0", "10:0.9", "30:0.8"]
            		LowPopulationRelax = ["0:1.0", "10:0.9", "20:0.8", "30:0.7", "40:0.6", "50:0.5"]
            	}			
            }
            
            fifaCoopDivision = {
            	weight = #HIGH_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaCoopDivision"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["1", "2", "3", "4", "5"]
            	fitTable = [
            		"1.0", "0.9", "0.8", "0.0", "0.0",
            		"0.9", "1.0", "0.9", "0.8", "0.0",
            		"0.8", "0.9", "1.0", "0.9", "0.8",
            		"0.0", "0.8", "0.9", "1.0", "0.9",
            		"0.0", "0.0", "0.8", "0.9", "1.0"
            	]         
            	minFitThresholdLists = {
            		OSDK_matchRelax = ["0:1.0", "10:0.9", "35:0.8"]
            	}			
            }
            
            fifaCup = {
            	weight = #HIGH_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaCup"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["1", "2", "3", "4", "5", "6"]
            	fitTable = [
            		"1.0", "0.9", "0.8", "0.7", "0.0", "0.0",
            		"0.9", "1.0", "0.9", "0.8", "0.0", "0.0",
            		"0.8", "0.9", "1.0", "0.9", "0.0", "0.0",
            		"0.7", "0.8", "0.9", "1.0", "0.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "1.0", "0.0",
            		"0.0", "0.0", "0.0", "0.0", "0.0", "1.0"
            	]         
            	minFitThresholdLists = {
            		OSDK_matchRelax = ["0:1.0", "14:0.9", "22:0.8", "35:0.7"]
            	}			
            }

            fifaClubCup = {
            	weight = #MATCH_EXACT_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaClubCup"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42"]
				
            	sparseFitTable = {
                    diagonalValue = 1.0
                    offDiagonalValue = 0.0
                    randomValue = 0
                    sparseValues = []
                }            
 
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
            	}			
            }
            
            // New User Rule
            // users with less than 5 games played will match up
            fifaNewUserRule = {
            	weight = #MEDIUM_WEIGHT#
            	ruleType = "ARBITRARY_TYPE"
            	attributeName = "fifaNewUserRule"
            	votingMethod = "OWNER_WINS"
            
            	matchingFitPercent = 1.0
            	mismatchFitPercent = 0.0
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchRelax = ["0:1.0", "20:0.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}
            }
            
            // fifaCustomController Rule
            // Possible values for Custom Controller Rule: 
            //      "-1" = no restriction, "0" = Manual
            //  fitTable = {
            //	  "1.0", "0.0", "0.0",
            //	  "0.0", "1.0", "0.0",
            //	  "0.0", "0.0", "1.0"
            //	}	
            //  Relaxtion goes: 0-10 sec 100% match, 10+ sec 50% match
            fifaCustomController = {
            	weight = #LOW_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaCustomController"
            	votingMethod = "OWNER_WINS"
            	defaultAbstainValue = "0" 
            	possibleValues = ["0", "1", "2", "3"]
            
            	fitTable = [
            	  "1.0", "0.0", "0.0", "0.0",
            	  "0.0", "1.0", "0.0", "0.0",
            	  "0.0", "0.0", "1.0", "0.0",
            	  "0.0", "0.0", "0.0", "1.0"
            	]
            
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:1.0"]
            	}			
            }
            
            // fifaGKControl Rule
            // Possible values for OTP game GK control: 
            // "-1" = Any, "0" = AI, "1" = Human
            fifaGKControl = {
            	weight = #LOW_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaGKControl"
            	votingMethod = "OWNER_WINS"
            	possibleValues = ["abstain", "0", "1", "-1"]
            	defaultAbstainValue = "1" 
            	fitTable = [
            		"1.0", "0.0", "0.0", "0.0"  
            		"1.0", "1.0", "0.0", "0.0"
            		"1.0", "0.0", "1.0", "0.0"
            		"0.0", "0.0", "0.0", "1.0"
            	]
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            	}			
            }
            
            // fifaClubNumPlayers Rule
            // Possible values: 1,2,3,4,5,6,7,8,9,10,11
            
            fifaClubNumPlayers = {
            	weight = #LOW_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaClubNumPlayers"
            	votingMethod = "OWNER_WINS"
            	// Club match has a min of 2 players, 1 is added as possible values mainly for SEs to do 1v1 club game			
            	possibleValues = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11"]			
            	fitTable = [
            	//	1	2	3	4	5	6	7	8	9	10	11	
            		"1.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	"0.0",	//  1
            		"0.0",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	"0.5",	"0.4",	"0.0",	"0.0",	"0.0",	//  2
            		"0.0",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	"0.5",	"0.4",	"0.0",	"0.0",	//  3
            		"0.0",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	"0.5",	"0.4",	"0.0",	//  4
            		"0.0",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	"0.5",	"0.4",	//  5
            		"0.0",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	"0.5",	//  6
            		"0.0",	"0.5",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	"0.6",	//  7
            		"0.0",	"0.4",	"0.5",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	"0.7",	//  8
            		"0.0",	"0.0",	"0.4",	"0.5",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	"0.8",	//  9
            		"0.0",	"0.0",	"0.0",	"0.4",	"0.5",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0",	"0.9",	// 10
            		"0.0",	"0.0",	"0.0",	"0.0",	"0.4",	"0.5",	"0.6",	"0.7",	"0.8",	"0.9",	"1.0"	// 11
            	]
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:1.0", "5:0.8", "10:0.7", "15:0.6", "20:0.5", "25:0.4", "30:0.0"]
            		OSDK_matchRelax = ["0:1.0", "5:0.9", "10:0.8", "15:0.7"]
            		OSDK_matchBrowse = ["0:0.1"]
            	}			
            }
            
            // fifaClubLeague Rule
            // Possible values:  0x10..0x1B, 0x20..0x2B, .., 0xB0..0xBB where
            // 	HIGH	byte is LOCAL	league ID		
            //	LOW	byte is OPP	league ID or 0 (any)
            fifaClubLeague = {
            	weight = #LOW_WEIGHT#
            	ruleType = "EXPLICIT_TYPE"
            	attributeName = "fifaClubLeague"
            	votingMethod = "OWNER_WINS"
            	possibleValues = [
            		 "16",  "17",  "18",  "19",  "20",  "21",  "22",  "23",  "24",  "25",  "26",  "27",
            		 "32",  "33",  "34",  "35",  "36",  "37",  "38",  "39",  "40",  "41",  "42",  "43",
            		 "48",  "49",  "50",  "51",  "52",  "53",  "54",  "55",  "56",  "57",  "58",  "59",
            		 "64",  "65",  "66",  "67",  "68",  "69",  "70",  "71",  "72",  "73",  "74",  "75",
            		 "80",  "81",  "82",  "83",  "84",  "85",  "86",  "87",  "88",  "89",  "90",  "91",
            		 "96",  "97",  "98",  "99", "100", "101", "102", "103", "104", "105", "106", "107",
            		"112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123",
            		"128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139",
            		"144", "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155",
            		"160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171",
            		"176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187"
            	]
            	sparseFitTable = {  
            		diagonalValue = 0.0 
            		offDiagonalValue = 0.0 
            		randomValue = 0.0
            		sparseValues = [
            			[ "16",  "16", 1.0], [ "16",  "17", 0.1],
            			[ "16",  "32", 0.1], [ "16",  "33", 0.1],
            			[ "16",  "48", 0.1], [ "16",  "49", 0.1],  
            			[ "16",  "64", 0.1], [ "16",  "65", 0.1],  
            			[ "16",  "80", 0.1], [ "16",  "81", 0.1],  				
            			[ "16",  "96", 0.1], [ "16",  "97", 0.1],  				
            			[ "16", "112", 0.1], [ "16", "113", 0.1],  				
            			[ "16", "128", 0.1], [ "16", "129", 0.1],  				
            			[ "16", "144", 0.1], [ "16", "145", 0.1],  				
            			[ "16", "160", 0.1], [ "16", "161", 0.1],  				
            			[ "16", "176", 0.1], [ "16", "177", 0.1],  				
            			[ "17",  "16", 0.1], [ "17",  "17", 1.0], 
            			[ "18",  "32", 0.1], [ "18",  "33", 1.0],  
            			[ "19",  "48", 0.1], [ "19",  "49", 1.0],  
            			[ "20",  "64", 0.1], [ "20",  "65", 1.0],  
            			[ "21",  "80", 0.1], [ "21",  "81", 1.0],  				
            			[ "22",  "96", 0.1], [ "22",  "97", 1.0],  				
            			[ "23", "112", 0.1], [ "23", "113", 1.0],  				
            			[ "24", "128", 0.1], [ "24", "129", 1.0],  				
            			[ "25", "144", 0.1], [ "25", "145", 1.0],  				
            			[ "26", "160", 0.1], [ "26", "161", 1.0],  				
            			[ "27", "176", 0.1], [ "27", "177", 1.0],
            			[ "32",  "16", 0.1], [ "32",  "18", 0.1],
            			[ "32",  "32", 1.0], [ "32",  "34", 0.1],
            			[ "32",  "48", 0.1], [ "32",  "50", 0.1],  
            			[ "32",  "64", 0.1], [ "32",  "66", 0.1],  
            			[ "32",  "80", 0.1], [ "32",  "82", 0.1],  				
            			[ "32",  "96", 0.1], [ "32",  "98", 0.1],  				
            			[ "32", "112", 0.1], [ "32", "114", 0.1],  				
            			[ "32", "128", 0.1], [ "32", "130", 0.1],  				
            			[ "32", "144", 0.1], [ "32", "146", 0.1],  				
            			[ "32", "160", 0.1], [ "32", "162", 0.1],  				
            			[ "32", "176", 0.1], [ "32", "178", 0.1],  				
            			[ "33",  "16", 0.1], [ "33",  "18", 1.0], 
            			[ "34",  "32", 0.1], [ "34",  "34", 1.0],  
            			[ "35",  "48", 0.1], [ "35",  "50", 1.0],  
            			[ "36",  "64", 0.1], [ "36",  "66", 1.0],  
            			[ "37",  "80", 0.1], [ "37",  "82", 1.0],  				
            			[ "38",  "96", 0.1], [ "38",  "98", 1.0],  				
            			[ "39", "112", 0.1], [ "39", "114", 1.0],  				
            			[ "40", "128", 0.1], [ "40", "130", 1.0],  				
            			[ "41", "144", 0.1], [ "41", "146", 1.0],  				
            			[ "42", "160", 0.1], [ "42", "162", 1.0],  				
            			[ "43", "176", 0.1], [ "43", "178", 1.0],
            			[ "48",  "16", 0.1], [ "48",  "19", 0.1],
            			[ "48",  "32", 0.1], [ "48",  "35", 0.1],
            			[ "48",  "48", 1.0], [ "48",  "51", 0.1],  
            			[ "48",  "64", 0.1], [ "48",  "67", 0.1],  
            			[ "48",  "80", 0.1], [ "48",  "83", 0.1],  				
            			[ "48",  "96", 0.1], [ "48",  "99", 0.1],  				
            			[ "48", "112", 0.1], [ "48", "115", 0.1],  				
            			[ "48", "128", 0.1], [ "48", "131", 0.1],  				
            			[ "48", "144", 0.1], [ "48", "147", 0.1],  				
            			[ "48", "160", 0.1], [ "48", "163", 0.1],  				
            			[ "48", "176", 0.1], [ "48", "179", 0.1],  				
            			[ "49",  "16", 0.1], [ "49",  "19", 1.0], 
            			[ "50",  "32", 0.1], [ "50",  "35", 1.0],  
            			[ "51",  "48", 0.1], [ "51",  "51", 1.0],  
            			[ "52",  "64", 0.1], [ "52",  "67", 1.0],  
            			[ "53",  "80", 0.1], [ "53",  "83", 1.0],  				
            			[ "54",  "96", 0.1], [ "54",  "99", 1.0],  				
            			[ "55", "112", 0.1], [ "55", "115", 1.0],  				
            			[ "56", "128", 0.1], [ "56", "131", 1.0],  				
            			[ "57", "144", 0.1], [ "57", "147", 1.0],  				
            			[ "58", "160", 0.1], [ "58", "163", 1.0],  				
            			[ "59", "176", 0.1], [ "59", "179", 1.0],
            			[ "64",  "16", 0.1], [ "64",  "20", 0.1],
            			[ "64",  "32", 0.1], [ "64",  "36", 0.1],
            			[ "64",  "48", 0.1], [ "64",  "52", 0.1],  
            			[ "64",  "64", 1.0], [ "64",  "68", 0.1],  
            			[ "64",  "80", 0.1], [ "64",  "84", 0.1],  				
            			[ "64",  "96", 0.1], [ "64", "100", 0.1],  				
            			[ "64", "112", 0.1], [ "64", "116", 0.1],  				
            			[ "64", "128", 0.1], [ "64", "132", 0.1],  				
            			[ "64", "144", 0.1], [ "64", "148", 0.1],  				
            			[ "64", "160", 0.1], [ "64", "164", 0.1],  				
            			[ "64", "176", 0.1], [ "64", "180", 0.1],  				
            			[ "65",  "16", 0.1], [ "65",  "20", 1.0], 
            			[ "66",  "32", 0.1], [ "66",  "36", 1.0],  
            			[ "67",  "48", 0.1], [ "67",  "52", 1.0],  
            			[ "68",  "64", 0.1], [ "68",  "68", 1.0],  
            			[ "69",  "80", 0.1], [ "69",  "84", 1.0],  				
            			[ "70",  "96", 0.1], [ "70", "100", 1.0],  				
            			[ "71", "112", 0.1], [ "71", "116", 1.0],  				
            			[ "72", "128", 0.1], [ "72", "132", 1.0],  				
            			[ "73", "144", 0.1], [ "73", "148", 1.0],  				
            			[ "74", "160", 0.1], [ "74", "164", 1.0],  				
            			[ "75", "176", 0.1], [ "75", "180", 1.0],
            			[ "80",  "16", 0.1], [ "80",  "21", 0.1],
            			[ "80",  "32", 0.1], [ "80",  "37", 0.1],
            			[ "80",  "48", 0.1], [ "80",  "53", 0.1],  
            			[ "80",  "64", 0.1], [ "80",  "69", 0.1],  
            			[ "80",  "80", 1.0], [ "80",  "85", 0.1],  				
            			[ "80",  "96", 0.1], [ "80", "101", 0.1],  				
            			[ "80", "112", 0.1], [ "80", "117", 0.1],  				
            			[ "80", "128", 0.1], [ "80", "133", 0.1],  				
            			[ "80", "144", 0.1], [ "80", "149", 0.1],  				
            			[ "80", "160", 0.1], [ "80", "165", 0.1],  				
            			[ "80", "176", 0.1], [ "80", "181", 0.1],  				
            			[ "81",  "16", 0.1], [ "81",  "21", 1.0], 
            			[ "82",  "32", 0.1], [ "82",  "37", 1.0],  
            			[ "83",  "48", 0.1], [ "83",  "53", 1.0],  
            			[ "84",  "64", 0.1], [ "84",  "69", 1.0],  
            			[ "85",  "80", 0.1], [ "85",  "85", 1.0],  				
            			[ "86",  "96", 0.1], [ "86", "101", 1.0],  				
            			[ "87", "112", 0.1], [ "87", "117", 1.0],  				
            			[ "88", "128", 0.1], [ "88", "133", 1.0],  				
            			[ "89", "144", 0.1], [ "89", "149", 1.0],  				
            			[ "90", "160", 0.1], [ "90", "165", 1.0],  				
            			[ "91", "176", 0.1], [ "91", "181", 1.0],
            			[ "96",  "16", 0.1], [ "96",  "22", 0.1],
            			[ "96",  "32", 0.1], [ "96",  "38", 0.1],
            			[ "96",  "48", 0.1], [ "96",  "54", 0.1],  
            			[ "96",  "64", 0.1], [ "96",  "70", 0.1],  
            			[ "96",  "80", 0.1], [ "96",  "86", 0.1],  				
            			[ "96",  "96", 1.0], [ "96", "102", 0.1],  				
            			[ "96", "112", 0.1], [ "96", "118", 0.1],  				
            			[ "96", "128", 0.1], [ "96", "134", 0.1],  				
            			[ "96", "144", 0.1], [ "96", "150", 0.1],  				
            			[ "96", "160", 0.1], [ "96", "166", 0.1],  				
            			[ "96", "176", 0.1], [ "96", "182", 0.1],  				
            			[ "97",  "16", 0.1], [ "97",  "22", 1.0], 
            			[ "98",  "32", 0.1], [ "98",  "38", 1.0],  
            			[ "99",  "48", 0.1], [ "99",  "54", 1.0],  
            			["100",  "64", 0.1], ["100",  "70", 1.0],  
            			["101",  "80", 0.1], ["101",  "86", 1.0],  				
            			["102",  "96", 0.1], ["102", "102", 1.0],  				
            			["103", "112", 0.1], ["103", "118", 1.0],  				
            			["104", "128", 0.1], ["104", "134", 1.0],  				
            			["105", "144", 0.1], ["105", "150", 1.0],  				
            			["106", "160", 0.1], ["106", "166", 1.0],  				
            			["107", "176", 0.1], ["107", "182", 1.0],
            			["112",  "16", 0.1], ["112",  "23", 0.1],
            			["112",  "32", 0.1], ["112",  "39", 0.1],
            			["112",  "48", 0.1], ["112",  "55", 0.1],  
            			["112",  "64", 0.1], ["112",  "71", 0.1],  
            			["112",  "80", 0.1], ["112",  "87", 0.1],  				
            			["112",  "96", 0.1], ["112", "103", 0.1],  				
            			["112", "112", 1.0], ["112", "119", 0.1],  				
            			["112", "128", 0.1], ["112", "135", 0.1],  				
            			["112", "144", 0.1], ["112", "151", 0.1],  				
            			["112", "160", 0.1], ["112", "167", 0.1],  				
            			["112", "176", 0.1], ["112", "183", 0.1],  				
            			["113",  "16", 0.1], ["113",  "23", 1.0], 
            			["114",  "32", 0.1], ["114",  "39", 1.0],  
            			["115",  "48", 0.1], ["115",  "55", 1.0],  
            			["116",  "64", 0.1], ["116",  "71", 1.0],  
            			["117",  "80", 0.1], ["117",  "87", 1.0],  				
            			["118",  "96", 0.1], ["118", "103", 1.0],  				
            			["119", "112", 0.1], ["119", "119", 1.0],  				
            			["120", "128", 0.1], ["120", "135", 1.0],  				
            			["121", "144", 0.1], ["121", "151", 1.0],  				
            			["122", "160", 0.1], ["122", "167", 1.0],  				
            			["123", "176", 0.1], ["123", "183", 1.0],
            			["128",  "16", 0.1], ["128",  "24", 0.1],
            			["128",  "32", 0.1], ["128",  "40", 0.1],
            			["128",  "48", 0.1], ["128",  "56", 0.1],  
            			["128",  "64", 0.1], ["128",  "72", 0.1],  
            			["128",  "80", 0.1], ["128",  "88", 0.1],  				
            			["128",  "96", 0.1], ["128", "104", 0.1],  				
            			["128", "112", 0.1], ["128", "120", 0.1],  				
            			["128", "128", 1.0], ["128", "136", 0.1],  				
            			["128", "144", 0.1], ["128", "152", 0.1],  				
            			["128", "160", 0.1], ["128", "168", 0.1],  				
            			["128", "176", 0.1], ["128", "184", 0.1],  				
            			["129",  "16", 0.1], ["129",  "24", 1.0], 
            			["130",  "32", 0.1], ["130",  "40", 1.0],  
            			["131",  "48", 0.1], ["131",  "56", 1.0],  
            			["132",  "64", 0.1], ["132",  "72", 1.0],  
            			["133",  "80", 0.1], ["133",  "88", 1.0],  				
            			["134",  "96", 0.1], ["134", "104", 1.0],  				
            			["135", "112", 0.1], ["135", "120", 1.0],  				
            			["136", "128", 0.1], ["136", "136", 1.0],  				
            			["137", "144", 0.1], ["137", "152", 1.0],  				
            			["138", "160", 0.1], ["138", "168", 1.0],  				
            			["139", "176", 0.1], ["139", "184", 1.0],
            			["144",  "16", 0.1], ["144",  "25", 0.1],
            			["144",  "32", 0.1], ["144",  "41", 0.1],
            			["144",  "48", 0.1], ["144",  "57", 0.1],  
            			["144",  "64", 0.1], ["144",  "73", 0.1],  
            			["144",  "80", 0.1], ["144",  "89", 0.1],  				
            			["144",  "96", 0.1], ["144", "105", 0.1],  				
            			["144", "112", 0.1], ["144", "121", 0.1],  				
            			["144", "128", 0.1], ["144", "137", 0.1],  				
            			["144", "144", 1.0], ["144", "153", 0.1],  				
            			["144", "160", 0.1], ["144", "169", 0.1],  				
            			["144", "176", 0.1], ["144", "185", 0.1],  				
            			["145",  "16", 0.1], ["145",  "25", 1.0], 
            			["146",  "32", 0.1], ["146",  "41", 1.0],  
            			["147",  "48", 0.1], ["147",  "57", 1.0],  
            			["148",  "64", 0.1], ["148",  "73", 1.0],  
            			["149",  "80", 0.1], ["149",  "89", 1.0],  				
            			["150",  "96", 0.1], ["150", "105", 1.0],  				
            			["151", "112", 0.1], ["151", "121", 1.0],  				
            			["152", "128", 0.1], ["152", "137", 1.0],  				
            			["153", "144", 0.1], ["153", "153", 1.0],  				
            			["154", "160", 0.1], ["154", "169", 1.0],  				
            			["155", "176", 0.1], ["155", "185", 1.0],
            			["160",  "16", 0.1], ["160",  "26", 0.1],
            			["160",  "32", 0.1], ["160",  "42", 0.1],
            			["160",  "48", 0.1], ["160",  "58", 0.1],  
            			["160",  "64", 0.1], ["160",  "74", 0.1],  
            			["160",  "80", 0.1], ["160",  "90", 0.1],  				
            			["160",  "96", 0.1], ["160", "106", 0.1],  				
            			["160", "112", 0.1], ["160", "122", 0.1],  				
            			["160", "128", 0.1], ["160", "138", 0.1],  				
            			["160", "144", 0.1], ["160", "154", 0.1],  				
            			["160", "160", 1.0], ["160", "170", 0.1],  				
            			["160", "176", 0.1], ["160", "186", 0.1],  				
            			["161",  "16", 0.1], ["161",  "26", 1.0], 
            			["162",  "32", 0.1], ["162",  "42", 1.0],  
            			["163",  "48", 0.1], ["163",  "58", 1.0],  
            			["164",  "64", 0.1], ["164",  "74", 1.0],  
            			["165",  "80", 0.1], ["165",  "90", 1.0],  				
            			["166",  "96", 0.1], ["166", "106", 1.0],  				
            			["167", "112", 0.1], ["167", "122", 1.0],  				
            			["168", "128", 0.1], ["168", "138", 1.0],  				
            			["169", "144", 0.1], ["169", "154", 1.0],  				
            			["170", "160", 0.1], ["170", "170", 1.0],  				
            			["171", "176", 0.1], ["171", "186", 1.0],
            			["176",  "16", 0.1], ["176",  "27", 0.1],
            			["176",  "32", 0.1], ["176",  "43", 0.1],
            			["176",  "48", 0.1], ["176",  "59", 0.1],  
            			["176",  "64", 0.1], ["176",  "75", 0.1],  
            			["176",  "80", 0.1], ["176",  "91", 0.1],  				
            			["176",  "96", 0.1], ["176", "107", 0.1],  				
            			["176", "112", 0.1], ["176", "123", 0.1],  				
            			["176", "128", 0.1], ["176", "139", 0.1],  				
            			["176", "144", 0.1], ["176", "155", 0.1],  				
            			["176", "160", 0.1], ["176", "171", 0.1],  				
            			["176", "176", 1.0], ["176", "187", 0.1],  				
            			["177",  "16", 0.1], ["177",  "27", 1.0], 
            			["178",  "32", 0.1], ["178",  "43", 1.0],  
            			["179",  "48", 0.1], ["179",  "59", 1.0],  
            			["180",  "64", 0.1], ["180",  "75", 1.0],  
            			["181",  "80", 0.1], ["181",  "91", 1.0],  				
            			["182",  "96", 0.1], ["182", "107", 1.0],  				
            			["183", "112", 0.1], ["183", "123", 1.0],  				
            			["184", "128", 0.1], ["184", "139", 1.0],  				
            			["185", "144", 0.1], ["185", "155", 1.0],  				
            			["186", "160", 0.1], ["186", "171", 1.0],  				
            			["187", "176", 0.1], ["187", "187", 1.0]
            		]
            	}  
            	minFitThresholdLists = {
            		OSDK_matchExact = ["0:1.0"]
            		OSDK_matchAny = ["0:0.0"]
            		OSDK_matchRelax = ["0:1.0", "5:0.1"]
            		OSDK_matchBrowse = ["0:0.1"]
            	}			
            }		
            
            //===========================================================================
            //   gameAttributeRules - MATCH RELAX END
            //===========================================================================
            
			//
			// FUT specific game attribute rules.
			//
			#include "component/gamemanager/futmatchmakingrules.cfg"

			//
			// Moving EURO specific matchmaking rules into a separate file
			// Commented out (deprecated?)
			//
			//#include "component/gamemanager/euromatchmakingrules.cfg"
        }

        playerAttributeRules = {
            // Player Attributes are different from game attributes, because each player in the joining group is checked against each player in 
            // the game/other groups to find the fit score.  When there are multiple users being checked at once, this rule will find mulitple 
            // fit values, and find a value depending on what the groupValueFormula is set to. 
            //   GROUP_VALUE_FORMULA_MAX - (Default) Uses the highest fit value found when checking all users
            //   GROUP_VALUE_FORMULA_AVERAGE - Averages all fit values found together. 
            //   GROUP_VALUE_FORMULA_MIN - Uses the lowest fit value found when checking all users
            //  (Other GROUP_VALUE_FORMULA_* settings are unsupported)
            // 
            // NOTE: Players do not check fit score against other players in their current matchmaking session (i.e. game group or MLU members). 
            // defaultAbstainValue and votingMethod are not used by Player Attributes, and will be ignored if included.  


            // This example rule prefers to match your group into a game where none of your classes are in use:
            //playerClassRule = {
            //    attributeName = "playerClass"
            //    groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"   
            //    possibleValues =     [    "Fighter", "Mage", "Thief" ]
            //    fitTable =           [    0.2, 1.0, 1.0,
            //                              1.0, 0.2, 1.0,
            //                              1.0, 1.0, 0.2 ]
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        quickMatch = [ "0:1.0", "5:.8", "10:.5", "15:.2" ]
            //    }
            //}

            //playerAttribRule = {
            //    attributeName = "playerAttrib1"
            //    possibleValues =     [    "Large", "Medium", "Small", "random", "abstain" ]
            //    fitTable =           [    1.0, 0.8, 0.2, 1.0, 1.0,
            //                              0.8, 1.0, 0.5, 1.0, 1.0,
            //                              0.2, 0.5, 1.0, 1.0, 1.0, 
            //                              1.0, 1.0, 1.0, 1.0, 1.0,
            //                              1.0, 1.0, 1.0, 1.0, 1.0 ]
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
            //        quickMatch = [ "0:1.0", "5:.8", "10:.5", "15:.2" ]
            //        requireDecay = [ "0:EXACT_MATCH_REQUIRED", "5:.8", "10:.5" ]
            //    }
            //}

            //multiMatchRule = {
            //    attributeName = "playerAttrib1"
            //    possibleValues =     [    "Large", "Medium", "Small", "random", "abstain" ]
            //    fitTable =           [    1.0, 0.9, 0.2, 1.0, 1.0,
            //                              0.8, 1.0, 0.5, 1.0, 1.0,
            //                              0.2, 0.5, 1.0, 1.0, 1.0, 
            //                              1.0, 1.0, 1.0, 1.0, 1.0,
            //                              1.0, 1.0, 1.0, 1.0, 1.0 ]
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
            //        quickMatch = [ "0:1.0", "5:.8", "10:.5", "15:.2" ]
            //    }
            //}
			//
            //sparseMatrixRule = {
            //    attributeName = "playerAttrib1"
            //    possibleValues =     [    "Large", "Medium", "Small", "Blue", "Green", "Orange", "random", "abstain" ]
			//
			// equivalent of....
			//            fitTable =    [    0.0, 0.9, 0.2, 1.0, 1.0, 0.2, 0.9, 1.0,
			//                            0.8, 0.1, 0.5, 1.0, 1.0, 0.2, 0.9, 1.0,
			//                            0.2, 0.5, 0.0, 1.0, 1.0, 0.2, 0.9, 1.0,
			//                            1.0, 1.0, 1.0, 0.0, 1.0, 0.2, 0.9, 1.0,
			//                            1.0, 1.0, 1.0, 1.0, 0.0, 0.2, 0.3, 1.0,
			//                            1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.9, 1.0,
			//                            0.9, 0.9, 0.9, 0.9, 0.9, 0.2, 0.9, 1.0,
			//                            1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 1.0, 1.0 ]
			// note how ["Orange", "Orange", 0.0] must be given after filling the column to put the diagonal
			//  back to the 0.0 specified value
			//
			//
			//     sparseFitTable = {
			//         diagonalValue = 0.0
            //        offDiagonalValue = 1.0
            //        randomValue = 0.9
            //        sparseValues = [["Large", "Medium", 0.8],
            //                        ["Large", "Small", 0.2],
            //                        ["Medium", "Large", 0.9],
            //                        ["Medium", "Medium", 0.1],
            //                        ["Medium", "Small", 0.5],
            //                        ["Small", "Large", 0.2],
            //                        ["Small", "Medium", 0.5],
            //                        ["sparseFitTableFillColumn", "Orange", 0.2],
            //                        ["Orange", "Orange", 0.0],
            //                        ["random", "Green", 0.3],
            //                        ["sparseFitTableFillRow", "Blue", 0.3]]
            //    }
			//
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
            //        quickMatch = [ "0:1.0", "5:.8", "10:.5", "15:.2" ]
            //    }
            //}
            
            //
            // ARBITRARY_TYPE ruleTypes do not have specify acceptable values in the config, but only support matching or mismatching checks. (No FitTable)
            // 
            //playerArbitraryMatchRule = {
            //    ruleType = "ARBITRARY_TYPE"
            //    attributeName = "playerAttrib1"
			//
            //    matchingFitPercent = 1.0
            //    mismatchFitPercent = 0.2
			//
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
            //        quickMatch = [ "0:1.0", "10:.2"]
            //    }
            //} // playerArbitraryMatchRule

            // rules for stress testing
            //playerStressArbitraryMatchRule = {
            //    ruleType = "ARBITRARY_TYPE"
            //    attributeName = "playerStressAttrib1"
            //
            //    matchingFitPercent = 1.0
            //    mismatchFitPercent = 0
			//
            //    weight = 500
			//
            //    minFitThresholdLists = {
            //        requireExactMatch = [ "0:EXACT_MATCH_REQUIRED" ]
            //        quickMatch = [ "0:1.0", "5:.8", "10:.5", "15:.2" ]
            //    }
            //} // playerArbitraryMatchRule


        //===========================================================================
        //   playerAttributeRules - MATCH EXACT BEGIN
        //===========================================================================

			// OSDK Predefined Rule - Club ID inverse Rule
            // This rule prevents the same clubs from matching up. It works opposite ("not equal") by reversing
            // the matching and mismatch fit percentage.
            OSDK_clubIdInverse = {
                weight = #MATCH_EXACT_WEIGHT# 
				ruleType = "ARBITRARY_TYPE"           
                attributeName = "OSDK_clubIdInverse"

                matchingFitPercent = 0
                mismatchFitPercent = 1.0

                minFitThresholdLists = {
                    OSDK_matchExact = ["0:1.0"]
                    OSDK_matchAny = ["0:0.0"]
                }       
            }

        //===========================================================================
        //   playerAttributeRules - MATCH EXACT END
        //===========================================================================

        //===========================================================================
        //   playerAttributeRules - NOT SPECIFIED BY FIFA BEGIN
        //===========================================================================

			// OSDK Predefined Rule - Player MyTeam Rule
            // This rule has to be player attribute type
            OSDK_playerMyTeam = {
                weight = 100
                ruleType = "ARBITRARY_TYPE"
                attributeName = "OSDK_playerOppTeam"
                matchingFitPercent = 1.0 
                mismatchFitPercent = 0.0
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:EXACT_MATCH_REQUIRED", "1:0.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }

			// OSDK Predefined Rule - Player OppTeam Rule
            // This rule has to be player attribute type
            OSDK_playerOppTeam = {
                weight = 100
                ruleType = "ARBITRARY_TYPE"
                attributeName = "OSDK_playerMyTeam"
                matchingFitPercent = 1.0 
                mismatchFitPercent = 0.0
                minFitThresholdLists = {
                    OSDK_matchExact = ["0:EXACT_MATCH_REQUIRED", "1:0.0"]
                    OSDK_matchAny = ["0:0.0"]
                }
            }

			// OSDK Predefined Rule - My Team ANY Boost Rule
            // Use in conjunction with OSDK_playerMyTeam where this rule will give a fitscore boost
            // when OSDK_playerMyTeam is set to ANY value.
            // OSDK_playerMyTeamAnyBoost will have a value of "1" if OSDK_playerMyTeam = ANY.
            OSDK_playerMyTeamAnyBoost = {
                weight = 100
                attributeName = "OSDK_playerOppTeamAnyBoost"
                //defaultAbstainValue = "random"
                possibleValues = ["0", "1"]
                fitTable =       [ 0.0, 0.5,
                                   0.5, 0.0 ]

                minFitThresholdLists = {
                    OSDK_matchAny = ["0:0.5", "3:0.0"]
                }
            }

			// OSDK Predefined Rule - Opponent Team ANY Boost Rule
            // Use in conjunction with OSDK_playerOppTeam where this rule will give a fitscore boost
            // when OSDK_playerOppTeam is set to ANY value.
            // OSDK_playerOppTeamAnyBoost will have a value of "1" if OSDK_playerOppTeam = ANY.
            OSDK_playerOppTeamAnyBoost = {
                weight = 100
                attributeName = "OSDK_playerMyTeamAnyBoost"
				//defaultAbstainValue = "random"
                possibleValues = ["0", "1"]
                fitTable =       [ 0.0, 0.5,
                                   0.5, 0.0 ]

                minFitThresholdLists = {
                    OSDK_matchAny = ["0:0.5", "1:0.0"]
                }
            }

        //===========================================================================
        //   playerAttributeRules - NOT SPECIFIED BY FIFA END
        //===========================================================================
     
        } // playerAttributeRules

        // user extended data rules (UED Rules)
        //
        // UED Rule is comprehensive because it takes into account
        // the existing Skill Rule Map, Dnf Rule, and the new UED Rule map
        // that handles all user extended data rules.
        // 
        // UED rules defined in this config determine how to match to entities (users or groups)
        // based on values in the user extended data.  An easy way to get data
        // in the UED is to configure stats in etc/stats.cfg in the userSessionStats list.
        //
        // UED rules disregard Spectators when evaluating game sessions.
        //
        // UED rules are named by convention as <userExtendedDataName>_Rule, and must be specified
        // on the cilent in the UEDRuleCriteria to match this config file.
        // 
        // ruleDefinitionType is the type of definition used for this rule.
        // New UED Rules that specify UED Criteria should omit this value.
        // The following legacy types are also supported:
        //
        // ruleDefinitionType=legacySkillRule
        // ruleDefinitionType=legacyDNFRule
        //
        // legacySkillRule Criteria are specified in the SkillPrefsList
        // legacyDNFRule Criteria are specified in the predefined DNFRule and only
        // one of these configurations is supported.
        //
        // userExtendedDataName is the key used to identify which data in the User Extended Data to use when evaluating
        // this rule.  Keys are in the form component_dataName (ie. stats_skillA).
        //
        // weight is the weight of this rule as compared to other rules in matchmaking
        //
        // groupValueFormula is the formula used to calculate the value of a group.
        // acceptable values are
        //
        // GROUP_VALUE_FORMULA_AVERAGE
        // GROUP_VALUE_FORMULA_MIN
        // GROUP_VALUE_FORMULA_MAX
        // GROUP_VALUE_FORMULA_LEADER
        //
        // fitFormula is the formula used to calculate the fit score between two
        // values, your session's calculated value against another session's
        // or game's calculated value.  This allows for for different values
        // to have more preference as the range expands.
         // FIT_FORMULA_GAUSSIAN
        // fitFormula = {name = FIT_FORMULA_GAUSSIAN, params = {fiftyPercentFitValueDifference = 200}}
        // 
        // Uses the gaussian formula to determine the fit.
        // 
        // params
        // fiftyPercentFitValueDifference is the difference between two values that yeilds a 
        // 0.5 fit percent.  This value controls the width of the bell curve used to calculate the
        // fit percent between 2 entities.
        // 
        // Below is a table of examples given a fiftyPercentFitValueDifference of 200.
        //
        // Fit Score : Difference
        //       1.0 : +/- 0 (exact match)
        //       .90 : +/- 77
        //       .75 : +/- 128
        //       .50 : +/- 200
        //       .25 : +/- 282
        //       .10 : +/- 364
        //       .00 : INFINITE (match anything)
        //
        //      At heart, we're evaluating: fit percent = e^( - ((x-b)^2 / (c * 1.2011225)^2 )) where
        //          (x - b) is the difference between the two entities
        //          c is the fiftyPercentFitValueDifference which determines the width of the bell curve.
        //
        // NOTE: see commonruleformulas.h GausianFunction.calculate for the implementation.
        //
        // FIT_FORMULA_LINEAR
        // fitFormula = {name = FIT_FORMULA_LINEAR, params = {minFit=0.0, maxFit=1.0, minVal=10, maxVal=10}}
        // 
        // Uses a linear function starting at the desired value to +maxVal and -minVal using
        // minFit and maxFit to determine the slope.
        //
        // Any values outside of +maxVal and -minVal have value minFit.
        //
        // minFit defaults to 0.0
        // maxFit defaults to 1.0
        // minVal defaults to the smallest minValue of all lists in the rangeOffsetList [minValue, maxValue]
        // maxVal defaults to the largest maxValue of all lists in the rangeOffsetList [minValue, maxValue]
        //
        // FIT_FORMULA_BINARY
        // fitFormula = {name = FIT_FORMULA_BINARY}
        //
        // Uses a binary comparison.  If it is in the range offset 1.0 perfect match
        // if it is not in range then then NO_MATCH.
        //
        // range is the acceptable range of values that this rule operates on.
        // Any value outside of the range is clamped to the min/max accordingly.
        // The amount of system memory consumed is directly proportional to
        // the product of the series of the range of each rule.
        // Take care to only specify the range that your value requires.  And
        // if you are using many ranged rules to limit the max value of these
        // ranged rules.
        //
        // rangeOffsetLists are lists of ranges that can be used by the client
        // to determine the sessions "acceptable value range".  The range works
        // against the calculated UED value or the search value specified by
        // the client.
        //
        // Syntax of the rangeOffsetList:
        // decay = [{ t=0, offset = [100,100]}, { t=5, offset = [200,200]}, { t=10, offset = [INF]}]
        //
        // t is the time since this session has started searching; +0, +5, +10.
        // offset is the acceptable offset around the desired value that indicates
        // a match; +/-100, +/-200, +/-INF.  Offsets don't have to be symetric
        // and if only one value is specified, that value will be used for both the + and - Value.
        //
        // Acceptable well known values are
        //   "EXACT_MATCH_REQUIRED" = 0
        //   "INF" = infinity (min or max range)
        //
        userExtendedDataRuleMap = {
			
        //===========================================================================
        //   userExtendedDataRule - MATCH RELAX BEGIN
        //===========================================================================

		    skillLevel = {
			    userExtendedDataName = "stats_skillLevel" //From etc/stats.cfg userstats
			    weight = #LOW_WEIGHT#
			    groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			    fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 40}}
			    range = { min = 0, max = 100 }
			    rangeOffsetLists = [
			        { name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
                    { name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=["INF"] }] }
                    { name = "OSDK_matchRelax", rangeOffsets = [{ t=0,  offset=["EXACT_MATCH_REQUIRED"] },
                                                              { t=2,  offset=[5] },
                                                              { t=14, offset=[10] },
                                                              { t=19, offset=[15] },
                                                              { t=22, offset=[20] },
                                                              { t=25, offset=[30] },
                                                              { t=28, offset=[70] },
							      { t=35, offset=["INF"]			}	]}
                    { name = "OSDK_skillWithin3", rangeOffsets = [{ t=0, offset=[3] }] }
                    { name = "OSDK_skillWithin5", rangeOffsets = [{ t=0, offset=[5] }] }
                    { name = "OSDK_skillWithin7", rangeOffsets = [{ t=0, offset=[7] }] }
                    { name = "OSDK_skillWithin10",rangeOffsets = [{ t=0, offset=[10] }] }
                    { name = "OSDK_skillWithin20",rangeOffsets = [{ t=0, offset=[20] }] }
			    ]
		    }
		    // OSDK: Decay the Similar DNF rule to ANY after 1 sec. Before 1 sec, server will try to matchup users with similar DNF
		    // and will evaluate games so the best fitscore match will be used after 1 sec.
		    dnfPercent = {
			    userExtendedDataName = "stats_dnf" //From etc/stats.cfg userstats
			    weight = #LOW_WEIGHT#
			    groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			    fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 20}}
			    range = { min = 0, max = 100 }
			    rangeOffsetLists = [
			        { name = "OSDK_matchRelax", rangeOffsets =[	{ t=0,	offset=["EXACT_MATCH_REQUIRED"]	},
									{ t=1,	offset=[5]			},
									{ t=14,	offset=[10]			},
									{ t=19,	offset=[15]			},
									{ t=22,	offset=[20]			},
									{ t=25,	offset=[30]			},
									{ t=29,	offset=["INF"]			}	]}
			    ]
		    }

        //===========================================================================
        //   userExtendedDataRule - MATCH RELAX END
        //===========================================================================

        //===========================================================================
        //   userExtendedDataRule - DISABLED BEGIN
        //===========================================================================

	        // Configuration for the max DNF rule.
	        // 
	        // weight - The Weight of the Rule.
	        // 
	        // dnfKey is the key used to identify which data in the User Extended Data to use when evaluating
	        // this rule.  Keys are in the form component_dataName (ie. stats_dnf).
	        //
	        OSDK_maxDNF = {
	            userExtendedDataName = "stats_dnf" // From etc/stats.cfg
	            weight = #LOW_WEIGHT#
                groupValueFormula = "GROUP_VALUE_FORMULA_MAX" // Dnf uses a MAX formula
                fitFormula = { name = "FIT_FORMULA_BINARY" }  // binary cause its a filter
	            range =  { min = 0, max = 100 } 
	            rangeOffsetLists = [
                    { name = "OSDK_matchRelax", rangeOffsets = [{ t=0, offset=["INF",0] }
                                                                { t=3, offset=["INF", 5] }
                                                                { t=6, offset=["INF", 10] }
                                                                { t=9, offset=["INF", 25] }
                                                                { t=12, offset=["INF", 50] }
                                                                { t=15, offset=["INF", "INF"] }
                    ]}
                ]
	        }

        //===========================================================================
        //   userExtendedDataRule - DISABLED END
        //===========================================================================

        //===========================================================================
        //   userExtendedDataRule - NOT SPECIFIED BY FIFA BEGIN
        //===========================================================================

			clubSkillLevel = {
		        // OSDK: To be overriden by client passing in club skill level
			    userExtendedDataName = "stats_skillLevel" // Dummy data name from etc/stats.cfg userstats
			    weight = 100
			    groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			    fitFormula = { name = "FIT_FORMULA_GAUSSIAN", params = {fiftyPercentFitValueDifference = 40}}
			    range = { min =0, max = 100 }
			    rangeOffsetLists = [
			        { name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
                    { name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=["INF"] }] }
                    { name = "OSDK_matchRelax", rangeOffsets = [{ t=0,  offset=["EXACT_MATCH_REQUIRED"] },
                                                              { t=9,  offset=[5] },
                                                              { t=14, offset=[10] },
                                                              { t=19, offset=[15] },
                                                              { t=22, offset=[20] },
                                                              { t=25, offset=[30] },
                                                              { t=28, offset=[40] }] }
                    { name = "OSDK_skillWithin3", rangeOffsets = [{ t=0, offset=[3] }] }
                    { name = "OSDK_skillWithin5", rangeOffsets = [{ t=0, offset=[5] }] }
                    { name = "OSDK_skillWithin7", rangeOffsets = [{ t=0, offset=[7] }] }
                    { name = "OSDK_skillWithin10",rangeOffsets = [{ t=0, offset=[10] }] }
                    { name = "OSDK_skillWithin20",rangeOffsets = [{ t=0, offset=[20] }] }
			    ]
		    }

        //===========================================================================
        //   userExtendedDataRule - NOT SPECIFIED BY FIFA END
        //===========================================================================


		futSkillRating = {
			userExtendedDataName = "futSkillRating"
			weight = #HIGH_WEIGHT#
			groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=420, maxVal=420}}
			range = { min = 0, max = 3000 }
			rangeOffsetLists = [
				{ name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
				{ name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=["INF"] }] }
				{ name = "OSDK_matchRelax", rangeOffsets = [
					{t = 0, offset=[25] },
					{t = 3, offset=[50] },
					{t = 6, offset=[60] },
					{t = 8, offset=[90] },
					{t = 10, offset=[130] },
					{t = 12, offset=[190] },
					{t = 13, offset=[270] },
					{t = 14, offset=[420] },
					{t = 15, offset=["INF"] }]
				}
			]
		}
		
		futRivalsSkill = {
			userExtendedDataName = "futRivalsSkill"
			weight = #HIGH_WEIGHT#
			groupValueFormula = "GROUP_VALUE_FORMULA_MAX"
			fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=250, maxVal=250}}
			range = { min = 0, max = 2500 }
			rangeOffsetLists = [
				{ name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
				{ name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=["INF"] }] }
#if (PLATFORM == "ps4" || PLATFORM == "xone" || PLATFORM == "pc")
				{ name = "OSDK_matchRelax", rangeOffsets = [
					{t = 0, offset=[60] },
					{t = 15, offset=[100] },
					{t = 30, offset=[150] },
					{t = 35, offset=[200] },
					{t = 40, offset=[250] } ]
				}
				{ name = "matchStage", rangeOffsets = [
					{t = 0, offset=[1] },
					{t = 10, offset=[2] },
					{t = 20, offset=[3] },
					{t = 30, offset=[4] },
					{t = 40, offset=[5] } ]
				}
#else
				{ name = "OSDK_matchRelax", rangeOffsets = [
					{t = 0, offset=[100] },
					{t = 10, offset=[200] },
					{t = 20, offset=[350] },
					{t = 30, offset=[500] } ]
				}
				{ name = "matchStage", rangeOffsets = [
					{t = 0, offset=[1] },
					{t = 10, offset=[2] },
					{t = 20, offset=[3] },
					{t = 30, offset=[4] },
					{t = 40, offset=[5] } ]
				}
#endif
				{ name = "LTM_skill", rangeOffsets = [
					{t = 0, offset=[240] },
					{t = 15, offset=[400] },
					{t = 30, offset=[600] },
					{t = 35, offset=[800] },
					{t = 40, offset=[1000] } ]
				}
			]
		}
			
		ssfMMRSkill = {
			userExtendedDataName = "ssfMMRSkill"
			weight = #HIGH_WEIGHT#
			groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=1000, maxVal=1000}}
			range = { min = 0, max = 3000 }
			rangeOffsetLists = [
				{ name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
				{ name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=[1000] }] }
				{ name = "OSDK_matchRelax", rangeOffsets = [
					{t = 0, offset=[75] },
					{t = 5, offset=[125] },
					{t = 10, offset=[250] },
					{t = 15, offset=[500] },
					{t = 20, offset=[1000] } ]
				}
			]
		}

		futHouseRuleWinRatio = {
			userExtendedDataName = "futHouseRuleWinRatio"
			weight = #HIGH_WEIGHT#
			groupValueFormula = "GROUP_VALUE_FORMULA_AVERAGE"
			fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=20, maxVal=20}}
			range = { min = 0, max = 100 }
			rangeOffsetLists = [
				{ name = "OSDK_matchExact", rangeOffsets = [{ t=0, offset=["EXACT_MATCH_REQUIRED"] }] }
				{ name = "OSDK_matchAny", rangeOffsets = [{ t=0, offset=["INF"] }] }
				{ name = "OSDK_matchRelax", rangeOffsets = [
					{t = 0,  offset=[0] },
					{t = 10, offset=[10] },
					{t = 20, offset=[20] },
					{t = 30, offset=["INF"] }]
				}
			]
		}

		futChampionsWinForm = {
			userExtendedDataName = "futChampionsWinForm"
			weight = #HIGH_WEIGHT#
			groupValueFormula = "GROUP_VALUE_FORMULA_MAX"
			fitFormula = {name = "FIT_FORMULA_LINEAR", params = {minFit=0.0, maxFit=1.0, minVal=500, maxVal=500}}
			range = { min = -50, max = 50 }
			rangeOffsetLists = [
				{ name = "stage1", rangeOffsets = [ {t=0, offset=[4]}, {t=10, offset=[6]} ] }
				{ name = "stage2", rangeOffsets = [ {t=0, offset=[4]}, {t=10, offset=[6]}, {t=20, offset=[8]}, {t=30, offset=[10]} ] }
			]
		}
		
        } // userExtendedDataRuleMap
    } // rules

    externalSessions = {
        "xbsx" = {
            // GDNP service config identifier
            scid = "#XONE_SCID#"

            // List of session template names of external session supported.
            sessionTemplateNames = [ #XONE_SESSION_TEMPLATE_NAME_LIST# ]

            contractVersion = "#XONE_EXTERNAL_SESSION_CONTRACT_VERSION#"

            externalSessionNamePrefix = "#ENV#"

            // Title id specified for external sessions (For Xbox can be decimal or '0x'-prefixed hexadecimal).
            externalSessionTitle = "#XONE_TITLEID#"

          #if defined(MOCK_EXTERNAL_SERVICE_URL_XONE)
            useMock = true
          #endif
        }
        "xone" = {
            scid = "#XONE_SCID#"
            sessionTemplateNames = [ #XONE_SESSION_TEMPLATE_NAME_LIST# ]
            contractVersion = "#XONE_EXTERNAL_SESSION_CONTRACT_VERSION#"
            externalSessionNamePrefix = "#ENV#"
            externalSessionTitle = "#XONE_TITLEID#"
          #if defined(MOCK_EXTERNAL_SERVICE_URL_XONE)
            useMock = true
          #endif
        }
    }
}
