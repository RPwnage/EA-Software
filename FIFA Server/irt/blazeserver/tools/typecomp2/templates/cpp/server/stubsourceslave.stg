group stubsourceslave : stubsourcecommon;
masterComponent(fileNode, component) ::= <<>>
slaveComponent(fileNode, component) ::= <<
<standardFileHeader()>
/*** Include Files ********************************************************************************/
#include "framework/blaze.h"
#include "<component.RelativeOutputPath;format="unixPath">/rpc/<component.Name;format="tl"><component.Type;format="tl">_stub.h"
<if(component.PassthroughCommands)>#include "<component.RelativeOutputPath;format="unixPath">/rpc/<component.Name;format="tl">master.h"<endif>
#include "framework/connection/inboundrpcconnection.h"
#include "framework/component/command.h"
#include "framework/connection/selector.h"
#include "framework/connection/endpoint.h"
#include "framework/connection/ratelimiter.h"
#include "framework/system/fiber.h"
#include "framework/usersessions/usersession.h"
#include "framework/usersessions/usersessionmanager.h"
#include "framework/connection/selector.h"
<componentAutoConfigIncl()>
<if(component.Master.ReplMaps)>
#include "framework/controller/controller.h"
#include "framework/component/componentmanager.h"
#include "framework/replication/replicator.h"
#include "framework/replication/replicatedmap.h"
<elseif(component.ReplMaps)>
#include "framework/controller/controller.h"
#include "framework/component/componentmanager.h"
#include "framework/replication/replicator.h"
#include "framework/replication/replicatedmap.h"
<endif>

#include "framework/connection/outboundconnectionmanager.h"

<fileNode.Includes:{<printInclude(it)>}; separator="\n"> 
<component.Commands:{command | <if(!command.passthrough)>#include "<component.Name;format="toLower"><component.Type;format="tl">/<command.Name;format="toLower">_stub.h"<\n><endif>}>
/*** Defines/Macros/Constants/Typedefs ************************************************************/

<component.Scope.FullNameList: openNamespace(name=it); separator="\n">

<component.Master.StaticMaps:staticMapCollectionIdMaster(...); separator="\n">
<component.Master.DynamicMaps:dynamicMapCollectionIdMaster(...); separator="\n">
<component.StaticMaps:staticMapCollectionIdSlave(...); separator="\n">
<component.DynamicMaps:dynamicMapCollectionIdSlave(...); separator="\n">

<component.Master.StaticMaps:staticMapConstants(...); separator="\n">
<component.Master.DynamicMaps:dynamicMapConstants(...); separator="\n">
<component.StaticMaps:staticMapConstants(...); separator="\n">
<component.DynamicMaps:dynamicMapConstants(...); separator="\n">

//These are here because not all command stubs have cpp files.
<component.Commands:{command | <printMemGroupConst(command=command)>}>

/**************************************************************************************************/
/*!
    \class <component.Name><component.Type>

    Generated code for stub methods.
*/
/**************************************************************************************************/


<component.Name><component.Type>Stub::<component.Name><component.Type>Stub() : 
    <component.Name><component.Type>(::Blaze::gController != nullptr ? ::Blaze::gController->getOutboundConnectionManager() : *(BLAZE_NEW ::Blaze::OutboundConnectionManager())),
    ::Blaze::ComponentStub(COMPONENT_INFO)
<if(component.ReplMaps)>, mSharedCollection(nullptr)<endif>
<if(component.Master.StaticMaps)>,<component.Master.StaticMaps:{m<it.Name>Map(nullptr)}; separator=",\n"><endif>
{   
<if(component.configurationType)>    
    mComponentConfig = nullptr;
    mInitialComponentConfig = nullptr;
<endif>

<if(component.ReplMaps)>
    setupReplication();
<elseif(component.Master.ReplMaps)>
    setupReplication();
<endif>  

<if(component.Notifications)>
    addNotificationListener(*this);  
<endif>

}

<component.Name><component.Type>Stub::~<component.Name><component.Type>Stub()
{
<if(component.configurationType)>
    delete mComponentConfig;
    if (mInitialComponentConfig != mComponentConfig)
        delete mInitialComponentConfig;
<endif>

<if(component.Notifications)>
    removeNotificationListener(*this);  
<endif>

}

<componentAutoConfigImpl()>

<if(component.ReplMaps)>
void <component.Name><component.Type>Stub::addReplicationSubscription(SlaveSession& session, const ReplicationSubscribeRequest& req)
{
    mSharedCollection->addSlaveSubscriber(session, req);
}

void <component.Name><component.Type>Stub::removeReplicationSubscription(SlaveSession& session)
{
    mSharedCollection->removeSlaveSubscriber(session);
}
<endif>

<if(component.Master.ReplMaps)><mediatorDefines()><elseif(component.ReplMaps)><mediatorDefines()><endif>

<if(component.generateProto)>
<component.Commands:printGrpcCommandCreatorDefinition(component=component, command=it); separator="\n">
<endif>

<component.Scope.FullNameList: closeNamespace(name=it); separator="\n">
<standardFileFooter()>
>>

printMemGroupConst(command) ::= <<
<if(!component.generateProto)>
<if(!component.grpcOnly)>
<if(!command.passthrough)>const ::Blaze::MemoryGroupId& <command.Name;format="pascal">CommandStub::COMPONENT_MEMORY_GROUP = <component.Name><component.Type>::COMPONENT_MEMORY_GROUP;<\n><endif>
<endif>
<else>
<if(!command.passthrough)>const ::Blaze::MemoryGroupId& <command.Name;format="pascal">CommandStub::COMPONENT_MEMORY_GROUP = <component.Name><component.Type>::COMPONENT_MEMORY_GROUP;<\n><endif>
<endif>
>>

staticMapCollectionIdMaster(map) ::= <<
const CollectionId <component.Name>SlaveStub::<map.Name;format="toUpper">_MAP_ID(RpcMakeMasterId(COMPONENT_ID), <map.id><if(map.collection_type)>, <map.collection_type><endif>);
>>

dynamicMapCollectionIdMaster(map) ::= <<
const CollectionIdRange <component.Name>SlaveStub::<map.Name;format="toUpper">_MAP_ID_RANGE(RpcMakeMasterId(COMPONENT_ID), <if(map.start_id)><map.start_id><else>0<endif>, <if(map.end_id)><map.end_id><else>UINT64_MAX<endif><if(map.collection_type)>, <map.collection_type><endif>);
>>

staticMapCollectionIdSlave(map) ::= <<
const CollectionId <component.Name>SlaveStub::<map.Name;format="toUpper">_MAP_ID(COMPONENT_ID, <map.id><if(map.collection_type)>, <map.collection_type><endif>);
>>

dynamicMapCollectionIdSlave(map) ::= <<
const CollectionIdRange <component.Name>SlaveStub::<map.Name;format="toUpper">_MAP_ID_RANGE(COMPONENT_ID, <if(map.start_id)><map.start_id><else>0<endif>, <if(map.end_id)><map.end_id><else>UINT64_MAX<endif><if(map.collection_type)>, <map.collection_type><endif>);
>>

staticMapConstants(map) ::= <<
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::InsertContextStr[] = "<map.Name>Map::onInsert";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::UpdateContextStr[] = "<map.Name>Map::onUpdate";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::EraseContextStr[] = "<map.Name>Map::onErase";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::CreateMapContextStr[] = ""; // not used in static maps
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::DestroyMapContextStr[] = ""; // not used in static maps
>>

dynamicMapConstants(map) ::= <<
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::InsertContextStr[] = "<map.Name>Map::onInsert";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::UpdateContextStr[] = "<map.Name>Map::onUpdate";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::EraseContextStr[] = "<map.Name>Map::onErase";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::CreateMapContextStr[] = "<map.Name>Map::onCreateMap";
const char8_t <component.Name>SlaveStub::<map.Name>MapSpec::DestroyMapContextStr[] = "<map.Name>Map::onDestroyMap";
>>

mediatorDefines() ::= <<
<if(!component.has_custom_replication_mediator)><component.Name>SlaveDataMediatorStub *<component.Name>SlaveDataMediatorStub::create()
{
    return BLAZE_NEW_MGID(<component.Name>Slave::COMPONENT_MEMORY_GROUP, "<component.Name> SlaveMediator") <component.Name>SlaveDataMediatorStub();
}
<endif>

void <component.Name>SlaveDataMediatorStub::setup()
{
    <component.Master.StaticMaps:{m<it.Name>Map = gReplicator->registerRemoteStaticMap\<<component.Name>SlaveStub::<it.Name>Map\>(<component.Name>SlaveStub::<it.Name;format="toUpper">_MAP_ID, <component.Name>Slave::COMPONENT_MEMORY_GROUP);}; separator="\n">
    <component.Master.DynamicMaps:{gReplicator->registerRemoteDynamicMapRange\<<component.Name>SlaveStub::<it.Name>Map\>(<component.Name>SlaveStub::<it.Name;format="toUpper">_MAP_ID_RANGE, <component.Name>Slave::COMPONENT_MEMORY_GROUP);}; separator="\n">
    <component.StaticMaps:{m<it.Name>Map = gReplicator->registerRemoteStaticMap\<<component.Name>SlaveStub::Shared<it.Name>Map\>(<component.Name>SlaveStub::<it.Name;format="toUpper">_MAP_ID, <component.Name>Slave::COMPONENT_MEMORY_GROUP, &mSharedCollection);}; separator="\n">
    <component.DynamicMaps:{gReplicator->registerRemoteDynamicMapRange\<<component.Name>SlaveStub::Shared<it.Name>Map\>(<component.Name>SlaveStub::<it.Name;format="toUpper">_MAP_ID_RANGE, <component.Name>Slave::COMPONENT_MEMORY_GROUP, &mSharedCollection);}; separator="\n">
}

void <component.Name>SlaveStub::setupReplication()
{
<if(component.Master.ReplMaps)>
    <component.Name>SlaveDataMediatorStub *masterMediator = 
        static_cast\<<component.Name>SlaveDataMediatorStub*\>(gReplicator->registerRemoteComponent(RpcMakeMasterId(COMPONENT_ID), COMPONENT_MEMORY_GROUP,
        (Replicator::DataMediatorFactoryFunc) &<component.Name>SlaveDataMediatorStub::create));

    if (masterMediator != nullptr)
    {
        <component.Master.StaticMaps:{m<it.Name>Map = masterMediator->get<it.Name>Map();}; separator="\n">
        <component.StaticMaps:{m<it.Name>Map = masterMediator->get<it.Name>Map();}; separator="\n">
    }
<endif>

<if(component.ReplMaps)>
    <component.Name>SlaveDataMediatorStub *slaveMediator = 
        static_cast\<<component.Name>SlaveDataMediatorStub*\>(gReplicator->registerRemoteComponent(COMPONENT_ID, COMPONENT_MEMORY_GROUP,
        (Replicator::DataMediatorFactoryFunc) &<component.Name>SlaveDataMediatorStub::create));

    if (slaveMediator != nullptr)
    {
        mSharedCollection = slaveMediator->getSharedCollection();

        <component.Master.StaticMaps:{m<it.Name>Map = slaveMediator->get<it.Name>Map();}; separator="\n">
        <component.StaticMaps:{m<it.Name>Map = slaveMediator->get<it.Name>Map();}; separator="\n">
        gReplicator->registerLocalCollection(*mSharedCollection);
    }
<endif>

}

<if(component.ReplMaps)>

::Blaze::BlazeRpcError <component.Name>SlaveStub::replicationSubscribe(InstanceId selectedInstanceId)
{
    mSharedCollection->addLocalSubscriber();
    return ::Blaze::Component::replicationSubscribe(selectedInstanceId);
}

<endif>

<component.DynamicMaps:mapCreateDestroy(map=it);separator="\n\n">
>>
