[ headername="psnsessionmanager/tdf/psnsessionmanager.h" ]
#include "psnsessionmanager/gen/psnsessionmanager.tdf"

[ headername="psnsessionmanager/tdf/psncommondefines.h" ]//for PsnWebApiHeader, PsnOnlineId etc
#include "psnsessionmanager/gen/psncommondefines.tdf"

namespace Blaze
{
namespace PSNServices
{
namespace PlayerSessions
{

[
    id = core/3003,
    description = "PSN Session Manager PlayerSessions service proxy",
    details = "Proxy component for PSN Session Manager PlayerSessions service",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]
component PSNSessionManager
{
    errors
    {
        [ description = "External session authentication error, possibly due to invalid/expired token." ]
        PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED = 1; //http 401
        [ description = "The specified resource does not exist." ]
        PSNSESSIONMANAGER_RESOURCE_NOT_FOUND = 2; //http 404
        [ description = "Request to the resource or operation was refused. This may be due to the client or Blaze Server configuration not using the correct title id, the title not having its PSN DevNet service for the ClientId properly configured, or, the client being currently signed out from PSN." ]
        PSNSESSIONMANAGER_ACCESS_FORBIDDEN = 3; //http 403
        [ description = "Invalid or malformed request parameters." ]
        PSNSESSIONMANAGER_BAD_REQUEST = 4; //http 400
        [ description = "The request's parameters were incorrect/invalid." ]
        PSNSESSIONMANAGER_CONFLICTING_REQUEST = 5; //http 409
        [ description = "The external service's rate limit was exceeded." ]
        PSNSESSIONMANAGER_TOO_MANY_REQUESTS = 6; //http 429
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        PSNSESSIONMANAGER_SERVICE_UNAVAILABLE = 7; //http 503
        [ description = "The external session service had an unspecified internal error. Check with Sony for potential issues." ]
        PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR = 8; //http 500
    }

    slave
    {
        methods
        {
            [
                id = 1,
                description = "Create a PSN PlayerSession",
                details = "Call to PSN to create a PSN PlayerSession, and join caller to it as a player",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions", //Note: playerSessions apparently case sensitive
                    method = "POST",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            CreatePlayerSessionResponse createPlayerSession(CreatePlayerSessionRequest);

            [
                id = 2,
                description = "Join a PSN PlayerSession",
                details = "Call to PSN to join caller to a PSN PlayerSession, as a player",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}/member/players",
                    method = "POST",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        409 = PSNSESSIONMANAGER_CONFLICTING_REQUEST,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            JoinPlayerSessionResponse joinPlayerSessionAsPlayer(JoinPlayerSessionRequest);

            [
                id = 3,
                description = "Join a PSN PlayerSession as spectator",
                details = "Call to PSN to join caller to a PSN PlayerSession, as a spectator",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}/member/spectators",
                    method = "POST",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        409 = PSNSESSIONMANAGER_CONFLICTING_REQUEST,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            JoinPlayerSessionResponse joinPlayerSessionAsSpectator(JoinPlayerSessionRequest);

            [
                id = 4,
                description = "Leave a PSN PlayerSession",
                details = "Call to PSN to leave caller from a PSN PlayerSession",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}/members/{accountId}",
                    method = "DELETE",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            void leavePlayerSession(LeavePlayerSessionRequest);
            
            [
                id = 5,
                description = "Get the user's PSN PlayerSessionIds",
                details = "Call to PSN to get the PlayerSessionIds the user is participating in.",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/users/{accountId}/playerSessions?platformFilter={platformFilter}",
                    method = "GET",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            GetPlayerSessionIdsResponse getPlayerSessionIds(GetPlayerSessionIdsRequest);

            [
                id = 6,
                description = "Get a PSN PlayerSession",
                details = "Call PSN to get details of 1st party PlayerSession",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions?fields=sessionId,member,sessionName,maxPlayers,maxSpectators,joinDisabled,leader,leaderPrivileges,customData1,customData2,supportedPlatforms,createdTimestamp,joinableUserType,invitableUserType,swapSupported,joinableSpecifiedUsers",
                    method = "GET",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken",
                        "X-PSN-SESSION-MANAGER-SESSION-IDS" = "sessionId",
                        "Accept-Language"= "header.acceptLanguage"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            GetPlayerSessionResponse getPlayerSession(GetPlayerSessionRequest);

            [
                id = 7,
                description = "Update a PSN PlayerSession",
                details = "Call PSN to update properties of 1st party PlayerSession",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}", //Note: playerSessions apparently case sensitive
                    method = "PATCH",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        409 = PSNSESSIONMANAGER_CONFLICTING_REQUEST,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void updatePlayerSessionProperties(UpdatePlayerSessionPropertiesRequest);
            
            [
                id = 8,
                description = "Register a user who can join a PSN PlayerSession without invite, by adding to PlayerSession joinableSpecifiedUsers.",
                details = "Call PSN to add user to 1st party PlayerSession joinableSpecifiedUsers. When the joinableUserType setting for the Player Session is SPECIFIED_USERS, the joinableSpecifiedUsers indicates the users who can join the Player Session. No error will occur, even if a user who has already been registered is specified by his or her accountId. See Sony docs for limits on number allowed registered.",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}/joinableSpecifiedUsers",
                    method = "POST",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        409 = PSNSESSIONMANAGER_CONFLICTING_REQUEST,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            AddPlayerSessionJoinableSpecifiedUsersResponse addPlayerSessionJoinableSpecifiedUsers(AddPlayerSessionJoinableSpecifiedUsersRequest);
            
            [
                id = 9,
                description = "Delete users who can join a PSN PlayerSession without invite, by deleting from PlayerSession joinableSpecifiedUsers.",
                details = "Call PSN to remove user from 1st party PlayerSession joinableSpecifiedUsers. The request will succeed even if a specified user is not registered on the joinableSpecifiedUsers list.",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED, PSNSESSIONMANAGER_RESOURCE_NOT_FOUND, PSNSESSIONMANAGER_ACCESS_FORBIDDEN, PSNSESSIONMANAGER_BAD_REQUEST, PSNSESSIONMANAGER_CONFLICTING_REQUEST, PSNSESSIONMANAGER_TOO_MANY_REQUESTS, PSNSESSIONMANAGER_SERVICE_UNAVAILABLE, PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR },
                http = {
                    resource = "v1/playerSessions/{sessionId}/joinableSpecifiedUsers",
                    method = "DELETE",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken",
                        "X-PSN-SESSION-MANAGER-ACCOUNT-IDS" = "accountIds"
                    },
                    status_code_errors = {
                        400 = PSNSESSIONMANAGER_BAD_REQUEST,
                        401 = PSNSESSIONMANAGER_AUTHENTICATION_REQUIRED,
                        403 = PSNSESSIONMANAGER_ACCESS_FORBIDDEN,
                        404 = PSNSESSIONMANAGER_RESOURCE_NOT_FOUND,
                        409 = PSNSESSIONMANAGER_CONFLICTING_REQUEST,
                        429 = PSNSESSIONMANAGER_TOO_MANY_REQUESTS,
                        500 = PSNSESSIONMANAGER_SERVICE_INTERNAL_ERROR,
                        503 = PSNSESSIONMANAGER_SERVICE_UNAVAILABLE
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            void deletePlayerSessionJoinableSpecifiedUsers(DeletePlayerSessionJoinableSpecifiedUsersRequest);

        }
    }
}

}//ns PlayerSessions
}//ns PSNServices
}//ns Blaze
