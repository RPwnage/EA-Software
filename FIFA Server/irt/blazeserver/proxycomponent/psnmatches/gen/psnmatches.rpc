[ headername="psnmatches/tdf/psnmatches.h" ]
#include "psnmatches/gen/psnmatches.tdf"

[ headername="psnsessionmanager/tdf/psncommondefines.h" ]//for PsnWebApiHeader, PsnOnlineId etc
#include "psnsessionmanager/gen/psncommondefines.tdf"

namespace Blaze
{
namespace PSNServices
{
namespace Matches
{

[
    id = core/3002,
    description = "PSN Matches service proxy",
    details = "Proxy component for the PSN Matches REST service",
    proxyOnly = true,
    http = {
        payloadEncoderSubType = "NORMAL"
    }
]
component PSNMatches
{
    errors
    {
        [ description = "External session authentication error, possibly due to invalid/expired token." ]
        PSNMATCHES_AUTHENTICATION_REQUIRED = 1; //http 401
        [ description = "The specified resource does not exist." ]
        PSNMATCHES_RESOURCE_NOT_FOUND = 2; //http 404
        [ description = "Request to the resource or operation was refused. This may be due to the client or Blaze Server configuration not using the correct title id, the title not having its PSN DevNet service for the ClientId properly configured, or, the client being currently signed out from PSN." ]
        PSNMATCHES_ACCESS_FORBIDDEN = 3; //http 403
        [ description = "Invalid or malformed request parameters." ]
        PSNMATCHES_BAD_REQUEST = 4; //http 400
        [ description = "The request's parameters were incorrect/invalid." ]
        PSNMATCHES_CONFLICTING_REQUEST = 5; //http 409
        [ description = "The external service's rate limit was exceeded." ]
        PSNMATCHES_TOO_MANY_REQUESTS = 6; //http 429
        [ description = "The external session service is currently unavailable, possibly due to momentary downtime, updates or service maintenance." ]
        PSNMATCHES_SERVICE_UNAVAILABLE = 7; //http 503
        [ description = "The external session service had an unspecified internal error. Check with Sony for potential issues." ]
        PSNMATCHES_SERVICE_INTERNAL_ERROR = 8; //http 500
        [ description = "The external session service gateway or proxy received an invalid response upon executing request. Check with Network or Sony for potential issues." ]
        PSNMATCHES_SERVICE_BAD_GATEWAY = 9; //http 502
    }

    slave
    {
        methods
        {
            [
                id = 1,
                description = "Create a PSN Match",
                details = "Call PSN to create a 1st party Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches",
                    method = "POST",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            CreateMatchResponse createMatch(CreateMatchRequest);

            [
                id = 2,
                description = "Join a PSN Match",
                details = "Call PSN to join a 1st party Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}/players/actions/add",
                    method = "POST",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void joinMatch(JoinMatchRequest);

            [
                id = 3,
                description = "Leave a PSN Match",
                details = "Call PSN to leave a 1st party Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}/players/actions/remove",
                    method = "POST",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void leaveMatch(LeaveMatchRequest);

            [
                id = 4,
                description = "Get a PSN Match",
                details = "Call PSN to get details of 1st party Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}?npServiceLabel={npServiceLabel}",
                    method = "GET",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    addEncodedPayload = false // No payload
                }
            ]
            GetMatchDetailResponse getMatchDetail(GetMatchDetailRequest);

            [
                id = 5,
                description = "Update a PSN Match Status",
                details = "Call PSN to update a 1st party Match Status",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}/status",
                    method = "PUT",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void updateMatchStatus(UpdateMatchStatusRequest);

            [
                id = 6,
                description = "Report results for a PSN Match",
                details = "Call PSN to report results for a 1st party Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}/results",
                    method = "POST",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void reportMatchResults(ReportMatchResultsRequest);

            [
                id = 7,
                description = "Update Match details for a PSN Match",
                details = "Call PSN to update Match details for a PSN Match",
                requires_authentication = false,
                client_export = false,
                errortype = PsnErrorResponse,
                errors = { PSNMATCHES_AUTHENTICATION_REQUIRED, PSNMATCHES_RESOURCE_NOT_FOUND, PSNMATCHES_CONFLICTING_REQUEST, PSNMATCHES_ACCESS_FORBIDDEN, PSNMATCHES_BAD_REQUEST, PSNMATCHES_TOO_MANY_REQUESTS, PSNMATCHES_SERVICE_UNAVAILABLE, PSNMATCHES_SERVICE_INTERNAL_ERROR, PSNMATCHES_SERVICE_BAD_GATEWAY },
                http = {
                    resource = "v1/matches/{matchId}",
                    method = "PATCH",
                    contentType = "application/json; charset=utf-8",
                    custom_request_headers = {
                        "Authorization"  = "header.authToken"
                    },
                    status_code_errors = {
                        400 = PSNMATCHES_BAD_REQUEST,
                        401 = PSNMATCHES_AUTHENTICATION_REQUIRED,
                        403 = PSNMATCHES_ACCESS_FORBIDDEN,
                        404 = PSNMATCHES_RESOURCE_NOT_FOUND,
                        409 = PSNMATCHES_CONFLICTING_REQUEST,
                        429 = PSNMATCHES_TOO_MANY_REQUESTS,
                        500 = PSNMATCHES_SERVICE_INTERNAL_ERROR,
                        502 = PSNMATCHES_SERVICE_BAD_GATEWAY,
                        503 = PSNMATCHES_SERVICE_UNAVAILABLE
                    },
                    requestPayloadMember = "body"
                }
            ]
            void updateMatchDetail(UpdateMatchDetailRequest);

        }
    }
}

}//ns Matches
}//ns PSNServices
}//ns Blaze
