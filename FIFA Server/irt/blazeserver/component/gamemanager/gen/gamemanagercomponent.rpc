/*****************************************************************************************


    (c) Electronic Arts. All Rights Reserved.
*****************************************************************************************/


[
  client_include = false,
  headername="gamemanager/tdf/gamemanager_server.h" 
]
#include "gamemanager/gen/gamemanager_server.tdf"

[
  client_include = false,
  headername="gamemanager/tdf/gamemanagermetrics_server.h" 
]
#include "gamemanager/gen/gamemanagermetrics_server.tdf"

[
  client_include = false,
  headername="gamemanager/tdf/gamemanagerconfig_server.h" 
]
#include "gamemanager/gen/gamemanagerconfig_server.tdf"

[
  client_include = false,
  headername="gamemanager/tdf/gamemanagerevents_server.h" 
]
#include "gamemanager/gen/gamemanagerevents_server.tdf"

[
  client_include = false,
  headername="gamemanager/tdf/matchmaker_server.h" 
]
#include "gamemanager/gen/matchmaker_server.tdf"

[ headername="gamemanager/tdf/gamemanager.h" ]
#include "gamemanager/gen/gamemanager.tdf"

[ headername="gamemanager/tdf/matchmaker.h" ]
#include "gamemanager/gen/matchmaker.tdf"

[ headername="gamemanager/tdf/scenarios.h" ]
#include "gamemanager/gen/scenarios.tdf"

[
  client_include = false,
  headername="gamemanager/tdf/matchmakingmetrics_server.h" 
]
#include "gamemanager/gen/matchmakingmetrics_server.tdf"

[ client_include = false ]
#include "component/gamemanager/playerinfo.h"

[ headername="gamemanager/tdf/gamebrowser.h" ]
#include "gamemanager/gen/gamebrowser.tdf"

[ headername="gamemanager/tdf/gamebrowser_scenarios.h" ]
#include "gamemanager/gen/gamebrowser_scenarios.tdf"

[ 
   client_include=false,
   headername="gamemanager/tdf/gamebrowser_server.h" 
]
#include "gamemanager/gen/gamebrowser_server.tdf"

[ headername="framework/tdf/entrycriteria.h" ]
#include "framework/gen/entrycriteria.tdf"

[
  client_include = false,
  headername="framework/tdf/controllertypes_server.h" 
]
#include "framework/gen/controllertypes_server.tdf"

namespace Blaze
{
namespace GameManager
{

class PlayerInfo;

[ 
  id = core/4,
  preconfigurationType = GameManagerServerPreconfig,
  configurationType = GameManagerServerConfig
]
component GameManager
{
    
    

    types
    {
        [ name = "game session" ]
        ENTITY_TYPE_GAME = 1;
        [ name = "game group" ]
        ENTITY_TYPE_GAME_GROUP = 2;
    }

    permissions
    {
        PERMISSION_JOIN_GAME_SESSION = 1;           
        PERMISSION_START_MATCHMAKING_SESSION = 2;
        PERMISSION_CREATE_GAME = 3;
        PERMISSION_MATCHMAKING_DEDICATED_SERVER_OVERRIDE = 4;
        PERMISSION_JOIN_GAME_BY_USERLIST = 5;
        PERMISSION_CREATE_GAME_PEER_HOSTED_SERVER = 6;
        PERMISSION_CREATE_GAME_DED_SERVER = 7;
        PERMISSION_CREATE_GAME_P2P_FULL_MESH = 8;
        PERMISSION_CREATE_GAME_NET_DISABLED = 9;
        PERMISSION_HOST_GAME_SESSION = 12;
        PERMISSION_START_MATCHMAKING_SESSION_CREATE_GAME = 13;
        PERMISSION_START_MATCHMAKING_SESSION_FIND_GAME = 14;
        PERMISSION_JOIN_EXTERNAL_SESSION = 16;
        PERMISSION_BATCH_DESTROY_GAMES = 17;
        PERMISSION_CREATE_GAME_GROUP = 18;
        PERMISSION_JOIN_GAME_GROUP = 19;
        PERMISSION_CREATE_AUDIT = 20;
        PERMISSION_CANCEL_AUDIT = 21;
        PERMISSION_DELETE_AUDIT_DATA = 22;
        PERMISSION_START_DEBUG_MATCHMAKING_SCENARIO = 23;
        PERMISSION_CREATE_PSEUDO_GAMES = 24;
        PERMISSION_MANAGE_PSEUDO_GAMES = 25;
        PERMISSION_CAPTURE_GAME_MANAGER_ENVIRONMENT = 26;
        PERMISSION_TOURNAMENT_PROVIDER = 27;
        PERMISSION_START_INDIRECT_MATCHMAKING_SESSION = 28;
        PERMISSION_DEDICATED_SERVER_ATTRIBUTE_SEARCH = 29;
        PERMISSION_SEARCH_BY_PLATFORM = 30;
        PERMISSION_CREATE_AS_EXTERNAL_OWNER = 31;
        PERMISSION_BATCH_UPDATE_DEDICATED_SERVER_ATTRIBUTES = 32;
        PERMISSION_OMIT_CALLER_FROM_ROSTER = 33;
    }

    errors 
    {
        // game error
       
        [ description = "A generic problem with the combination of game settings you're trying to use.  For example, you might be trying to change a game's ranked setting on the 360 after game creation (not allowed by XBL)." ]
        GAMEMANAGER_ERR_INVALID_GAME_SETTINGS                = 1;
        [ description = "The blazeServer wasn't able to find a game with the supplied gameId." ]
        GAMEMANAGER_ERR_INVALID_GAME_ID                      = 2;
        [ description = "The player's game join failed because the game doesn't allow players to join using the supplied JoinMethod." ]
        GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED            = 3;
        [ description = "The game doesn't have enough available participant slots. Note: If you need a public slot and none are available, you'll get PARTICIPANT_SLOTS_FULL, even if there are open private slots." ]
        GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL               = 4;
        [ description = "The game refused to change state because it would violate the GameState state machine's allowed transitions." ]
        GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION        = 5;
        [ description = "This RPC cannot be issued while the game is in its current state (GameState)." ]
        GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION            = 6;
        [ description = "System error: a game couldn't be destroyed for an unknown reason." ]
        GAMEMANAGER_ERR_FAILED_IN_GAME_DESTROY               = 7;
        [ description = "The game is full, and there's not enough room in the game's queue for you (or your entire group would overflow the queue)." ]
        GAMEMANAGER_ERR_QUEUE_FULL                           = 8;
        [ description = "The game failed to parse the game entry criteria." ]
        GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA          = 9;
        [ description = "There was a mismatch in game protocol versions" ]
        GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH       = 10;
        [ description = "The game has already started, and does not allow join in progress." ]
        GAMEMANAGER_ERR_GAME_IN_PROGRESS                     = 11;
        [ description = "DEPRECATED - Reserved ids are only allowed if dynamically created dedicated server mode is enabled and the ID isn't already taken by an existing game." ]
        GAMEMANAGER_ERR_RESERVED_GAME_ID_INVALID             = 12;
        [description = "The join method specified is not valid for the type of join attempted. System join methods not allowed, as well as specifying JOIN_BY_PLAYER with no player information(joinByGameId)"]
        GAMEMANAGER_ERR_INVALID_JOIN_METHOD                  = 13;
        [ description = "The requested slot was occupied- should only occur when attempting to join a specific slot in a game." ]
        GAMEMANAGER_ERR_SLOT_OCCUPIED                        = 14;
        [description = "The requested action can only be performed on a virtualized game."]
        GAMEMANAGER_ERR_NOT_VIRTUAL_GAME                     = 15;
        [description = "The player requesting this action must be the topology host of the game."]
        GAMEMANAGER_ERR_NOT_TOPOLOGY_HOST                    = 16;
        [ description = "The requested network topology is not supported by the game type." ]
        GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED               = 17;
        [ description = "The join cannot be completed while the game is in a busy GameState or locked as busy. Callers may try again later." ]
        GAMEMANAGER_ERR_GAME_BUSY                            = 18;
        [ description = "The requested external session template name is not supported by the server." ]
        GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED       = 19;
        [ description = "A game create or reset attempt didn't specify the game mode attribute." ]
        GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING          = 20;
        [ description = "The game's join restrictions prevented the user from joining." ]
        GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION  = 21;
        [ description = "The game's presence mode prevented the user from joining." ]
        GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION = 22;
        [ description = "The game doesn't have enough available spectator slots. Note: If you need a public slot and none are available, you'll get SPECTATOR_SLOTS_FULL, even if there are open private slots." ]
        GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL                 = 23;
        [ description = "This RPC cannot be issued while the game is in its current state (GameState == UNRESPONSIVE)." ]
        GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE              = 24;
        [ description = "The game was destroyed by the connection update. This is not an unexpected error, but must be handled differently from a ERR_OK. (Pointers to the Game may be invalidated.)" ]
        GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE  = 25;
        [ description = "The ping site alias provided for the dedicated server game was invalid or unknown to QoS." ]
        GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS              = 26;
        [ description = "The crossplay settings of the Game or Request prevent the action from occurring." ]
        GAMEMANAGER_ERR_CROSSPLAY_DISABLED                   = 27;
        [ description = "The crossplay settings of the User prevent the action from occurring.  Can be fixed by changing the Crossplay Enabled setting of the User." ]
        GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER              = 28;
        [ description = "Unexpected game record version detected while trying to join the game." ]
        GAMEMANAGER_ERR_UNEXPECTED_JOIN_FAILURE_GAME_VERSION              = 29;


        // game administer list
        [ description = "You must have admin rights on the game to issue this RPC." ]
        GAMEMANAGER_ERR_PERMISSION_DENIED                    = 30;
        [ description = "A player to be added to admin list is already an admin." ]
        GAMEMANAGER_ERR_ALREADY_ADMIN                        = 31;
        [ description = "A player to be removed from admin list is actually not an admin." ]
        GAMEMANAGER_ERR_NOT_IN_ADMIN_LIST                    = 32;
        [ description = "A player to be removed from admin list is host of dedicated server, can't be removed." ]
        GAMEMANAGER_ERR_DEDICATED_SERVER_HOST                = 33;
        
        // game queue errors
        [description = "The server configured queueing method does not allow this call to be made."]
        GAMEMANAGER_ERR_INVALID_QUEUE_METHOD                 = 50;
        [description = "The player that is being added to the game from the queue, is not currently in the queue."]
        GAMEMANAGER_ERR_PLAYER_NOT_IN_QUEUE                  = 51;
        [description = "The server will not process a queued player while the game is migrating.  This is because the player will then fail to establish network connecitons."]
        GAMEMANAGER_ERR_DEQUEUE_WHILE_MIGRATING               = 52;
        [description = "The server will not process a queued player while the game is in progress and in progress joins are not allowed."]
        GAMEMANAGER_ERR_DEQUEUE_WHILE_IN_PROGRESS             = 53;
        
        // player error
        [ description = "The player wasn't found in a game, or the player may not exist at all (Note: we don't hit the user DB to validate a user's existence)." ]
        GAMEMANAGER_ERR_PLAYER_NOT_FOUND                     = 101;
        [ description = "The player can't join the game; he's already a game member" ]
        GAMEMANAGER_ERR_ALREADY_GAME_MEMBER                  = 103;
        [ description = "System Error: a player was banned from the game, but couldn't be removed." ]
        GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED                 = 104;
        
        [ description = "Attempting to take an action on an existing (but invalid) player.  For example, banning or kicking yourself out of a game." ]
        GAMEMANAGER_ERR_INVALID_PLAYER_PASSEDIN              = 107;
        [ description = "A Dedicated server reset attempt failed because we couldn't join the game after resetting it." ]
        GAMEMANAGER_ERR_JOIN_PLAYER_FAILED                   = 108;
        [ description = "The primry local player is not fully in game, so the other local users cannot join." ]
        GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER         = 109;

        [ description = "The player's joinGame failed; he's been banned from this game." ]
        GAMEMANAGER_ERR_PLAYER_BANNED                        = 110;
        [ description = "The player's joinGame failed; he doesn't satisfy the game's EntryCriteria formula.  See the JoinGameCb's entry criteria string for details." ]
        GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED           = 111;
        [ description = "The player can't join the game; they are already in the queue." ]
        GAMEMANAGER_ERR_ALREADY_IN_QUEUE                     = 112;
        [ description = "The player can't join the game; the game's GameSettings::setEnforceSingleGroupJoin flag is set and the game already has 2 game groups in it." ]
        GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS         = 113;

        [description = "The player isn't found in the banned list of the game, remove the banned player failure."]
        GAMEMANAGER_ERR_BANNED_PLAYER_NOT_FOUND              = 114;
        [description = "The banned players have exceed the max banned users numable that setting at configuration file."]
        GAMEMANAGER_ERR_BANNED_LIST_MAX                      = 115;
        
        [description= "The player failed to pass the reputation check on a game that doesn't allow any reputation value."]
        GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK              = 117;
        
        
        // Reservation errors.
        [description = "The player cannot make a reservation for a game they already have a reservation in."]
        GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS           = 120;
        [description = "The player can only claim reservations in a game in which they have made a reservation."]
        GAMEMANAGER_ERR_NO_RESERVATION_FOUND                 = 121;
        [description = "The type of entry requested is not valid for the join method.  Matchmaking does not allow claiming reservations."]
        GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE              = 122;

        
        // player group err
        [ description = "The blazeServer wasn't able to find a user group with the supplied id." ]
        GAMEMANAGER_ERR_INVALID_GROUP_ID                     = 151;
        [ description = "The player is not a member of the specified group." ]
        GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP                  = 152;

        // matchmaking error block
        [ description = "Problem parsing your matchmaking criteria.  See StartMatchmakingError's err msg for details." ]
        GAMEMANAGER_ERR_INVALID_MATCHMAKING_CRITERIA         = 200;
        [ description = "No matchmaking sessions exist with the id you specified." ]
        GAMEMANAGER_ERR_UNKNOWN_MATCHMAKING_SESSION_ID       = 201;
        [ description = "You can only cancel matchmaking sessions that you are the owner of." ]
        GAMEMANAGER_ERR_NOT_MATCHMAKING_SESSION_OWNER        = 202;
        [ description = "None of the games provided from find game matchmaking were joinable." ]
        GAMEMANAGER_ERR_MATCHMAKING_NO_JOINABLE_GAMES        = 203;
        [ description = "The owning user session for the session was not found." ]
        GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND    = 205;
        [ description = "The number of concurrent active matchmaking sessions exceeded configured maximum." ]
        GAMEMANAGER_ERR_MATCHMAKING_EXCEEDED_MAX_REQUESTS    = 206;
        [ description = "The number of concurrent active user group matchmaking sessions exceeded configured maximum." ]
        GAMEMANAGER_ERR_MATCHMAKING_USER_GROUP_EXCEEDED_MAX_REQUESTS    = 207;

        // player capacity error block
        [ description = "The capacity changes are invalid, it's less than current players count of the game, or the minimum capacity." ]
        GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL            = 230;
        [ description = "The capacity changes are invalid, it's above the maximum players capacity of the game." ]
        GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE            = 231;
        [ description = "The capacity changes are invalid, the total participant count can't be 0." ]
        GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO              = 232;
        [ description = "The blazeServer has a compile-time limit of SLOT_ID_MAX_COUNT players in a game (256 by default).  See gamesessionmaster.h on the server." ]
        GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE        = 233;

        // team error block
        [ description = "A game must have 1 or more teams specified." ]
        GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE  = 250;
        [ description = "vector contains multiple nodes for a single teamId." ]
        GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY              = 251;
        [ description = "INVALID_TEAM_ID is reserved, and cannot be used in the team capacities vector." ]
        GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR = 252;
        [ description = "trying to perform a team operation on a game or player for a team that isn't allowed (not present in capacity vector)" ]
        GAMEMANAGER_ERR_TEAM_NOT_ALLOWED                     = 253;
        [ description = "sum of all teams is not equal to the game's total capacity." ]
        GAMEMANAGER_ERR_TOTAL_TEAM_CAPACITY_INVALID          = 254;
        [ description = "trying to join a full team, or a team that you cannot fit your entire game group into." ]
        GAMEMANAGER_ERR_TEAM_FULL                            = 255;
        [ description = "A game's total player capacity must be evenly divisible amongst the teams present in the game." ]
        GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS = 257;
        
        // role error block
        [ description = "Role capacities were empty." ]
        GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES  = 270;
        [ description = "Sum of role capacities were too small to complete a team." ]
        GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL              = 271;
        [ description = "A role's capacity was specified as larger than the game's team capacity." ]
        GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE              = 272;
        [ description = "Operation on a role not present in the game." ] //i.e.: joining into or switching to a role a game when specifying role not present in a game session.
        GAMEMANAGER_ERR_ROLE_NOT_ALLOWED                     = 273;
        [ description = "The selected role is full." ]
        GAMEMANAGER_ERR_ROLE_FULL                            = 274;
        [ description = "The game failed to parse the role criteria." ]
        GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID          = 275;
        [ description = "The player's joinGame failed; he doesn't satisfy the game's RoleCriteria formula.  See the JoinGameCb's entry criteria string for details." ]
        GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED           = 276;
        [ description = "The game failed to parse the multirole criteria." ]
        GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID    = 277;
        [ description = "The player's joinGame failed; he doesn't satisfy the game's MultiRoleCriteria formula." ]
        GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED    = 278;

        // dedicated server
        [ description = "No dedicated game servers were found (none are available to reset)." ]
        GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND            = 301;
        [ description = "An invalid action was attempted, this action is only available for dedicated server network topology" ]
        GAMEMANAGER_ERR_DEDICATED_SERVER_ONLY_ACTION         = 302;
        [ description = "Host can't join his own dedicated server game." ]
        GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN    = 303;
        [ description = "A dynamic dedicated server creator attempted to register itself with no machine ids provided" ]
        GAMEMANGER_ERR_MACHINE_ID_LIST_EMPTY                 = 304;
        
        [ description = "Virtual game materialization failed because suitable dedicated server for game injection wasn't found." ]
        GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION     = 308;
        
        // Game Browser errors
        [ description = "Problem parsing your game browsing criteria.  See GetGameListError's err msg for details." ]
        GAMEBROWSER_ERR_INVALID_CRITERIA                     = 401;
        [ description = "A list's capacity must be GAME_LIST_CAPACITY_UNLIMITED, or greater than zero." ]
        GAMEBROWSER_ERR_INVALID_CAPACITY                     = 402;
        [ description = "No list subscription found on the blazeServer with the supplied id." ]
        GAMEBROWSER_ERR_INVALID_LIST_ID                      = 403;
        [ description = "This operation can only be completed by the list owner." ]
        GAMEBROWSER_ERR_NOT_LIST_OWNER                       = 404;
        [ description = "The gameBrowser can't find a list configuration with the supplied listConfigName.  (list configurations are defined in the server's gamebrowser config file)." ]
        GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME             = 405;
        [ description = "Cannot get user set from userset provider" ]
        GAMEBROWSER_ERR_CANNOT_GET_USERSET                   = 406;
        [ description = "Cannot get games exceed max size set based on configs maxGameListSyncSize" ]
        GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE                 = 407;
        [ description = "The number of concurrent active game browser lists exceeded configured maximum." ]
        GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS    = 408;
        [ description = "The search slave is overloaded." ]
        GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED    = 409;
        [ description = "Action not allowed for user opted-out of cross platform." ]
        GAMEBROWSER_ERR_CROSS_PLATFORM_OPTOUT = 410;
        [ description = "The action requested required a disallowed cross platform interaction." ]
        GAMEBROWSER_ERR_DISALLOWED_PLATFORM= 411;
        
        // Userset errors
        [ description = "In valid game capacity settings, the desired capacity of the game to be created is less than the number of people that need to join the game." ]
        GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL = 502;
        [ description = "An invalid action was attempted, this action is only available for individual player instead of a group." ]
        GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP             = 503;
        
        // Host migration errors
        [ description = "An attempt to initiate host migration has occured on a game that does not support host migration." ]
        GAMEMANAGER_ERR_MIGRATION_NOT_SUPPORTED              = 505;
        [ description = "Suggested new host is a invalid candidate for host migration." ]
        GAMEMANAGER_ERR_INVALID_NEWHOST                      = 506;

        [ description = "The secret does not match with the guid." ]
        GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET  = 508;
        [ description = "The persisted game id is in use." ]
        GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE             = 509;
        
        // GM QoS Connection metric errors
        GAMEMANAGER_ERR_USER_NOT_FOUND                       = 510;
        GAMEMANAGER_ERR_USER_ALREADY_AUDITED                 = 511;
        GAMEMANAGER_ERR_USER_CURRENTLY_AUDITED               = 512;

        // Scenario errors
        [ description = "The scenario name provided does not exist." ]
        GAMEMANAGER_ERR_INVALID_SCENARIO_NAME                = 600;
        [ description = "The scenario id provided is invalid, or no longer exists." ]
        GAMEMANAGER_ERR_INVALID_SCENARIO_ID                  = 601;
        [ description = "Attempting to perform an action on a scenario not owned by the current user." ]
        GAMEMANAGER_ERR_NOT_SCENARIO_OWNER                   = 602;
        [ description = "The Scenario being run requires an attribute that was not provided." ]
        GAMEMANAGER_ERR_MISSING_SCENARIO_ATTRIBUTE           = 603;
        [ description = "A Scenario Attribute being used is currently invalid. (Generally indicates a config setup error.)" ]
        GAMEMANAGER_ERR_INVALID_SCENARIO_ATTRIBUTE           = 604;
        [ description = "The Scenario variant being used is currently invalid." ]
        GAMEMANAGER_ERR_INVALID_SCENARIO_VARIANT           = 605;

        [ description = "The RPC template name provided does not exist." ]
        GAMEMANAGER_ERR_INVALID_TEMPLATE_NAME                = 610;
        [ description = "The template being run requires an attribute that was not provided." ]
        GAMEMANAGER_ERR_MISSING_TEMPLATE_ATTRIBUTE           = 611;
        [ description = "A template Attribute being used is currently invalid. (Generally indicates a config setup error.)" ]
        GAMEMANAGER_ERR_INVALID_TEMPLATE_ATTRIBUTE           = 612;

        [ description = "The Input Sanitizer failed due to incorrect formatting or criteria failure." ]
        GAMEMANAGER_ERR_INPUT_SANITIZER_FAILURE              = 620;


        // External session errors
        [ description = "The number of calls by the user for has exceeded the command's rate limit." ]
        GAMEMANAGER_ERR_EXTERNAL_SERVICE_BUSY                = 700;
        [ description = "The image for the external session is invalid or missing." ]
        GAMEMANAGER_ERR_EXTERNAL_SESSION_IMAGE_INVALID       = 701;
        [ description = "The custom data for the external session is too large." ]
        GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE = 702;
        [ description = "General error returned when the external session service returns an unhandled error."]
        GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR               = 703;
        [ description = "The external session has invalid sandbox id."]
        GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID               = 704;
    }
        
    slave
    {
        // gameSession and PlayerInfo are needed for replication on the slave(s)
        methods
        {
               [
                 id = 1,
                 requiresUserSession = false,
                 obfuscate_platform_info = true,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                 } 
               ]
               CreateGameResponse createGame(CreateGameRequest);

               [
                 id = 2,
                 requiresUserSession = false,
                 passthrough = destroyGameMaster 
               ]
               DestroyGameResponse destroyGame(DestroyGameRequest);

               [
                 id = 3,
                 requiresUserSession = false,
                 passthrough = advanceGameStateMaster 
               ]
               void advanceGameState(AdvanceGameStateRequest);
            
               [
                 id = 4,
                 requiresUserSession = false,
                 passthrough = setGameSettingsMaster,
                 description = "Updates the game settings for the game.  This replaces the entire game settings, not the delta, on error no settings are updated." 
               ]
               void setGameSettings(SetGameSettingsRequest);

               [
                 id = 5,
                 requiresUserSession = false,
                 errortype = SwapPlayersErrorInfo,
                 passthrough = setPlayerCapacityMaster 
               ]
               void setPlayerCapacity(SetPlayerCapacityRequest);
               
               [
                 id = 6,
                 requiresUserSession = false,
                 passthrough = setPresenceModeMaster,
                 description = "Updates the presence mode for the game. This will take effect the next time a new session is created."
               ]
               void setPresenceMode(SetPresenceModeRequest);

               [
                 id = 7,
                 requiresUserSession = false,
                 passthrough = setGameAttributesMaster 
               ]
               void setGameAttributes(SetGameAttributesRequest);

               [
                 id = 8,
                 requiresUserSession = false,
                 passthrough = setPlayerAttributesMaster 
               ]
               void setPlayerAttributes(SetPlayerAttributesRequest);
    
               [
                 id = 9,
                 errortype = Blaze::EntryCriteriaError,
                 allowGuestCall = true,
                 obfuscate_platform_info = true,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate) 
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER

                           }
               ]
               JoinGameResponse joinGame(JoinGameRequest);

               [
                 id = 10,
                 requiresUserSession = false,
                 obfuscate_platform_info = true,
                 description = "Create a game using the template specified in the server side config.",
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER,


                 // Template Errors:  (createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_TEMPLATE_NAME,
                     GAMEMANAGER_ERR_MISSING_TEMPLATE_ATTRIBUTE,
                     GAMEMANAGER_ERR_INVALID_TEMPLATE_ATTRIBUTE,

                     GAMEMANAGER_ERR_INPUT_SANITIZER_FAILURE,

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // ResetDedicatedServer Errors:  (resetGame, createTournamentGame, createGameTemplate)
                       GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                       GAMEMANAGER_ERR_JOIN_PLAYER_FAILED, 

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                 } 
               ]
               JoinGameResponse createGameTemplate(CreateGameTemplateRequest);
                               
               [
                 id = 11,
                 requiresUserSession = false,
                 allowGuestCall = true,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_PERMISSION_DENIED,
                           GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,GAMEMANAGER_ERR_FAILED_IN_GAME_DESTROY,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE} 
               ]
               void removePlayer(RemovePlayerRequest);
            
               [
                 id = 15,
                 description = "Finalize the game creation process, this will let game be avilable for joining and any followed up network connection establishment.",
                 passthrough = finalizeGameCreationMaster
               ]
               void finalizeGameCreation(UpdateGameSessionRequest);

               [
                 id = 16,
                 description = "Start a new matchmaking scenario.  You may only have one scenario active at a time.",
                 errortype = MatchmakingCriteriaError,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_MATCHMAKING_CRITERIA,
                       GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL,
                       GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA,
                       GAMEMANAGER_ERR_INVALID_GROUP_ID,
                       GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP,
                       GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND,
                       GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                       GAMEMANAGER_ERR_MATCHMAKING_EXCEEDED_MAX_REQUESTS,
                       GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                       GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                       GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                       GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                       GAMEMANAGER_ERR_ROLE_FULL, 
                       GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                       GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                       GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                       GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                       GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                       GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                       GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_NAME,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_VARIANT,
                       GAMEMANAGER_ERR_MISSING_SCENARIO_ATTRIBUTE,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_ATTRIBUTE,
                       GAMEMANAGER_ERR_MISSING_TEMPLATE_ATTRIBUTE,
                       GAMEMANAGER_ERR_INVALID_TEMPLATE_ATTRIBUTE,
                       GAMEMANAGER_ERR_INPUT_SANITIZER_FAILURE,
                       GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE,
                       GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                       GAMEMANAGER_ERR_MATCHMAKING_USER_GROUP_EXCEEDED_MAX_REQUESTS
                   } 
               ]
               StartMatchmakingScenarioResponse startMatchmakingScenario(StartMatchmakingScenarioRequest);


               [
                 id = 17,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_SCENARIO_ID,
                       GAMEMANAGER_ERR_NOT_SCENARIO_OWNER
                 },
                 description = "Cancel one of your existing matchmaking sessions."
               ]
               void cancelMatchmakingScenario(CancelMatchmakingScenarioRequest);

               [
                 id = 18,
                 passthrough = setPlayerCustomDataMaster 
               ]
               void setPlayerCustomData(SetPlayerCustomDataRequest);
            
               [
                 id = 19,
                 passthrough = replayGameMaster 
               ]
               void replayGame(ReplayGameRequest);

               [
                 id = 20,
                 passthrough = returnDedicatedServerToPoolMaster 
               ]
               void returnDedicatedServerToPool(ReturnDedicatedServerToPoolRequest);

               [
                 id = 21,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_INVALID_GAME_ID },
                 description = "Set the dedicated server attributes for a given set of games."
               ]
               void setDedicatedServerAttributes(SetDedicatedServerAttributesRequest);
               
               [
                 id = 22,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_PERMISSION_DENIED,GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,
                           GAMEMANAGER_ERR_INVALID_GROUP_ID,GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE} 
               ]
               void leaveGameByGroup(RemovePlayerRequest);
            

               [
                 id = 23,
                 passthrough = migrateGameMaster 
               ]
               void migrateGame(MigrateHostRequest);
               
               [
                 id = 24,
                 description = "update the game's host migration status.",
                 passthrough = updateGameHostMigrationStatusMaster 
               ]
               void updateGameHostMigrationStatus(UpdateGameHostMigrationStatusRequest);

               [
                 id = 25,
                 obfuscate_platform_info = true,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // ResetDedicatedServer Errors:  (resetGame, createTournamentGame, createGameTemplate)
                       GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                       GAMEMANAGER_ERR_JOIN_PLAYER_FAILED, 

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                   },
                 description = "reset and join a dedicated server that's available for reset." 
               ]
               JoinGameResponse resetDedicatedServer(CreateGameRequest);

               [
                 id = 26,
                 description = "update the game with new session info. Possibly due to host migration.",
                 passthrough = updateGameSessionMaster 
               ]
               void updateGameSession(UpdateGameSessionRequest);
            
               [
                 id = 27,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, 
                       GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED, GAMEMANAGER_ERR_INVALID_PLAYER_PASSEDIN, GAMEMANAGER_ERR_BANNED_LIST_MAX },
                 description = "Ban player from a game session. Bans the account from the game session.  Kicks player from game if already in." 
               ]
               void banPlayer(BanPlayerRequest);

               [
                 id = 28,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND },
                 description = "Allows the current player to override matchmaking and always attempt to match into the provided game.",
                 client_export = false 
               ]
               void matchmakingDedicatedServerOverride(MatchmakingDedicatedServerOverrideRequest);
            
               [
                 id = 29,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE},
                 description = "Update the connection status (uni-directional) between a client and another mesh endpoint (player or dedicated server host) in the game. Deprecated as of 15.1.1.3.0, only called by SDK versions 15.1.1.2.0 and older.", 
                 client_export = false,
                 generateProto = false   
               ]
               void updateMeshConnection(UpdateMeshConnectionRequest);

               [
                 id = 30,
                 description = "Join a list of players into a game",
                 errortype = Blaze::EntryCriteriaError,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER
                   } 
               ]
               JoinGameResponse joinGameByUserList(JoinGameByUserListRequest);

              [
                 id = 31,
                 requiresUserSession = false,
                 errors = { 
                       GAMEMANAGER_ERR_PLAYER_NOT_FOUND, 
                       GAMEMANAGER_ERR_INVALID_GAME_ID, 
                       GAMEMANAGER_ERR_PERMISSION_DENIED,
                       GAMEMANAGER_ERR_BANNED_PLAYER_NOT_FOUND},
                 description = "Remove a player from the game sessions banned list for game session admins." 
               ]
               void removePlayerFromBannedList(RemovePlayerFromBannedListRequest);

               [
                 id = 32,
                 requiresUserSession = false,
                 passthrough = clearBannedListMaster,
                 description = "Clear the game session banned list, removing all bans for game session admins." 
               ]
               void clearBannedList(BannedListRequest);

               [
                 id = 33,
                 requiresUserSession = false,
                 passthrough = getBannedListMaster,
                 description = "get a banned list of the game session." 
               ]
               BannedListResponse getBannedList(BannedListRequest);
               
               [
                 id = 34,
                 description = "Get the list of matchmaking server overrides that currently exist for all players.",
                 client_export = false 
               ]
               GetMatchmakingDedicatedServerOverrideResponse getMatchmakingDedicatedServerOverrides();
               [
                 id = 35,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID },
                 description = "Allows GOSCC to override matchmaking for all players and always attempt to match into the provided games first.",
                 client_export = false 
               ]
               void matchmakingFillServersOverride(MatchmakingFillServersOverrideList);
               [
                 id = 36,
                 description = "Get the list of matchmaking server fill overrides that currently exist.",
                 client_export = false 
               ]
               MatchmakingFillServersOverrideList getMatchmakingFillServersOverride();


               [
                 id = 38,
                 description = "Add a list of queued players to the game, if room is available.",
                 passthrough = addQueuedPlayerToGameMaster
               ]
               void addQueuedPlayerToGame(AddQueuedPlayerToGameRequest);

               [
                 id = 39,
                 requiresUserSession = false,
                 description = "Rename the game session name for game session admins.",
                 passthrough = updateGameNameMaster
               ]
               void updateGameName(UpdateGameNameRequest);

               [
                id = 40,
                requiresUserSession = false,
                description = "Dedicated server host is telling the blaze server that it is to done being the host of a virtual game.",
                passthrough = ejectHostMaster
               ]
               void ejectHost(EjectHostRequest);

               [
                 id = 41,
                 requiresUserSession = false,
                 passthrough = setGameModRegisterMaster,
                 description = "Sets the game mod register for the game. This replaces the entire game mod register, not the delta. Mod register is not updated on error." 
               ]
               void setGameModRegister(SetGameModRegisterRequest);
               
               [
                 id = 42,
                 passthrough = setGameEntryCriteriaMaster,
                 description = "Sets the game entry criteria used for users who will join the game. Criteria is not updated on error."
               ]
               void setGameEntryCriteria(SetGameEntryCriteriaRequest);
 
               [
                 id = 43,
                 description = "If game is locked for preferred joins, opts the specified player out.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND}
               ]
               void preferredJoinOptOut(PreferredJoinOptOutRequest);

               [
                 id = 44,
                 internal = true,
                 client_export = false,
                 errors = {}
               ]
               DestroyGamesResponse destroyGames(DestroyGamesRequest);

               [
                 id = 45,
                 requiresUserSession = false,
                 obfuscate_platform_info = true,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER,

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                    } 
               ]
               JoinGameResponse createOrJoinGame(CreateGameRequest);
               
               [
                 id = 46,
                 passthrough = requestPlatformHostMaster 
               ]
               void requestPlatformHost(MigrateHostRequest);

               [
                 id = 47,
                 description = "Request from an admin client to move an in-game reserved player to the queue. Fails if no queue exists.",
                 passthrough = demoteReservedPlayerToQueueMaster
               ]
               void demoteReservedPlayerToQueue(DemoteReservedPlayerToQueueRequest);

               [
                 id = 50,
                 requiresUserSession = false,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE

                 },
                 internal = true,
                 requires_authentication = false,
                 description = "Create a pseudo game that is only visible to pseudo matchmaking." 
               ]
               CreateGameResponse createPseudoGame(CreateGameRequest);

               [
                 id = 51,
                 ignoreShardingKey = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 internal = true,
                 errors = {}, 
                 description = "Create a set of pseudo games that are only visible to pseudo matchmaking. Spawns a cancellable fiber." 
               ]
               void createPseudoGames(CreatePseudoGamesRequest);

               [
                 id = 52,
                 ignoreShardingKey = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 internal = true,
                 errors = {}, 
                 description = "Cancels the current fiber creating pseudo games, if one exists." 
               ]
               void cancelCreatePseudoGames();

               [
                 id = 53,
                 ignoreShardingKey = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 internal = true,
                 errors = {}, 
                 description = "Sends a request to all masters to destroy all loaded pseudo games." 
               ]
               void destroyAllPseudoGames();

               [
                 id = 54,
                 internal = true,
                 client_export = false,
                 requiresUserSession = false,
                 requires_authentication = false,
                 passthrough = captureGameManagerEnvironmentMaster 
               ]
               GameCaptureResponse captureGameManagerEnvironment();

               [
                 id = 55,
                 internal = true,
                 client_export = false,
                 requiresUserSession = false,
                 requires_authentication = false,
                 ignoreShardingKey = true,
                 passthrough = isGameCaptureDoneMaster 
               ]
               IsGameCaptureDoneResponse isGameCaptureDone(GameCaptureResponse);

               [
                 id = 56,
                 internal = true,
                 client_export = false,
                 requiresUserSession = false,
                 requires_authentication = false,
                 ignoreShardingKey = true,
                 passthrough = getRedisDumpLocationsMaster 
               ]
               RedisDumpLocationsResponse getRedisDumpLocations();

               [
                 id = 65,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE},
                 description = "Update the connection status (uni-directional) to connected between a client and another mesh endpoint (player or dedicated server host) in the game." 
               ]
               void meshEndpointsConnected(MeshEndpointsConnectedRequest);

               [
                 id = 66,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE},
                 description = "Update the connection status (uni-directional) to disconnected between a client and another mesh endpoint (player or dedicated server host) in the game." 
               ]
               void meshEndpointsDisconnected(MeshEndpointsDisconnectedRequest);

               
               [
                 id = 67,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE},
                 description = "Update the connection status (uni-directional) to disconnected between a client and another mesh endpoint (player or dedicated server host) in the game." 
               ]
               void meshEndpointsConnectionLost(MeshEndpointsConnectionLostRequest);

               [
                 id = 68,
                 errors = { },
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 generateProto = false,
                 description = "Invoke the CCS to allocate the connection between console pair(s) in the request."
               ]
               void requestConnectivityViaCCS(CCSAllocateRequest);

               [
                 id = 69,
                 errors = { },
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 generateProto = false,
                 description = "Invoke the CCS to free the connection between console pair(s) in the request."
               ]
               void freeConnectivityViaCCS(CCSFreeRequest);

               [
                 id = 70,
                 errors = { },
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 generateProto = false,
                 description = "Invoke the CCS to extend the lease for the connection set in the request."
               ]
               void requestLeaseExtensionViaCCS(CCSLeaseExtensionRequest);
               

            /////////////////////////////////////////////////////////////////
            //  Tournament RPCs
            /////////////////////////////////////////////////////////////////

               [
                 id = 90,
                 requiresUserSession = false,
                 description = "Create a tournament game.  Calls createGameTemplate internally.",
                 errortype = CreateTournamentGameErrorResponse,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER,


                 // Template Errors:  (createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_TEMPLATE_NAME,
                     GAMEMANAGER_ERR_MISSING_TEMPLATE_ATTRIBUTE,
                     GAMEMANAGER_ERR_INVALID_TEMPLATE_ATTRIBUTE,

                     GAMEMANAGER_ERR_INPUT_SANITIZER_FAILURE, 

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // ResetDedicatedServer Errors:  (resetGame, createTournamentGame, createGameTemplate)
                       GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                       GAMEMANAGER_ERR_JOIN_PLAYER_FAILED, 

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                 } 
               ]
               CreateTournamentGameResponse createTournamentGame(CreateGameTemplateRequest);

               [
                 id = 91,
                 requiresUserSession = false,
                 description = "Cancel (destroy) a given tournament game.  Calls destroyGame internally.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED} 
               ]
               DestroyGameResponse cancelTournamentGame(CancelTournamentGameRequest);

               [
                 id = 92,
                 requiresUserSession = false,
                 errors = { GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE },
                 description = "Calls GetGameDataFromIdRequest internally."
               ]
               GetTournamentGameStatusResult getTournamentGameStatus(GetTournamentGameStatusRequest);

            /////////////////////////////////////////////////////////////////
            //  Game Browser RPCs
            /////////////////////////////////////////////////////////////////

            // Note: there's no master component for GameBrowser; it only exists on the slave (thus no master RPCs)
               [
                 id = 98,
                 requires_authentication = false,
                 description = "Get game browser template attributes configuration data from the server."
               ]
               GetGameBrowserScenariosAttributesResponse getGameBrowserAttributesConfig();

               [
                 id = 99,
                 errors = {
                        GAMEBROWSER_ERR_INVALID_CRITERIA,
                        GAMEBROWSER_ERR_INVALID_CAPACITY,
                        GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS,
                        GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED,
                        GAMEMANAGER_ERR_INVALID_SCENARIO_NAME,
                        GAMEMANAGER_ERR_MISSING_SCENARIO_ATTRIBUTE,
                        GAMEMANAGER_ERR_INVALID_SCENARIO_ATTRIBUTE,
                        GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME
                 },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of games matching the supplied criteria."
               ]
               GetGameListResponse getGameListByScenario(GetGameListScenarioRequest);

               [
                 id = 100,
                 errors = { GAMEBROWSER_ERR_INVALID_CRITERIA, GAMEBROWSER_ERR_INVALID_CAPACITY, GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS, GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of games matching the supplied criteria.  Games are returned via async NotifyGameListUpdate notifications (the list is static, and doesn't update after its initial download."
               ]
               GetGameListResponse getGameListSnapshot(GetGameListRequest);
            
               [
                 id = 101,
                 errors = { GAMEBROWSER_ERR_INVALID_CRITERIA, GAMEBROWSER_ERR_INVALID_CAPACITY, GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS, GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of games matching the supplied criteria.  Games are returned via async NotifyGameListUpdate notifications, and the list continues to update itself until destroyed."
               ]
               GetGameListResponse getGameListSubscription(GetGameListRequest);

               [
                 id = 102,
                 errors = { GAMEBROWSER_ERR_INVALID_LIST_ID, GAMEBROWSER_ERR_NOT_LIST_OWNER },
                 description = "Cancel your subscription to a game list; you'll no longer receive async updates about the games on this list.",
                 generate_command_class = true
               ]
               void destroyGameList(DestroyGameListRequest);

               [
                 id = 103,
                 requiresUserSession = false,
                 obfuscate_platform_info = true,
                 generateProto = false,
                 errors = { GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE },
                 description = "Download the full game data for a collection of games."
               ]
               GetFullGameDataResponse getFullGameData(GetFullGameDataRequest);
            
               [
                 id = 104,
                 errors = { },
                 description = "Get matchmaking configuration data from the server."
               ]
               GetMatchmakingConfigResponse getMatchmakingConfig();
            
               [
                 id = 105,
                 requiresUserSession = false,
                 obfuscate_platform_info = true,
                 errors = { GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE },
                 description = "Get a list of game data given a list of game Ids."
               ]
               GameBrowserDataList getGameDataFromId(GetGameDataFromIdRequest);
            
               [
                 id = 106,
                 passthrough = addAdminPlayerMaster 
               ]
               void addAdminPlayer(UpdateAdminListRequest);
            
               [
                 id = 107,
                 passthrough = removeAdminPlayerMaster 
               ]
               void removeAdminPlayer(UpdateAdminListRequest);
            
               [
                 id = 108,
                 requires_authentication = false,
                 errors = { },
                 description = "Get scenario attributes configuration data from the server."
               ]
               GetScenariosAttributesResponse getScenarioAttributesConfig();
            
               [
                 id = 109,
                 passthrough = changeGameTeamIdMaster 
               ]
               void changeGameTeamId(ChangeTeamIdRequest);

               [
                 id = 110,
                 passthrough = migrateAdminPlayerMaster 
               ]
               void migrateAdminPlayer(UpdateAdminListRequest);

               [
                 id = 111,
                 errors = { 
                    GAMEBROWSER_ERR_INVALID_CRITERIA, 
                    GAMEBROWSER_ERR_INVALID_CAPACITY, 
                    GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME,
                    GAMEBROWSER_ERR_CANNOT_GET_USERSET,
                    GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS,
                    GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED
                    },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of games that contains a member of the User Set. Games are returned via async NotifyGameListUpdate notifications, and the list continues to update itself until destroyed."
               ]               
               GetGameListResponse getUserSetGameListSubscription(GetUserSetGameListSubscriptionRequest);
               
               [
                 id = 112,
                 errortype = SwapPlayersErrorInfo,
                 passthrough = swapPlayersMaster 
               ]
               void swapPlayers(SwapPlayersRequest);

               [
                 id = 113,
                 requiresUserSession = true,
                 obfuscate_platform_info = true,
                 errors = { GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE, GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED, GAMEBROWSER_ERR_CROSS_PLATFORM_OPTOUT, GAMEBROWSER_ERR_DISALLOWED_PLATFORM },
                 description = "Get a list of game data for games containing the specified user."                 
               ]
               GameBrowserDataList getGameDataByUser(GetGameDataByUserRequest);

               [
                 id = 114,
                 requires_authentication = false,
                 errors = { },
                 description = "Get create game template attributes configuration data from the server."
               ]
               GetTemplatesAttributesResponse getCreateGameTemplateAttributesConfig();

               [
                 id = 152,
                 obfuscate_platform_info = true,
                 errors = { GAMEBROWSER_ERR_INVALID_CRITERIA, GAMEBROWSER_ERR_INVALID_CAPACITY, GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE, GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS, GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of games matching the supplied criteria.  Games are returned synchronously.",
                 generate_command_class = true 
               ]
               GetGameListSyncResponse getGameListSnapshotSync(GetGameListRequest);          

               [
                 id = 153,
                 internal = true,
                 client_export = false,
                 ignoreShardingKey = true,
                 errors = { GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, GAMEBROWSER_ERR_INVALID_CRITERIA, GAMEBROWSER_ERR_INVALID_CAPACITY, GAMEBROWSER_ERR_INVALID_LIST_CONFIG_NAME, GAMEBROWSER_ERR_EXCEED_MAX_SYNC_SIZE, GAMEBROWSER_ERR_EXCEEDED_MAX_REQUESTS, GAMEBROWSER_ERR_SEARCH_ERR_OVERLOADED, GAMEMANAGER_ERR_INVALID_TEMPLATE_NAME, GAMEMANAGER_ERR_INVALID_SCENARIO_NAME },
                 errortype = MatchmakingCriteriaError,
                 description = "Get a list of dedicated servers matching the supplied criteria. Basically just calls getGameListSnapshotSync with some additional params.",
                 generate_command_class = true,
                 requires_authentication = false,
                 generateProto = false
               ]
               FindDedicatedServersResponse findDedicatedServers(FindDedicatedServersRequest);

               [
                 id = 171,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND},
                 description = "Report peer-to-peer connection telemetry."
               ]
               void reportTelemetry(TelemetryReportRequest);

               [
                 id = 172,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND, GAMEMANAGER_ERR_USER_ALREADY_AUDITED},
                 description = "Enables connection metric auditing for users.",
                 client_export = false,
                 internal = true
               ]
               void addUsersToConnectionMetricAudit(UserAuditInfoRequest);

               [
                 id = 173,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND},
                 description = "Disables connection metric auditing for users.",
                 client_export = false,
                 internal = true
               ]
               void removeUsersFromConnectionMetricAudit(UserAuditInfoRequest);

               [
                 id = 174,
                 description = "Fetches the current list of audited users.",
                 client_export = false,
                 internal = true
               ]
               FetchAuditedUsersResponse fetchAuditedUsers(FetchAuditedUsersRequest);

               [
                 id = 175,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND},
                 description = "Fetches audit data for the requested user.",
                 client_export = false,
                 internal = true
               ]
               FetchAuditedUserDataResponse fetchAuditedUserData(FetchAuditedUserDataRequest);

               [
                 id = 176,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND, GAMEMANAGER_ERR_USER_CURRENTLY_AUDITED},
                 description = "Deletes metric data for the requested user.",
                 client_export = false,
                 internal = true
               ]
               void deleteUserAuditMetricData(DeleteUserAuditMetricDataRequest);

               [
                 id = 177,
                 description = "Request to Blaze to update user's game presence.",
                 errortype = UpdateExternalSessionPresenceForUserErrorInfo,
                 errors = {GAMEMANAGER_ERR_EXTERNAL_SERVICE_BUSY, GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR}
               ]
               UpdateExternalSessionPresenceForUserResponse updatePrimaryExternalSessionForUser(UpdateExternalSessionPresenceForUserRequest);

               [
                 id = 178,
                 description = "Get scenario details",
                 ignoreShardingKey = true,
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 generateProto = false, 
                 http = {
                    resource = "getScenarioDetails",
                    method = "GET",
                    encodeEnumsAsStrings = true
                 }
               ]
               GetScenarioDetails getScenarioDetails();
               
               [
                 id = 200,
                 description = "Start a new pseudo matchmaking scenario.",
                 errortype = MatchmakingCriteriaError,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_MATCHMAKING_CRITERIA,
                       GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL,
                       GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA,
                       GAMEMANAGER_ERR_INVALID_GROUP_ID,
                       GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP,
                       GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND,
                       GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                       GAMEMANAGER_ERR_MATCHMAKING_EXCEEDED_MAX_REQUESTS,
                       GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                       GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                       GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                       GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                       GAMEMANAGER_ERR_ROLE_FULL, 
                       GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                       GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                       GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                       GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_NAME,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_VARIANT,
                       GAMEMANAGER_ERR_MISSING_SCENARIO_ATTRIBUTE,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_ATTRIBUTE,
                       GAMEMANAGER_ERR_MISSING_TEMPLATE_ATTRIBUTE,
                       GAMEMANAGER_ERR_INVALID_TEMPLATE_ATTRIBUTE,
                       GAMEMANAGER_ERR_INPUT_SANITIZER_FAILURE,
                       GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR
                   },
                 client_export = false,
                 requires_authentication = true,
                 allowGuestCall = false
                ]
                StartMatchmakingScenarioResponse startPseudoMatchmakingScenario(StartPseudoMatchmakingScenarioRequest);

               [
                 id = 201,
                 description = "Update the game's external session image. For PS4.",
                 errortype = ExternalSessionErrorInfo,
                 errors = {
                        GAMEMANAGER_ERR_INVALID_GAME_ID, 
                        GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                        GAMEMANAGER_ERR_PERMISSION_DENIED, 
                        GAMEMANAGER_ERR_EXTERNAL_SESSION_IMAGE_INVALID, 
                        GAMEMANAGER_ERR_EXTERNAL_SERVICE_BUSY, 
                        GAMEMANAGER_ERR_PLAYER_NOT_FOUND, 
                        GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR
                    },
                 requires_authentication = true
               ]
               void updateExternalSessionImage(UpdateExternalSessionImageRequest);

               [
                 id = 202,
                 passthrough = updateExternalSessionStatusMaster
               ]
               void updateExternalSessionStatus(UpdateExternalSessionStatusRequest);

               [
                 id = 203,
                 internal = true,
                 client_export = false,
                 ignoreShardingKey = true,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_SCENARIO_NAME
                   },
                 errortype = MatchmakingCriteriaError,
                 description = "Takes a user, scenario name, and variant name.  Updates the Variant used by that player for that Scenario.",
                 requires_authentication = false
               ]
               void setUserScenarioVariant(SetUserScenarioVariantRequest);

               [
                 id = 204,
                 internal = true,
                 client_export = false,
                 ignoreShardingKey = true,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_SCENARIO_NAME,
                       GAMEMANAGER_ERR_INVALID_SCENARIO_VARIANT
                   },
                 errortype = MatchmakingCriteriaError,
                 description = "Gets the variants map, along with userList for each variant.",
                 requires_authentication = false
               ]
               GetScenarioVariantsResponse getScenarioVariants(GetScenarioVariantsRequest);

               [
                 id = 205,
                 internal = true,
                 client_export = false,
                 ignoreShardingKey = true,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_SCENARIO_NAME
                   },
                 errortype = MatchmakingCriteriaError,
                 description = "Take a user, scenario name. Clear the userVariant for that scenario. If no user specified in the request, clear all users for the scenario.",
                 requires_authentication = false
               ]
               void clearUserScenarioVariant(ClearUserScenarioVariantRequest);

              [
                 id = 206,
                 requires_authentication = false,
                 errors = { },
                 description = "Get create game template attributes configuration data from the server."
               ]
               GetTemplatesAndAttributesResponse getTemplatesAndAttributes();

              [
                 id = 207,
                 requires_authentication = false,
                 errors = { },
                 description = "Get scenario attributes configuration data from the server."
               ]
               GetScenariosAndAttributesResponse getScenariosAndAttributes();

        } // slave methods
        
        // slave -> client notifications
        notifications
        { 
            [
              id = 3,
              obfuscate_platform_info = true,
              generateProto = false, 
              description = "Sent when a matchmaking scenario ends with only debugging information provided.",
              details = "If a matchmaking scenario finalizes as debugged, no game was joined or created."
            ]
            NotifyMatchmakingScenarioPseudoSuccess (Blaze::GameManager::NotifyMatchmakingScenarioPseudoSuccess);

            [
              id = 10,
              description = "Sent when a matchmaking session/scenario ends (either successfully or due to cancel/timeout/error).",
              details = "Note: if startMatchmaking failed, no session was created, so there's no finished notification." 
            ]
            NotifyMatchmakingFailed (Blaze::GameManager::NotifyMatchmakingFinished);
            
            [
              id = 11,
              description = "Sent when a matchmaking session/scenario has completed connection validation (either success or failure).",
              details = "This notification tells the client API to dispatch notifications about game setup."
            ]
            NotifyMatchmakingSessionConnectionValidated (Blaze::GameManager::NotifyMatchmakingSessionConnectionValidated);
            
            [
              id = 12,
              description = "Sent when a matchmaking session/scenario status changed or time due( when session/scenario started/rule decay/timeout/period set in config.)",
              details = "Player who start matchmaking session/scenario should listen to the notification and update it's local cached status data." 
            ]
            NotifyMatchmakingAsyncStatus (Blaze::GameManager::NotifyMatchmakingAsyncStatus);

            [
              id = 13,
              obfuscate_platform_info = true,
              generateProto = false,
              description = "Sent when a matchmaking session/scenario ends with only debugging information provided.",
              details = "If a matchmaking session/scenario finalizes as debugged, no game was joined or created."
            ]
            NotifyMatchmakingPseudoSuccess (Blaze::GameManager::NotifyMatchmakingPseudoSuccess);
            
            [
              id = 14,
              description = "Sent to the members of a matchmaking session/scenario who were pulled in by another user.",
              details = "Note: if startMatchmaking failed, no session/scenario was created, so there's no notification." 
            ]
            NotifyRemoteMatchmakingStarted (Blaze::GameManager::NotifyRemoteMatchmakingStarted);
            
            [
              id = 15,
              description = "Sent to members of a matchmaking session/scenario (other than the session/scenario owner when a matchmaking session ends (either successfully or due to cancel/timeout/error).",
              details = "Note: if startMatchmaking failed, no session/scenario was created, so there's no ended notification." 
            ]
            NotifyRemoteMatchmakingEnded (Blaze::GameManager::NotifyRemoteMatchmakingEnded);
            
            [
              id = 16,
              description = "Sent after game is removed.",
              details = "" 
            ]
            NotifyGameRemoved (Blaze::GameManager::NotifyGameRemoved);
                        
            [
              id = 20,
              obfuscate_platform_info = true,
              generateProto = false, 
              description = "Sent to a player who's joined a game; contains the game's data and roster.",
              details = "At this point, the joining player is a member of the game (in the connecting state)." 
            ]
            NotifyGameSetup(Blaze::GameManager::NotifyGameSetup);
        
            [
              id = 21,
              obfuscate_platform_info = true,
              description = "Sent to existing game members announcing a new external player joining the game's roster.",
              details = "At this point, the joining player is a game member (in the connecting state)" 
            ]
            NotifyPlayerJoining(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 22,
              obfuscate_platform_info = true,
              generateProto = false, 
              description = "Sent to player who is already in the game, but needs to initiate local connections since they used to be RESERVED or QUEUED.",
              details = "At this point, the player is going to become an active member in the game."
            ]
            NotifyJoiningPlayerInitiateConnections(Blaze::GameManager::NotifyGameSetup);
            
            [
              id = 23,
              obfuscate_platform_info = true,
              description = "Sent to existing game members announcing a new external player joining the game's queue.",
              details = "The joining player does not attempt to initiate network connections." 
            ]
            NotifyPlayerJoiningQueue(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 24,
              obfuscate_platform_info = true,
              description = "Sent to existing members announcing an external player is being promoted from the queue into the roster.",
              details = "Clients will only try to initiate network connections to this player if they are not still reserved."
            ]
            NotifyPlayerPromotedFromQueue(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 25,
              obfuscate_platform_info = true,
              description = "Sent to existing members announcing that an external player is claiming a reservation either while in queue or in roster.",
              details = "Clients will only try to initiate network connections to this player if they are claiming the reservation in the game roster."
            ]
            NotifyPlayerClaimingReservation(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 26,
              obfuscate_platform_info = true,
              description = "Sent to existing members announcing a reserved player is being demoted from the game into the queue.",
              details = "Clients will only try to initiate network connections to this player if they are not still reserved."
            ]
            NotifyPlayerDemotedToQueue(Blaze::GameManager::NotifyPlayerJoining);

            [
              id = 30,
              description = "Sent once a joining player has fully joined the game.",
              details = "Player gets into active state." 
            ]
            NotifyPlayerJoinCompleted(Blaze::GameManager::NotifyPlayerJoinCompleted);
                
            
            [
              id = 40,
              description = "Sent after a leave player request is succesfully finished.",
              details = "All the players in the game gets this notification." 
            ]
            NotifyPlayerRemoved(Blaze::GameManager::NotifyPlayerRemoved);
            
            [
              id = 41,
              description = "Sent to a user that fails to join a game when that join was initiated by another user.",
              details = "Only the player that failed to join the game gets this notification." 
            ]
            NotifyRemoteJoinFailed(Blaze::GameManager::NotifyRemoteJoinFailed);

            [
              id = 60,
              description = "After the host migration has been successfully finished for topology or platform host.",
              details = "" 
            ]
            NotifyHostMigrationFinished(Blaze::GameManager::NotifyHostMigrationFinished);
            
            [
              id = 70,
              description = "Sent after host migration has started for topology or platform host.",
              details = "" 
            ]
            NotifyHostMigrationStart(Blaze::GameManager::NotifyHostMigrationStart);
            
            [
              id = 71,
              description = "Sent after the first user joins a dedicated PC server.",
              details = "" 
            ]
            NotifyPlatformHostInitialized(Blaze::GameManager::NotifyPlatformHostInitialized);

            [
              id = 80,
              description = "Sent after the game attribute has been changed.",
              details = "" 
            ]
            NotifyGameAttribChange(Blaze::GameManager::NotifyGameAttribChange);

            [
              id = 81,
              description = "Sent after the dedicated server attribute has been changed.",
              details = "" 
            ]
            NotifyDedicatedServerAttribChange(Blaze::GameManager::NotifyDedicatedServerAttribChange);

            [
              id = 90,
              description = "Sent after player attribute has been changed",
              details = "" 
            ]
            NotifyPlayerAttribChange(Blaze::GameManager::NotifyPlayerAttribChange);
                            
            [
              id = 95,
              description = "Sent after player's custom data has been changed",
              details = "" 
            ]
            NotifyPlayerCustomDataChange(Blaze::GameManager::NotifyPlayerCustomDataChange);
                            
            [
              id = 100,
              description = "Sent after host migration has started.",
              details = "" 
            ]
            NotifyGameStateChange(Blaze::GameManager::NotifyGameStateChange);

            [
              id = 110,
              description = "Sent after the game settings has been changed.",
              details = "This notification gives the new game settings for the game. client will have to revalidate the replicategamedata with the gamesettings" 
            ]
            NotifyGameSettingsChange(Blaze::GameManager::NotifyGameSettingsChange);

            [
              id = 111,
              description = "Sent after the game capacity is changed.",
              details = "This notification gives the new game capacity for the game. client will have to revalidate the replicategamedata with the capacity." 
            ]
            NotifyGameCapacityChange(Blaze::GameManager::NotifyGameCapacityChange);
            
            [
              id = 112,
              generateProto = false, 
              description = "Sent when a dedicated server is reset (explicitly, or via the matchmaker)." 
            ]
            NotifyGameReset(Blaze::GameManager::NotifyGameReset);

            [
              id = 113,
              description = "Sent when the game reporting id of a game session has changed." 
            ]
            NotifyGameReportingIdChange(Blaze::GameManager::NotifyGameReportingIdChange);

            [
              id = 114,
              description = "Sent when a game's presence is enabled or disabled." 
            ]
            NotifyGamePresenceChanged(GameSessionUpdatedNotification);
            
            [
              id = 115,
              description = "Sent when 1st party session has been updated (for example, because of host migration)." 
            ]
            NotifyGameSessionUpdated(GameSessionUpdatedNotification);

            [
              id = 116,
              description = "Sent after a players connection state changed" 
            ]
            NotifyGamePlayerStateChange(Blaze::GameManager::NotifyGamePlayerStateChange);

            [
              id = 117,
              description = "Sent after a players team, slot, or role id changed" 
            ]
            NotifyGamePlayerTeamRoleSlotChange(Blaze::GameManager::NotifyGamePlayerTeamRoleSlotChange);

            [
              id = 118,
              description = "Sent after a game has a TeamId change" 
            ]
            NotifyGameTeamIdChange(Blaze::GameManager::NotifyGameTeamIdChange);
            
            [
              id = 119,
              description = "Sent when the blaze server recommends attempting to add a queued player to the game."
            ]
            NotifyProcessQueue(Blaze::GameManager::NotifyProcessQueue);
            
            [
              id = 120,
              description = "Sent when the presence mode has changed, will take effect the next time the game has a new presence mode created."
            ]
            NotifyPresenceModeChanged(Blaze::GameManager::NotifyPresenceModeChanged);
            
            [
              id = 121,
              description = "Sent when the queue changes, either when users enter the queue, leave the queue or the queue is reordered."
            ]
            NotifyQueueChanged(Blaze::GameManager::NotifyQueueChanged);
            
            [
                id = 123,
                description = "Sent when game mod register gets updated. Game server may take action to remove clients with non-matching game mod registers from game after this notification."
            ]
            NotifyGameModRegisterChanged(Blaze::GameManager::NotifyGameModRegisterChanged);

            [
                id = 124,
                description = "Sent when game entry criteria gets updated."
            ]
            NotifyGameEntryCriteriaChanged(Blaze::GameManager::NotifyGameEntryCriteriaChanged);

            [
              id = 125,
              obfuscate_platform_info = true,
              description = "Sent after gamemanager has added a matchmaking session's reserved external players to the matched game.)",
              details = "Sends the list of players from the original matchmaking request's reserved external players list, who were reserved into the game. This notification is received after all players in the matchmup have issued their join to the external session."
            ]
            NotifyMatchmakingReservedExternalPlayers(Blaze::GameManager::NotifyMatchmakingReservedExternalPlayers);

            [
                id = 135,
                description = "Sent after hosted connectivity between two end points is established."
            ]
            NotifyHostedConnectivityAvailable(Blaze::GameManager::NotifyHostedConnectivityAvailable);
            
            
            /////////////////////////////////////////////////////////////////
            //  Game Browser Notifications
            /////////////////////////////////////////////////////////////////
    
            [
              id = 201,
              obfuscate_platform_info = true,
              description = "GameBrowser Lists are initiallly populated with async NotifyGameListUpdate notifications.  Subscription lists are updated using these notifications as well." 
            ]
            NotifyGameListUpdate(Blaze::GameManager::NotifyGameListUpdate);
            
            
            /////////////////////////////////////////////////////////////////
            //  Game admin list Notifications
            /////////////////////////////////////////////////////////////////
                
            [
              id = 202,
              description = "Game admin Lists are initiallly populated with create game notifications.  Subscription lists are updated using these notifications as well." 
            ]
            NotifyAdminListChange(Blaze::GameManager::NotifyAdminListChange);
            
            [
              id = 230,
              description = "Sent after the game name has been changed.",
              details = "" 
            ]
            NotifyGameNameChange(Blaze::GameManager::NotifyGameNameChange);

        } // slave -> client notifications

        // slave -> server notifications
        notifications
        { 
            // Scenario userVariantsMap notifications
            [
                id = 300,
                client_export = false
            ]
            UserScenarioVariantUpdate(SetUserScenarioVariantRequest);

            [
                id = 301,
                client_export = false
            ]
            ClearUserScenarioVariant(ClearUserScenarioVariantRequest);

        } // slave -> server notifications

    } // game manager slave
    
    [isSharded=true, shardingKey="gameId", useSlivers=true, setCurrentUserSession=false, generateProto = true] // set generateProto to true for exporting events
    master
    {
        
        methods
        {
               [
                 id = 1,
                 blocking = true,
                 requiresUserSession = false,
                 errortype = CreateGameMasterErrorInfo,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // Create Game Errors: (createGame, joinOrCreateGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                     GAMEMANAGER_ERR_INVALID_GAME_SETTINGS, 
                     GAMEMANAGER_ERR_TOPOLOGY_NOT_SUPPORTED,
                     GAMEMANAGER_ERR_EXTERNALSESSION_INVALID_SANDBOX_ID,

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                        },
                 ignoreShardingKey = true
               ]
               CreateGameMasterResponse createGameMaster(CreateGameMasterRequest);

               [
                 id = 2,
                 requiresUserSession = false,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED} 
               ]
               DestroyGameResponse destroyGameMaster(DestroyGameRequest); 

               [
                 id = 4,
                 requiresUserSession = false,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED} 
               ]
               void advanceGameStateMaster(AdvanceGameStateRequest);

               [
                 id = 5,
                 requiresUserSession = false,
                 errortype = SwapPlayersErrorInfo,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL,
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, GAMEMANAGER_ERR_PERMISSION_DENIED,
                            GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE, GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR,
                            GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,  GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, GAMEMANAGER_ERR_TEAM_FULL, 
                            GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_ROLE_FULL, GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID, GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE } 
               ]
               void setPlayerCapacityMaster(SetPlayerCapacityRequest);
               
               [
                 id = 6,
                 requiresUserSession = false,
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION } 
               ]
               void setPresenceModeMaster(SetPresenceModeRequest);
              
               [
                 id = 7,
                 requiresUserSession = false,
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION } 
               ]
               void setGameAttributesMaster(SetGameAttributesRequest);

               [
                 id = 8,
                 requiresUserSession = false,
                 errors = {GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PERMISSION_DENIED } 
               ]
               void setPlayerAttributesMaster(SetPlayerAttributesRequest);
        
               [
                 id = 9,
                 errortype = Blaze::EntryCriteriaError,
                 allowGuestCall = true,
                 errors = {                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER
                     },
                 shardingKey = "joinRequest.gameId"
               ]
               JoinGameMasterResponse joinGameMaster(JoinGameMasterRequest);

               [
                 id = 10,
                 requiresUserSession = false,
                 ignoreShardingKey = true,
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_INVALID_GAME_ID } 
               ]
               void setDedicatedServerAttributesMaster(SetDedicatedServerAttributesRequest);

               [
                 id = 11,
                 requiresUserSession = false,
                 allowGuestCall = true,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_PERMISSION_DENIED,
                           GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,GAMEMANAGER_ERR_FAILED_IN_GAME_DESTROY,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE} 
               ]
               RemovePlayerMasterResponse removePlayerMaster(RemovePlayerMasterRequest);
            
               [
                 id = 15,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_GAME_ID,
                       GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION
                   },
                 description = "Finalize the game creation process, this will let game be avilable for joining and any followed up network connection establishment." 
               ]
               void finalizeGameCreationMaster(UpdateGameSessionRequest);


               [
                 id = 16,
                 requiresUserSession = false,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, GAMEMANAGER_ERR_PERMISSION_DENIED,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE
                   },
                 description = "Updates the game settings for the game.  This replaces the entire game settings, not the delta, on error no settings are updated." 
               ]
               void setGameSettingsMaster(SetGameSettingsRequest);

               [
                 id = 18,
                 errors = {GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PERMISSION_DENIED } 
               ]
               void setPlayerCustomDataMaster(SetPlayerCustomDataRequest);
            
               [
                 id = 19,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION, GAMEMANAGER_ERR_PERMISSION_DENIED} 
               ]
               void replayGameMaster(ReplayGameRequest);

               [
                 id = 20,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_DEDICATED_SERVER_ONLY_ACTION, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED } 
               ]
               void returnDedicatedServerToPoolMaster(ReturnDedicatedServerToPoolRequest);
            
               [
                 id = 21,
                 errortype = Blaze::EntryCriteriaError,
                 errors = {                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // JoinGame Errors:  (joinGame, joinOrCreateGame, joinGameByUserList, createTournamentGame, createGameTemplate)  
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_SLOT_OCCUPIED,
                   GAMEMANAGER_ERR_QUEUE_FULL, 
                   GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                   GAMEMANAGER_ERR_ALREADY_GAME_MEMBER, 
                   GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                   GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION, 
                   GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN, 
                   GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                   GAMEMANAGER_ERR_PLAYER_BANNED, 
                   GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED, 
                   GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS, 
                   GAMEMANAGER_ERR_GAME_IN_PROGRESS, 
                   GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                   GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                   GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION, 
                   GAMEMANAGER_ERR_GAME_BUSY,
                   GAMEMANAGER_ERR_USER_NOT_FOUND,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                   GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                   GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                   GAMEMANAGER_ERR_MISSING_PRIMARY_LOCAL_PLAYER
                   },
                 shardingKey="joinRequest.gameId"       
               ]
               JoinGameMasterResponse joinGameByGroupMaster(JoinGameByGroupMasterRequest);
            
               [
                 id = 22,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PLAYER_NOT_FOUND,GAMEMANAGER_ERR_PERMISSION_DENIED,GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,
                           GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE},
                 requiresUserSession = false //for MM jobs on slave that use this rpc for cleaning up games
               ]
               LeaveGameByGroupMasterResponse leaveGameByGroupMaster(LeaveGameByGroupMasterRequest);

               [
                 id = 23,
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_MIGRATION_NOT_SUPPORTED, GAMEMANAGER_ERR_INVALID_NEWHOST, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND} 
               ]
               void migrateGameMaster(MigrateHostRequest);

               [
                 id = 24,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID},
                 description = "Update game host migration status." 
               ]
                void updateGameHostMigrationStatusMaster(UpdateGameHostMigrationStatusRequest);

               [
                 id = 25,
                 blocking = true,
                 errors = {
                 // Common GameEntry Errors:  (createGame, joinGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate
                     GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                     GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                     GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                     GAMEMANAGER_ERR_TEAM_FULL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                     GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                     GAMEMANAGER_ERR_ROLE_FULL, 
                     GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                     GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_ERROR,
                     GAMEMANAGER_ERR_INVALID_GROUP_ID, 
                     GAMEMANAGER_ERR_PLAYER_NOT_IN_GROUP, 
                     GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                     GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK, 

                 // ResetDedicatedServer Errors:  (resetGame, createTournamentGame, createGameTemplate)
                       GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                       GAMEMANAGER_ERR_JOIN_PLAYER_FAILED, 

                 // Common Create Game Errors:   (createGame, joinOrCreateGame, resetGame, createTournamentGame, createGameTemplate)
                     GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                     GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE,
                     GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                     GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                     GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS, 
                     GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                     GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                     GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                     GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                     GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE,
                     GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                     GAMEMANAGER_ERR_SESSION_TEMPLATE_NOT_SUPPORTED, 
                     GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING,
                     GAMEMANAGER_ERR_EXTERNAL_SESSION_CUSTOM_DATA_TOO_LARGE
                        },
                 description = "reset and join a dedicated server that's available for reset.",
                 shardingKey = "GameIdToReset",
                 ignoreShardingKey = false
               ]
               JoinGameMasterResponse resetDedicatedServerMaster(CreateGameMasterRequest);

               [
                 id = 26,
                 errors = {
                       GAMEMANAGER_ERR_INVALID_GAME_ID
                   },
                 description = "Update the ps4 game session id " 
               ]
               void updateGameSessionMaster(UpdateGameSessionRequest);
          
               [
                 id = 29,
                 description = "Slave to master rpc only, used by slave censusdata to retrieve a current census from this instance.",
                 requires_authentication = false 
               ]
               GameManagerCensusData getCensusData();
            
               [
                 id = 30,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_ALREADY_ADMIN},
                 description = "Slave to master rpc, used by an admin in a game to add other admin players in the same game." 
               ]
               void addAdminPlayerMaster(UpdateAdminListRequest);
            
               [
                 id = 31,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_NOT_IN_ADMIN_LIST, GAMEMANAGER_ERR_DEDICATED_SERVER_HOST},
                 description = "Slave to master rpc, used by an admin in a game to remove other admin players in the same game." 
               ]
               void removeAdminPlayerMaster(UpdateAdminListRequest);

               [
                 id = 32,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, 
                       GAMEMANAGER_ERR_REMOVE_PLAYER_FAILED, GAMEMANAGER_ERR_INVALID_PLAYER_PASSEDIN, GAMEMANAGER_ERR_BANNED_LIST_MAX },
                 description = "Ban player from game." 
               ]
               BanPlayerMasterResponse banPlayerMaster(BanPlayerMasterRequest);
            
               [
                 id = 36,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID,GAMEMANAGER_ERR_PERMISSION_DENIED,GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY } 
               ]
               void changeGameTeamIdMaster(ChangeTeamIdRequest);

               [
                 id = 37,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_ALREADY_ADMIN, GAMEMANAGER_ERR_DEDICATED_SERVER_HOST } 
               ]
               void migrateAdminPlayerMaster(UpdateAdminListRequest);
               
               [
                 id = 38,
                 description = "Add a list of queued players to the game, if room is available.",
                 errors = { 
                      GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                      GAMEMANAGER_ERR_INVALID_GAME_ID,
                      GAMEMANAGER_ERR_INVALID_QUEUE_METHOD,
                      GAMEMANAGER_ERR_PLAYER_NOT_IN_QUEUE,
                      GAMEMANAGER_ERR_PERMISSION_DENIED,
                      GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                      GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL,
                      GAMEMANAGER_ERR_TEAM_FULL,
                      GAMEMANAGER_ERR_ROLE_FULL,
                      GAMEMANAGER_ERR_ROLE_NOT_ALLOWED,
                      GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                      GAMEMANAGER_ERR_DEQUEUE_WHILE_MIGRATING,
                      GAMEMANAGER_ERR_DEQUEUE_WHILE_IN_PROGRESS
                 }
               ]
               void addQueuedPlayerToGameMaster(AddQueuedPlayerToGameRequest);

               [
                 id = 39,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_BANNED_PLAYER_NOT_FOUND},
                 description = "remove a player from banned list." 
               ]
               void removePlayerFromBannedListMaster(RemovePlayerFromBannedListMasterRequest);

               [
                 id = 40,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED },
                 description = "Clear the game session banned list, removing all bans for game session admins." 
               ]
               void clearBannedListMaster(BannedListRequest);

               [
                 id = 41,
                 requiresUserSession = false,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID },
                 description = "get a banned list of the game session." 
               ]
               BannedListResponse getBannedListMaster(BannedListRequest);

               [
                 id = 42,
                 requiresUserSession = false,
                 description = "Rename the game session name for game session admins.",
                 errors = { 
                      GAMEMANAGER_ERR_INVALID_GAME_ID, 
                      GAMEMANAGER_ERR_PERMISSION_DENIED 
                 }                 
               ]
               void updateGameNameMaster(UpdateGameNameRequest);

               [
                id = 43,
                allowGuestCall = true,
                description = "Swap the players slot, role, and/or teams",
                errortype = SwapPlayersErrorInfo,
                errors = {
                    GAMEMANAGER_ERR_INVALID_GAME_ID,
                    GAMEMANAGER_ERR_PERMISSION_DENIED,
                    GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                    GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                    GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL,
                    GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED,
                    GAMEMANAGER_ERR_TEAM_FULL,
                    GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                    GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                    GAMEMANAGER_ERR_ROLE_NOT_ALLOWED,
                    GAMEMANAGER_ERR_ROLE_FULL,
                    GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED
                } 
               ]
               void swapPlayersMaster(SwapPlayersRequest);
               
               [
                id = 44,
                requiresUserSession = false,
                description = "Dedicated server host is telling the blaze server that it is to done being the host of a virtual game.",
                errors = {
                    GAMEMANAGER_ERR_INVALID_GAME_ID,
                    GAMEMANAGER_ERR_DEDICATED_SERVER_ONLY_ACTION,
                    GAMEMANAGER_ERR_NOT_VIRTUAL_GAME,
                    GAMEMANAGER_ERR_NOT_TOPOLOGY_HOST
                }
               ]
               void ejectHostMaster(EjectHostRequest);
               
               [
                 id = 45,
                 requiresUserSession = false,
                 description = "Sets the game mod register for the game. This replaces the entire game mod register, not the delta. Mod register is not updated on error.", 
                 errors = {
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_PERMISSION_DENIED
                 }
               ]
               void setGameModRegisterMaster(SetGameModRegisterRequest);

               [
                 id = 46,
                 description = "Sets the game entry criteria used for users who will join the game. Criteria is not updated on error.", 
                 errors = {
                   GAMEMANAGER_ERR_INVALID_GAME_ID,
                   GAMEMANAGER_ERR_PERMISSION_DENIED,
                   GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA
                 }
               ]
               void setGameEntryCriteriaMaster(SetGameEntryCriteriaRequest);

               [
                 id = 47,
                 description = "If game is locked for preferred joins, opts the specified player out.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND}
               ]
               void preferredJoinOptOutMaster(PreferredJoinOptOutMasterRequest);

               [
                 id = 48,
                 blocking = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 ignoreShardingKey = true,
                 description = "Check if the master owns a game that points to the persisted id."
               ]
               HasGameMappedByPersistedIdMasterResponse hasGameMappedByPersistedIdMaster(HasGameMappedByPersistedIdMasterRequest);

               [
                 id = 49,
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED, GAMEMANAGER_ERR_MIGRATION_NOT_SUPPORTED, GAMEMANAGER_ERR_INVALID_NEWHOST, GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND} 
               ]
               void requestPlatformHostMaster(MigrateHostRequest);

               [
                 id = 50,
                 blocking = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 errortype = CreateGameMasterErrorInfo,
                 ignoreShardingKey = true,
                 description = "reserve the persisted id for a game",
                 errors = {GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE}
               ]
               void reservePersistedIdMaster(ReservePersistedIdMasterRequest);

               [
                 id = 51,
                 requiresUserSession = false,
                 requires_authentication = false,
                 generate_command_class = true,
                 ignoreShardingKey = true,
                 description = "Capture the current game manager environment via Redis.",
                 errors = {GAMEMANAGER_ERR_PERMISSION_DENIED}
               ]
               GameCaptureResponse captureGameManagerEnvironmentMaster();

               [
                 id = 52,
                 requiresUserSession = false,
                 requires_authentication = false,
                 generate_command_class = true,
                 ignoreShardingKey = true,
                 description = "Check if the current game manager environment capture via Redis is complete."
               ]
               IsGameCaptureDoneResponse isGameCaptureDoneMaster(GameCaptureResponse);

               [
                 id = 53,
                 ignoreShardingKey = true,
                 requiresUserSession = false,
                 requires_authentication = false,
                 errors = {}, 
                 description = "Destroy all loaded pseudo games on this master." 
               ]
               void destroyAllPseudoGamesMaster();

               [
                 id = 54,
                 requiresUserSession = false,
                 requires_authentication = false,
                 generate_command_class = true,
                 ignoreShardingKey = true,
                 description = "Get the Redis dump locations for the current Master."
               ]
               RedisDumpLocationsResponse getRedisDumpLocationsMaster();

               [
                 id = 55,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE} 
               ]
               void meshEndpointsConnectedMaster(UpdateMeshConnectionMasterRequest);

               [
                 id = 56,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE} 
               ]
               void meshEndpointsDisconnectedMaster(UpdateMeshConnectionMasterRequest);

               [
                 id = 57,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PLAYER_NOT_FOUND, GAMEMANAGER_ERR_GAME_DESTROYED_BY_CONNECTION_UPDATE} 
               ]
               void meshEndpointsConnectionLostMaster(UpdateMeshConnectionMasterRequest);

               [
                 id = 58,
                 errors = { GAMEMANAGER_ERR_INVALID_GAME_ID }
               ]
               GameInfo getGameInfoSnapshot(GetGameInfoSnapshotRequest);

               [
                 id = 59,
                 description = "Request from an admin client to move an in-game reserved player to the queue. Fails if no queue exists.",
                 errors = { 
                      GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                      GAMEMANAGER_ERR_INVALID_GAME_ID,
                      GAMEMANAGER_ERR_INVALID_QUEUE_METHOD,
                      GAMEMANAGER_ERR_PERMISSION_DENIED,
                      GAMEMANAGER_ERR_DEQUEUE_WHILE_MIGRATING,
                      GAMEMANAGER_ERR_DEQUEUE_WHILE_IN_PROGRESS,
                      GAMEMANAGER_ERR_QUEUE_FULL
                 }
               ]
               void demoteReservedPlayerToQueueMaster(DemoteReservedPlayerToQueueRequest);
               


            /////////////////////////////////////////////////////////////////
            //  Matchmaking RPCs
            /////////////////////////////////////////////////////////////////

                [
                   id = 60,
                   errors = { 
                        GAMEMANAGER_ERR_ALREADY_GAME_MEMBER,
                        GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                        GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN,
                        GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS,
                        GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                        GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                        GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK,
                        GAMEMANAGER_ERR_GAME_BUSY,
                        GAMEMANAGER_ERR_CROSSPLAY_DISABLED, 
                        GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                        GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_GAME_IN_PROGRESS,
                        GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                        GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                        GAMEMANAGER_ERR_INVALID_GAME_ID,
                        GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,
                        GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                        GAMEMANAGER_ERR_MATCHMAKING_NO_JOINABLE_GAMES, 
                        GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND,
                        GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION,
                        GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                        GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                        GAMEMANAGER_ERR_PLAYER_BANNED,
                        GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                        GAMEMANAGER_ERR_QUEUE_FULL,
                        GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                        GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_ROLE_FULL,
                        GAMEMANAGER_ERR_ROLE_NOT_ALLOWED,
                        GAMEMANAGER_ERR_SLOT_OCCUPIED,
                        GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL,
                        GAMEMANAGER_ERR_TEAM_FULL,
                        GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                        GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE
                   },
                   requires_authentication = false,
                   shardingKey = "MatchedGame.GameId"
                ]
                MatchmakingFoundGameResponse matchmakingFoundGame(MatchmakingFoundGameRequest);
                
                [
                 id = 61,
                 blocking = true,
                 requires_authentication = false,
                 errors = {
                            GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                            GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL,
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                            GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE, 
                            GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                            GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                            GAMEMANAGER_ERR_TEAM_NOT_ALLOWED, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS,
                            GAMEMANAGER_ERR_TEAM_FULL, 
                            GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                            GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                            GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                            GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE, 
                            GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION, 
                            GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                            GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                            GAMEMANAGER_ERR_JOIN_PLAYER_FAILED,
                            GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                            GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                            GAMEMANAGER_ERR_ROLE_FULL, 
                            GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID, 
                            GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID,
                            GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED, 
                            GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING
                        },
                 ignoreShardingKey = true
                ]
                CreateGameMasterResponse matchmakingCreateGame(MatchmakingCreateGameRequest);
                
                [
                 id = 62,
                 blocking = true,
                 requires_authentication = false,
                 errors = {
                            GAMEMANAGER_ERR_GAME_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_INVALID_ACTION_FOR_GROUP, 
                            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_CRITERIA, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_MAX_PLAYER_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                            GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_IS_ZERO, 
                            GAMEMANAGER_ERR_INVALID_TEAM_CAPACITIES_VECTOR_SIZE, 
                            GAMEMANAGER_ERR_DUPLICATE_TEAM_CAPACITY, 
                            GAMEMANAGER_ERR_INVALID_TEAM_ID_IN_TEAM_CAPACITIES_VECTOR, 
                            GAMEMANAGER_ERR_TEAM_NOT_ALLOWED, 
                            GAMEMANAGER_ERR_PLAYER_CAPACITY_NOT_EVENLY_DIVISIBLE_BY_TEAMS,
                            GAMEMANAGER_ERR_TEAM_FULL, 
                            GAMEMANAGER_ERR_INVALID_PERSISTED_GAME_ID_OR_SECRET, 
                            GAMEMANAGER_ERR_PERSISTED_GAME_ID_IN_USE,
                            GAMEMANAGER_ERR_CROSSPLAY_DISABLED,
                            GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                            GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE, 
                            GAMEMANAGER_ERR_INVALID_GAME_STATE_TRANSITION, 
                            GAMEMANAGER_ERR_INVALID_PING_SITE_ALIAS,
                            GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND, 
                            GAMEMANAGER_ERR_JOIN_PLAYER_FAILED,
                            GAMEMANAGER_ERR_EMPTY_ROLE_CAPACITIES, 
                            GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_SMALL, 
                            GAMEMANAGER_ERR_ROLE_CAPACITY_TOO_LARGE, 
                            GAMEMANAGER_ERR_ROLE_NOT_ALLOWED, 
                            GAMEMANAGER_ERR_ROLE_FULL, 
                            GAMEMANAGER_ERR_ROLE_CRITERIA_INVALID, 
                            GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_INVALID, 
                            GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                            GAMEMANAGER_ERR_GAME_MODE_ATTRIBUTE_MISSING
                        },
                 shardingKey = "PrivilegedGameIdPreference",
                 ignoreShardingKey = false
                ]
                CreateGameMasterResponse matchmakingCreateGameWithPrivilegedId(MatchmakingCreateGameRequest);

                [
                    id = 64,
                    errors = { 
                        GAMEMANAGER_ERR_ALREADY_GAME_MEMBER,
                        GAMEMANAGER_ERR_ALREADY_IN_QUEUE,
                        GAMEMANAGER_ERR_DEDICATED_SERVER_HOST_CANNOT_JOIN,
                        GAMEMANAGER_ERR_ENFORCING_SINGLE_GROUP_JOINS,
                        GAMEMANAGER_ERR_FAILED_DUE_TO_FRIENDS_ONLY_RESTRICTION,
                        GAMEMANAGER_ERR_FAILED_DUE_TO_PRESENCE_MODE_RESTRICTION,
                        GAMEMANAGER_ERR_FAILED_REPUTATION_CHECK,
                        GAMEMANAGER_ERR_GAME_BUSY,
                        GAMEMANAGER_ERR_CROSSPLAY_DISABLED, 
                        GAMEMANAGER_ERR_CROSSPLAY_DISABLED_USER,
                        GAMEMANAGER_ERR_GAME_ENTRY_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_GAME_IN_PROGRESS,
                        GAMEMANAGER_ERR_GAME_PROTOCOL_VERSION_MISMATCH,
                        GAMEMANAGER_ERR_INVALID_GAME_ENTRY_TYPE,
                        GAMEMANAGER_ERR_INVALID_GAME_ID,
                        GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION,
                        GAMEMANAGER_ERR_JOIN_METHOD_NOT_SUPPORTED,
                        GAMEMANAGER_ERR_MATCHMAKING_NO_JOINABLE_GAMES, 
                        GAMEMANAGER_ERR_MATCHMAKING_USERSESSION_NOT_FOUND,
                        GAMEMANAGER_ERR_MULTI_ROLE_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_NO_HOSTS_AVAILABLE_FOR_INJECTION,
                        GAMEMANAGER_ERR_NO_RESERVATION_FOUND,
                        GAMEMANAGER_ERR_PARTICIPANT_SLOTS_FULL,
                        GAMEMANAGER_ERR_PLAYER_BANNED,
                        GAMEMANAGER_ERR_PLAYER_NOT_FOUND,
                        GAMEMANAGER_ERR_QUEUE_FULL,
                        GAMEMANAGER_ERR_RESERVATION_ALREADY_EXISTS,
                        GAMEMANAGER_ERR_ROLE_CRITERIA_FAILED,
                        GAMEMANAGER_ERR_ROLE_FULL,
                        GAMEMANAGER_ERR_ROLE_NOT_ALLOWED,
                        GAMEMANAGER_ERR_SLOT_OCCUPIED,
                        GAMEMANAGER_ERR_SPECTATOR_SLOTS_FULL,
                        GAMEMANAGER_ERR_TEAM_FULL,
                        GAMEMANAGER_ERR_TEAM_NOT_ALLOWED,
                        GAMEMANAGER_ERR_UNRESPONSIVE_GAME_STATE,
                        GAMEMANAGER_ERR_UNEXPECTED_JOIN_FAILURE_GAME_VERSION
                    },
                    requires_authentication = false,
                    shardingKey = "GameId"
                ]
                PackerFoundGameResponse packerFoundGame(PackerFoundGameRequest);

               [
                 id = 65,
                 requires_authentication = false,
                 ignoreShardingKey = true,
                 description = "DEPRECATED - Use metrics or Census data instead"
               ]
               GetGameSessionCountResponse getGameSessionCount();
               
               [
                 id = 75,
                 errors = {GAMEMANAGER_ERR_NO_DEDICATED_SERVER_FOUND},
                 description = "Find an available dedicated server host for injection, and destroy it's current game.",
                 requires_authentication = false,
                 shardingKey = "GameIdToReset",
                 ignoreShardingKey = false
               ]
               ChooseHostForInjectionResponse chooseHostForInjection(ChooseHostForInjectionRequest);

               [
                 id = 76,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID},
                 description = "clean up external session's members who should not be in the external session.",
                 requiresUserSession = false //for MM jobs on slave that use this rpc for cleaning up games
               ]
               void resyncExternalSessionMembers(ResyncExternalSessionMembersRequest);

               [
                 id = 77,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID},
                 description = "Set a game session as responsive or not.",
                 requires_authentication = false
               ]
               void setGameResponsiveMaster(SetGameResponsiveRequest);

               [
                 id = 78,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID},
                 description = "Processes a telemetry report from the client",
                 shardingKey = "GameId",
                 ignoreShardingKey = false
               ]
               void processTelemetryReport(ProcessTelemetryReportRequest);

               [
                 id = 79,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND, GAMEMANAGER_ERR_USER_ALREADY_AUDITED},
                 description = "Enables connection metric auditing for users.",
                 ignoreShardingKey = true
               ]
               void addUsersToConnectionMetricAuditMaster(UserAuditInfoMasterRequest);

               [
                 id = 80,
                 errors = {GAMEMANAGER_ERR_USER_NOT_FOUND},
                 description = "Disables connection metric auditing for users.",
                 ignoreShardingKey = true
               ]
               void removeUsersFromConnectionMetricAuditMaster(UserAuditInfoMasterRequest);

               [
                 id = 81,
                 description = "Fetches the current list of audited users.",
                 ignoreShardingKey = true
               ]
               FetchAuditedUsersResponse fetchAuditedUsersMaster();

               [
                 id = 82,
                 requiresUserSession = false,
                 requires_authentication = false,
                 ignoreShardingKey = true
               ]
               GetPSUResponse getPSUByGameNetworkTopology(GetMetricsByGeoIPDataRequest);
               

               [
                 id = 83,
                 requiresUserSession = false,
                 requires_authentication= false,
                 ignoreShardingKey = true
               ]
               GetConnectionMetricsResponse getConnectionMetrics();
            
               [
                 id = 84,             
                 description = "Get game metrics for successful matchmaking sessions",
                 ignoreShardingKey = true,
                 requires_authentication = false,
                 http = {
                      resource = "getMatchmakingGameMetrics",
                      method = "GET",
                      encodeEnumsAsStrings = true
                 }
               ]
               GetMatchmakingGameMetricsResponse getMatchmakingGameMetrics();


               [
                 id = 85,
                 description = "Get Game Mode Metrics",
                 ignoreShardingKey = true,
                 requires_authentication = false,
                 http = {
                    resource = "getGameModeMetrics",
                    method = "GET",
                    encodeEnumsAsStrings = true
                 }
               ]
               GetGameModeMetrics getGameModeMetrics();
               
               [
                 id = 95,
                 errors = { },
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 description = "Process the css connectivity info for the console pair(s) in the request."
               ]
               void ccsConnectivityResultsAvailable(CCSAllocateRequestMaster);
           
               [
                 id = 96,
                 errors = { },
                 internal = true,
                 client_export = false,
                 requires_authentication = false,
                 description = "Process the lease extension for the connection set in the request."
               ]
               void ccsLeaseExtensionResultsAvailable(CCSLeaseExtensionRequestMaster);

               [
                 id = 97,
                 description = "Fetch map that tracks whether a leaving client & dedicated server host are receiving packets from each other. Map is keyed by game id",
                 client_export = false,
                 requires_authentication = false,
                 internal = true
               ]
               GetPktReceivedMetricsResponse getPktReceivedMetrics(GetPktReceivedMetricsRequest);

               [
                 id = 100,
                 description = "Track user as being in the game's external session. Error response is populated with game's info on error. For PS4, PS5.",
                 errortype = GetExternalSessionInfoMasterResponse,
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_INVALID_GAME_STATE_ACTION}
               ]
               GetExternalSessionInfoMasterResponse trackExtSessionMembershipMaster(TrackExtSessionMembershipRequest);

               [
                 id = 101,
                 requiresUserSession = false,
                 description = "Track user as not being in the game's external session. For PS4, PS5.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID}
               ]
               UntrackExtSessionMembershipResponse untrackExtSessionMembershipMaster(UntrackExtSessionMembershipRequest);
              
               [
                 id = 102,
                 description = "Get the Blaze game's cached external session info. For PS4, PS5.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID} 
               ]
               GetExternalSessionInfoMasterResponse getExternalSessionInfoMaster(GetExternalSessionInfoMasterRequest);

               [
                 id = 103,
                 requiresUserSession = false,
                 description = "Update the game's external session status. For PS4.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID, GAMEMANAGER_ERR_PERMISSION_DENIED}
               ]
               void updateExternalSessionStatusMaster(UpdateExternalSessionStatusRequest);

               [
                 id = 104,
                 requiresUserSession = false,
                 description = "Fetch the External Data Source API Name List for specified game.",
                 errors = {GAMEMANAGER_ERR_INVALID_GAME_ID}     
               ]
               GetExternalDataSourceApiListResponse getExternalDataSourceApiListByGameId(GetExternalDataSourceApiListRequest);

        } // master methods

        notifications
        {
            [
              id = 1016, 
              description = "Sent after game is removed.",
              passthrough=NotifyGameRemoved
            ]
            NotifyGameRemoved (Blaze::GameManager::NotifyGameRemoved);
                        
            [
              id = 1020, 
              description = "Sent to a player who's joined a game; contains the game's data and roster.",
              details = "At this point, the joining player is a member of the game (in the connecting state).",
              passthrough = NotifyGameSetup
            ]
            NotifyGameSetup(Blaze::GameManager::NotifyGameSetup);
        
            [
              id = 1021, 
              description = "Sent to existing game members announcing a new external player joining the game's roster.",
              details = "At this point, the joining player is a game member (in the connecting state)",
              passthrough = NotifyPlayerJoining
            ]
            NotifyPlayerJoining(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 1022,
              description = "Sent to player who is already in the game, but needs to initiate local connections since they used to be RESERVED or QUEUED.",
              details = "At this point, the player is going to become an active member in the game.",
              passthrough = NotifyJoiningPlayerInitiateConnections
            ]
            NotifyJoiningPlayerInitiateConnections(Blaze::GameManager::NotifyGameSetup);
            
            [
              id = 1023,
              description = "Sent to existing game members announcing a new external player joining the game's queue.",
              details = "The joining player does not attempt to initiate network connections.",
              passthrough =  NotifyPlayerJoiningQueue
            ]
            NotifyPlayerJoiningQueue(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 1024,
              description = "Sent to existing members announcing an external player is being promoted from the queue into the roster.",
              details = "Clients will only try to initiate network connections to this player if they are not still reserved.",
              passthrough = NotifyPlayerPromotedFromQueue
            ]
            NotifyPlayerPromotedFromQueue(Blaze::GameManager::NotifyPlayerJoining);
            
            [
              id = 1025,
              description = "Sent to existing members announcing that an external player is claiming a reservation either while in queue or in roster.",
              details = "Clients will only try to initiate network connections to this player if they are claiming the reservation in the game roster.",
              passthrough = NotifyPlayerClaimingReservation
            ]
            NotifyPlayerClaimingReservation(Blaze::GameManager::NotifyPlayerJoining);
            

            [
              id = 1026,
              description = "Sent to existing members announcing a reserved player is being demoted from the game into the queue.",
              details = "Clients will only try to initiate network connections to this player if they are not still reserved.",
              passthrough = NotifyPlayerDemotedToQueue
            ]
            NotifyPlayerDemotedToQueue(Blaze::GameManager::NotifyPlayerJoining);

            [
              id = 1030,
              description = "Sent once a joining player has fully joined the game.",
              details = "Player gets into active state.",
              passthrough = NotifyPlayerJoinCompleted
            ]
            NotifyPlayerJoinCompleted(Blaze::GameManager::NotifyPlayerJoinCompleted);
                
            
            [
              id = 1040,
              description = "Sent after a leave player request is succesfully finished.",
              details = "All the players in the game gets this notification.",
              passthrough = NotifyPlayerRemoved 
            ]
            NotifyPlayerRemoved(Blaze::GameManager::NotifyPlayerRemoved);
            
            [
              id = 1041,
              description = "Sent to a user that fails to join a game when that join was initiated by another user.",
              details = "Only the player that failed to join the game gets this notification.",
              passthrough = NotifyRemoteJoinFailed 
            ]
            NotifyRemoteJoinFailed(Blaze::GameManager::NotifyRemoteJoinFailed);

            [
              id = 1060,
              description = "After the host migration has been successfully finished for topology or platform host.",
              passthrough = NotifyHostMigrationFinished
            ]
            NotifyHostMigrationFinished(Blaze::GameManager::NotifyHostMigrationFinished);
            
            [
              id = 1070, 
              description = "Sent after host migration has started for topology or platform host.",
              passthrough = NotifyHostMigrationStart
            ]
            NotifyHostMigrationStart(Blaze::GameManager::NotifyHostMigrationStart);
            
            [
              id = 1071, 
              description = "Sent after the first user joins a dedicated PC server.",
              passthrough = NotifyPlatformHostInitialized
            ]
            NotifyPlatformHostInitialized(Blaze::GameManager::NotifyPlatformHostInitialized);

            [
              id = 1080, 
              description = "Sent after the game attribute has been changed.",
              passthrough = NotifyGameAttribChange
            ]
            NotifyGameAttribChange(Blaze::GameManager::NotifyGameAttribChange);

            [
              id = 1081, 
              description = "Sent after the dedicated server attribute has been changed.",
              passthrough = NotifyDedicatedServerAttribChange
            ]
            NotifyDedicatedServerAttribChange(Blaze::GameManager::NotifyDedicatedServerAttribChange);

            [
              id = 1090,
              description = "Sent after player attribute has been changed",
              passthrough = NotifyPlayerAttribChange
            ]
            NotifyPlayerAttribChange(Blaze::GameManager::NotifyPlayerAttribChange);
                            
            [
              id = 1095,
              description = "Sent after player's custom data has been changed",
              passthrough = NotifyPlayerCustomDataChange
            ]
            NotifyPlayerCustomDataChange(Blaze::GameManager::NotifyPlayerCustomDataChange);
                            
            [
              id = 1100,
              description = "Sent after host migration has started.",
              passthrough = NotifyGameStateChange
            ]
            NotifyGameStateChange(Blaze::GameManager::NotifyGameStateChange);

            [
              id = 1110,
              description = "Sent after the game settings has been changed.",
              details = "This notification gives the new game settings for the game. client will have to revalidate the replicategamedata with the gamesettings",
              passthrough = NotifyGameSettingsChange
            ]
            NotifyGameSettingsChange(Blaze::GameManager::NotifyGameSettingsChange);

            [
              id = 1111,
              description = "Sent after the game capacity is changed.",
              details = "This notification gives the new game capacity for the game. client will have to revalidate the replicategamedata with the capacity.",
              passthrough = NotifyGameCapacityChange
            ]
            NotifyGameCapacityChange(Blaze::GameManager::NotifyGameCapacityChange);
            
            [
              id = 1112,
              description = "Sent when a dedicated server is reset (explicitly, or via the matchmaker).",
              passthrough = NotifyGameReset 
            ]
            NotifyGameReset(Blaze::GameManager::NotifyGameReset);

            [
              id = 1113,
              description = "Sent when the game reporting id of a game session has changed.",
              passthrough = NotifyGameReportingIdChange
            ]
            NotifyGameReportingIdChange(Blaze::GameManager::NotifyGameReportingIdChange);
            
            [
              id = 1114,
              description = "Sent when a game's presence is enabled or disabled.",
              passthrough = NotifyGamePresenceChanged 
            ]
            NotifyGamePresenceChanged(GameSessionUpdatedNotification);
            
            [
              id = 1115,
              description = "Sent when a 1st party session has been updated (for example, because of host migration).",
              passthrough = NotifyGameSessionUpdated  
            ]
            NotifyGameSessionUpdated(GameSessionUpdatedNotification);

            [
              id = 1116,
              description = "Sent after a players connection state changed", 
              passthrough = NotifyGamePlayerStateChange 
            ]
            NotifyGamePlayerStateChange(Blaze::GameManager::NotifyGamePlayerStateChange);

            [
              id = 1117,
              description = "Sent after a players team, slot, or role id changed",
              passthrough = NotifyGamePlayerTeamRoleSlotChange 
            ]
            NotifyGamePlayerTeamRoleSlotChange(Blaze::GameManager::NotifyGamePlayerTeamRoleSlotChange);

            [
              id = 1118,
              description = "Sent after a game has a TeamId change",
              passthrough = NotifyGameTeamIdChange 
            ]
            NotifyGameTeamIdChange(Blaze::GameManager::NotifyGameTeamIdChange);
            
            [
              id = 1119,
              description = "Sent when the blaze server recommends attempting to add a queued player to the game.",
              passthrough = NotifyProcessQueue
            ]
            NotifyProcessQueue(Blaze::GameManager::NotifyProcessQueue);
            
            [
              id = 1120,
              description = "Sent when the presence mode has changed, will take effect the next time the game has a new presence mode created.",
              passthrough = NotifyPresenceModeChanged 
            ]
            NotifyPresenceModeChanged(Blaze::GameManager::NotifyPresenceModeChanged);
            
            [
              id = 1121,
              description = "Sent when the queue changes, either when users enter the queue, leave the queue or the queue is reordered.",
              passthrough = NotifyQueueChanged
            ]
            NotifyQueueChanged(Blaze::GameManager::NotifyQueueChanged);
            
            [
                id = 1123,
                description = "Sent when game mod register gets updated. Game server may take action to remove clients with non-matching game mod registers from game after this notification.",
                passthrough = NotifyGameModRegisterChanged
            ]
            NotifyGameModRegisterChanged(Blaze::GameManager::NotifyGameModRegisterChanged);

            [
                id = 1124,
                description = "Sent when game entry criteria gets updated.",
                passthrough = NotifyGameEntryCriteriaChanged
            ]
            NotifyGameEntryCriteriaChanged(Blaze::GameManager::NotifyGameEntryCriteriaChanged);

            [
              id = 1202,
              description = "Game admin Lists are initiallly populated with create game notifications.  Subscription lists are updated using these notifications as well.",
              passthrough=NotifyAdminListChange
            ]
            NotifyAdminListChange(Blaze::GameManager::NotifyAdminListChange);

            [
              id = 1230,
              description = "Sent after the game name has been changed.",
              passthrough = NotifyGameNameChange
            ]
            NotifyGameNameChange(Blaze::GameManager::NotifyGameNameChange);

            [
              id = 1240,
              description = "Sent when a matchmaking session ends due to cancel/timeout/error.",
              passthrough = NotifyMatchmakingFailed
            ]
            NotifyMatchmakingFailed (Blaze::GameManager::NotifyMatchmakingFinished);

            [
              id = 1250,
              description = "Sent after hosted connectivity between two end points is established.",
              passthrough = NotifyHostedConnectivityAvailable
            ]
            NotifyHostedConnectivityAvailable (Blaze::GameManager::NotifyHostedConnectivityAvailable);

        } // master notifications
        
        events
        {
            [ id = 1000 ]
            PlayerJoinedGameSessionEvent(PlayerJoinedGameSession);
            
            [ id = 1001 ]
            PlayerLeftGameSessionEvent(PlayerLeftGameSession);
            
            [ id = 1002 ]
            CreatedGameSessionEvent(CreatedGameSession);
            
            [ id = 1003 ]
            DestroyedGameSessionEvent(DestroyedGameSession);

            [ id = 1004 ]
            GameSessionStateChangedEvent(GameSessionStateChanged);
            
            [ id = 1005 ]
            PlayerReservedGameSessionEvent(PlayerReservedGameSession);
            
            [ id = 1006 ]
            PlayerQueuedGameSessionEvent(PlayerQueuedGameSession);
            
            [ id = 1007 ]
            PlayerDequeuedGameSessionEvent(PlayerQueuedGameSession);

            [ id = 1008 ]
            UpdatedGameSessionDataEvent(UpdatedGameSessionData);

            // matchmaking events
            [ id = 1010 ]
            SuccesfulMatchmakingSessionEvent(SuccesfulMatchmakingSession);
            
            [ id = 1011 ]
            FailedMatchmakingSessionEvent(FailedMatchmakingSession);
        }
        
     } // master
}
}
}

 // game manager component
