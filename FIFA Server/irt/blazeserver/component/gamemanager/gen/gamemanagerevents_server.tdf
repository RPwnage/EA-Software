[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

[headername="framework/tdf/networkaddress.h"]
#include "framework/gen/networkaddress.tdf"

[headername="gamemanager/tdf/gamemanager.h"]
#include "gamemanager/gen/gamemanager.tdf"

[headername="gamemanager/tdf/gamebrowser.h"]
#include "gamemanager/gen/gamebrowser.tdf"

namespace Blaze
{
namespace GameManager
{
[
    tdfid = "hash",
    description = "Join/leave game event object.",
    details = "Used when a player joined a game's roster or queue.  Not signaled when the player makes a reservation."
]
class PlayerJoinedGameSession
{
    [tag="pid", description="Blaze id of the joining player(s)."]
    BlazeId mPlayerId;
    
    [tag="pnam", description="Persona of the joining player."]
    string(MAX_PERSONA_LENGTH) mPersonaName;
    
    [tag="nasp", description="PersonaNamespace of the session owner."] 
    PersonaNamespace mPersonaNamespace;

    [tag="plat", default=INVALID, description="Client platform type"] 
    ClientPlatformType mClientPlatform;

    [tag="gsid", description="Id of the game player(s) is joining."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game the player is joining."] 
    Blaze::GameManager::GameName mGameName;
    
    [tag="attr", description="The GameSession's current set of GameAttributes."] 
    Collections::AttributeMap mGameAttribs;
    
    [tag="ihst", description="True if the player is the platform host for this game."]
    bool mIsPlatformHost;

    [tag="slot", default=SLOT_PUBLIC_PARTICIPANT]
    SlotType mSlotType;

    [tag="role", description="The role this player is assigned to."]
    RoleName mRoleName;
};

[
    tdfid = "hash",
    description = "leave/kicked game event object.",
    details = "Used when a player left a game or kicked out of a game."
]
class PlayerLeftGameSession
{
    [tag="pid", description="Blaze id of the leaving/kicked player(s)."]
    BlazeId mPlayerId;
        
    [tag="pnam", description="Persona of the leaving/kicked player."]
    string(MAX_PERSONA_LENGTH) mPersonaName;   
    
    [tag="ihst", description="True if removed player was the platform host for this game."]
    bool mIsPlatformHost;
        
    [tag="gsid", description="Id of the game player(s) is leaving/kicked."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game the player is leaving."] 
    Blaze::GameManager::GameName mGameName;

    [tag="attr", description="The GameSession's current set of GameAttributes."] 
    Collections::AttributeMap mGameAttribs;

    [tag="sid", description="The session id of the player is leaving"]
    UserSessionId mSessionId;

    [tag="reas", description="PlayerRemovedReason enum string (eg. PLAYER_JOIN_TIMEOUT, PLAYER_CONN_LOST)."]
    string(64) mRemovalReason;
    
    [tag="topo", description="GameNetworkTopology enum string"]
    string(64) mTopology;

    [tag="cntx", description="The title supplied player removal reason (reason code)."] 
    PlayerRemovedTitleContext mPlayerRemovedTitleContext;
    
    [tag="sctx", description="The title supplied player removal reason."] 
    string(128) mTitleContextString;

    [tag="jnmt", description="The method the player used to join the game."] 
    JoinMethod mJoinMethod;

    [tag="stat", description="The state of the game when the player left."] 
    GameState mGameState;

    [tag="coun", description="The number of players left in the game."] 
    uint16_t mPlayerCount;
};

[
    tdfid = "hash",
    description = "Created game session event object.",
    details = "Used when a game session is created."
]
class CreatedGameSession
{   
    [tag="gsid", description="Id of the game ."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game."] 
    Blaze::GameManager::GameName mGameName;
    
    [tag="reas", description="GameUpdateReason enum string (eg. GAME_INITIALIZED or GAME_RESET)."]
    string(64) mCreationReason;
    
    [tag="ntop", description="GameNetworkTopology enum string (eg. CLIENT_SERVER_DEDICATED, PEER_TO_PEER_FULL_MESH)."]
    string(64) mNetworkTopology;
    
    [tag="thst", description="Topology host information"]
    Blaze::GameManager::HostInfo mTopologyHostInfo;
    
    [tag="phst", description="Platform host information"]
    Blaze::GameManager::HostInfo mPlatformHostInfo;
    
    [tag="addr", description="Host network address list"]
    Blaze::NetworkAddressList mHostAddressList;
};

[
    tdfid = "hash",
    description = "Destroy game session event object.",
    details = "Used when a game session is destroyed."
]
class DestroyedGameSession
{   
    [tag="gsid", description="Id of the game ."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game."] 
    Blaze::GameManager::GameName mGameName;
    
    [tag="reas", description="GameDestructionReason enum string (eg. HOST_LEAVING, SYS_GAME_ENDING)."]
    string(64) mDestructionReason;
};

[
    tdfid = "hash",
    description = "Game session state changed.",
    details = "Used when a game session state is changed."
]
class GameSessionStateChanged
{   
    [tag="gsid", description="Id of the game ."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game."] 
    Blaze::GameManager::GameName mGameName;

    [tag="ogs", description="The game state that is being transitioned from."]
    Blaze::GameManager::GameState mOldGameState;

    [tag="ngs", description="The game state that is being transitioned to."]
    Blaze::GameManager::GameState mNewGameState;
};

[
    tdfid = "hash",
    description = "Player created a reservation in a game.",
    destails = "Used when a player creates a reservation in a game."
]
class PlayerReservedGameSession
{
    [tag="pid", description="Blaze id of the joining player(s)."]
    BlazeId mPlayerId;
    
    [tag="pnam", description="Persona of the joining player."]
    string(MAX_PERSONA_LENGTH) mPersonaName;
    
    [tag="gsid", description="Id of the game player(s) is joining."]
    Blaze::GameManager::GameId mGameId;

    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game the player is joining."] 
    Blaze::GameManager::GameName mGameName;
    
    [tag="jgs", default=JOINED_GAME]
    JoinState mJoinState;
    
    [tag="qpl", description="Game's queued player id's, in the order they are queued at the time of this event."]
    PlayerIdList mQueuedPlayers;
};

[
    tdfid = "hash",
    description = "Player was queued in a game.",
    destails = "Used when a player is queued in a game."
]
class PlayerQueuedGameSession
{
    [tag="pid", description="Blaze id of the joining player(s)."]
    BlazeId mPlayerId;
    
    [tag="pnam", description="Persona of the joining player."]
    string(MAX_PERSONA_LENGTH) mPersonaName;
    
    [tag="gsid", description="Id of the game player(s) is joining."]
    Blaze::GameManager::GameId mGameId;
    
    [tag="grid", description="Game reporting id of the game player(s) is joining."]
    Blaze::GameManager::GameReportingId mGameReportingId;

    [tag="gsnm", description="Name of the game the player is joining."] 
    Blaze::GameManager::GameName mGameName;
    
    [tag="qpl", description="Player Id's in order of the players in the queue at the time of this event."]
    PlayerIdList mQueuedPlayers;
};

[
    tdfid = "hash",
    description = "Indicates that the Game Data used by the game has changed.",
    details = "Used when the game or player data changes."
]
class UpdatedGameSessionData
{   
    [tag="rpgd", description="Game Data for the game that was updated."]
    GameBrowserGameData mGameData;
};

[
    description = "Successful matchmaking session event object.",
    details = "Used when a matchmaking session finds or creates a game."
]
class SuccesfulMatchmakingSession
{   
    [tag="mmid", description="[DEPRECATED] Id of the matchmaking session."]
    Blaze::GameManager::MatchmakingSessionId mMatchmakingSessionId;

    [tag="mscd", description="Id of the matchmaking scenario."]
    Blaze::GameManager::MatchmakingScenarioId mMatchmakingScenarioId;
    
    [tag="uid", description="Session id of the mm session owner."]
    Blaze::UserSessionId mUserSessionId;
    
    [tag="pnam", description="Persona of the session owner."]
    string(MAX_PERSONA_LENGTH) mPersonaName;   

    [tag="nasp", description="PersonaNamespace of the session owner."] 
    PersonaNamespace mPersonaNamespace;

    [tag="plat", default=INVALID, description="Client platform type"] 
    ClientPlatformType mClientPlatform;
    
    [tag="rslt", description="MatchmakingResult enum string (eg. SUCCESS_CREATED_GAME, SUCCESS_JOINED_EXISTING_GAME."]
    string(64) mMatchmakingResult;
    
    [tag="fits", description="Fit score of the finalized game."]
    Blaze::GameManager::FitScore mFitScore;
    
    [tag="mfit", description="Max possible fit score of the finalized game."]
    Blaze::GameManager::FitScore mMaxPossibleFitScore;
    
    [tag="gsid", description="Id of the game found or created."]
    Blaze::GameManager::GameId mGameId;
};

[
    description = "Unsuccesful matchmaking session event object.",
    details = "Used when a matchmaking session times out or is cancelled."
]
class FailedMatchmakingSession
{   
    [tag="mmid", description="[DEPRECATED] Id of the matchmaking session."]
    Blaze::GameManager::MatchmakingSessionId mMatchmakingSessionId;

    [tag="mscd", description="Id of the matchmaking scenario."]
    Blaze::GameManager::MatchmakingScenarioId mMatchmakingScenarioId;
    
    [tag="uid", description="Session id of the mm session owner."]
    Blaze::UserSessionId mUserSessionId;
    
    [tag="pnam", description="Persona of the session owner."]
    string(MAX_PERSONA_LENGTH) mPersonaName;   
    
    [tag="rslt", description="MatchmakingResult enum string (eg. SESSION_TIMED_OUT, SESSION_TERMINATED."]
    string(64) mMatchmakingResult;
};

} // GameManager
} // Blaze
