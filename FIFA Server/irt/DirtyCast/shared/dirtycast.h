/*H********************************************************************************/
/*!
    \File dirtycast.h

    \Description
        Shared routines for DirtyCast server.

    \Copyright
        Copyright (c) 2007 Electronic Arts Inc.

    \Version 08/03/2007 (jbrookes) First Version
*/
/********************************************************************************H*/

#ifndef _dirtycast_h
#define _dirtycast_h

/*** Include files ****************************************************************/

#include <stdint.h>

#if defined(DIRTYCODE_LINUX)
#include <sys/poll.h>
#endif

/*** Defines **********************************************************************/

#if DIRTYCODE_DEBUG
#define DIRTYCAST_BUILDTYPE "debug"
#elif DIRTYCODE_PROFILE
#define DIRTYCAST_BUILDTYPE "profile"
#else
#define DIRTYCAST_BUILDTYPE "final"
#endif

#define DIRTYCAST_EXIT_ERROR 2
#define DIRTYCAST_EXIT_OK 0

//! filtering debug; if enabled print %% FILTER %% in front of lines that would be filtered instead of actually filtering them
#define DIRTYCAST_FILTERDEBUG (DIRTYCODE_DEBUG && FALSE)

/*! dirtycast debuglevels (note: each successive level includes the previous ones.
    to enable any given level of debugging, the debuglevel must be set to one greater
    than the value specified here */
#define DIRTYCAST_DBGLVL_CONNINFO              (0)     //!< more extensive client connectivity logging
#define DIRTYCAST_DBGLVL_BLAZE                 (1)     //!< blazesdk notification logging
#define DIRTYCAST_DBGLVL_MISCINFO              (2)     //!< misc logging info
#define DIRTYCAST_DBGLVL_RECURRING             (3)     //!< misc recurring spam; e.g. blaze server ping request/response
#define DIRTYCAST_DBGLVL_MEMORY                (4)     //!< per-allocation memory debugging
#define DIRTYCAST_DBGLVL_HIGHEST               (1000)  //!< must be higher than any other debug level


/*** Macros ***********************************************************************/

#define DIRTYCAST_CalculateArraySize(_ArrayName) (sizeof(_ArrayName) / sizeof(_ArrayName[0]))


/*** Type Definitions *************************************************************/

//! dirtycast logging filter entry
typedef struct DirtyCastFilterEntryT
{
    uint32_t    uDebugLevel;        // min debug level to set for text to not be filtered
    const char *pFilterText;        // text to check for filtering
    uint32_t    uFilterSize;        // length of filter text
} DirtyCastFilterEntryT;

//! server load info
typedef struct DirtyCastServerInfoT
{
    int32_t iNumCPUCores;           //!< number of CPU cores
    float fCpu;                     //!< current cpu pct calc
    uint32_t uTime;                 //!< current cpu time calc
    uint32_t uLastTime;             //!< cpu time calc at last metrics reset
    uint32_t aLoadAvg[3];           //!< load average for 1, 5, and 15 minute intervals in 16.16 fixed-point notation
    uint32_t uTotalRam;             //!< total ram in memblock units
    uint32_t uFreeRam;              //!< free ram in memblock units
    uint32_t uSharedRam;            //!< shared ram in memblock units
    uint32_t uBufferRam;            //!< buffer ram in memblock units
    uint32_t uTotalSwap;            //!< total swap in memblock units
    uint32_t uFreeSwap;             //!< free swap in memblock units
    uint32_t uNumProcs;             //!< num procs in memblock units
    uint32_t uTotalHighMem;         //!< high mem in memblock units
    uint32_t uFreeHighMem;          //!< free mem in memblock units
    uint32_t uMemBlockSize;         //!< number of bytes per memblock unit
} DirtyCastServerInfoT;

//! forward declaration
struct sockaddr;

/*** Variables ********************************************************************/

// generated by the build system mkver task
#ifdef __cplusplus
extern "C" const char _ServerBuildTime[];
extern "C" const char _ServerBuildLocation[];
extern "C" const char _SDKVersion[];
#else
extern const char _ServerBuildTime[];
extern const char _ServerBuildLocation[];
extern const char _SDKVersion[];
#endif

/*** Functions ********************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

// create named pid file used by process management scripts
int32_t DirtyCastPidFileCreate(char *pStrPidName, int32_t iBufSize, const char *pExecName, int32_t iPortNumber);

// remove named pid file used by process management scripts
void DirtyCastPidFileRemove(const char *pStrPidName);

// create file used to implement kubernetes readiness probe (linux only)
int32_t DirtyCastReadinessFileCreate(void);

// remove file used to implement kubernetes readiness probe (linux only)
void DirtyCastReadinessFileRemove(void);

// start up logger
int32_t DirtyCastLoggerCreate(int32_t argc, const char *argv[]);

// configure logger
void DirtyCastLoggerConfig(const char *pConfigTags);

// shut down logger
void DirtyCastLoggerDestroy(void);

// format command-line options into a tagfield-style buffer
char *DirtyCastCommandLineProcess(char *pTagBuf, int32_t iTagBufSize, int32_t iArgStart, int32_t iArgCount, const char *pArgs[], const char *pPrefix);

// find config entry from config file with command-line override
const char *DirtyCastConfigFind(const char *pCommandTags, const char *pConfigTags, const char *pTagName);

// get config string from config file with command-line override
int32_t DirtyCastConfigGetString(const char *pCommandTags, const char *pConfigTags, const char *pTagName, char *pBuffer, int32_t iBufLen, const char *pDefval);

// get config number from config file with command-line override
int32_t DirtyCastConfigGetNumber(const char *pCommandTags, const char *pConfigTags, const char *pTagName, int32_t iDefval);

// log printing for DirtyCast servers (enabled in all builds, unlike debug output).
void DirtyCastLogPrintf(const char *pFormat, ...);

// log printing for DirtyCast servers (enabled in all builds, unlike debug output).
void DirtyCastLogPrintfVerbose(int32_t iVerbosityLevel, int32_t iCheckLevel, const char *pFormat, ...);

// log printing of debug messages
int32_t DirtyCastLogDbgPrintf(int32_t iVerbosityLevel, const char *pFormat, ...);

// get hostname
int32_t DirtyCastGetHostName(char *pHostName, int32_t iNameLen);

// get hostname by addr
int32_t DirtyCastGetHostNameByAddr(struct sockaddr *pAddr, int32_t iAddrSize, char *pHostname, int32_t iNameLen, char *pServiceName, int32_t iServLen);

// get ctime without trailing \n
char *DirtyCastCtime(char *pBuffer, int32_t iBufSize, time_t uTime);

// get last network error
uint32_t DirtyCastGetLastError(void);

// get server load info
void DirtyCastGetServerInfo(DirtyCastServerInfoT *pServerInfo, uint32_t uCurTick, uint8_t bResetMetrics, uint32_t uResetTicks);

// get process id for the application
int32_t DirtyCastGetPid(void);

// configuration notification of file changes
int32_t DirtyCastWatchFileInit(const char *pPath);

// process the notification
uint8_t DirtyCastWatchFileProcess(int32_t iFd);

// close the descriptor for the file watch
void DirtyCastWatchFileClose(int32_t iFd);

#ifdef __cplusplus
}
#endif

#endif // _dirtycast_h

