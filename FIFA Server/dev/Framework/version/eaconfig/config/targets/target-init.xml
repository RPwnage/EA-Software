<!-- 
     (c) Electronic Arts. All Rights Reserved.
==============================================================================

targets-init.xml

API Information

All targets
  ${package.configs}                           Property containing the list of configurations for the project
  ${package.usedependencies}                   Property containing the list of any use dependent packages by name (must be placed before the package command)
  ${package.usedependencies.${config-system}}  Property containing the list of any system specific use dependent packages by name (must be placed before the package command)

All build style targets
  ${package.buildtype}                          Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.builddependencies}                  Property containing the list of any build dependent packages by name (not required)
  ${package.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.headerfiles}                        Fileset containing the header files for the project (default provided)
  ${package.headerfiles.${config-system}}       System specific header files
  ${package.sourcefiles}                        Fileset containing the source files for the project (default provided)
  ${package.sourcefiles.${config-system}}       System specific source files, if necessary
  ${package.defines}                            Property containing the list of any build defines needed for the builds (not required)
  ${package.defines.${config-system}}           System specific defines (May not need this long term)

  ${package.includedirs}                        Property containing the list of any include directories needed for the builds (not required)
                                                Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.includedirs.${config-system}}       System specific includedirs, if necessary
  ${package.libs}                               Property containing the list of any build defines needed for the builds (not required)
                                                Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.libs.${config-system}}              System specific libraries, if necessary

  ${pacakge.buildmodules}
  ${package.${module}.buildtype}                     Property to define the type of build to do (Program, Library, DynamicLibrary, WindowsProgram, ManagedCppProgram, ManagedCppWindowsProgram, ManagedCppLibrary)
  ${package.${module}.builddependencies}             Property containing the list of any build dependent packages by name (not required)
  ${package.${module}.builddependencies.${config-system}} System specific packages for build dependencies
  ${package.${module}.headerfiles}                   Fileset containing the header files for the project (default provided)
  ${package.${module}.headerfiles.${config-system}}  System specific header files
  ${package.${module}.sourcefiles}                   Fileset containing the source files for the project (default provided)
  ${package.${module}.sourcefiles.${config-system}}  System specific source files, if necessary
  ${package.${module}.defines}                       Property containing the list of any build defines needed for the builds (not required)
  ${package.${module}.defines.${config-system}}      System specific defines (May not need this long term)

  ${package.${module}.includedirs}                   Property containing the list of any include directories needed for the builds (not required)
                                                     Includedirs from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.includedirs.${config-system}}  System specific includedirs, if necessary
  ${package.${module}.libs}                          Property containing the list of any build defines needed for the builds (not required)
                                                     Libraries from dependent packages will be automatically appended (if defined in the dependent package initialize.xml script)
  ${package.${module}.libs.${config-system}}         System specific libraries, if necessary


doxygen target
  ${package.doxygenfiles}            Fileset containing the doxygen files for the project (default provided)

==============================================================================
-->

<project xmlns="schemas/ea/framework3.xsd">
  <!-- each config file used to include this file and any custom config files added by game teams may still be including this file
  so for backward compatibility we can't remove this file. -->
  <warn message="eaconfig\target-init.xml has been deprecated and should no longer be included." />
</project>
