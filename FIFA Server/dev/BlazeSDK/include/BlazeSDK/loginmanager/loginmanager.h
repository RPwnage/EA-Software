/**************************************************************************************************/
/*! 
    \file loginmanager.h
    
    
    \attention
        (c) Electronic Arts. All Rights Reserved.
***************************************************************************************************/

#ifndef LOGINMANAGER_H
#define LOGINMANAGER_H
#if defined(EA_PRAGMA_ONCE_SUPPORTED)
#pragma once
#endif

// Include files
#include "BlazeSDK/blazesdk.h"
#include "BlazeSDK/loginmanager/loginmanagerlistener.h"
#include "BlazeSDK/blazestateprovider.h"
#include "BlazeSDK/callback.h"
#include "BlazeSDK/component/authentication/tdf/authentication.h"
#include "BlazeSDK/component/authenticationcomponent.h"
#include "BlazeSDK/component/util/tdf/utiltypes.h"

namespace Blaze
{

// Forward declarations
class BlazeHub;

namespace LoginManager
{



/*! ***********************************************************************************************/
/*! \class LoginManager
    \ingroup _mod_initialization
    
    \brief Class used to manage Blaze login.
***************************************************************************************************/
class BLAZESDK_API LoginManager
{
public:

    static LoginManager* create(BlazeHub* blazeHub, uint32_t userIndex);
    
    /*! *******************************************************************************************/
    /*! \name Listener registration methods
     */
    /*! *******************************************************************************************/
    /*! \brief Adds a listener for login events.
        
        \param listener The listener to add.
    ***********************************************************************************************/
    virtual void addListener(LoginManagerListener* listener) = 0;

    /*! *******************************************************************************************/
    /*! \brief Removes a login listener.
        
        \param listener The listener to remove.
    ***********************************************************************************************/
    virtual void removeListener(LoginManagerListener* listener) = 0;

    virtual void addAuthListener(UserManagerStateListener* listener) = 0;
    
    virtual void removeAuthListener(UserManagerStateListener* listener) = 0;

    /*! *******************************************************************************************/
    /*! \name Primary control methods
    */
    /*! *******************************************************************************************/
    /*! \brief DEPRECATED. Use the Origin Login Flow instead.

               Starts the interactive login process on consoles. Listen to the BlazeHub state-change notifications for
               the final result of the login process. If the login attempt is successful, the hub
               will transition to AUTHENTICATED. Otherwise, it will drop to a lower state and
               provide an error code.

        \param productName The Blaze server product name to authenticate against (optional)
        \param crossPlatformOpt The crossplay optin/optout setting for the user (optional)
    ***********************************************************************************************/
    virtual void startLoginProcess(const char8_t* productName = "", Authentication::CrossPlatformOptSetting crossPlatformOpt = Authentication::CrossPlatformOptSetting::DEFAULT) const = 0;

    /*! *******************************************************************************************/
    /*! \name Primary control methods
    */
    /*! *******************************************************************************************/
    /*! \brief Starts the guest login process. logging in the user based on an existing primary
               session (logged in via one of the other login methods).
    ***********************************************************************************************/
    typedef Functor2<Blaze::BlazeError, const Blaze::SessionInfo*> GuestLoginCb;
    virtual void startGuestLoginProcess(GuestLoginCb cb = GuestLoginCb()) const = 0;

    /*! *******************************************************************************************/
    /*! \brief DEPRECATED  use startAuthCodeLoginProcess instead. 
               Starts the Origin login process. Requires a Nucleus 2.0 auth code.

        \param code 2.0 AuthCode generated by Nucleus.
        \param productName The Blaze server product name to authenticate against (optional)
        \param crossPlatformOpt The crossplay optin/optout setting for the user (optional)

         If crossPlatformOpt is left as DEFAULT, then the user will be opted in to crossplay if this is his first login,
         or keep his existing setting if he has logged in before.
    ***********************************************************************************************/
    virtual void startOriginLoginProcess(const char8_t *code, const char8_t* productName = "", Authentication::CrossPlatformOptSetting crossPlatformOpt = Authentication::CrossPlatformOptSetting::DEFAULT) const = 0;
    /*! *******************************************************************************************/
    /*! \brief Starts the AuthCode login process. Requires a Nucleus 2.0 auth code.

       \param code Nucleus 2.0 AuthCode generated by Nucleus.
       \param productName The Blaze server product name to authenticate against (optional)
       \param crossPlatformOpt The crossplay optin/optout setting for the user (optional)

        If crossPlatformOpt is left as DEFAULT, then the user will be opted in to crossplay if this is his first login,
        or keep his existing setting if he has logged in before.
   ***********************************************************************************************/
    virtual void startAuthCodeLoginProcess(const char8_t *code, const char8_t* productName = "", Authentication::CrossPlatformOptSetting crossPlatformOpt = Authentication::CrossPlatformOptSetting::DEFAULT) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Starts the AccessToken login process. Requires a Nucleus 2.0 Access Token.

       \param accessToken Nucleus 2.0 AccessToken generated by Nucleus.
       \param productName The Blaze server product name to authenticate against (optional)
       \param crossPlatformOpt The crossplay optin/optout setting for the user (optional)

        If crossPlatformOpt is left as DEFAULT, then the user will be opted in to crossplay if this is his first login,
        or keep his existing setting if he has logged in before.
   ***********************************************************************************************/
    virtual void startAccessTokenLoginProcess(const char8_t *accessToken, const char8_t* productName = "", Authentication::CrossPlatformOptSetting crossPlatformOpt = Authentication::CrossPlatformOptSetting::DEFAULT) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Starts the Trusted login process. Used by dedicated servers using S2S standardized
         trust. This API should be used if an access token has already been fetched from Nucleus.

        \param accessToken The Nucleus access token obtained via client certificate.
        \param id An ID that will be used for logging and set as the persona name
        \param idType An ID type that will be used for logging
    ***********************************************************************************************/
    virtual void startTrustedLoginProcess(const char8_t* accessToken, const char8_t* id, const char8_t* idType) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Starts the Trusted login process. Used by dedicated servers using S2S standardized
         trust. This API will fetch an access token using the client certificate and key and
         should be used if no access token is available.

        \param certData The SSL certificate data
        \param keyData  The SSL certificate key
        \param id An ID that will be used for logging and set as the persona name
        \param idType An ID type that will be used for logging
    ***********************************************************************************************/
    virtual void startTrustedLoginProcess(const char8_t* certData, const char8_t* keyData, const char8_t* id, const char8_t* idType) const = 0;

    /*! *******************************************************************************************/
    /*! \brief DEPRECATED - Use S2SManager::getS2SToken instead.

         Fetches the currently cached access token if it is set. Returns nullptr if not available.
         The token is cached via startTrustedLoginProcess, caching either the provided token or
         the token fetched using the SSL cert/key. Note that in either case, the token returned
         by this method may be expired; therefore this method is deprecated and S2SManager::getS2SToken
         should be used in its place.
    ***********************************************************************************************/
    virtual const char8_t* getAccessToken() const = 0;

    /*! *******************************************************************************************/
    /*! \brief Logs out the associated user. Listen to the BlazeHub state-change notifications for
               the result. If the logout is successful, the hub will transition to CONNECTED.
               Otherwise, it will drop to a lower state and provide an error code.
    ***********************************************************************************************/
    virtual void logout(Functor1<Blaze::BlazeError> cb = Functor1<Blaze::BlazeError>()) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Cancels the current login process.

        Stops the current login process and calls logout (above) 
    ***********************************************************************************************/
    virtual void cancelLogin(Functor1<Blaze::BlazeError> cb = Functor1<Blaze::BlazeError>()) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Update user access token used by Blaze server. Client should send new access token to
         server before the current token expires if the token refreshment is managed by client.

        \param accessToken The user access token for Blaze server to use
        \param cb A callback that will be called when the access token is updated, or an error occurred.
    ***********************************************************************************************/
    virtual void updateAccessToken(const char8_t* accessToken, Functor1<Blaze::BlazeError> cb = Functor1<Blaze::BlazeError>()) const = 0;

    /*! ************************************************************************************************/
    /*! \brief A callback functor dispatched upon getAccountInfo success or failure.

        \param[in] BlazeError ERR_OK on success; otherwise see the errDetails string
        \param[in] JobId The BlazeId for the user passed in for the request.
        \param[in] bool - EA email allowed flag
        \param[in] bool - Third party email allowed flag
    ***************************************************************************************************/
    typedef Functor4<BlazeError, JobId, const bool, const bool> GetAccountInfoCb;

    /*! *******************************************************************************************/
    /*! \brief Call to get account info for a logged in user
        Note: do not override this non-virtual function. Instead, override getAccountInfoInternal if necessary.
    ***********************************************************************************************/
    void getAccountInfo(const GetAccountInfoCb& resultCb) const
    {
        getAccountInfoInternal(resultCb);
        isGetAccountInfoCalled = true;
    }

    /*! ***********************************************************************************************/
    /*! \name Console platform-specific methods
     */
    /*! *******************************************************************************************/
    /*! \brief Returns the 1st-party user index of the currently active user.
        \note This index is not the same as the (Blaze) User Index, and should only be used with 
              1st party functionality.
              Internally this is converted from the index used by DirtySock (only differs on Xbox One).

              This is needed for cases where the Blaze user index is not the same as the 
        
        \return The active user's (controller or user) index.
    ***********************************************************************************************/
    virtual uint32_t getConsoleUserIndex() const = 0;
    
    /*! *******************************************************************************************/
    /*! \brief Set the 1st-party user index of the current active user, for use with 1st party 
               functionality.  
               Internally this is converted to the index used by DirtySock (only differs on Xbox One).
        
        \param consoleUserIndex The index number of the (controller or user) of the user logging in.
        
        \return ERR_OK for success, SDK_ERR_INVALID_STATE if that index already online.
    ***********************************************************************************************/
    virtual BlazeError setConsoleUserIndex(uint32_t consoleUserIndex) = 0;

    /*! *******************************************************************************************/
    /*! \brief Get the dirty sock user index for use with dirty sock functionality. 
        
        \return The active user's dirty sock index.
    ***********************************************************************************************/
    virtual uint32_t getDirtySockUserIndex() const = 0;

    /*! *******************************************************************************************/
    /*! \brief Set the dirty sock user index of the current active user, for use with dirty sock 
               functionality. 
        
        \param index The dirty sock index number of the (controller or user) of the user logging in.
        
        \return ERR_OK for success, SDK_ERR_INVALID_STATE if that index already online.
    ***********************************************************************************************/
    virtual BlazeError setDirtySockUserIndex(uint32_t index) = 0;

    /*! *******************************************************************************************/
    /*! \name Session information methods
    */
  
    /*! *******************************************************************************************/
    /*! \brief Returns the user's Blaze ID (only valid while logged in.)

    \return The Blaze ID.
    ***********************************************************************************************/
    virtual BlazeId getBlazeId() const = 0;
    
    /*! *******************************************************************************************/
    /*! \brief Returns the user's Account ID (valid after login only)
        
        \return The Nucleus user ID.
    ***********************************************************************************************/
    virtual AccountId getAccountId() const = 0;
    AccountId getUserId() { return getAccountId(); }  // DEPRECATED

    /*! ***************************************************************************/
    /*! \brief Returns the user's Persona Id for the logged in persona.
    
        \return The id or 0 if not logged in.
    *******************************************************************************/
    virtual PersonaId getPersonaId() const = 0;

    /*! ***************************************************************************/
    /*! \brief Gets if the authenticated anonymous account is now old enough to update to a full Nucleus account.
               This is set at login time and not refreshed, so if you had just called upgradeAccount(), this value
               will not change until the next login.

    \return True if you can call upgradeAccount to upgrade to a full Nucleus account. False if the account must remain anonymous.
    *******************************************************************************/
    virtual bool getCanAgeUp() = 0;

    /*! ***************************************************************************/
    /*! \brief Gets the date/time when this account was used last.
    
        \return The date/time when this account was used last.
    *******************************************************************************/
    virtual uint32_t getLastLoginTime() const = 0;

    /*! ***************************************************************************/
    /*! \brief Gets the date/time when this account last logged in to this title.
    
        \return The date/time when this account last logged in to this title.
    *******************************************************************************/
    virtual int64_t getTitleLastLoginTime() const = 0;

    /*! ***************************************************************************/
    /*! \brief Returns true if this user has never been logged in before on this server.
    
        \return True if this user has never been logged in before on this server.
    *******************************************************************************/
    virtual bool isFirstLogin() const = 0;

    /*! ***************************************************************************/
    /*! \brief Gets the name of the logged in persona.
    
        \return The persona name or nullptr if not logged in.
    *******************************************************************************/
    virtual const char8_t *getPersonaName() const = 0;

    /*! *******************************************************************************************/
    /*! \brief Returns the user's session key (only valid while logged in.)
    ***********************************************************************************************/
    virtual const char8_t* getSessionKey() const = 0;
    
    /*! ***************************************************************************/
    /*! \brief Gets the last error that was returned by a login attempt, useful to know
                why you're in create account flow on consoles:
                AUTH_ERR_PERSONA_NOT_FOUND - Normal account creation because it doesn't exist.                
                AUTH_ERR_DEACTIVATED - Account is in a deactivated state

    \return BlazeError code.
    *******************************************************************************/
    virtual BlazeError getLastLoginError() = 0;

    /*! ***************************************************************************/
    /*! \brief (DEPRECATED) Gets if the user is allowed to create an account with e-mail notifications enabled.
            (only valid if already logged in)
    
        \return false if the user is too young to be e-mailed. 
    *******************************************************************************/
    virtual uint8_t isOfLegalContactAge() = 0;

    /*! \brief Gets if user is underage.  If user has no account, they need to go through anonymous 
            underage user account creation.  This is set at login time and not refreshed, so if the 
            user had somehow modified their date of birth or their birthday had just passed, this value
            will not change until the next login.


    \return true if user is underage 
    *******************************************************************************/
    virtual bool getIsUnderage() = 0;

    /*! \brief Gets if user is an anonymous user.  This is set at login time and not refreshed, so if the 
            user had called upgradeAccount() to supply a password, this value
            will not change until the next login.

    \return true if user is an anonymous user
    *******************************************************************************/
    virtual bool getIsAnonymous() = 0;

    /*! *******************************************************************************************/
    /*! \brief Requests to get the "Terms of Service" document.

    \param cb A callback that will be called when the downloading has finished, or an error occured. 
    The document is stored in an internal buffer which is passed to the callback. 
    You should call freeTermsOfServiceBuffer() to allow Blaze to free the memory when you no longer need it.
    ***********************************************************************************************/
    virtual JobId getTermsOfService(Functor3<Blaze::BlazeError, const char8_t*, uint32_t> cb) const = 0;

    /*! *******************************************************************************************/
    /*! \brief free the "Terms f Service" buffer.

    ***********************************************************************************************/
    virtual void freeTermsOfServiceBuffer() const = 0;
    
    /*! *******************************************************************************************/
    /*! \brief Requests to get the "Privacy Policy" document.
   
       \param cb A callback that will be called when the downloading has finished, or an error occured. 
            The document is stored in an internal buffer which is passed to the callback. 
            You should call freePrivacyPolicyBuffer() to allow Blaze to free the memory when you no longer need it.              
    ***********************************************************************************************/
    virtual JobId getPrivacyPolicy(Functor3<Blaze::BlazeError, const char8_t*, uint32_t> cb) const = 0;

    /*! *******************************************************************************************/
    /*! \brief free the "Privacy Policy" document.
   
    ***********************************************************************************************/
    virtual void freePrivacyPolicyBuffer() const = 0;

    /*! *******************************************************************************************/
    /*! \brief The callback type used to normalize/reformat fetched legal doc contents.

        \param dest   The buffer to where the fetched contents will be copied and normalized.
        \param source The buffer containing the fetched contents.
        \param size   The length of the fetched contents (does not necessarily include any terminator).

        \return The amount copied to dest buffer (not including any terminator).
    ***********************************************************************************************/
    typedef uint32_t (*LegalDocNormalizerFunction)(char8_t* dest, const char8_t* source, uint32_t size);

    /*! *******************************************************************************************/
    /*! \brief Sets the function to use to normalize/reformat fetched legal doc contents.

        \param hook   The function to use to normalize/reformat fetched legal doc contents.
    ***********************************************************************************************/
    void setLegalDocNormalizerHook(LegalDocNormalizerFunction hook);

    /*! *******************************************************************************************/
    /*! \brief Gets the function currently set as the legal doc normalizer hook.

        \return The function to use to normalize/reformat fetched legal doc contents.
    ***********************************************************************************************/
    LegalDocNormalizerFunction getLegalDocNormalizerHook() const
    {
        return mLegalDocNormalizerFunction;
    }

    /*! *******************************************************************************************/
    /*! \brief Requests to get spammable settings 

        \param eaEmailAllowed flag to show if ea email is allowed
        \param thirdPartyEmailAllowed flag to show if third party email is allowed

        \return ERR_OK for seccess, and ERR_SYSTEM for function calling failure.
        Note: do not override this function. Instead, override getSpammableInternal if necessary.
    ***********************************************************************************************/
    BlazeError getSpammable(bool& eaEmailAllowed, bool& thirdPartyEmailAllowed)
    {
        if (!isGetAccountInfoCalled) 
        {
            BLAZE_SDK_DEBUGF("[LoginManager::getSpammable] Warning: getSpammable should be called after calling getAccountInfo.");
            return ERR_SYSTEM;
        }
        
        getSpammableInternal(eaEmailAllowed, thirdPartyEmailAllowed);
        return ERR_OK;
    }


    /*! *******************************************************************************************/
    /*! \brief Returns a pointer to this connection manager's GetTelemetryServerResponse object that
         is retrieved from postAuth call.
        \return a pointer to this connections GetTelemetryServerResponse object.
    ***********************************************************************************************/
    virtual const Util::GetTelemetryServerResponse *getTelemetryServer() const = 0;

    /*! *******************************************************************************************/
    /*! \brief Returns a pointer to this connection manager's GetTickerServerResponse object that
         is retrieved from postAuth call.
        \return a pointer to this connections GetTickerServerResponse object.
    ***********************************************************************************************/
    virtual const Util::GetTickerServerResponse *getTickerServer() const = 0;

    /*! *******************************************************************************************/
    /*! \brief Requests to update user options after a user log in ,cb can tell caller success or 
    false.LoginManagerListener::onUpdateUserOptionsError is called if unsuccessful.
    ***********************************************************************************************/
    virtual JobId updateUserOptions(const Util::UserOptions& request, Functor1<Blaze::BlazeError> cb = Functor1<Blaze::BlazeError>()) const = 0;

    /*! *******************************************************************************************/
    /*! \brief Requests to  util user options that is retrieved from postAuth call.
    \return a pointer to this UserOptions object.
    ***********************************************************************************************/
    virtual const Util::UserOptions *getUserOptions() = 0;

    /*! *******************************************************************************************/
    /*! \brief set with true to use external login flow. It is recommended to be called right 
               after BlazeHub is initialized. Default is false.

        \see http://online.ea.com/confluence/dosearchsite.action?queryString=external+login+flow
    ***********************************************************************************************/
#if !defined(EA_PLATFORM_PS4) && !defined(EA_PLATFORM_XBOXONE) && !defined(EA_PLATFORM_PS5) && !defined(EA_PLATFORM_XBSX)
    virtual void setUseExternalLoginFlow(bool useExternalLoginFlow) = 0;
#endif

    /*! *******************************************************************************************/
    /*! \brief set with true to force the loginmanager to ignoreLegalDocumentUpdate. 
               Only use with setUseExternalLoginFlow(true).  Default is false.

        \see http://online.ea.com/confluence/dosearchsite.action?queryString=external+login+flow
    ***********************************************************************************************/
    virtual void setIgnoreLegalDocumentUpdate(bool ignoreLegalDocumentUpdate) = 0;

    /*! *******************************************************************************************/
    /*! \brief get the setting that whether to force the loginmanager NOT to download legal document 
               during login and create account.
    ***********************************************************************************************/
    virtual bool getSkipLegalDocumentDownload() const = 0;

    /*! *******************************************************************************************/
    /*! \brief set with true to force the loginmanager NOT to download legal document during login 
               and create account. Default is false.
    ***********************************************************************************************/
    virtual void setSkipLegalDocumentDownload(bool skipLegalDocumentDownload) = 0;


    /*! *******************************************************************************************/
    /*! \brief (DEPRECATED) Indicates whether underage account creation is supported by Blaze/Nucleus
        \return True if underage account creation is supported
    ***********************************************************************************************/
    virtual bool canCreateUnderageAccount() = 0;

    /*! *******************************************************************************************/

    /*! \name Destructor
    ***********************************************************************************************/
    virtual ~LoginManager() {}

    protected:
            
    /*! *******************************************************************************************/
    /*! \name Constructor
    ***********************************************************************************************/
    LoginManager();

    private:

    mutable bool isGetAccountInfoCalled;

    LegalDocNormalizerFunction mLegalDocNormalizerFunction;

    /*! *******************************************************************************************/
    /*! \brief the internal function for requests to get spammable settings

        \param eaEmailAllowed flag to show if ea email is allowed
        \param thirdPartyEmailAllowed flag to show if third party email is allowed
    ***********************************************************************************************/
    virtual void getSpammableInternal(bool& eaEmailAllowed, bool& thirdPartyEmailAllowed) = 0;  

    /*! *******************************************************************************************/
    /*! \brief the internal function for call to get account info for a logged in user
    ***********************************************************************************************/
    virtual void getAccountInfoInternal(const GetAccountInfoCb& resultCb) const = 0;
};

} // LoginManager
} // Blaze

#endif // LOGINMANAGER_H
