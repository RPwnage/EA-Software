[headername="framework/tdf/frameworkconfigtypes_server.h"]
#include "framework/gen/frameworkconfigtypes_server.tdf"

namespace Blaze
{

namespace Messaging
{
enum IdType
{
    MESSAGING_IDTYPE_MESSAGE
};

class RegularData
{
    [tag="enab", default=true, description="true if non-persistent messaging is enabled, false otherwise."]
    bool mEnabled;
    
    [tag="atli", default=0, description="maximum number of attributes allowed for non-persistent messages."]
    uint32_t mMessageAttributeLimit;
};

class TypeData
{
    [tag="type", default=0, description="Persistent message type."]
    uint32_t type;
    [tag="ovwr", default=true, description="controls whether to drop incoming or overwrite oldest message of this type. true=overwrite, false=drop."]
    bool overwrite;
    [tag="limt", default=100, description="limits the maximum number of messages that can be stored for this type."]
    uint32_t limit;
    [tag="skps", default=false, description="if enabled, this will skip the sweep step for the type"]
    bool skipSweep;
};

[description="TypeData information as list"]
typedef list<TypeData> TypeDataList;

class PersistentData
{
    [tag="enab", default=false, description="true if persistent messaging is enabled, false otherwise."]
    bool mEnabled;
        
    [tag="mlim", default=0, description="limits the maximum number of persistent messages stored per-user; 0 to disable limit."]
    uint32_t mMessageLimit;
    
    [tag="ovwr", default=false, description="if limit != 0 and inbox is full, overwrite controls whether to drop incoming or overwrite oldest persistent message."]
    bool mMessageOverwrite;
    
    [tag="msin", default="0h", description="format 0d:0h:0m:0s; governs how often stale persistent messages are swept from inboxes; 0h to disable sweeping."]
    TimeValue mMessageSweepInterval;
    
    [tag="mein", default="0d", description="format 0d:0h:0m:0s; governs the delay before a persistent message becomes eligible for sweep; 0d to disable expiry."]
    TimeValue mMessageExpiryInterval;
    
    [tag="typs", description="type specific rules that govern message retention policy."]
    TypeDataList mTypes;
};

class ProfanityServiceConfig
{
    [tag="serv", default=false, reconfigurable="yes", description="Should the messaging use eadp profanity service for filtering."]
    bool mUseProfanityService;

    [tag="flid", default="", reconfigurable="yes", description="eadp profanity service filter id obtained when onboarding with the service."]
    string(32) mProfanityServiceFilterId; // The 32 char length limitation is defined by the profanity service.
};

[
    description = "Configuration data for Messaging as parsed from the config file."
]
class MessagingConfig
{
    [tag="dbnp", reconfigurable="no", description="names of the databases (per platform) that contain tables that store peristent messages."]
    DbNameByPlatformTypeMap mDbNamesByPlatform;
    
    [tag="taga", reconfigurable="yes", description="regular configuration data"]
    RegularData mRegular;
        
    [tag="tagb", reconfigurable="yes", description="persistent configuration data"]
    PersistentData mPersistent;

    [tag="prof", reconfigurable="yes", description="profanity service configuration data"]
    ProfanityServiceConfig mProfanityConfig;

};

}

}
