// Defines the TDF classes used in the fifagroups component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

[headername="fifastats/tdf/fifastatstypes.h"]
#include "fifastats/gen/fifastatstypes.tdf"

namespace Blaze
{
namespace FifaGroups
{
[
    description = "The request object for a poke command.",
    details = "This class a bare minimal set of parameters."
]

enum AttributeType
{
    TYPE_STRING = 0,
    TYPE_INT
};

class Attribute
{
    [tag="akey", description="Attribute Key"] 
    string(128) mKey;

    [tag="sval", description="Attribute String Value"] 
    string(1024) mSValue;

    [tag="ival", description="Attribute Integer Value"] 
    int64_t mIValue;

    [tag="type", description="Attribute Type"] 
    AttributeType mType;
};
typedef list<Attribute> AttributeList;

typedef list<uint64_t> MemberList;

class CreateInstanceRequest
{
    [tag="ruid", description="creator user id"]
    uint64_t mCreatorUserId;

    [tag="gpna", description="goup name"] 
    string(128) mGroupName;

    [tag="gpsn", description="goup short name"] 
    string(128) mGroupShortName;

    [tag="gpty", description="goup type"] 
    string(128) mGroupType;

    [tag="attr", description="attribute list"] 
    AttributeList mAttributes;

    [tag="meml", description="member list"] 
    MemberList mMembers;
};

class CreateInstanceResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="guid", description="GU ID"] 
    string(128) mGUId;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;

    [tag="attr", description="attribute list"] 
    AttributeList mAttributes;
};

class DeleteInstanceRequest
{
    [tag="guid", description="GU Id of the group to be deleted"] 
    string(128) mGroupGUId;
};

class DeleteInstanceResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class DeleteMemberRequest
{
    [tag="guid", description="GU Id of the group to be deleted"] 
    string(128) mGroupGUId;

    [tag="tuid", description="target user id"]
    uint64_t mTargetUserId;
};

class DeleteMemberResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class JoinGroupRequest
{
    [tag="guid", description="GU Id of the group to be deleted"] 
    string(128) mGroupGUId;

    [tag="tuid", description="target user id"]
    uint64_t mTargetUserId;

    [tag="pass", description="passwod"] 
    string(128) mPassword;

    [tag="ikey", description="invite url key"] 
    string(128) mInviteKey;
};

class JoinGroupResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;

    [tag="stat", description="status"] 
    string(128) mStatus;
};

class SetInstanceAttributeRequest
{
    [tag="guid", description="GU Id of the group to be deleted"] 
    string(128) mGroupGUId;

    [tag="attr", description="Attribute"] 
    Attribute mAttribute;
};

class SetInstanceAttributeResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class SetMultipleInstanceAttributesRequest
{
    [tag="guid", description="GU Id of the group to be deleted"] 
    string(128) mGroupGUId;

    [tag="atts", description="a list of name/value string pairs represents attribute"]
    AttributeList mAttributes;
};

class SetMultipleInstanceAttributesResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class RenameGroupInstanceRequest
{
    [tag="guid", description="GU Id of the group to be renamed"] 
    string(128) mGroupGUId;

    [tag="nnam", description="new name of the group"] 
    string(256) mNewName;

    [tag="isht", description="specifies to update the name or shortname"] 
    bool mIsShortName;
};

class RenameGroupInstanceResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class MergeUpdateOp
{
    [tag="guid", description="Group Id of the group"] 
    string(64) mGroupGUId;

    [tag="gnam", description="Name of the group to rename"] 
    string(128) mGroupName;

    [tag="jnid", description="persona ID of the user to join"] 
    int64_t mJoinPersonaId;

    [tag="dele", description="should delete the group instance or not"] 
    bool mShouldDelete;

    [tag="atts", description="List of name/value string pairs represents attribute"]
    AttributeList mAttributes;
};

typedef list<MergeUpdateOp> MergeUpdateOpVector;
class MergeGroupInstancesRequest
{
    [tag="mgid", description="Merge Operation Id"]
    int32_t mMergeOperationId;   

    [tag="mopv", description="GU Id of the group to be deleted"] 
    MergeUpdateOpVector mMergeUpdateOpVector;

    [tag="rgpu", description="GU Id of the group to be deleted"] 
    Blaze::FifaStats::UpdateStatsRequest mRivalGroupUpdates;

    [tag="ogpu", description="GU Id of the group to be deleted"] 
    Blaze::FifaStats::UpdateStatsRequest mOverallGroupUpdates;
};

class MergeGroupInstancesResponse
{
    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;
};

class Nested
{
    [tag="num", description="A number value greater than 0."]
    int32_t mNum;
    
    [tag="text", description="Text to send up to the server."] 
    string(256) mText;
    
    [tag="nmpa"] map<string(32),string(32), ignorecase> mStringMap;
};

class FifaGroupsRequest
{
    [tag="num", description="A number value greater than 0."]
    int32_t mNum;
    
    [tag="text", description="Text to send up to the server."] 
    string(256) mText;
    
    [tag="smap"] map<string(32),string(32), ignorecase> mStringMap;

    [tag="nmap"] map<string(32),Nested, ignorecase> mNestedMap;
};

class FifaGroupsResponse
{
    enum FifaGroupsResponseEnum
    {
        [description="Unknown response."] 
        FIFAGROUPS_ENUM_UNKNOWN = 0,
        
        [description="Succeeded!"] 
        FIFAGROUPS_ENUM_SUCCESS,
        
        [description="Failed"] 
        FIFAGROUPS_ENUM_FAILED
    };


    [tag="map"] map<int32_t,FifaGroupsRequest> mMyMap;
    
    typedef list<int32_t> IntList;
    [tag="list"] IntList mMyList;

    [tag="enum", description="Enum response type."] 
    FifaGroupsResponseEnum mRegularEnum;
    
    [tag="msg"] 
    string(256) mMessage;
};

class FifaGroupsError
{
    [tag="msg"] 
    string(256) mMessage;
};

typedef string(64) GroupId;
typedef list<GroupId> GroupIdVector;
[
    description = "Async notification sent down when a merge completes.",
    details = "The notification is sent to players when the merge operatoin is completed."
]
class MergeNotification
{
    enum MergeNotificationOpType
    {
        [description="Set Attributes"] 
        MERGE_GROUP_SET_ATTRIBUTES = 0,
        
        [description="Rename Name"] 
        MERGE_GROUP_RENAME_NAME,
        
        [description="Rename Short Name"] 
        MERGE_GROUP_RENAME_SHORT_NAME,

        [description="Update Stats Overall"] 
        MERGE_GROUP_UPDATE_STATS_OVERALL,

        [description="Update Stats Rival"] 
        MERGE_GROUP_UPDATE_STATS_RIVAL,

        [description="Delete Group"] 
        MERGE_GROUP_DELETE_GROUP,

        [description="Join Group"] 
        MERGE_GROUP_JOIN_GROUP,

        [description="Complete"] 
        MERGE_GROUP_COMPLETE,
    };

    [tag="mgid", description="Merge Operation Id"]
    int32_t mMergeOperationId;   

    [tag="rest", description="result of the operation"] 
    bool mSuccess;

    [tag="emsg", description="Error Msg"] 
    string(128) mErrorMessage;

    [tag="ecod", description="Error Code"]
    int64_t mErrorCode;

    [tag="stco", description="Http Status Code"]
    int32_t mHttpStatusCode;

    [tag="enum", description="Enum response type."] 
    MergeNotificationOpType mMergeOpType;

    [tag="gidl", description="The groupd ids processed."]
    GroupIdVector mGroupVector;   
};

} // FifaGroups
} // Blaze



