[headername="framework/tdf/userdefines.h"]
#include "framework/gen/userdefines.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace OSDKTournaments
{

typedef uint32_t TournamentId;
typedef int32_t TournamentMode;
typedef int32_t TeamId;

typedef EntityId TournamentMemberId;

const TournamentId INVALID_TOURNAMENT_ID = 0;
const TournamentMemberId INVALID_TOURNAMENT_MEMBER_ID = 0;
const TeamId INVALID_TEAM_ID = -1;

const uint32_t TOURN_NAME_MAX_LENGTH = 64;
const uint32_t TOURN_DESC_MAX_LENGTH = 128;
const uint32_t TOURN_TROPHY_NAME_MAX_LENGTH = 32;
const uint32_t TOURN_TROPHY_META_MAX_LENGTH = 64;
const uint32_t TOURN_ATTRIBUTE_MAX_LENGTH = 32;
const uint32_t TOURN_TEAM_NAME_MAX_LENGTH = 32;
const uint32_t TOURN_MATCH_META_DATA_MAX_LENGTH = 64;

[tdfid = "hash", trackChanges = true]
class TournamentData
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "A unique identifier for the tournament."]
    TournamentId mTournamentId;

    [tag="mode", description = "The mode of the tournament."]
    TournamentMode mMode;

    [tag="name", description = "The tournament's name."]
    string(TOURN_NAME_MAX_LENGTH) mName;

    [tag="desc", description = "A description of the tournament."]
    string(TOURN_DESC_MAX_LENGTH) mDescription;

    [tag="tnam", description = "The name of the trophy awarded to winners of the tournament."]
    string(TOURN_TROPHY_NAME_MAX_LENGTH) mTrophyName;

    [tag="tmet", description = "Client specific meta data for the tournamnet trophy."]
    string(TOURN_TROPHY_META_MAX_LENGTH) mTrophyMetaData;

    [tag="rnds", description = "The number of rounds in the tournament."]
    uint32_t mNumRounds;

    [tag="nmem", description = "The total number of active members in the tournament."]
    uint32_t mTotalMemberCount;

    [tag="nomm", description = "The total number of online active members in the tournament."]
    uint32_t mOnlineMemberCount;
};

typedef list<TournamentData> TournamentDataList;

class TournamentTrophyData
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "A unique identifer for the tournament that this trophy is associated with."]
    TournamentId mTournamentId;

    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "The trophy winner's member id."]
    TournamentMemberId mMemberId;

    [tag="tnam", description = "The locallized trophy name."]
    string(TOURN_TROPHY_NAME_MAX_LENGTH) mTrophyName;

    [tag="tloc", description = "The localization key for the trophy name."]
    string(TOURN_TROPHY_NAME_MAX_LENGTH) mTrophyNameLocKey;

    [tag="meta", description = "Meta data associated with the trophy."]
    string(TOURN_TROPHY_META_MAX_LENGTH) mTrophyMetaData;

    [tag="time", description = "The time in UTC that the trophy was awarded."]
    uint32_t mAwardTime;

    [tag="cont", description = "The number of times this trophy has been awarded to the member."]
    uint32_t mAwardCount;
};

class TournamentNode
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "Tournament Id"]
    TournamentId mTournamentId;

    [tag="tmi1", default=INVALID_TOURNAMENT_MEMBER_ID, description = "The first Member's id"]
    TournamentMemberId mMemberOneId;

    [tag="tmi2", default=INVALID_TOURNAMENT_MEMBER_ID, description = "The second Member's id"]
    TournamentMemberId mMemberTwoId;

    [tag="nam1", description = "The first Member's persona name."]
    string(MAX_PERSONA_LENGTH) mMemberOneName;
    
    [tag="nam2", description = "The second Member's persona name."]
    string(MAX_PERSONA_LENGTH) mMemberTwoName;
    
    [tag="sco1", description = "The first Member's score."]
    uint32_t mMemberOneScore;
    
    [tag="sco2", description = "The second Member's score."]
    uint32_t mMemberTwoScore;
    
    [tag="att1", description = "The first Member's tournament attribute."]
    string(TOURN_ATTRIBUTE_MAX_LENGTH) mMemberOneAttribute;
    
    [tag="att2", description = "The second Member's tournament attribute."]
    string(TOURN_ATTRIBUTE_MAX_LENGTH) mMemberTwoAttribute;
    
    [tag="tea1", description = "The first Member's team."]
    TeamId mMemberOneTeam;
    
    [tag="tea2", description = "The second Member's team."]
    TeamId mMemberTwoTeam;
    
    [tag="met1", description = "Custom meta data for the first member."]
    string(TOURN_MATCH_META_DATA_MAX_LENGTH) mMemberOneMetaData;
    
    [tag="met2", description = "Custom meta data for the second member."]
    string(TOURN_MATCH_META_DATA_MAX_LENGTH) mMemberTwoMetaData;
    
    [tag="noid", description = "The node's id in the tree which corresponds to its location."]
    uint32_t mNodeId;
};

class GetTournamentsRequest
{
    [tag="mode", description = "The mode of the tournaments requested."]
    TournamentMode mMode;
};

class GetTournamentsResponse
{
    [tag="trns", description = "A list of all of the tournaments existing on the server for the specified mode."]
    TournamentDataList mTournamentList;
};

class GetAllTournamentsResponse
{
    [tag="trns", description = "A list of all of the tournaments existing on the server."]
    TournamentDataList mTournamentList;
};

class JoinTournamentRequest
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "The unique identifier for the tournament to join."]
    TournamentId mTournamentId;

    [tag="attr", description = "The game specific attribute associated with this member for this tournament"]
    string(TOURN_ATTRIBUTE_MAX_LENGTH) mTournAttribute;

    [tag="team", default=INVALID_TEAM_ID, description = "The team that the member will be using for at least the first match (optional)"]
    TeamId mTeam;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "Optional tournment member id to force use of a specific member id"]
    TournamentMemberId mMemberIdOverride;
};

class JoinTournamentResponse
{
    [tag="tdat", description = "The details of the tournament that was joined.  Will be NULL if the operation failed."]
    TournamentData mTournament;
};

class LeaveTournamentRequest
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "The unique identifier for the tournament to leave."]
    TournamentId mTournamentId;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "Optional tournment member id to force use of a specific member id"]
    TournamentMemberId mMemberIdOverride;
};

class GetMyTournamentIdRequest
{
    [tag="mode", description = "The mode of the tournament requested."]
    TournamentMode mMode;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "Optional tournment member id to force use of a specific member id"]
    TournamentMemberId mMemberIdOverride;    
};

class GetMyTournamentIdResponse
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "The unique identifier for the tournament the member is in or INVALID_TOURNAMENT_ID if the member is not in a tournament."]
    TournamentId mTournamentId;

    [tag="acti", description = "True if the member has unplayed matches left in the tournament, false otherwise"]
    bool mIsActive;
};

class GetTrophiesRequest
{
    [tag="numt", description = "The number of most recent trophies to retrieve."]
    uint32_t mNumTrophies;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "The id of the member for which the trophies are to be retrieved."]
    TournamentMemberId mMemberId;
};

class GetTrophiesResponse
{
    [tag="trop", description = "A list of trophies awarded to the member."]
    list<TournamentTrophyData> mTrophies;
};

class GetMemberCountsRequest
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "A unique identifier for the tournament to check the member count of."]
    TournamentId mTournamentId;
};

class GetMemberCountsResponse
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "A unique identifier for the tournament."]
    TournamentId mTournamentId;
    
    [tag="cont", description = "The total number of members in the tournament."]
    uint32_t mTotalMemberCount;
        
    [tag="ocon", description = "The total number of online members in the tournament."]
    uint32_t mOnlineMemberCount;
};

class GetMyTournamentDetailsRequest
{
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "A unique identifier for the tournament."]
    TournamentId mTournamentId;
    
    [tag="mode", description = "The mode of the tournament requested."]
    TournamentMode mMode;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "Optional tournment member id to force use of a specific member id"]
    TournamentMemberId mMemberIdOverride;       
};

class GetMyTournamentDetailsResponse
{
    [tag="tree", description = "A collection of nodes representing the member's current tournament tree."]
    list<TournamentNode> mTournamentTree;

    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "The member's tournament Id."]
    TournamentId mTournamentId;

    [tag="acti", description = "True if the member has unplayed matches left in the tournament, false otherwise."]
    bool mIsActive;

    [tag="levl", description = "The member's level in the tournament."]
    uint32_t mLevel;

    [tag="team", description = "The member's team."]
    TeamId mTeam;

    [tag="attr", description = "The game specific attribute associated with this member for this tournament."]
    string(TOURN_ATTRIBUTE_MAX_LENGTH) mTournAttribute;
};

class ResetTournamentRequest
{
    [tag="mode", description = "The mode of the tournament requested."]
    TournamentMode mMode;
    
    [tag="tnid", default=INVALID_TOURNAMENT_ID, description = "The unique identifier for the tournament to leave."]
    TournamentId mTournamentId;
    
    [tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "Optional tournment member id to force use of a specific member id"]
    TournamentMemberId mMemberIdOverride;    
    
    [tag="sact", default=true, description="Set the active state of the members after the reset."]
    bool mSetActive;
};

class ResetAllTournamentMembersRequest
{
    [tag="atid", default=INVALID_TOURNAMENT_ID, description = "The unique identifier for the tournament to reset."]
    TournamentId mTournamentId;
    
    [tag="asac", default=false, description = "Set the active state of the members after the reset."]
    bool mSetActive;
};

class ReportMatchResultRequest
{
    [tag="tnid", description="The id of the tournament that this match was played in"]
        TournamentId mTournId;
    [tag="uoid", description="The first player's user Id"]
        TournamentMemberId mUserOneId;
    [tag="utid", description="The second player's user Id"]
        TournamentMemberId mUserTwoId;
    [tag="uote", description="The first player's team"]
        TeamId mUserOneTeam;
    [tag="utte", description="The second player's team"]
        TeamId mUserTwoTeam;
    [tag="uosc", description="The first player's score"]
        uint32_t mUserOneScore;
    [tag="utsc", description="The second player's score"]
        uint32_t mUserTwoScore;
    [tag="uome", description="The first player's game specific metadata"]
        string(256) mUserOneMetaData;
    [tag="utme", description="The second player's game specific metadata"]
        string(256) mUserTwoMetaData;
};

class GetMemberStatusRequest
{
	[tag="tmid", default=INVALID_TOURNAMENT_MEMBER_ID, description = "The tournament member's id"]
    TournamentMemberId mMemberId;
	[tag="mode", description = "The mode of the tournament requested."]
    TournamentMode mMode;
};

} //namespace OsdkTournaments
} //namespace Blaze
