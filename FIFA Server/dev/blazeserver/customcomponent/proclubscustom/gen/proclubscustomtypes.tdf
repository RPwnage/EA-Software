// Defines the TDF classes used in the proclubsCustom component.
//  TDF classes are compiled with TypeComp, generating C++ classes that can be serialized in RPCs and Notifications.
//
// Note: see http://gos.online.ea.com/confluence/display/tech/Typecomp for info on the .tdf spec, as well as the compiler, TypeComp

namespace Blaze
{
namespace proclubscustom
{

//***************************************************************************************************
//team customization
//***************************************************************************************************

[trackChanges = true]
class customizationSettings
{
	[tag="pcid", description="club id"]
	uint64_t clubId;
	
	[tag="pck1", description="club custom kit 1"]
	int32_t customkit1;
	
	[tag="pc1p", description="club custom kit 1 primary colour"]
	int32_t customkit1PrimaryColour;
	
	[tag="pc1s", description="club custom kit 1 secondary colour"]
	int32_t customkit1SecondaryColour;
	
	[tag="pc1t", description="club custom kit 1 tertiary colour"]
	int32_t customkit1TertiaryColour;
	
	[tag="pck2", description="club custom kit 2"]
	int32_t customkit2;
	
	[tag="pc2p", description="club custom kit 2 primary colour"]
	int32_t customkit2PrimaryColour;

	[tag="pc2s", description="club custom kit 2 secondary colour"]
	int32_t customkit2SecondaryColour;
	
	[tag="pc2t", description="club custom kit 2 tertiary colour"]
	int32_t customkit2TertiaryColour;
	
	[tag="pccd", description="club custom crest id"]
	int32_t crestId;
	
	[tag="pccc", description="club custom audio crowd chant id"]
	int32_t crowdChantId;
	
	[tag="pccm", description="club commentary id"]
	int32_t commentaryId;
	
	[tag="pcmm", description="goal music"]
	int32_t goalMusicId;
	
	[tag="psti", description="club stadium id"]
	int32_t homeStadiumId;
	
	[tag="pctb", description="club custom theme"]
	int32_t themeId;
	
	[tag="pcpp", description="club pitch pattern"]
	int32_t pitchPatternId;
	
	[tag="pcpl", description="club pitch line colour"]
	int32_t pitchLineColour;
	
	[tag="pcnt", description="net tension"]
	int32_t netTensionType;
	
	[tag="pcns", description="net shape"]
	int32_t netShapeType;
	
	[tag="pcny", description="net style"]
	int32_t netStyleType;
	
	[tag="pcnm", description="net mesh"]
	int32_t netMeshType;
	
	[tag="pcfw", description="flame thrower setting"]
	int32_t flameThrower;
	
	[tag="pcb1", description="ball id"]
	int32_t ballId;
	
	[tag="pcsc", description="stadium color"]
	int32_t stadiumColorId;
	
	[tag="pcst", description="seat color"]
	int32_t seatColorId;
	
	[tag="pctf", description="tifo"]
	int32_t tifoId;
	
	[tag="pcx5", description="extra setting space for emergency use"]
	int32_t extra5;
	
};

class getCustomizationsRequest
{
	[tag="pccr", description="request to fetch list of customizations"]
	uint64_t mClubId;
};

class getCustomizationsResponse
{
	[tag="pcrp", description="result of the operation"] 
	bool mSuccess;
	
	[tag="pcls", description="data returned"] 
	customizationSettings mSettings;
};

class updateCustomizationsRequest
{
	[tag="pcur", description="request to update customizations"]
	uint64_t mClubId;
	
	[tag="pcul", description="settings to be updated"] 
	customizationSettings mSettings;
};

class updateCustomizationsResponse
{
	[tag="pcur", description="result of the operation"] 
	bool mSuccess;
};


//***************************************************************************************************
//tactics
//***************************************************************************************************

enum TacticsMentalityId
{
        MENTALITY_ULTRA_DEFENSIVE = 0, 
        MENTALITY_DEFENSIVE, 
        MENTALITY_BALANCED, 
        MENTALITY_OFFENSIVE, 
        MENTALITY_ULTRA_OFFENSIVE
};

typedef list<uint32_t> InstructionsData;
typedef blob ClubsTacticsVar;


class PlayerRolesData
{
    [tag="prci", description="captain id"]
	uint32_t mCaptainId;				

    [tag="prti", description="penalty taker id"]
	uint32_t mPenaltyTakerId;			

    [tag="prlk", description="left free kick taker id"]
	uint32_t mLeftFreeKickTakerId;		

    [tag="prrk", description="right free kick taker id"]
	uint32_t mRightFreeKickTakerId;		

    [tag="prlt", description="long kick taker id"]
	uint32_t mLongKickTakerId;			
	
    [tag="prlc", description="left corner kick taker id"]
    uint32_t mLeftCornerKickTakerId;	
	
    [tag="prrr", description="right corner kick taker id"]
    uint32_t mRightCornerKickTakerId;	
};


class TacticsData
{
    [tag="ctds", description="defensive style"]
    uint32_t defensiveStyle;

    [tag="ctdw", description="defensive width"]
    uint32_t defensiveWidth;

    [tag="ctdd", description="defensive depth"]
    uint32_t defensiveDepth;

    [tag="ctos", description="offensive style"]
    uint32_t offensiveStyle;

    [tag="ctow", description="offensive width"]
    uint32_t offensiveWidth;

    [tag="ctpi", description="players in the box"]
    uint32_t playersInTheBox;

    [tag="ctcr", description="Corners"]
    uint32_t corners;

    [tag="ctfk", description="free kicks"]
    uint32_t freeKicks;

    [tag="ctfi", description="formation id"]
    uint32_t formationId;
};

class CustomTactics
{
	[tag="ctci", description="club id"]
	uint64_t clubId;
	
	[tag="ctsi", description="slot id"]
	uint32_t tacticSlotId;

    [tag="tct1", description="tactics slots associated with the club."]
    ClubsTacticsVar mTacticsDataBlob;
};

//***************************************************************************************************
//ai players
//***************************************************************************************************

enum AvatarCustomizationSettingType
{
    SETTING_TYPE_INVALID = 0,
    SETTING_PRIORITY,
    SETTING_HAIRTYPECODE,
	SETTING_HAIRCOLORCODE,
	SETTING_FACIALHAIRTYPECODE,
	SETTING_FACIALHAIRCOLORCODE,
	SETTING_EYEBROWCODE,
	SETTING_EYECOLORCODE,
    SETTING_CP_MORPH_EAR_TWEAK_A,
	SETTING_CP_MORPH_EAR_TWEAK_B,
	SETTING_CP_MORPH_EAR_TWEAK_C,
	SETTING_CP_MORPH_EAR_TWEAK_D,
	SETTING_CP_MORPH_EAR_TWEAK_E,
    SETTING_CP_MORPH_CHIN_TWEAK_A,
	SETTING_CP_MORPH_CHIN_TWEAK_B,
	SETTING_CP_MORPH_CHIN_TWEAK_C,
	SETTING_CP_MORPH_CHIN_TWEAK_D,
	SETTING_CP_MORPH_CHIN_TWEAK_E,
    SETTING_CP_MORPH_EYE_TWEAK_A,
	SETTING_CP_MORPH_EYE_TWEAK_B,
	SETTING_CP_MORPH_EYE_TWEAK_C,
	SETTING_CP_MORPH_EYE_TWEAK_D,
	SETTING_CP_MORPH_EYE_TWEAK_E,
    SETTING_CP_MORPH_HEAD_TWEAK_A,
	SETTING_CP_MORPH_HEAD_TWEAK_B,
	SETTING_CP_MORPH_HEAD_TWEAK_C,
	SETTING_CP_MORPH_HEAD_TWEAK_D,
	SETTING_CP_MORPH_HEAD_TWEAK_E,
    SETTING_CP_MORPH_MOUTH_TWEAK_A,
	SETTING_CP_MORPH_MOUTH_TWEAK_B,
	SETTING_CP_MORPH_MOUTH_TWEAK_C,
	SETTING_CP_MORPH_MOUTH_TWEAK_D,
	SETTING_CP_MORPH_MOUTH_TWEAK_E,
    SETTING_CP_MORPH_NOSE_TWEAK_A,
	SETTING_CP_MORPH_NOSE_TWEAK_B,
	SETTING_CP_MORPH_NOSE_TWEAK_C,
	SETTING_CP_MORPH_NOSE_TWEAK_D,
	SETTING_CP_MORPH_NOSE_TWEAK_E,
    SETTING_CP_MORPH_BROW_TWEAK_A,
	SETTING_CP_MORPH_BROW_TWEAK_B,
	SETTING_CP_MORPH_BROW_TWEAK_C,
	SETTING_CP_MORPH_BROW_TWEAK_D,
	SETTING_CP_MORPH_BROW_TWEAK_E,
    SETTING_CP_MORPH_FOREHEAD_TWEAK_A,
	SETTING_CP_MORPH_FOREHEAD_TWEAK_B,
	SETTING_CP_MORPH_FOREHEAD_TWEAK_C,
	SETTING_CP_MORPH_FOREHEAD_TWEAK_D,
	SETTING_CP_MORPH_FOREHEAD_TWEAK_E
};


class MorphRegion
{
	[tag="cprt", description="face region type of the morph"]
	int32_t region_type;
	
	[tag="cppr", description="face region type of the morph"]
    int32_t preset; // 0 means don't set preset
	
	[tag="cpka", description="tweak a"]
	float tweak_a;   // sliders [-1, 1] range
	
	[tag="cpkb", description="tweak b"]
    float tweak_b;
	
	[tag="cpkc", description="tweak c"]
    float tweak_c;
	
	[tag="cpkd", description="tweak d"]	
    float tweak_d;
	
	[tag="cpke", description="tweak e"]
    float tweak_e;
};

const uint32_t MAX_NAME_LENGTH = 77;

class AIPlayerCustomization
{
	[tag="aisi", description="slot id of the attached data"]
	int32_t slotId;
	
	[tag="aipi", description="priority of the position"]
	int32_t priority;
	
	[tag="aipp", description="position"]
	int32_t position;

	[tag="gend", description="gender"]
	int32_t gender;
		
	[tag="aiht", description="hairtypecode"]
	int32_t hairtypecode;
	
	[tag="aihc", description="haircolorcode"]
	int32_t haircolorcode;
	
	[tag="aift", description="facialhairtypecode"]
	int32_t facialhairtypecode;
	
	[tag="aifc", description="facialhaircolorcode"]
	int32_t facialhaircolorcode;
	
	[tag="aieb", description="eyebrowcode"]
	int32_t eyebrowcode;
	
	[tag="aiyc", description="eyecolorcode"]
	int32_t eyecolorcode;
	
	[tag="aipf", description="preferredfoot"]
	int32_t preferredfoot;
	
	[tag="aina", description="name"]
	string(MAX_NAME_LENGTH) firstname;
	
	[tag="ainb", description="name"]
	string(MAX_NAME_LENGTH) lastname;
	
	[tag="ainc", description="name"]
	string(MAX_NAME_LENGTH) commonname;

	[tag="aikn", description="kitname"]
	string(MAX_NAME_LENGTH) kitname;
	
	[tag="aink", description="kitnumber"]
	int32_t kitnumber;
	
	[tag="ains", description="skintonecode"]	
	int32_t skintonecode;
	
	[tag="ainh", description="shoetypecode"]
	int32_t shoetypecode;
	
	[tag="aind", description="shoecolorcode1"]
	int32_t	shoecolorcode1;
	
	[tag="aine", description="shoecolorcode2"]
	int32_t	shoecolorcode2;
	
	[tag="ainf", description="shoedesigncode"]
	int32_t	shoedesigncode;
	
	[tag="aing", description="gkglovetypecode"]
	int32_t gkglovetypecode;
	
	[tag="aini", description="socklengthcode"]
	int32_t socklengthcode;

	[tag="aish", description="shortstyle"]
	int32_t shortstyle;
	
	[tag="aicd", description="commentaryid"]
	int32_t commentaryid;
	
	[tag="aicn", description="nationality"]
	int32_t nationality;
	
	[tag="ainj", description="animfreekickstartposcode"]
	int32_t animfreekickstartposcode;
	
	[tag="ainl", description="animpenaltiesstartposcode"]
	int32_t animpenaltiesstartposcode;
	
	[tag="ainm", description="runstylecode"]
	int32_t runstylecode;
	
	[tag="ainn", description="runningcode1"]
	int32_t runningcode1;
	
	[tag="aino", description="finishingcode1"]
	int32_t finishingcode1;

	[tag="ainp", description="jerseyfit"]
	int32_t jerseyfit;
	
	[tag="ainr", description="hasseasonaljersey"]
	int32_t hasseasonaljersey;
	
	[tag="aint", description="jerseystylecode"]
	int32_t jerseystylecode;
	
	[tag="ainu", description="jerseysleevelengthcode"]
	int32_t jerseysleevelengthcode;
	
	[tag="ainv", description="accessories_code_0"]
	int32_t accessories_code_0;
	
	[tag="ainx", description="accessories_code_1"]
	int32_t accessories_code_1;
	
	[tag="ainy", description="accessories_code_2"]
	int32_t accessories_code_2;
	
	[tag="ainz", description="accessories_code_3"]
	int32_t accessories_code_3;
	
	[tag="ainw", description="accessories_color_0"]
	int32_t accessories_color_0;
	
	[tag="aima", description="accessories_color_1"]
	int32_t accessories_color_1;
	
	[tag="aimb", description="accessories_color_2"]
	int32_t accessories_color_2;
	
	[tag="aimc", description="accessories_color_3"]
	int32_t accessories_color_3;
	
	[tag="aimd", description="year"]
	int32_t year;
	
	[tag="aime", description="month"]
	int32_t month;
	
	[tag="aimf", description="day"]
	int32_t day;
		
	[tag="aimr", description="we have the morphs for nose, eye ..... 8 in total"]
	list<MorphRegion> morphs;
};

class AvatarData
{
	[tag="gaip", description="Info if avatar name was deemed profane"]
	bool mIsProfane;
	
	[tag="gaie", description="Info if avatar name can be edited"]
	bool mIsNameEditable; 
};

typedef map<AvatarCustomizationSettingType, float> AvatarCustomizationPropertyMap;

class getAIPlayerCustomizationRequest
{
	[tag="gaic", description="request to fetch list of customizations"]
	uint64_t mClubId;
};

class  getAIPlayerCustomizationResponse
{
	[tag="aicr", description="result of the operation"] 
	bool mSuccess;
	
	[tag="aics", description="data returned"] 
	list<AIPlayerCustomization> mAIPlayerCustomizationList;
};

class updateAIPlayerCustomizationRequest
{
	[tag="aici", description="request to update customizations"]
	uint64_t mClubId;

    [tag="gaim", description="request to fetch list of customizations"]
	uint32_t mSlotId;
    
	[tag="aims", description="settings to be updated"] 
	AIPlayerCustomization mAIPlayerCustomization;

    [tag="aicc", description="actual map of the settings modified by user"] 
    AvatarCustomizationPropertyMap mUpdatedProperties;
 };

class updateAIPlayerCustomizationResponse
{
	[tag="uair", description="result of the operation"] 
	bool mSuccess;
};

class getCustomTacticsRequest
{
	[tag="gcic", description="request to fetch list of Custom Tactics"]
	uint64_t mClubId;
	
	[tag="gcis", description="request to fetch list of Custom Tactics"]
	uint32_t mSlotId;
};

class  getCustomTacticsResponse
{
	[tag="gctr", description="result of the operation"] 
	bool mSuccess;
	
	[tag="gcts", description="one or all custom tactics sets saved"] 
	list<CustomTactics> mCustomTactics;
};

class updateCustomTacticsRequest
{
	[tag="aici", description="club id for request to update custom tactics"]
	uint64_t mClubId;
	
    [tag="aiti", description="tacticID request to update custom tactics"]
	uint32_t mSlotId;

	[tag="aims", description="settings to be updated"] 
	CustomTactics mCustomTactics;
};

class updateCustomTacticsResponse
{
	[tag="uair", description="result of the operation"] 
	bool mSuccess;
};

class UpdateProfaneAiPlayerNamesRequest
{
    [tag="upai", description="Id of club whose names needs updating"]
    uint64_t mClubId;
};

class UpdateProfaneAiPlayerNamesResponse
{
	[tag="upnm", description="Status message after performing the player name change"]
	string(256) mStatusMessage;
};

class GetAiPlayerNamesRequest
{
    [tag="gain", description="Id of club whose AI Player names have been requested"]
    uint64_t mClubId;
};

class GetAiPlayerNamesResponse
{
    [tag="aipn", description="AI Player names of the requested club"]
    string(3925) mName;
};

class getAvatarDataRequest
{
	[tag="gadr", description="BlazeId to request avatar information"]
	uint64_t mBlazeId;
};

class getAvatarDataResponse
{
	[tag="gadt", description="Avatar data of the requested user"]
	AvatarData mAvatarData;
};

class updateAvatarNameRequest
{	
	[tag="uafn", description="Avatar first name"]
	string(MAX_NAME_LENGTH) firstname;
	
	[tag="ualn", description="Avatar last name"]
	string(MAX_NAME_LENGTH) lastname;
};

} // proclubsCustom
} // Blaze
