/**
 *  Tdf.java
 *
 *  (c) Electronic Arts. All Rights Reserved.
 *
 */
package ea.blaze.tdf;

/**
 * The base TDF class for autogenerated TDFs.
 */
public abstract class Tdf 
{	
	
	/** The Constant INVALID_TDF_ID. */
	public final static Long INVALID_TDF_ID = 0L;
	
	/** The Constant CONTAINER_MEMBER, used as the tag for visiting members of containers. */
	public final static Long CONTAINER_MEMBER = 0L;
	
	/**
	 * Apply the passed in visitors to each member of this TDF.
	 * 
	 * @param visitor
	 *            the visitor to apply to the members of this TDF.
	 * @param rootTdf
	 *            the root tdf to pass through to the visitor methods.
	 * @param referenceTdf
	 *            the reference tdf containing reference information for this TDF
	 */
	public abstract void visit(Visitor visitor, Tdf rootTdf, Tdf referenceTdf);
	
	/**
	 * Gets the TDF id, returns INVALID_TDF_ID if this TDF does not have one.  This
	 * also means the TDF cannot be used for a variable TDF field in a TDF.
	 * 
	 * @return the tdf id for this TDF.
	 */
	public long getTdfId() { return INVALID_TDF_ID; }
	
	/**
	 * Checks if this TDF is registered with the TdfFactory.  If so, the TdfFactory can create TDFs
	 * of this type just with the full class name or Tdf id.
	 * 
	 * @return true, if this TDF is registered with the TdfFactory.
	 */
	public boolean isRegisteredTdf() { return false; }
	
	/**
	 * Gets the tag info map for this TDF.
	 * 
	 * @return the tag info map
	 */
	public abstract TagInfoMap getTagInfoMap();
}
