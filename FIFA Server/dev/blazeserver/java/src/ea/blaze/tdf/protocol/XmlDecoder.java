/**
 *  XmlDecoder.java
 *
 *  (c) Electronic Arts. All Rights Reserved.
 *
 */
package ea.blaze.tdf.protocol;

import java.math.BigInteger;
import java.util.TreeMap;
import java.util.Stack;
import java.util.Vector;

import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.Text;

import ea.blaze.protocol.Base64Encoder;
import ea.blaze.tdf.Bitfield;
import ea.blaze.tdf.BlazeObjectId;
import ea.blaze.tdf.BlazeObjectType;
import ea.blaze.tdf.Blob;
import ea.blaze.tdf.MapHelper;
import ea.blaze.tdf.TagInfoMap;
import ea.blaze.tdf.Tdf;
import ea.blaze.tdf.TdfFactory;
import ea.blaze.tdf.TimeValue;
import ea.blaze.tdf.Union;
import ea.blaze.tdf.VariableTdfContainer;
import ea.blaze.tdf.VectorHelper;
import ea.blaze.tdf.types.TdfBoolean;
import ea.blaze.tdf.types.TdfChar;
import ea.blaze.tdf.types.TdfByte;
import ea.blaze.tdf.types.TdfEnum;
import ea.blaze.tdf.types.TdfFloat;
import ea.blaze.tdf.types.TdfInteger;
import ea.blaze.tdf.types.TdfLong;
import ea.blaze.tdf.types.TdfShort;
import ea.blaze.tdf.types.TdfString;
import ea.blaze.tdf.types.TdfUInt64;

/**
 * Decodes TDFs from XML stored in format returned by WAL RPC calls on blazeserver, 
 * as generated by xmlencoder.h/.cpp 
 */
public class XmlDecoder extends TdfDecoder {

	/**
	 * The current state of the TDF visitation.
	 */
	private enum State {
		TDF,
		LIST,
		MAP,
		UNION
	};
	
	/** The current DOM node being parsed. */
	private Node mCurrentNode = null;
	
	/** The tag info stack containing tag info state for nested TDF members. */
	private Stack<TagInfoMap> mTagInfoStack = new Stack<TagInfoMap>();
	
	/** The state stack. */
	private Stack<State> mStateStack = new Stack<State>();
	
	/** If an error occurred during document parsing. */
	private boolean mDocumentError = false;
	
	/** This toggles debug printing during XML parsing */
	private boolean mDebug = false;
	
	/** Base64 encoder class used to decode blob data stored in XML as base64 encoded text. */
	private Base64Encoder base64enc = new Base64Encoder();
	
	/** Tracks whether we are visiting map value or map key */
	private boolean mNextVisitIsMapValue = false;
	
	private String mCurrentContainerMember = "";

	
	/**
	 * Instantiates a new XML decoder.
	 */
	public XmlDecoder() {
		super(false, false);
	}
	
	/* (non-Javadoc)
	 * @see ea.blaze.protocol.Decoder#getName()
	 */
	@Override
	public String getName() {
		return "xml";
	}

	/* (non-Javadoc)
	 * @see ea.blaze.protocol.Decoder#getType()
	 */
	@Override
	public Type getType() {
		return Type.XML;
	}
	
	/* (non-Javadoc)
	 * @see ea.blaze.tdf.protocol.TdfDecoder#reset()
	 */
	protected void reset() {
		mCurrentNode = null;
		mTagInfoStack.clear();
		mDocumentError = false;
		mStateStack.clear();
	}
	
	/**
	 * Reads next primitive from XML DOM tree.  Determines based on current state whether to advance to the next sibling
	 * DOM node or to stay on the present DOM node (for instance, map entry keys and values are stored on same node)
	 * 
	 * @param primitiveString
	 *            the primitive string to contain information stored as text in DOM element.
	 * @return true, if prmitive was read successfully
	 */
	private boolean readNextPrimitive(TdfString primitiveString) {
		if(mCurrentNode.getNodeType() == Node.ELEMENT_NODE) {
			// Check for special pattern for map key elements
			if(!mNextVisitIsMapValue &&
			   mCurrentNode.getNodeName().equalsIgnoreCase("entry") &&
			   mCurrentNode.hasAttributes()) 
			{
				mNextVisitIsMapValue = true;
				String keyAttribute = ((Element)mCurrentNode).getAttribute("key");
				if(keyAttribute != null) {
					if(mDebug) {
						System.out.println("For map entry key element " + ((Element)mCurrentNode).getNodeName() + " reading primitive text " + keyAttribute);
					}
					primitiveString.set(keyAttribute);
					return true;
				}
				else {
					if(mDebug) {
						System.err.println("Found <entry> element without key attribute.");
					}
					mDocumentError = true;
					return false;
				}
			}
			else {
				mNextVisitIsMapValue = false;
				Node elementText = mCurrentNode.getFirstChild();

				if(elementText != null && elementText.getNodeType() == Node.TEXT_NODE) {
					if(mDebug) {
						System.out.println("For primitive element " + ((Element)mCurrentNode).getNodeName() + " reading primitive text " + ((Text)elementText).getWholeText());
					}
					primitiveString.set(((Text)elementText).getWholeText());
					advanceToNextSiblingElement();
					return true;
				}
				else {
					/* 
					 * This is not an error it generally means no value was specified for the field.
					 */
					if(mDebug) {
						System.out.println("Attempted to read primitive from element [" + mCurrentNode.getLocalName() + "] that did not have Text child node.");
					}
					advanceToNextSiblingElement();
					return false;
				}
			}
		}
		else {
			if(mDebug) {
				System.err.println("Attempting to read next primitive from non-element node  [type was " + mCurrentNode.getNodeType() + "]");
			}
		}
		mDocumentError = true;
		return false;
	}
	
	/**
	 * Sets the current node to the first child element of the current node.
	 * 
	 * @return true if child element was found, false if not and current node remains the same.
	 */
	private boolean getFirstChildElement() {
		Node currentNode = mCurrentNode.getFirstChild();
		while(currentNode != null && currentNode.getNodeType() != Node.ELEMENT_NODE) {
			currentNode = currentNode.getNextSibling();
		}
		
		if(currentNode != null && currentNode.getNodeType() == Node.ELEMENT_NODE) {
			mCurrentNode = currentNode;
			return true;
		}
		else {
			return false;
		}
	}
	
	/**
	 * Sets the current node to the parent element of the current node.  
	 * 
	 * @return true if parent element was found and set.  false if not and current node remains the same.
	 */
	private boolean getParentElement() {
		if(mCurrentNode != null) {
			if(mCurrentNode.getParentNode() != null) {
				mCurrentNode = mCurrentNode.getParentNode();
				return true;
			}
		}
		
		return false;
	}
	
	/**
	 * Advances current node to next sibling element.
	 * 
	 * @return true, if successful, false if not and current element remains the same.
	 */
	private boolean advanceToNextSiblingElement() {
		Node currentNode = mCurrentNode.getNextSibling();
		while(currentNode != null && currentNode.getNodeType() != Node.ELEMENT_NODE) {
			currentNode = currentNode.getNextSibling();
		}
		
		if(currentNode != null && currentNode.getNodeType() == Node.ELEMENT_NODE) {
			if(mDebug) {
				System.out.println("Advanced to next sibling element " + currentNode.getNodeName() + " from previous node " + mCurrentNode.getNodeName());
			}
			mCurrentNode = currentNode;
			return true;
		}
		else {
			return false;
		}
	}
	
	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf)
	 */
	@Override
	public boolean visit(Tdf tdf, Tdf referenceValue) {
		mStateStack.push(State.TDF);
		try {			
			mTagInfoStack.push(tdf.getTagInfoMap());
			
			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(getBufferAsInputStream());
			// The first child will be the TDF node
			mCurrentNode = doc.getDocumentElement();
			
			if(mCurrentNode != null) {
				
				if(getFirstChildElement()) {
					tdf.visit(this, tdf, referenceValue);
				}
				else {
					if(mDebug) {
						System.out.println("First node in DOM document was not an element node, cannot parse TDF.");
					}
					mDocumentError = true;
				}
			}

		}
		catch(Exception ex) {
			if(mDebug) {
				System.err.println("Exception thrown parsing TDF XML, cannot parse TDF: " + ex.getMessage());
				ex.printStackTrace(System.err);
			}
		}
		
		mStateStack.pop();
		return (!mDocumentError);
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Union, ea.blaze.tdf.Union)
	 */
	@Override
	public boolean visit(Union tdf, Union referenceValue) {
		mStateStack.push(State.UNION);
		
		try {			
			mTagInfoStack.push(tdf.getTagInfoMap());
			
			Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(getBufferAsInputStream());
			// The first child will be the TDF node
			mCurrentNode = doc.getDocumentElement();
			
			if(mCurrentNode != null) {
				
				if(getFirstChildElement()) {
					tdf.visit(this, tdf, referenceValue);
				}
				else {
					if(mDebug) {
						System.out.println("First node in DOM document was not an element node, cannot parse TDF.");
					}
					mDocumentError = true;
				}
			}
		}
		catch(Exception ex) {
			if(mDebug) {
				System.err.println("Exception thrown parsing TDF XML, cannot parse TDF: " + ex.getMessage());
				ex.printStackTrace(System.err);
			}
		}

		mStateStack.pop();
		return (!mDocumentError);
	}

	/**
	 * Gets the container member count.
	 * 
	 * @return the container member count
	 */
	private int getContainerMemberCount() {
		// Count number of element children
		int memberCount = 0;
		
		Node child = mCurrentNode.getFirstChild();
		while(child != null) {
			if(child.getNodeType() == Node.ELEMENT_NODE) {
				memberCount++;
			}
			child = child.getNextSibling();
		}
		return memberCount;
	}
	
	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, java.util.Vector, java.util.Vector, ea.blaze.tdf.VectorHelper)
	 */
	@Override
	public void visit(Tdf rootTdf, Tdf parentTdf, long tag, Vector<?> value,
			Vector<?> referenceValue, VectorHelper memberVisitor) {
		mStateStack.push(State.LIST);
		if(!mDocumentError) {
			if(validateCurrentElementForTdfMember(tag)) {
				int memberCount = getContainerMemberCount();
				
				if(mDebug)
					System.out.println("in vector visitor for " + mCurrentNode.getNodeName() + " member count is " + memberCount);
				
				if(memberCount > 0) {
					memberVisitor.initializeVector(value, getContainerMemberCount());
					getFirstChildElement();
					
					String tempMember = mCurrentContainerMember;
					
					if(tag != Tdf.CONTAINER_MEMBER) {
						mCurrentContainerMember = mTagInfoStack.peek().get(tag).getMember();
					}
							
					memberVisitor.visitMembers(this, rootTdf, parentTdf, tag, value, referenceValue);
					
					if(tag != Tdf.CONTAINER_MEMBER) {
						mCurrentContainerMember = tempMember;
					}
					
					getParentElement();
				}
				
				advanceToNextSiblingElement();
			}
		}
		mStateStack.pop();
	}

	/**
	 * Validates that current XML element matches expected TDF member, taking into account
	 * whether it is currently parsing a union.
	 * 
	 * @param tag
	 *            the tag of the expected element.
	 * @return true, if element validated successfully.
	 */
	private boolean validateCurrentElementForTdfMember(long tag) {
		if(mStateStack.peek() == State.UNION){
			return mCurrentNode.getNodeName().equals("valu");
		}
		else if(tag == Tdf.CONTAINER_MEMBER) {
			String elementName = mCurrentContainerMember.substring(1).toLowerCase();
			if(mDebug) {
				System.out.println("Validating current element: xml element is " + mCurrentNode.getNodeName() + " and expected element is " + elementName);
			}
			
			return (mCurrentNode.getNodeName().equals(elementName));
		}
		else { 
			String memberName = mTagInfoStack.peek().get(tag).getMember();
			String elementName = memberName.substring(1).toLowerCase();
			
			if(mDebug) {
				System.out.println("Validating current element: xml element is " + mCurrentNode.getNodeName() + " and expected element is " + elementName);
			}
			
			return (mCurrentNode.getNodeName().equals(elementName));
		}
	}
	
	/**
	 * Validate current element for TDF class.  Verifies element name matches expected name for TDF class.
	 * 
	 * @param tdfClass
	 *            the tdf class to validate
	 * @return true, if XML element matched expected TDF class name.
	 */
	private boolean validateCurrentElementForTdfClass(Tdf tdfClass) {
		String expectedName = tdfClass.getClass().getSimpleName().toLowerCase();
		
		if(mDebug) {
			System.out.println("Validating current element: xml element is " + mCurrentNode.getNodeName() + " and expected element is " + expectedName);
		}
		
		return (mCurrentNode.getNodeName().equals(expectedName));
	}
	
	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, java.util.TreeMap, java.util.TreeMap, ea.blaze.tdf.MapHelper)
	 */
	@Override
	public void visit(Tdf rootTdf, Tdf parentTdf, long tag,
			TreeMap<?, ?> value, TreeMap<?, ?> referenceValue,
			MapHelper mapVisitor) {
		mStateStack.push(State.MAP);
		if(!mDocumentError) {
			if(validateCurrentElementForTdfMember(tag)) {
				int memberCount = getContainerMemberCount();
				
				if(mDebug)
					System.out.println("in map visitor for " + mCurrentNode.getNodeName() + " member count is " + memberCount);
				
				if(memberCount > 0) {
					mapVisitor.initializeMap(value, getContainerMemberCount());
					getFirstChildElement();
					String tempMember = mCurrentContainerMember;
					
					if(tag != Tdf.CONTAINER_MEMBER) {
						mCurrentContainerMember = mTagInfoStack.peek().get(tag).getMember();
					}
							
					mapVisitor.visitMembers(this, rootTdf, parentTdf, tag, value, referenceValue);
					
					if(tag != Tdf.CONTAINER_MEMBER) {
						mCurrentContainerMember = tempMember;
					}
					
					getParentElement();
				}
				
				advanceToNextSiblingElement();
			}
		}
		mStateStack.pop();
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfBoolean, ea.blaze.tdf.types.TdfBoolean, boolean)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfBoolean value,
			TdfBoolean referenceValue, boolean defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					int boolIntVal = Integer.parseInt(valueString.get());
					if(boolIntVal == 0) {
						value.set(false);
					}
					else {
						value.set(true);
					}
				}
 				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing boolean (should be 0 or 1): " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}
    
    /* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfChar, ea.blaze.tdf.types.TdfChar, boolean)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfChar value,
			TdfChar referenceValue, char defaultValue) {

        if(!mDocumentError) {
            TdfString valueString = new TdfString();
            if(readNextPrimitive(valueString)) {
                if (valueString.get().length() == 1) {
                    value.set(valueString.get().charAt(0));
                }
                else {
                    if(mDebug)
						System.out.println("Error parsing char. Expected length: 1. Actual length: " + valueString.get().length());
                    mDocumentError = true;
                }
            }
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfByte, ea.blaze.tdf.types.TdfByte, byte)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfByte value,
			TdfByte referenceValue, byte defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Byte.parseByte(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Byte: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfShort, ea.blaze.tdf.types.TdfShort, short)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfShort value,
			TdfShort referenceValue, short defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Short.parseShort(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Short: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfInteger, ea.blaze.tdf.types.TdfInteger, int)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfInteger value,
			TdfInteger referenceValue, int defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Integer.parseInt(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Integer: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfLong, ea.blaze.tdf.types.TdfLong, long)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfLong value,
			TdfLong referenceValue, long defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Long.parseLong(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Long: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfUInt64, ea.blaze.tdf.types.TdfUInt64, ea.blaze.tdf.types.TdfUInt64)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfUInt64 value,
			TdfUInt64 referenceValue, TdfUInt64 defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(new BigInteger(valueString.get()));
				}
 				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing TdfUInt64 (BigInteger): " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}

	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfFloat, ea.blaze.tdf.types.TdfFloat, float)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfFloat value,
			TdfFloat referenceValue, float defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Float.parseFloat(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Float: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.Bitfield, ea.blaze.tdf.Bitfield)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, Bitfield value,
			Bitfield referenceValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.setBits(Long.parseLong(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Bitfield: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}

	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfString, ea.blaze.tdf.types.TdfString, java.lang.String, long)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfString value,
			TdfString referenceValue, String defaultValue, long maxLength) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				value.set(valueString.get());
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.Blob, ea.blaze.tdf.Blob)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, Blob value,
			Blob referenceValue) {
		if(!mDocumentError) {
			
			if(tag == Tdf.CONTAINER_MEMBER) {
				getFirstChildElement();
			}
			
			if(mDebug)
				System.out.println("In Blob visit, current element is " + mCurrentNode.getNodeName() + ".");
				
			// Get the blob info
			String blobCountString = ((Element)mCurrentNode).getAttribute("count");
			String blobEncodingString = ((Element)mCurrentNode).getAttribute("enc");
			
			if(blobCountString != null && blobEncodingString != null) 
			{
				int blobCount = 0;

				try {
					blobCount = Integer.parseInt(blobCountString);
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("Failed to parse blob count attribute from blob node " + mCurrentNode.getNodeName() + " setting to inactive.");
					}					
				}

				if(blobCount > 0 && blobEncodingString.equalsIgnoreCase("base64")) {
					Node blobText = mCurrentNode.getFirstChild();
					if(blobText.getNodeType() == Node.TEXT_NODE) {
						if(mDebug) {
							System.out.println("For Blob element " + ((Element)mCurrentNode).getNodeName() + " found blob count " + blobCount + " reading blob data: " + ((Text)blobText).getWholeText());
						}
						byte blobArray[] = base64enc.decode(((Text)blobText).getWholeText().trim().getBytes());
						if(mDebug) {
							System.out.println("Base64 decoded blob into byte array of size: " + blobArray.length);
							for(int i = 0; i < blobArray.length; i++) {
								System.out.println("Blob byte[" + i + "]: " + blobArray[i]);
							}
						}
						value.setData(blobArray);
					}
					else {
						if(mDebug) {
							System.err.println("Failed to find Text element under blob node with count > 0");
						}
					}
				}
			}
			
			if(tag == Tdf.CONTAINER_MEMBER) {
				getParentElement();
			}
			
			advanceToNextSiblingElement();
			
			mTagInfoStack.pop();
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.types.TdfInteger, ea.blaze.tdf.types.TdfInteger, java.lang.Class, java.lang.Enum)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TdfInteger value,
			TdfInteger referenceValue, TdfEnum enumHelper,
			TdfEnum defaultValue) {
		// We have to check for either a string representing the enum or an integer value.
		if(!mDocumentError) {
			TdfString enumString = new TdfString();
			if(readNextPrimitive(enumString)) {
				boolean enumFound = false;
				
				// See if it is int based and validate
				try {
					int enumValue = Integer.parseInt(enumString.get());
					TdfEnum lookupEnum = enumHelper.lookupValue(enumValue);
					if(lookupEnum != null) {
						enumFound = true;
						value.set(lookupEnum.getValue());
					}
				}
				catch(NumberFormatException ex) {
					TdfEnum lookupEnum = enumHelper.lookupName(enumString.get());
					if(lookupEnum != null) {
						enumFound = true;
						value.set(lookupEnum.getValue());
					}
				}
				
				if(!enumFound) {
					value.set(defaultValue.getValue());
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf)
	 */
	@Override
	public boolean visit(Tdf roottdf, Tdf parentTdf, long tag, Tdf value,
			Tdf referenceValue) {
		if(!mDocumentError) {
			
			if(tag == Tdf.CONTAINER_MEMBER && mStateStack.peek() == State.MAP) {
				getFirstChildElement();
			}
			
			if(mDebug)
				System.out.println("In TDF visit, current element is " + mCurrentNode.getNodeName() + " current TDF class is " + value.getClass().getName());
		
			if((tag == Tdf.CONTAINER_MEMBER && validateCurrentElementForTdfClass(value)) ||
			   (validateCurrentElementForTdfMember(tag))) {
				
				mTagInfoStack.push(value.getTagInfoMap());
				
				if(getFirstChildElement()) {
					if(mDebug) {
						System.out.println("In TDF visit, first child element is " + mCurrentNode.getNodeName() + " for TDF class is " + value.getClass().getName());
					}
					mStateStack.push(State.TDF);
					value.visit(this, roottdf, referenceValue);
					mStateStack.pop();
					getParentElement();
				}
				
				if(tag == Tdf.CONTAINER_MEMBER && mStateStack.peek() == State.MAP) {
					getParentElement();
				}
				
				advanceToNextSiblingElement();
				
				mTagInfoStack.pop();
			}
			else {
				if(tag == Tdf.CONTAINER_MEMBER && mStateStack.peek() == State.MAP) {
					getParentElement();
				}
			}
		}

		return true;
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.Union, ea.blaze.tdf.Union)
	 */
	@Override
	public boolean visit(Tdf roottdf, Tdf parentTdf, long tag, Union value,
			Union referenceValue) {
		
		if(!mDocumentError) {
			
			if(tag == Tdf.CONTAINER_MEMBER) {
				getFirstChildElement();
			}
			
			if(mDebug)
				System.out.println("In Union visit, current element is " + mCurrentNode.getNodeName() + " current Union class is " + value.getClass().getName());
		
			if((tag == Tdf.CONTAINER_MEMBER && validateCurrentElementForTdfClass(value)) ||
			   (validateCurrentElementForTdfMember(tag))) {
				
				mTagInfoStack.push(value.getTagInfoMap());
				
				int unionMember = Union.INVALID_MEMBER_INDEX;
				
				// Get the active member index
				String unionMemberString = ((Element)mCurrentNode).getAttribute("member");
				if(unionMemberString != null) {
					try {
						unionMember = Integer.parseInt(unionMemberString);
						if(!value.validMember(unionMember)) {
							if(mDebug) {
								System.err.println("Provided union member index [" + unionMember + "] is not valid for union represented by element " + mCurrentNode.getNodeName());
							}
							unionMember = Union.INVALID_MEMBER_INDEX;
						}
					}
					catch(NumberFormatException ex) {
						if(mDebug) {
							System.out.println("Failed to parse active member index from union node " + mCurrentNode.getNodeName() + " setting to inactive.");
						}					
					}
					
					if(unionMember != Union.INVALID_MEMBER_INDEX) {
						// For a valid union, first child should be "<valu>" tag, and the children of
						// it will be the actual value.
						if(getFirstChildElement()) {
							if(mDebug) {
								System.out.println("In union visit, first child element is " + mCurrentNode.getNodeName() + " for union class " + value.getClass().getName());
							}
							value.switchActiveMember(unionMember);
							mStateStack.push(State.UNION);
							value.visit(this, roottdf, referenceValue);
							mStateStack.pop();
							getParentElement();
						}
					}
				}
				else {
					if(mDebug) {
						System.err.println("Found union element [" + mCurrentNode.getNodeName() + "] without expected \"member\" attribute.");
					}
					mDocumentError = true;
				}
				
				if(tag == Tdf.CONTAINER_MEMBER) {
					getParentElement();
				}
				
				advanceToNextSiblingElement();
				
				mTagInfoStack.pop();
			}
			else {
				if(tag == Tdf.CONTAINER_MEMBER) {
					getParentElement();
				}
			}

		}

		return true;
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.VariableTdfContainer, ea.blaze.tdf.VariableTdfContainer)
	 */
	@Override
	public boolean visit(Tdf roottdf, Tdf parentTdf, long tag,
			VariableTdfContainer value, VariableTdfContainer referenceValue) {
		
		if(!mDocumentError) {
			
			if(tag == Tdf.CONTAINER_MEMBER) {
				getFirstChildElement();
			}
			
			if(mDebug)
				System.out.println("In VariableTdf visit, current element is " + mCurrentNode.getNodeName() + ".");
				
			if(tag == Tdf.CONTAINER_MEMBER || validateCurrentElementForTdfMember(tag)) {
				// Get the variable tdf id info
				String tdfIdString = ((Element)mCurrentNode).getAttribute("tdfid");
				String tdfClassString = ((Element)mCurrentNode).getAttribute("tdfclass");
				
				if(tdfIdString != null && tdfClassString != null) 
				{
					long tdfId = Tdf.INVALID_TDF_ID;
	
					try {
						tdfId = Long.parseLong(tdfIdString);
					}
					catch(NumberFormatException ex) {
						if(mDebug) {
							System.out.println("Failed to parse tdfid attribute from variable node " + mCurrentNode.getNodeName() + " setting to invalid TDF.");
						}					
					}
	
					if(tdfId != Tdf.INVALID_TDF_ID) {
						Tdf variableTdf = TdfFactory.get().createTdf(tdfId);
						if(variableTdf != null) {
							mTagInfoStack.push(variableTdf.getTagInfoMap());
							
							if(getFirstChildElement()) {
								if(mDebug) {
									System.out.println("In Variable TDF visit, first TDF child element is " + mCurrentNode.getNodeName() + " for TDF class is " + variableTdf.getClass().getName());
								}
								variableTdf.visit(this, variableTdf, variableTdf);
								value.set(variableTdf);
								getParentElement();
							}
													
							mTagInfoStack.pop();
						}
					}
				}
				
				if(tag == Tdf.CONTAINER_MEMBER) {
					getParentElement();
				}
				
				advanceToNextSiblingElement();
			}
		}

		return true;
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.BlazeObjectType, ea.blaze.tdf.BlazeObjectType)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag,
			BlazeObjectType value, BlazeObjectType referenceValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				BlazeObjectType id = BlazeObjectType.fromString(valueString.get());
				if(id != null) {
					value.set(id);
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.BlazeObjectId, ea.blaze.tdf.BlazeObjectId)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag,
			BlazeObjectId value, BlazeObjectId referenceValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				BlazeObjectId id = BlazeObjectId.fromString(valueString.get());
				if(id != null) {
					value.set(id);
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see ea.blaze.tdf.Visitor#visit(ea.blaze.tdf.Tdf, ea.blaze.tdf.Tdf, long, ea.blaze.tdf.TimeValue, ea.blaze.tdf.TimeValue, ea.blaze.tdf.TimeValue)
	 */
	@Override
	public void visit(Tdf roottdf, Tdf parentTdf, long tag, TimeValue value,
			TimeValue referenceValue, TimeValue defaultValue) {
		if(!mDocumentError) {
			TdfString valueString = new TdfString();
			if(readNextPrimitive(valueString)) {
				try {
					value.set(Long.parseLong(valueString.get()));
				}
				catch(NumberFormatException ex) {
					if(mDebug) {
						System.out.println("NumberFormatException thrown parsing Long: " + ex.getMessage());
						ex.printStackTrace(System.out);
					}
					mDocumentError = true;
				}
			}
		}
	}

}
