<project xmlns="schemas/ea/framework3.xsd">
  <property name="protogen.inbounddir"  value="${package.builddir}/gen/protogen/inbound"/>
  <property name="protogen.outbounddir" value="${package.builddir}/gen/protogen/outbound"/>
  <property name="protogen.helpersdir" value="${package.builddir}/gen/protogen/helpers"/>

  <property name="blazeserver.sanitizer_enabled" value="${blazeserver.asan_enabled??false} or ${blazeserver.lsan_enabled??false}"/>
  <!-- Include task to assist with deprecated server features -->
  <include file="deprecations.xml"/>

  <!-- these will be defined for all the packages we build -->
  <property name="global.defines">
    UTF_USE_EAASSERT=1
    EA_ASSERT_ENABLED
    EASTL_LIST_SIZE_CACHE
    EASTL_SLIST_SIZE_CACHE
    EASTL_STD_ITERATOR_CATEGORY_ENABLED=0
    BLAZE_ENABLE_EXTENDED_TDF_TAG_INFO
    BLAZE_ENABLE_RECONFIGURE_TAG_INFO
    BLAZE_ENABLE_TDF_MEMBER_MERGE
    BLAZE_ENABLE_TDF_ID_BY_NAME_LOOKUP
    BLAZE_ENABLE_TDF_OPTIONAL_SUBELEMENT_OWNERSHIP
    BLAZE_ENABLE_TDF_COPY_CONSTRUCTOR
    BLAZE_ENABLE_CUSTOM_TDF_ATTRIBUTES
    BLAZE_ENABLE_TDF_CHANGE_TRACKING
    EATDF_USER_FORCE_INCLUDE_HEADER=\"framework/blaze.h\"
    EASTL_USER_CONFIG_HEADER=\"${package.dir}/framework/system/allocation.h\"
    EASTL_FUNCTION_DEFAULT_ALLOCATOR_SSO_SIZE=24
    EA_TDF_MAP_ELEMENT_FIXUP_ENABLED=1
    EA_TDF_THREAD_SAFE_TDF_REGISTRATION_ENABLED=1
    EA_TDF_STRING_USE_DEFAULT_BUFFER=1
    EA_TDF_ALLOCATOR_TYPE=Blaze::BlazeStlAllocator
    BLAZESERVER <!-- define to check if the code is being compiled on Blaze Server (including auxillary tools like stress etc.)-->
    BLAZESDK_API=
    BLAZESDK_LOCAL=
    EASTL_CORE_ALLOCATOR_ENABLED=1
    PPM_DEBUG=1
    EASTDC_USE_STANDARD_NEW=1
    EASPRINTF_FIELD_MAX=1024
    _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING <!-- May be vc++ specific. Required by protobuf: https://github.com/protocolbuffers/protobuf/issues/4539  -->
    _SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING <!-- Required to silence warnings generated by grpc --> 
  </property>

  <!-- 
    We create two partial modules (BlazeCommonLibrary and BlazeFullLibrary) to separate our intertwined depenedencies. 
   
    1. We create "common" for the settings that are applicable globally everywhere in the system. These settings should be as narrow as possible. Currently, they are used for Framework and
    Proxy components. The idea is to make sure these can compile without rest of the Blaze component specific code.  
    
    2. We use "full" for the settings that build on top of "common" settings. These settings are currently used for building things like components, custom components, custom code,
    Blaze Server program, stress tool, servertools etc. While we would like better isolation of dependencies here, this is currently not possible. 
    -->

  <property name="blazeserver.common.includedirs">
    ${package.dir}

    ${package.builddir}/gen
    ${package.builddir}/gen/proxycomponent

    ${protogen.inbounddir}
    ${protogen.outbounddir}
    ${protogen.helpersdir}
  </property>

  <property name="blazeserver.full.includedirs">
    ${blazeserver.common.includedirs}

    ${package.dir}/component
    ${package.dir}/customcomponent

    ${package.dir}/customcode/common
    ${package.dir}/customcode/component

    ${package.builddir}/gen/component
    ${package.builddir}/gen/customcomponent
    ${package.builddir}/gen/framework
    ${package.builddir}/gen/customcode/common/
    ${package.builddir}/gen/customcode/component/

    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/component
    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/customcomponent
    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/proxycomponent
    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/framework
    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/customcode/common/
    ${protogen.inbounddir}/${blazeserver.proto_rootdir??}/customcode/component/
  </property>

  <property name="blazeserver.common.defines">
    ${deprecations.defines}
    _CONSOLE
    DIRTYCODE_DEBUG=0
    DS_PLATFORM
    CURL_STATICLIB
  </property>

  <property name="blazeserver.common.defines" if="${disable-mem??false} or ${blazeserver.sanitizer_enabled} or ${google-tcmalloc}">
    ${property.value}
    ENABLE_BLAZE_MEM_SYSTEM=0
  </property>

  <property name="blazeserver.common.defines" if="${blazeserver.sanitizer_enabled}">
    ${property.value}
    ENABLE_CLANG_SANITIZERS=1
  </property>

  <!-- PC defines -->
  <property name="blazeserver.common.defines" if="${config-system} == pc64">
    ${property.value}
    _CRT_NONSTDC_NO_DEPRECATE
    _CRT_RAND_S
  </property>

  <property name="blazeserver.common.defines" if="${ptmalloc3??false}">
    ${property.value}
    ENABLE_PTMALLOC3
  </property>

  <property name="blazeserver.common.defines" if="${blazeserver.generate_protos??true}">
    ${property.value}
    BLAZE_PROTOBUF_ENABLED
  </property>

  <property name="blazeserver.common.defines" if="${blazeserver.lite??false}">
    ${property.value}
    BLAZE_LITE
  </property>

  <!-- Define the active components -->
  <foreach item="String" in="${components}" property="component">
    <property name="blazeserver.common.defines">
      ${property.value}
      TARGET_${component}
    </property>
  </foreach>

  <property name="blazeserver.full.defines">
    ${blazeserver.common.defines}
  </property>

  

  <!-- PC warning suppression -->
  <property name="blazeserver.common.warningsuppression" if="${config-system} == 'pc64'">
    -wd4125 <!-- decimal digit terminates octal escape sequence -->
    -wd4267 <!-- conversion from 'type1' to 'type2', possible loss of data -->
  </property>

  <!-- linux warning suppression -->
  <property name="blazeserver.common.warningsuppression" if="${config-system} == unix64" >
    -Wno-undefined-var-template
    -Wno-error=deprecated-register
    -Wno-error=deprecated-declarations
  </property>

  <property name="blazeserver.full.warningsuppression">
    ${blazeserver.common.warningsuppression}
  </property>


  <property name="blazeserver.cc.options" unless="${config-system} == 'pc64'">
    ${property.value}
    -gdwarf-4
    <!-- -gsplit-dwarf -->
  </property>

  <property name="blazeserver.cc.options" if="${config-system} == 'unix64' and ${config-name} != 'debug'">
    ${property.value}
    -Og
    -fno-omit-frame-pointer
  </property>

  <property name="blazeserver.cc.sanitizer.options" if="${config-system} == 'unix64' and ${blazeserver.sanitizer_enabled??false}">
    ${property.value}
    -O1
    -g
    <!-- Added by Build Framework starting UnixClang - 6.0.1
    -fno-omit-frame-pointer
    -fno-optimize-sibling-calls
    -->
    -mllvm -asan-stack=0
    -mllvm -asan-globals=0
  </property>

  <property name="blazeserver.cc.sanitizer.options" if="${config-system} == 'unix64' and ${blazeserver.asan_enabled??false}">
    ${property.value}
    -fsanitize-recover=address <!-- Needed in case of halt_on_error is disabled -->
    -shared-libasan
  </property>

  <!-- these dependencies are those that are exposed in the headers of the framework library.
       this property allows us to add interface dependencies for the libraries modules and
       have the program modules link them -->
  <property name="blazeserver.common.dependencies">
    EAAssert
    EABase
    EACallstack
    EASTL
    EATDF
    grpc
    PPMalloc
    protobuf
    zlib
    hiredis
    libcurl
    libopenssl
    mariadb
  </property>

  <property name="blazeserver.common.dependencies" if="${ptmalloc3}">
    ${property.value}
    ptmalloc3
  </property>

  <property name="blazeserver.full.dependencies">
    ${blazeserver.common.dependencies}
  </property>

  <property name="blazeserver.full.dependencies" unless="${blazeserver.lite??false}">
    ${property.value}
    GamePacker
  </property>

  <BuildType name="disable-precompiled-header" from="Library">
    <remove>
      <cc.options if="${config-compiler} == vc">
        /Yu
      </cc.options>
      <cc.options if="${config-system} == 'unix64'">
        -x
      </cc.options>
    </remove>
  </BuildType>

  <PartialModule name="BlazeCommonLibrary" buildtype="Library">
    <includedirs>
      ${blazeserver.common.includedirs}
    </includedirs>

    <dependencies>
      <interface>
        ${blazeserver.common.dependencies}
      </interface>
    </dependencies>

    <config>
      <defines>
        ${blazeserver.common.defines}
      </defines>

      <buildoptions>
        <option name="buildset.lib.options" if="${config-system} == 'pc64'">
          ${option.value}
          -ignore:4099
          -ignore:4221
        </option>
        <option name="buildset.cc.options">
          ${option.value}
          ${blazeserver.cc.options??}
          ${blazeserver.cc.sanitizer.options??}
        </option>
        <option name="buildset.cc.options" if="${config-compiler} == vc">
          ${option.value}
          /JMC- <!-- Disable support for Just My Code debugging -->
        </option>
        <option name="disable_reference_optimization" value="on"/>
        <option name="generatemapfile"                value="off"/>
        <option name="runtimeerrorchecking"           value="off"/>
        <option name="editandcontinue"                value="off"/>
      </buildoptions>
      <warningsuppression>
        ${blazeserver.common.warningsuppression}
      </warningsuppression>
    </config>
  </PartialModule>

  <PartialModule name="BlazeFullLibrary" buildtype="Library">
    <includedirs>
      ${blazeserver.full.includedirs}
    </includedirs>

    <dependencies>
      <interface>
        ${blazeserver.full.dependencies}
      </interface>
    </dependencies>

    <config>
      <defines>
        ${blazeserver.full.defines}
      </defines>

      <buildoptions>
        <option name="buildset.lib.options" if="${config-system} == 'pc64'">
          ${option.value}
          -ignore:4099
          -ignore:4221
        </option>
        <option name="buildset.cc.options">
          ${option.value}
          ${blazeserver.cc.options??}
          ${blazeserver.cc.sanitizer.options??}
        </option>
        <option name="buildset.cc.options" if="${config-compiler} == vc">
          ${option.value}
          /JMC- <!-- Disable support for Just My Code debugging -->
        </option>
        <option name="disable_reference_optimization" value="on"/>
        <option name="generatemapfile"                value="off"/>
        <option name="runtimeerrorchecking"           value="off"/>
      </buildoptions>
      <warningsuppression>
        ${blazeserver.full.warningsuppression}
      </warningsuppression>
    </config>
  </PartialModule>

  <BuildType name="BlazeCLibrary" from="CLibrary">
    <option name="buildset.cc.options" if="${config-system} == 'unix64'">
      ${option.value}
      -std=c99
      -Wno-pointer-sign
    </option>

    <option name="buildset.cc.options" if="${config-system} == 'unix64' and ${config-name} != 'debug'">
      ${option.value}
      -Og
      -fno-omit-frame-pointer
    </option>

    <option name="buildset.cc.options">
      ${option.value}
      ${blazeserver.cc.sanitizer.options??}
    </option>

    <option name="buildset.cc.options" if="${config-system} == 'pc64'">
      ${option.value}
      -wd4267 <!-- conversion from 'type1' to 'type2', possible loss of data -->
    </option>
    
    <option name="buildset.cc.options" if="${config-compiler} == vc">
      ${option.value}
      /JMC- <!-- Disable support for Just My Code debugging -->
    </option>
  </BuildType>


  <PartialModule name="BlazeProgram" buildtype="Program">
    <includedirs>
      ${blazeserver.full.includedirs}
    </includedirs>

    <dependencies>
      <auto>
        ${blazeserver.full.dependencies}
      </auto>
    </dependencies>

    <libraries if="${config-system} =='pc64'" append="true">
      <includes name="ws2_32.lib" asis="true"/>
      <includes name="DbgHelp.lib" asis="true"/>
      <includes name="RpcRT4.lib" asis="true"/>
    </libraries>

    <config>
      <defines>
        ${blazeserver.full.defines}
      </defines>

      <!-- We need to turn on 4 options to optimize our link times (/opt:noref, /opt:noicf, /debug:fastlink /incremental. 
          See 
            * https://devblogs.microsoft.com/cppblog/the-visual-c-linker-best-practices-developer-iteration/ 
            * https://devblogs.microsoft.com/cppblog/faster-c-build-cycle-in-vs-15-with-debugfastlink/ 
          
          There are some bugs in EA Framework due to which either these options are not turned on by default or their exposed options don't work. 
          So after a bit of experimentation, added some explicit options and used 1 EA Framework option.
          1. disable_reference_optimization (/opt:noref) does not seem to work (does not add the right option to the linker) so explicitly added /opt:noref
          2. There is no option to add /opt:noicf so explicitly added it.
          3. /incremental option is already turned on which is good. But added it explicitly nonetheless for future proofing.
          4. Explicitly adding /debug:fastlink did not work. So used debugfastlink option from EA Framework. 
          
          Together, these options cut down incremental link time (touch 1 source file and build) from 48s to 20s for Blaze server.
          -->
      <buildoptions>
        <option name="buildset.cc.options">
          ${option.value}
          ${blazeserver.cc.options??}
          ${blazeserver.cc.sanitizer.options??}
        </option>
        <option name="buildset.link.options" if="${config-system} == 'pc64'">
          ${option.value}
          -ignore:4099
          -ignore:4221
          /NODEFAULTLIB:libcmt  <!-- Fix for link errors after adding zlib package -->
          /opt:noref
          /opt:noicf
          /incremental
        </option>
        <option name="buildset.link.options" if="${config-system} == 'pc64' and ${config-name} == 'debug'">
          ${option.value}
          /NODEFAULTLIB:libcmtd   <!-- Fix for link errors after adding grpc package -->
        </option>
        <option name="buildset.cc.options" if="${config-compiler} == vc">
          ${option.value}
          /JMC- <!-- Disable support for Just My Code debugging -->
        </option>
        <option name="buildset.link.options" if="${blazeserver.asan_enabled??false}">
          ${option.value}
          -shared-libasan
        </option>

        <option name="buildset.link.options" if="${config-system} == 'unix64'">
          ${option.value}
          -fuse-ld=lld
          -Wl,--gdb-index
          -rdynamic
          -lpthread
          -lpcap
          -luuid
          ${package.builddir}/gen/blazeserver/vers.cpp
        </option>
        <!-- generating map files increases the link time -->
        <option name="disable_reference_optimization" value="on"/>
        <option name="generatemapfile"                value="off"/>
        <option name="runtimeerrorchecking"           value="off"/>
        <option name="editandcontinue"                value="off"/>
        <option name="debugfastlink"                  value="on" if="${config-name} == 'debug'"/>
        <option name="uselibrarydependencyinputs"     value="on" if="${config-name} == 'debug'"/>
        <option name="incrementallinking"             value="on" if="${config-name} == 'debug'"/>
      </buildoptions>
      <warningsuppression>
        ${blazeserver.full.warningsuppression}
      </warningsuppression>
    </config>

    <copylocal>true</copylocal>
  </PartialModule>

  
</project>
