/*! ************************************************************************************************/
/*!
    \file xblsessiondirectorycommontypes.tdf
    \attention
        (c) Electronic Arts. All Rights Reserved.
*/
/*! ************************************************************************************************/

[headername="framework/tdf/externalsessiontypes.h"]
#include "framework/gen/externalsessiontypes.tdf"

namespace Blaze
{

namespace XBLServices
{

/////////////////////////////////////////////////////////////////////////////////////////
//      Common Request & response objects
/////////////////////////////////////////////////////////////////////////////////////////

[trackChanges = true]
class MultiplayerSessionRef
{
    [tag="scid", description="The title's service config identifier."]
    XblScid mScid;

    [tag="stnm", description="The MultiPlayerSession's XDP configured session template."]
    XblSessionTemplateName mTemplateName;

    [tag="snam", description="The MultiPlayerSession's session name."]
    XblSessionName mName;
};

[trackChanges = true]
class TournamentRef
{
    [tag="orgn", description="The organizer."]
    TournamentOrganizer mOrganizer;
    [tag="trid", description="The tournament id."]
    TournamentId mTournamentId;
};

[trackChanges = true]
class MultiplayerSessionSystemProperties
{
    [tag="clos", default=false, description="whether external session will be Closed. Note: MPS may omit returning Closed if its false, so decoder must default to false."]
    bool mClosed;

    [tag="jres", description="external session's join restriction. Possible values are 'none', 'local', or 'followed'."]
    string(8) mJoinRestriction;
};
[trackChanges = true]
class MultiplayerSessionProperties
{
    [tag="syst", description="External session's system properties."]
    MultiplayerSessionSystemProperties mSystem;
};

typedef string(100) MultiplayerSessionTeamName; // max 100 chars for X1

[trackChanges = true]
class ServersTournamentsConstantsSystem
{
    [tag="tref", description="Arena game MPS 'servers.tournaments.constants.system.tournamentRef'."]
    TournamentRef mTournamentRef;
};
[trackChanges = true]
class ServersTournamentsConstants
{
    [tag="syst"] ServersTournamentsConstantsSystem mSystem; //Arena game/team MPS 'servers.tournaments.constants.system'
};
[trackChanges = true]
class ServersTournaments
{
    [tag="cnst"] ServersTournamentsConstants mConstants;   //game MPS 'servers.tournaments.constants'
};

[trackChanges = true]
class ServersArbitrationConstantsSystem
{
    [tag="strt", description="Arena game MPS 'servers.arbitration.constants.system.startTime'. If in the past, XBL's MPSD automatically advances it to the current time."]
    Blaze::UtcTimeString mStartTime;
};
[trackChanges = true]
class ServersArbitrationConstants
{
    [tag="syst"] ServersArbitrationConstantsSystem mSystem;
};
[trackChanges = true]
class ServersArbitration
{
    [tag="cnst"] ServersArbitrationConstants mConstants;
};

[trackChanges = true]
class MultiplayerSessionServers
{
    [tag="trna"] ServersTournaments mTournaments; //Arena game MPS 'servers.tournaments' section
    [tag="arbn"] ServersArbitration mArbitration; //Arena game MPS 'servers.arbitration'
};

[trackChanges = true]
class MultiplayerSessionCapabilitiesSystemConstants
{
    [tag="gply", description="(needed for MPSD contract version 107) whether the external session represents an actual game play session (as opposed to a helper session like a match or lobby session). true enables XBL recent players and reputation reporting."]
    bool mGameplay;

    [tag="arbi", description="Whether supports arbitration. True for Arena game MPS."]
    bool mArbitration;

    [tag="xply", description="Whether the session supports MPSD sessions/invites working across different client platforms that use XBL. E.g. MS now requires this for invites between Xbox One and XBSX clients to work."]
    bool mCrossPlay;

    [tag="lrge", description="Whether the session is Large, which allows it to have greater max members than MS's limit for regular MPSs, but has some extra limitations also (see MS docs for details)."]
    bool mLarge;
};

[trackChanges = true]
class MultiplayerSessionSystemConstantsArbitration
{
    [tag="arto", description="time in milliseconds from the scheduled start time before match results must be reported for arbitration. If this timeout is reached before at least one player reports the results, first party automatically sets an internal disqualification status for all members in the game's multiplayer session. Must be greater than forfeit timeout."]
    uint64_t mArbitrationTimeout;

    [tag="ffto", description="time in milliseconds from the scheduled start time a user has to actively join to the tournament game, before first party automatically sets an internal disqualification status for the user, on the game's multiplayer session."]
    uint64_t mForfeitTimeout;
};

[trackChanges = true]
class MultiplayerSessionSystemConstants
{
    [tag="rsto", description="milliseconds before a reserved member removed."]
    uint64_t mReservedRemovalTimeout;

    [tag="into", description="milliseconds before an inactive member removed."]
    uint64_t mInactiveRemovalTimeout;

    [tag="ryto", description="milliseconds before a ready member removed."]
    uint64_t mReadyRemovalTimeout;

    [tag="seto", description="milliseconds before an empty session removed."]
    uint64_t mSessionEmptyTimeout;

    [tag="invp", description="external session's invite protocol. Possible values are  'game' or empty string."]
    XblSessionInviteProtocol mInviteProtocol;

    [tag="visb", description="external session's visibility setting. Possible values are 'open', 'visible', or 'private'."]
    string(7) mVisibility;

    [tag="capb", description="external session's capabilities block."]
    MultiplayerSessionCapabilitiesSystemConstants mCapabilities;
    
    [tag="arbi", description="Arena game MPS's constants.system.arbitration block."]
    MultiplayerSessionSystemConstantsArbitration mArbitration;

    [tag="maxm", description="max members count. If omitted, uses MS's defined default."]
    uint16_t mMaxMembersCount;
};

[trackChanges = true]
class MultiplayerSessionCustomConstants
{
    // This will always be assigned from an uint64_t, but MPSD interprets all numeric values as doubles when retreived on the client.
    // String has size 20, a uint64_t will have a max of 20 digits.
    [tag="id", description="Numeric identifier for the external session, stored as a string."]
    string(20) mExternalSessionId;

    [tag="type", description="The type of id specified for the external session."]
    int64_t mExternalSessionType;

    [tag="cust", description="Title specific custom data string."]
    ExternalSessionCustomDataString mExternalSessionCustomDataString;
    
    [tag="trid", description="The tournament id, if this MPS is for a tournament game."]
    TournamentId mTournamentId;
};

[trackChanges = true]
class MultiplayerSessionConstants
{
    [tag="cust", description="MPS constants.custom block"]
    MultiplayerSessionCustomConstants mCustom;

    [tag="syst", description="MPS constants.system block"]
    MultiplayerSessionSystemConstants mSystem;
};

[trackChanges = true]
class MemberSystem
{
    [tag="xuid", description="the member's xuid"]
    string(MAX_EXTERNAL_ID_CHAR_LEN) mXuid;

    [tag="init", description="whether managed initialization enabled"]
    bool mInitialize;

    [tag="team", description="member's tournament team name"]
    MultiplayerSessionTeamName mTeam;
};

[trackChanges = true]
class MemberConstants
{
    [tag="syst", description="the member's constants.system block"]
    MemberSystem mSystem;
};

typedef string(-1) XblRecentPlayerGroupId;

[trackChanges = true]
class MemberPropertiesSystem
{
    [tag="actv", description="whether member is marked as active in MPS"]
    bool mActive;

    [tag="grps", description="list of recent player group identifiers (unique per MPS strings) to track the user in. Members of same groups will appear in each others recent players lists."]
    list<XblRecentPlayerGroupId> mGroups;
};

[trackChanges = true]
class MemberProperties
{
    [tag="syst", description="the member's properties.system block"]
    MemberPropertiesSystem mSystem;
};

[trackChanges = true]
class Member
{
    [tag="syst", description="the member's constants block"]
    MemberConstants mConstants;

    [tag="prop", description="the member's properties block"]
    MemberProperties mProperties;
};

[trackChanges = true]
class NonActiveMember
{
    [tag="syst", description="the member's constants block"]
    MemberConstants mConstants;
};


typedef map<string(-1), Member> Members;
typedef map<string(-1), NonActiveMember> NonActiveMembers;

[trackChanges = true]
class MultiplayerSessionResponse
{
    [tag="prop", description="MPS properties block"]
    MultiplayerSessionProperties mProperties;

    [tag="cons", description="MPS constants block"]
    MultiplayerSessionConstants mConstants;

    [tag="memb", description="MPS members"]
    Members mMembers;

    [tag="coid", description="MPS CorrelationId"]
    ExternalSessionCorrelationId mCorrelationId;
    
    [tag="srvr", description="MPS servers block"]
    MultiplayerSessionServers mServers;
};

[trackChanges = true]
class MultiplayerSessionErrorResponse
{
    [tag="retr", default=2, description="Recommended wait in seconds before MPSD call retry after an http 503 failure. MPSD may return this header value on http 503 failure, if not, then MS recommendeds waiting default 2s."]
    uint32_t mRetryAfter;
    
    [tag="xlog", description="detailed debug info on failure."]
    string(-1) mXblLog;

    [tag="cons", description="only filled out if error returns this external session data (content type json), e.g. 403 join restriction errors."]
    MultiplayerSessionConstants mConstants; //Used to check for Visibility private failures. side: decoder may log warning if this data missing in rsp, but this causes no functional problems.
};

[trackChanges = true]
class HandlesErrorResponse
{
    [tag="retr", default=2, description="Recommended wait in seconds before MPSD call retry after an http failure. MPSD may return this header value on http 503 failure, if not, then MS recommendeds waiting default 2s."]
    uint32_t mRetryAfter;
};

class HandlesActivityRequestHeader
{
    [tag="cvrn", description="The handles service contract version."]
    string(MAX_XBLCONTRACTVERSION_CHAR_LEN) mContractVersion;

    [tag="atkn", description="The authentication token used to make the call to the handles service for the user."]
    string(-1) mAuthToken;

    [tag="ttid", description="Xbox Live Handles service's server to server calls require setting the title id in this header."]
    TitleId mOnBehalfOfTitle;
};

}
}
