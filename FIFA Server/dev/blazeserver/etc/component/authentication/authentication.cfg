
// ====================================================
// Authentication/Nucleus configurations.
// ====================================================
authentication = {

#if (ENV == "dev" || ENV == "test")
    enableExpressCommands = true
    expressLoginEmailWhitelist = ["arson*@ea.com", "nexus*@ea.com", "invalid_email@ea.com", "*@anonymous.ea.com"]
#endif

    // Origin access trial - https://developer.ea.com/display/blaze/Blaze+Origin+Access+Trials+Setup 
    // Note that to turn on the check, the corresponding product's entitlementStatusCheckEnabled flag will need to be enabled as well.
    entitlementStatusCheckPeriod = "15m"
    // entitlement status check is turned on by default for pc (this is the common configuration for integrators). This is also an "enable list" (vs disable list) to keep the behavior consistent
    // with existing configuration (product's entitlementStatusCheckEnabled flag)
    enableEntitlementCheckPlatforms = ["pc"] 
    
    totalEntitlementStatusCheckPerSecond = "1000"

    // Limits the number of usersessions per client type
    // Setting a limit of 0 will disable logins for that client type
    // Any client type that isn't specified is not limited
    // For example, CLIENT_TYPE_GAMEPLAY_USER = 1000 will limit the server to
    // 1000 gameplay users
    psuLimits = {
    }

#if (ENV == "dev" || ENV == "test")
    allowStressLogin = true
#else
    allowStressLogin = false
#endif

    
    // The maximum number of login attempts allowed per minute.  If the rate is exceeded
    // login processing is delayed until such time that it would fall within defined rate
    totalLoginsPerMinute = "#TOTAL_LOGINS_PER_MIN#"

    // Define the list of client types that will bypass the login rate limiter.  This is typically
    // used to allow dedicated server to bypass the rate limiter to prevent them from being
    // hampered by game clients logging back in after a full restart.
    bypassRateLimiterClientTypes = [ "CLIENT_TYPE_DEDICATED_SERVER" ]

    // Specify game identifier for Legal documents retrieval, the string should be valid game name
    // descripted at http://tos.ea.com/legalapp/doc/tosAPI_files/usage_doc.htm.  
    // LegalDocGameIdentifier = "MOH" 
    
// FIFA SPECIFIC CODE START
    //#include "component/authentication/products.cfg"
#if PLATFORM == "ps4"	
    #include "component/authentication/products.ps4.cfg"
#elif PLATFORM == "ps5"
    #include "component/authentication/products.ps5.cfg"
#elif PLATFORM == "xone"
    #include "component/authentication/products.xone.cfg"
#elif PLATFORM == "xbsx"
    #include "component/authentication/products.xbsx.cfg"
#elif PLATFORM == "pc"
    #include "component/authentication/products.pc.cfg"
#elif PLATFORM == "stadia"
    #include "component/authentication/products.stadia.cfg"
#endif
// FIFA SPECIFIC CODE END
    //Stop serving this document at all if the legal web service has been down for more than 1 day
    //defaults to 24 hour if not specified, max is 7 days.
    //stopLegalDocServiceIntervalTime = 24
    

    //Removing in Urraca.0
    // Specify the password strength requirement.  It can be either "WEAK" or "STRONG"
    // WEAK passwords have no restrictions on their format
    // STRONG passwords must have alpha-numeric characters, and at least one number.  The rules are defined by Nucleus.
    // NOTE: SRM approval is REQUIRED to use WEAK passwords.
    //passwordStrength = "STRONG"

    //Removing in Urraca.0
    // EA Legal has requested that Blaze refrain from checking for updated TOS/PP versions during login
    //legalDocsVersionCheck = false

#if (ENV == "prod")
    nintendoEnvironments = ["lp1"]
#elif (ENV == "cert")
    // NX supports multiple cert environments
    nintendoEnvironments = ["dd1", "sd1", "sp1"]

    // Alternative Sandbox ids are allowed to login, but will fail xbl commands
    altSandboxIds = ["EARW.99", "CERT", "CERT.DEBUG"]
#else
    nintendoEnvironments = ["dd1"]

    //sandbox "" is for stress tool xone test, test accounts were created with empty sandbox value
    altSandboxIds = [""]
#endif

    // specify trusted sources that can call restricted RPCs such as trustedLogin RPC
    trustedSources = [ #TRUSTED_NETWORKS#, #DEDICATED_SERVER_NETWORKS#, DynamicInetFilterGroup:eadp_cloud ]

    VerifyAuthSource = #VERIFY_AUTH_SOURCE#

    // schema (settings) name in Player Settings Service for core Blaze integration (not for custom use)
    pssSchemaName = "blazeVoip"
}
