// -------------------------------
// GameReporting config file
// -------------------------------

// FIFA SPECIFIC CODE START
#if (PLATFORM == "ps4")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "ps5")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "xone")
    #define LOC_PLAYER "SDB_ST_GAMERTAG"
#elif (PLATFORM == "xbsx")
    #define LOC_PLAYER "SDB_ST_GAMERTAG"
#elif (PLATFORM == "pc")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#elif (PLATFORM == "stadia")
    #define LOC_PLAYER "SDB_ST_ONLINEID"
#endif
// FIFA SPECIFIC CODE END

gamereporting = {
    // Database configuration. No per platform map is needed because gamehistory supports cross platform games. 
    // If a separate database is needed than "main" in shared cluster due to load, just use #if (PLATFORM == "common").
    // Note that the game reporting also supports sharding based on the game type. 
    dbName = "#GAMEREPORTING_DB_ALIAS#", 

    // FIFA SPECIFIC CODE START
    gameReportInGameEndPinEvent = true,
	
    customGlobalConfig = {
        tdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKCustomGlobalConfig",
        value = {
			skillTables = [
				 0,    300,    400,    500,    600,   700,   800,   900,   1000,   1100,
				 1200,   1300,   1400,   1600,   1800,   2000,   2200,   2400,   2600,   2800,
				 3000,   3200,   3400,   3600,   3800,   4000,   4300,   4600,   4900,   5300,
				 5700,   6100,   6600,   7100,   7700,   8300,   9000,  10000,  11000,  12000,
				13000,  14000,  15000,  16000,  17000,  18000,  19000,  20000,  22000,  24000,
				26000,  28000,  30000,  32000,  34000,  36000,  38000,  40000,  43000,  46000,
				49000,  53000,  57000,  61000,  65000,  69000,  73000,  77000,  82000,  86000,
				90000,  95000, 100000, 105000, 110000, 115000, 120000, 125000, 130000, 135000,
			   140000, 145000, 150000, 155000, 160000, 165000, 170000, 175000, 180000, 185000,
			   190000, 195000, 200000, 205000, 210000, 215000, 220000, 225000, 230000
			]
			endPhases = [
				{ phase = 1, maxTime = 1  }
			]

			#include "component/customGameReporting.cfg"
		}
    },
    // FIFA SPECIFIC CODE END
    
    //  gameTypes:
    //      Stats and other attribute definitions have been moved to their respective report TDFs.   Use this section
    //      to define the report TDF used for the game type.  
    //      Also use this section to customize what the game type uses to collate and process the report.
    //      Developers can override the GameReportProcessor and GameReportCollator classes to customize game reporting for
    //      either a single GameType, or for a series of GameTypes.
    //
    //      reportTdf:
    //          This is the full namespace::class_name string identifying the custom game report TDF specified inside the 
    //          Blaze::GameReporting::GameReport TDF.
    //
    //      reportProcessorClass/reportCollatorClass:
    //          This value is passed to the GameReportProcessor::create()/GameReportCollator::create() to construct the
    //          custom report processor/collator for the report.  If writing custom code, developers should modify those methods to construct
    //          the desired class using this string key as an identifier.
    //              
    //          Blaze includes a simple report processor for reports that only require stat processing without game-specific modification 
    //          of the report beyond what is supported by the GameReport custom attributes used in the report TDF.   
    //          
    //          Consult documentation on constructing a custom GameReport TDF for more information.
    //      
    //      arbitraryUserOfflineReportProcessing: 
    //          If the value is false, the offline game report don't allow nothing change for the user specified in the report (if he didn¡¯t send it).
    //          This default value is true.
    //
    
    // Note on PS5 psnMatchUpdates.
	// Documentation available here: https://developer.ea.com/display/blaze/Gen+5+First+Party+Sessions+Integration
	// (PS5 Matches tab, expand section on gamreporting.cfg)
	
	// Here's the format of psnMatchUpdates:
	/*
		psnMatchUpdates = {
			PlayerStats = {
				matchResults = {
					// used if competitionType is COOPERATIVE (value for all players should be the same)
					// only one of cooperativeResult or competitiveResult can be used
					cooperativeResult = "$REPORT$.coopResult"

					// used if competitionType is COMPETITIVE
					competitiveResult = {
						// becomes the player ID in the report (Blaze ID will NOT be sent)
						entityId = "$INDEX$",

						// rank for each player/entity (and team) is determined (based on score) after each player is extracted
						// score is omitted from PSN request if resultType is RESULT (i.e., included if SCORE).
						
						// to find the valid values for this, look at the enclosing 'reportTdf' field and look up where it's defined in a TDF file. the valid values are the fields of the TDF class.
						// for example, if reportTdf == "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport" then the TDF definition is in 
						// /blazeserver/customcode/component/gamereporting/osdk/gen/gameosdkreport.tdf, and the valid values are fields of the OSDKPlayerReport class.
						score = "score"
					}
				}

				// additional matchStatistics (playerStatistics or teamStatistics/teamMemberStatistics depending on competitionType and groupType)
				matchStats = {
					hits = "hits",
					misses = "misses"
				}
			}
		},
	*/
	
    // FIFA SPECIFIC CODE START - comment out
    /*gameTypes = {
        sampleReportBase = {
            arbitraryUserOfflineReportProcessing = true,
            reportProcessorClass = "basic",
            reportCollatorClass = "basic",
            customDataTdf = "Blaze::GameReporting::SampleBase::Report",
            
            report = {
                reportTdf = "Blaze::GameReporting::SampleBase::Report",
                subreports = {
                    gameAttrs = {
                        reportTdf = "Blaze::GameReporting::SampleBase::GameAttributes",                        
                        gameHistory = [       
                            {
                                table = "game",
                                columns = {
                                    map = "mapId",
                                    mode = "mode"
                                }
                            }
                        ],
                        metricUpdates = {
                            GRPTTYPE = "mode"
                        }
                    },
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::SampleBase::PlayerReport",                        
                        statUpdates = {
                            PlayerStats = {
                                category = "Sample",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    map = "$REPORT$.gameAttrs.mapId"
                                },
                                stats = {
                                    kills = { value="kills", type="INCREMENT" },
                                    deaths = { value="deaths", type="INCREMENT" },
                                    longestTimeAlive = { value="longestTimeAlive", type="INCREMENT" },
                                    money = { value="money", type="INCREMENT" }
                                }
                            }                        
                        },
                        gameHistory = [
                            {
                                table = "player",
                                primaryKey = [ "player_id" ],
                                columns = {
                                    player_id = "$INDEX$",
                                    kills = "kills",
                                    deaths = "deaths",
                                    longestTimeAlive = "longestTimeAlive",
                                    money = "money"
                                }
                            }
                        ],
                        metricUpdates = {
                            KILLS = "kills",
                            DEATHS = "deaths"
                        }
                    }
                }          
            }
        },  
        
        integratedSample = {
            arbitraryUserOfflineReportProcessing = true,
            reportProcessorClass = "basic",
            reportCollatorClass = "basic",
            
      //  Custom configuration data local to game type - accessible via ProcessedGameReport::getGameType()::getConfig().getCustomGlobalConfig()
      //    customConfig = {
      //        tdf = "Blaze::GameReporting::BasicConfig",
      //        value = {
      //            strictStatsUpdates = true
      //        }
      //    },
      
            report = {
                reportTdf = "Blaze::GameReporting::IntegratedSample::Report",          
                subreports = {
                    gameAttrs = {
                        reportTdf = "Blaze::GameReporting::IntegratedSample::GameAttributes",                        
                        reportValues = {
                            mapId = "$GAMEATTRS$[^ISmap]",
                            mode = "$GAMEATTRS$[^mode]"
                        },
                        gameHistory = [                            
                        
                        ],
                        metricUpdates = {
                            GAMEMODE = "mode",
                            GAMEMAP = "mapId"
                        }
                    },
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::IntegratedSample::PlayerReport",                        
                        statUpdates = {
                            PlayerStats = {                            
                                category = "IntegratedSampleStatsCategory",
                                entityId = "$INDEX$",
                                //optional = true,
                                keyscopes = {
                                    ISmap = "$REPORT$.gameAttrs.mapId",
                                    ISmode = "$REPORT$.gameAttrs.mode"
                                },
                                stats = {
                                    hits = { value="hits", type="INCREMENT" },
                                    misses = { value="misses", type="INCREMENT" },
                                    //torchings = { value="torchings", type="INCREMENT"},
                                    wins = { value="winner", type="INCREMENT" },
                                    losses = { value="loser", type="INCREMENT" }
                                }
                            }                        
                        },

                        psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    // used if competitionType is COOPERATIVE (value for all players should be the same)
                                    cooperativeResult = "$REPORT$.cooperativeResult"

                                    // used if competitionType is COMPETITIVE
                                    competitiveResult = {
                                        // becomes the player ID in the report (Blaze ID will NOT be sent)
                                        entityId = "$INDEX$",

                                        // rank for each player/entity (and team) is determined (based on score) after each player is extracted
                                        // score is omitted from PSN request if resultType is RESULT (i.e., included if SCORE)
                                        score = "hits"
                                    }
                                }

                                // additional matchStatistics (playerStatistics or teamStatistics/teamMemberStatistics depending on competitionType and groupType)
                                matchStats = {
                                    hits   = { val = "hits",   format = "%.0f" },
                                    misses = { val = "misses", format = "%.0f" }
                                }
                            }
                        },

                        statsServiceUpdates = {
                            PlayerStats = {
                                context = "BlazeSample",
                                category = "IntegratedSampleStatsCategory",
                                entityId = "$INDEX$",
                                //optional = true,
                                dimensionalStats = {
                                    hits = [
                                        {
                                            value = "hits",
                                            type  = "INCREMENT",
                                            dimensions = {
                                                map = "^amazon",
                                                weapon = "^rifle"
                                            }
                                        }
                                    ],
                                    wins = [
                                        {
                                            value = "winner",
                                            type  = "INCREMENT",
                                            dimensions = {
                                                level = "$REPORT$.gameAttrs.level"
                                            }
                                        }
                                    ],
                                },
                                stats = {
                                    hits = { value="hits", type="INCREMENT" },
                                    misses = { value="misses", type="INCREMENT" },
                                    //torchings = { value="torchings", type="INCREMENT"},
                                    wins = { value="winner", type="INCREMENT" },
                                    losses = { value="loser", type="INCREMENT" }
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "player",
                                primaryKey = [ "player_id" ],
                                columns = {
                                    player_id = "$INDEX$",
                                    hits = "hits",
                                    misses = "misses",
                                    //torchings = "torchings",
                                    winner = "winner",
                                    loser = "loser"
                                }
                            }
                        ],
                        metricUpdates = {
                            HITS = "hits",
                            MISSES = "misses"
                            //TORCHINGS = "torchings"
                        }
                    }
                }
            }            
        }
    },
    
    gameHistory = {

        // the max number of games will be purged in each interval
        maxGamesToPurgePerInterval = 10000,

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 1 min
        lowFrequentPurgeInterval = "1m",

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 30 secs
        highFrequentPurgeInterval = "30s",

        // format 0d:0h:0m:0s; governs the delay before a game report becomes eligible for purge; 0d to disable expiry
        historyExpiry = "15d"
    },
    
    gameHistoryReporting = {

        queries = [
             { name = "recent_sample_game",
               typeName = "sampleReportBase",
               maxGamesToReturn = 10
             }
             { name = "my_recent_sample_game",
               typeName = "sampleReportBase",
               maxGamesToReturn = 5
               filters = [
                  { table = "game", name = "mode", expression = "? = 2" }
                  { table = "player", name = "kills", expression = "? = $s" }
               ]
               columns = [
                  { table = "player", name = "kills" }
                  { table = "game", name = "mode" }
               ]
             }
        ]

        views = [
            { name = "my_recent_sample_games",
              desc = "Recent Sample Games",
              metadata = "STYLE=ONLINE_SPREADSHEET",
              typeName = "sampleReportBase",
              maxRowsToReturn = 5,
              filters = [
                 { table = "player", name = "player_id", expression = "? = $s" }
              ]
              columns = [
                 { table = "player", index = 1, name = "player_id", entityType = "usersessions.user", shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "0|0" },
                 { table = "player", name = "deaths", shortDesc = "Deaths", longDesc = "Deaths", type = "int", format = "%d", kind = "~pct", metadata = "0|0" },
                 { table = "player", index = 1, name = "deaths", shortDesc = "Oppo Deaths", longDesc = "Opponents Deaths", type = "int", format = "%d", kind = "~num", metadata = "0|0" }
                 { table = "player", name = "money", shortDesc = "Money", longDesc = "Money", type = "int", format = "%d", kind = "~pct", metadata = "0|0" },
                 { table = "player", index = 1, name = "money", shortDesc = "Oppo Money", longDesc = "Opponents Money", type = "int", format = "%d", kind = "~num", metadata = "0|0" }
              ]
            },
            { name = "mygame_playerdetails",
              desc = "Player Details in Sample Games",
              metadata = "STYLE=ONLINE_SPREADSHEET",
              typeName = "sampleReportBase",
              maxRowsToReturn = 15,
              rowAttributeType = "player",
              filters = [
                 { table = "game", index = 0, name = "game_id", expression = "? = $s" }
              ]
              columns = [
                 { table = "player", name = "player_id", entityType = 1, shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "0|0" },
                 { table = "player", name = "deaths", shortDesc = "Deaths", longDesc = "Deaths", type = "int", format = "%d", kind = "~pct", metadata = "0|0" },
                 { table = "player", name = "kills", shortDesc = "SDB_KILLS", longDesc = "SDB_KILLS", type = "int", format = "%d", kind = "~num", metadata = "0|0" }
                 { table = "player", name = "longestTimeAlive", shortDesc = "Long Time Alive", longDesc = "Long Time Alive", type = "int", format = "%d", kind = "~num", metadata = "0|0" }
              ]
            }
        ]
    },

    metricsInfo = {
        reportsToStore = 5   // calculate the averate over the last N reports
        // these attributes will be added to health check status page
        // keep track the average of these attribute values
        storeAverage = [
           { name = "HITS" },
           { name = "MISSES" },
           { name = "TORCHINGS" }
        ]
        // keep track the total number of each value
        storeByValue = [
           { name = "GAMEMODE" },
           { name = "GAMEMAP" }
        ]
     },

    //Configuration section for skill-related functionality.
    skillInfo = {
        //Each entry in "dampingTables" creates a lookup table (from 0-x) for percentages to reduce skill gain by.
        //Any request for an index past what is defined in the configuration uses the last defined value.
        //Application of this configuration is in custom/reportprocessor.cpp, so a game team can choose to multiply the results from various lookups
        //or just go with the minimum damping returned after lookup.
        //Name field is used to identify the tables when passed into SkillDampingUtil::lookupDampingPercent()
        dampingTables = [
            { name = "rematchDamping"
              table = [ 100, 100, 80, 60, 40, 20, 0 ]
            },
            { name = "dnfDamping"
              table = [ 100, 90, 80, 50, 30, 0 ]
            }
        ]

        // max skill value (cap)
        // if not specified, then no capping
        //maxValue = 10000
    },
    
    //Configuration for the "basic" report processor
    basicConfig = {
        // if true, then the basic report processor will not publish stats if the stats request contains *any* invalid stat entries
        //    for example, is stat A and B are in a request, A points to a valid stat update but B points to invalid update, then the
        //    stat update request will fail - meaning no stats are published.
        // if false, then the request will publish stat A but not B.  No errors are returned from game reporting.
        strictStatsUpdates = true
    },
    
    //  Custom configuration data global to all game types. - accessible via GameReportingSlaveImpl::getConfig().getCustomGlobalConfig()
    customGlobalConfig = {
        tdf = "Blaze::GameReporting::BasicConfig",
        value = {
            strictStatsUpdates = true
        }
    }

    externalSessions = {
        psnMatchesServiceLabel = #PS5_MATCHES_SERVICE_LABEL#
    }*/
    // FIFA SPECIFIC CODE END
    
    // FIFA SPECIFIC CODE BEGIN
    gameTypes = {
        gameType0 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameH2H",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = false,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						},
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId"
                                }
                            }
                        ]
                    }, // gameReport
										
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = false,
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										},
										statUpdates = {
												DNFStats = {
													category = "NormalGameStats",
													entityId = "$INDEX$",
													keyscopes = {
														accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
														controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
													},
													stats = {
														totalGamesPlayed = { value="^1", type="INCREMENT"},
//														totalGamesNotFinished = { value="^1", type="INCREMENT" condition="$DNF$[$INDEX$]" } 
														totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT"}
													}
												},
												PlayerStats = {
												    category = "NormalGameStats",
												    entityId = "$INDEX$",
												    keyscopes = {
													   accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
													   controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
												   },
												   stats = {
													    goals = { value = "goals", type = "INCREMENT"},
													    ownGoals = { value = "ownGoals", type = "INCREMENT"},
													    possession = { value = "possession", type = "INCREMENT"},
													    shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
													    shotsFor = { value = "shots", type = "INCREMENT"},
													    tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
													    tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
													    passAttempts = { value = "passAttempts", type = "INCREMENT"},
													    passesMade = { value = "passesMade", type = "INCREMENT"},
													    fouls = { value = "fouls", type = "INCREMENT"},
													    yellowCards = { value = "yellowCard", type = "INCREMENT"},
													    redCards = { value = "redCard", type = "INCREMENT"},
													    corners = { value = "corners", type = "INCREMENT"},
													   offsides = { value = "offsides", type = "INCREMENT"},
													   wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
													   losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
													   ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
												   }
												},
												UserGameCount_StatCategory = {
													category = "UserGameCount_StatCategory",
													entityId = "$INDEX$",
													keyscopes = {
														gameType = "$GAMEATTRS$[^OSDK_gameMode]"
													},
													stats = {
														count = { value = "^1", type = "INCREMENT"}
													}
												} // PlayerStats
										} //statUpdates
									}, //CommonPlayerReport
									H2HCustomPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
										skipComparison = false,
										statUpdates = {
											PlayerStats = {
												category = "NormalGameStats",
												entityId = "$INDEX$",
												keyscopes = {
													accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
													controls = "controls"
												},
												stats = {
													shotsAgainst = { value = "shotsAgainst", type = "INCREMENT"},
													shotsAgainstOnGoal = { value = "shotsAgainstOnGoal", type = "INCREMENT"},
													goalsAgainst = { value = "goalAgainst", type = "INCREMENT"}
												}
											} // PlayerStats
										} // statUpdates
									} //mH2HCustomPlayerData
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											spevent_id = "$REPORT$.gameReport.customGameReport.sponsoredEventId",
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											KIT = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.kit",											

											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											
											season_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SeasonalPlayData.seasonId",
											cup_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SeasonalPlayData.cup_id",
											gameNumber = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SeasonalPlayData.gameNumber",
											realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
							PlayerStats = {
								matchResults = {
									competitiveResult = {
										entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
									}
								}
							}
						} // psnMatchUpdates

                    } // playerReports
                } // subreports
            } // report
        }, // gameType0
        
        gameType1 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameH2HCups",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = false,
                        reportValues = {
                            categoryId = "^-1"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						}
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = false,
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										},
										statUpdates = {
											DNFStats = {
												category = "NormalGameStats",
												entityId = "$INDEX$",
												keyscopes = {
													accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry",
													controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls"
												},
												stats = {
													totalGamesPlayed = { value="^1", type="INCREMENT"},
//													totalGamesNotFinished = { value="^1", type="INCREMENT" condition="$DNF$[$INDEX$]" } 
													totalGamesNotFinished = { value="$REPORT$.playerReports[$INDEX$].customDNF", type="INCREMENT"}
												}
											},
											UserGameCount_StatCategory = {
												category = "UserGameCount_StatCategory",
												entityId = "$INDEX$",
												keyscopes = {
													gameType = "^1"
												},
												stats = {
													count = { value = "^1", type = "INCREMENT"}
												}
											}
										} //statUpdates
									} //CommonPlayerReport
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											KIT = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.kit",											

											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											
											cup_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SeasonalPlayData.cup_id",
											gameNumber = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SeasonalPlayData.gameNumber",
											realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						} // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType1
        
        gameType5 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameOTP",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = false,
                        reportValues = {
                            categoryId = "^-1"
                        }
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FifaOTPReportBase::GameReport",
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member"
                                        }
                                    }
                                ]
                            }
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            PlayerStats = {
                               category = "ClubOTPPlayerStats",
                               entityId = "$INDEX$",
                               keyscopes = {
                                        pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                               },
                               stats = {
                                        wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                        losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                        ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                        //position = { value = "pos", type = "assign" }
                               }
                            },
                            VProObjectiveStats = {
                               category = "VProObjectiveStats",
                               entityId = "$INDEX$",
                               stats = {
                                        wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"}
                               }
                            },
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FifaOTPReportBase::PlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										},
										statUpdates = {
											PlayerStats = {
												category = "ClubOTPPlayerStats",
												entityId = "$INDEX$",
												keyscopes = {
													pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
												},
												stats = {
													goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
													assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
													shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
													passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
													passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
													interceptions = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.interceptions", type = "INCREMENT"},
													tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
													tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

													goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
													saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
													redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
                                                    
													rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

													cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsAny", type = "INCREMENT"},
													cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsDef", type = "INCREMENT"},
													cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
													manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.manOfTheMatch", type = "INCREMENT"},
													otpgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.otpgames", type = "INCREMENT"}
												}
											}
										} //statUpdates
									}, //CommonPlayerReport
									ObjectiveStatsReport = {
										reportTDF = "Blaze::GameReporting::Fifa::ObjectiveStatsReport",
										skipComparison = false,
										statUpdates = {
											VProObjectiveStats = {
												category = "VProObjectiveStats",
												entityId = "$INDEX$",
												stats = {
													goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.goals", type = "INCREMENT"},
													assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.assists", type = "INCREMENT"},
													shotsOnGoal = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.shotsOnGoal", type = "INCREMENT"},
													penaltyGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.penaltyGoals", type = "INCREMENT"},
													freekickGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.freekickGoals", type = "INCREMENT"},
													headerGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.headerGoals", type = "INCREMENT"},													
													passesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.passesCompleted", type = "INCREMENT"},
													dribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.dribblesCompleted", type = "INCREMENT"},
													crossesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.crossesCompleted", type = "INCREMENT"},
													keyPasses = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.keyPasses", type = "INCREMENT"},
													oneOnOneSuccess = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.successfulOneOnOnes", type = "INCREMENT"},													
													blocks = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.blocks", type = "INCREMENT"},													
													intercepts = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.intercepts", type = "INCREMENT"},
													tackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.tackles", type = "INCREMENT"},
													headersCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.headersCompleted", type = "INCREMENT"},													
													saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.saves", type = "INCREMENT"},
													penaltiesSavedByGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.penaltiesSavedByGK", type = "INCREMENT"},
													teamPassesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.teamPassesCompleted", type = "INCREMENT"},
													teamDribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.teamDribblesCompleted", type = "INCREMENT"},													
													teamTackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.ObjectiveStatsReport.teamTackles", type = "INCREMENT"}
												}
											}
										} //statUpdates
									} //ObjectiveStatsReport									
								},
								gameHistory = [
								{
									table = "player",
									entityType = "usersessions/user",
									primaryKey = [ "player_id" ],
									columns = {                                               
										player_id = "$INDEX$",
										SCORE = "$REPORT$.playerReports[$INDEX$].score",
										wins = "$REPORT$.playerReports[$INDEX$].wins",
										losses = "$REPORT$.playerReports[$INDEX$].losses",
										ties = "$REPORT$.playerReports[$INDEX$].ties",
										team = "$REPORT$.playerReports[$INDEX$].team",
						   
										goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
										assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.assists",
										shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
										passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
										passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
										tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
										tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
										pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
										goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goalsConceded",
										saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.saves",

										cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsAny",
										cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsDef",
										cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cleanSheetsGoalKeeper",
										mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.manOfTheMatch",
										redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                       
										rating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.rating",
                                        
										vprohackreason = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^VPROHACKREASON]",
										vproattr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VPROHACKATTR]",
                               
										realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]",
										realtimeidle = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEIDLE]"
									}
								}
                            ]
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,                        
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
							PlayerStats = {
								matchResults = {
									competitiveResult = {
										entityId = "$INDEX$",
										score = "customPlayerReport.CommonPlayerReport.goals"
									}
								}
							}
						} // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        } // gameType5
        
        gameType7 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										},
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "SoloGameStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    ownGoals = { value = "ownGoals", type = "INCREMENT"},
                                                    possession = { value = "possession", type = "INCREMENT"},
                                                    shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
                                                    shotsFor = { value = "shots", type = "INCREMENT"},
                                                    tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
                                                    tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
                                                    passAttempts = { value = "passAttempts", type = "INCREMENT"},
                                                    passesMade = { value = "passesMade", type = "INCREMENT"},
                                                    fouls = { value = "fouls", type = "INCREMENT"},
                                                    yellowCards = { value = "yellowCard", type = "INCREMENT"},
                                                    redCards = { value = "redCard", type = "INCREMENT"},
                                                    corners = { value = "corners", type = "INCREMENT"},
                                                    offsides = { value = "offsides", type = "INCREMENT"}
                                                }
                                            } // PlayerStats
                                        } //statUpdates
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false,
                                        statUpdates = {
                                            PlayerStats = {
                                                category = "SoloGameStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    //team = { value = "team", type = "ASSIGN"},
                                                    wins = { value = "wins", type = "INCREMENT"},
                                                    losses = { value = "losses", type = "INCREMENT"},
                                                    ties = { value = "ties", type = "INCREMENT"},
                                                    result = { value = "result", type = "ASSIGN"},
                                                    shotsAgainst = { value = "shotsAgainst", type = "INCREMENT"},
                                                    shotsAgainstOnGoal = { value = "shotsAgainstOnGoal", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalAgainst", type = "INCREMENT"}
                                                }
                                            } // PlayerStats
                                        } // statUpdates
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType7
// ========================== Solo game reports =============================
// 		CONNECTED_SOLO_PLAYNOW = 90
        gameType90 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^90"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports

                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType90

// 		CONNECTED_SOLO_BE_A_PRO
        gameType91 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^91"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType91

// 		CONNECTED_SOLO_CREATETOURNAMENT
        gameType92 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^92"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType92


//		CONNECTED_SOLO_PRACTICE
        gameType93 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^93"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType93

// 		CONNECTED_SOLO_MLS,
        gameType94 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^94"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType94

// 		CONNECTED_SOLO_CAREER,
        gameType95 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^95"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType95

//		CONNECTED_SOLO_BAG
        gameType96 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^96"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType96

//		CONNECTED_SOLO_MATCHDAY		
        gameType100 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^100"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType100

//		CONNECTED_SOLO_LIVEFIXTURE
        gameType101 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^101"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType101

//		CONNECTED_SOLO_GAMEOFWEEK		
        gameType102 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^102"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType102

//		CONNECTED_SOLO_STORY		
        gameType120 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    UserGameCount_StatCategory = {
                                        category = "UserGameCount_StatCategory",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            gameType = "^120"
                                        },
                                        stats = {
                                            count = { value = "^1", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                }//subreports
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType120
		
	// ==========================================================================

        gameType9 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameClub",
        reportCollatorClass = "basic",
      //  Custom configuration data local to game type - accessible via ProcessedGameReport::getGameType()::getConfig().getCustomGlobalConfig()
      //    customConfig = {
      //        tdf = "Blaze::GameReporting::BasicConfig",
      //        value = {
      //            strictStatsUpdates = true
      //        }
      //    },
      
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubGameReport",
                                reportValues = {
                                    challengeClubId = "$GAMEATTRS$[^OSDK_ChlngrClubId]"
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member",
                                            clubgamekey = "clubgamekey",
                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
									customClubGameReport = {
										reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsGameReport",
										gameHistory = [
											{
												table = "game",
												columns = {
													mom = "mom"
												}
											}
										]
									} // customClubGameReport
								} // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            ClubOTPPlayerStats = {
                                category = "ClubOTPPlayerStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                }
                            },
                            VProObjectiveStats = {
                                category = "VProObjectiveStats",
                                entityId = "$INDEX$",
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"}
                                }
                            },
                            ClubMemberStats = {
                                category = "ClubMemberStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
 									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                               }
                            },
                            ClubUserCareerStats = {
                                category = "ClubUserCareerStats",
                                entityId = "$INDEX$",
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                 }
                            },
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                    ClubOTPPlayerStats = {
                                        category = "ClubOTPPlayerStats",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
                                        },
                                        stats = {
                                            clubgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubGames", type = "INCREMENT"}
                                        }
                                    },
                                    ClubMemberStats = {
										category = "ClubMemberStats",
										entityId = "$INDEX$",
										keyscopes = {
											club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
										},
										stats = {
                                        minutes = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.minutes", type = "INCREMENT"}
                                        }
                                    },
                                    ClubUserCareerStats = {
										category = "ClubUserCareerStats",
										entityId = "$INDEX$",
										stats = {
											challenge = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.challenge", type = "INCREMENT"}
										}	
	                                }
                                },
                                subreports = {
                                    customClubPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsPlayerReport",
                                        skipComparison = false,
                                        subreports = {
											CommonPlayerReport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
												skipComparison = false,
												subreports = {
													commondetailreport = {
														reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
														skipComparison = true
													}
												},
												statUpdates = {
													ClubOTPPlayerStats = {
														category = "ClubOTPPlayerStats",
														entityId = "$INDEX$",
														keyscopes = {
															pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
														},
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
															interceptions = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.interceptions", type = "INCREMENT"},
															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
		                                                    
															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
														}
													},
													ClubMemberStats = {
														category = "ClubMemberStats",
														entityId = "$INDEX$",
														keyscopes = {
															club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
														},
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
															prevGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "ASSIGN"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},
		                                                    
															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},                                                    
															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
		                                                    
															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}

														}
													},
													ClubUserCareerStats = {
														category = "ClubUserCareerStats",
														entityId = "$INDEX$",
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
		                                                    
															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},

															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
														}
													}
												} //statUpdates
											}, //CommonPlayerReport
											ObjectiveStatsReport = {
												reportTDF = "Blaze::GameReporting::Fifa::ObjectiveStatsReport",
												skipComparison = false,
												statUpdates = {
													VProObjectiveStats = {
														category = "VProObjectiveStats",
														entityId = "$INDEX$",
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.goals", type = "INCREMENT"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.assists", type = "INCREMENT"},
															shotsOnGoal = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.shotsOnGoal", type = "INCREMENT"},
															penaltyGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.penaltyGoals", type = "INCREMENT"},
															freekickGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.freekickGoals", type = "INCREMENT"},
															headerGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.headerGoals", type = "INCREMENT"},													
															passesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.passesCompleted", type = "INCREMENT"},
															dribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.dribblesCompleted", type = "INCREMENT"},
															crossesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.crossesCompleted", type = "INCREMENT"},
															keyPasses = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.keyPasses", type = "INCREMENT"},
															oneOnOneSuccess = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.successfulOneOnOnes", type = "INCREMENT"},													
															blocks = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.blocks", type = "INCREMENT"},													
															intercepts = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.intercepts", type = "INCREMENT"},
															tackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.tackles", type = "INCREMENT"},
															headersCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.headersCompleted", type = "INCREMENT"},													
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.saves", type = "INCREMENT"},
															penaltiesSavedByGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.penaltiesSavedByGK", type = "INCREMENT"},
															teamPassesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamPassesCompleted", type = "INCREMENT"},
															teamDribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamDribblesCompleted", type = "INCREMENT"},													
															teamTackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamTackles", type = "INCREMENT"}
														}
													}
												} //statUpdates
											} //ObjectiveStatsReport																				
										},
										gameHistory = [
										{
											table = "player",
											entityType = "usersessions/user",
											primaryKey = [ "player_id" ],
											columns = {                                               
												player_id = "$INDEX$",
												SCORE = "$REPORT$.playerReports[$INDEX$].score",
												wins = "$REPORT$.playerReports[$INDEX$].wins",
												losses = "$REPORT$.playerReports[$INDEX$].losses",
												clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
								   				
												goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals",
												assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists",
												shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots",
												passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts",
												passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade",
												tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts",
												tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade",
												pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
												goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded",
												saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves",

                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny",
                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef",
                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper",
                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch",
                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard",
												
                                                rating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating",
	                               
                                                vprohackreason = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^VPROHACKREASON]",
                                                vproattr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VPROHACKATTR]",
                                             
                                                realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]",
                                                realtimeidle = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEIDLE]"                                             
                                                }
                                           }
                                    ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,  						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
							PlayerStats = {
								matchResults = {
									competitiveResult = {
										entityId = "$INDEX$",
										score = "customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals"
									}
								}
							}
						} // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubReport"
                        subreports = {
                            clubReports = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubClubReport",
				                skipComparison = false,
				                statUpdates = {
					                ClubRankStats = {
						                category = "ClubRankStats",
						                entityId = "$INDEX$",
						                stats = {
											result5 = { value = "gameResult",  type = "assign" },
							                wins = { value = "wins", type = "INCREMENT"},
								            ties = { value = "ties", type = "INCREMENT"},
							                losses = { value = "losses", type = "INCREMENT"}
                                        }
                                    },
                                    ClubRankLeagueStats = {
                                        category = "ClubRankLeagueStats",
                                        entityId = "$INDEX$",
                                        keyscopes = {
                                            season = "clubseason"
                                        },
                                        stats = {
							                wins = { value = "wins", type = "INCREMENT"},
 							                ties = { value = "ties", type = "INCREMENT"},
 							                losses = { value = "losses", type = "INCREMENT"}
                                      }
                                    }
                                }, // statUpdates
                                subreports = {
                                    customClubClubReport = {
                                        reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsClubReport",
                                        skipComparison = false,
                                        statUpdates = {
                                            ClubRankStats = {
                                                category = "ClubRankStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalsAgainst", type = "INCREMENT"},
                                                    cleanSheets = { value = "cleanSheets", type = "INCREMENT"}
                                                }
                                            },
                                            ClubRankLeagueStats = {
                                                category = "ClubRankLeagueStats",
                                                entityId = "$INDEX$",
                                                keyscopes = {
                                                    season =  "$REPORT$.teamReports.clubReports[$INDEX$].clubSeason"
                                                },
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalsAgainst", type = "INCREMENT"},
                                                    cleanSheets = { value = "cleanSheets", type = "INCREMENT"}
 //processor
 //keyscope season
 //TEAM   
 //winnerByDNF
 //result                                                                                  
                                                }
                                            }
                                        }
                                    } // customClubClubReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "club",
                                        primaryKey = [ "club_id" ],
                                        columns = {
                                            club_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goals",
                                            goalsAgainst = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goalsAgainst",
                                            season_id = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.SeasonalPlayData.seasonId",
											gameNumber = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.SeasonalPlayData.gameNumber",
                                            TEAM = "$REPORT$.teamReports.clubReports[$INDEX$].team"
                                        }
                                    }
                                ] // gameHistory
                            } // clubReports
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType9

        gameType13 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameClubCup",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubGameReport",
								skipComparison = false,
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                            member = "member",
                                            clubgamekey = "clubgamekey",
                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
									customClubGameReport = {
										reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsGameReport",
										gameHistory = [
											{
												table = "game",
												columns = {
													mom = "mom"
												}
											}
										]
									} // customClubGameReport
								} // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            ClubCupPlayerStats = {
                                category = "ClubCupPlayerStats",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    //cupid = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cupId",
                                    cupid = "^1",
                                },
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
                                    ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
                                    gamesPlayed = { value = "^1", type = "INCREMENT"}
                                }
                            },
                            VProObjectiveStats = {
                                category = "VProObjectiveStats",
                                entityId = "$INDEX$",
                                stats = {
                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"}
                                }
                            },							
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    customClubPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsPlayerReport",
                                        skipComparison = false,
                                        subreports = {
											CommonPlayerReport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
												skipComparison = false,
												subreports = {
													commondetailreport = {
														reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
														skipComparison = true
													}
												},
												statUpdates = {
													ClubCupPlayerStats = {
														category = "ClubCupPlayerStats",
														entityId = "$INDEX$",
														keyscopes = {
															//cupid = "$REPORT$.playerReports[$INDEX$].customPlayerReport.cupId"
															cupid = "^1"															
														},
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
															interceptions = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.interceptions", type = "INCREMENT"},
															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},

															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},

															rating = { value = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VProRating]", type = "INCREMENT"},						
																				
															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
														}
													}												
												} //statUpdates
											}, //CommonPlayerReport
											ObjectiveStatsReport = {
												reportTDF = "Blaze::GameReporting::Fifa::ObjectiveStatsReport",
												skipComparison = false,
												statUpdates = {
													VProObjectiveStats = {
														category = "VProObjectiveStats",
														entityId = "$INDEX$",
														stats = {
															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.goals", type = "INCREMENT"},
															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.assists", type = "INCREMENT"},
															shotsOnGoal = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.shotsOnGoal", type = "INCREMENT"},
															penaltyGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.penaltyGoals", type = "INCREMENT"},
															freekickGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.freekickGoals", type = "INCREMENT"},
															headerGoals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.headerGoals", type = "INCREMENT"},													
															passesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.passesCompleted", type = "INCREMENT"},
															dribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.dribblesCompleted", type = "INCREMENT"},
															crossesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.crossesCompleted", type = "INCREMENT"},
															keyPasses = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.keyPasses", type = "INCREMENT"},
															oneOnOneSuccess = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.successfulOneOnOnes", type = "INCREMENT"},													
															blocks = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.blocks", type = "INCREMENT"},													
															intercepts = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.intercepts", type = "INCREMENT"},
															tackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.tackles", type = "INCREMENT"},
															headersCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.headersCompleted", type = "INCREMENT"},													
															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.saves", type = "INCREMENT"},
															penaltiesSavedByGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.penaltiesSavedByGK", type = "INCREMENT"},
															teamPassesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamPassesCompleted", type = "INCREMENT"},
															teamDribblesCompleted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamDribblesCompleted", type = "INCREMENT"},													
															teamTackles = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.ObjectiveStatsReport.teamTackles", type = "INCREMENT"}
														}
													}
												} //statUpdates
											} //ObjectiveStatsReport																															
										},
										gameHistory = [
										{
											table = "player",
											entityType = "usersessions/user",
											primaryKey = [ "player_id" ],
											columns = {                                               
												player_id = "$INDEX$",
												SCORE = "$REPORT$.playerReports[$INDEX$].score",
												wins = "$REPORT$.playerReports[$INDEX$].wins",
												losses = "$REPORT$.playerReports[$INDEX$].losses",
												clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
								   
												goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals",
												assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists",
												shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots",
												passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts",
												passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade",
												tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts",
												tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade",
												pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
												goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded",
												saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves",

                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny",
                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef",
                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper",
                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch",
                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard",
                               
                                                rating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating",
	                               
                                                vprohackreason = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^VPROHACKREASON]",
                                                vproattr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VPROHACKATTR]",
                                                
                                                realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]",
                                                realtimeidle = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEIDLE]"                                                
                                                }
                                           }
                                    ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,  						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubReport"
                        subreports = {
                            clubReports = {
                                reportTdf = "Blaze::GameReporting::OSDKClubGameReportBase::OSDKClubClubReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    customClubClubReport = {
                                        reportTdf = "Blaze::GameReporting::FifaClubReportBase::FifaClubsClubReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
                                    } // customClubClubReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "club",
                                        primaryKey = [ "club_id" ],
                                        columns = {
                                            club_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goals",
                                            goalsAgainst = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.goalsAgainst",
                                            cup_id = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.SeasonalPlayData.cup_id",
											gameNumber = "$REPORT$.teamReports.clubReports[$INDEX$].customClubClubReport.SeasonalPlayData.gameNumber",
                                            TEAM = "$REPORT$.teamReports.clubReports[$INDEX$].team"
                                        }
                                    }
                                ] // gameHistory
                            } // clubReports
                        } // subreports
                    } // teamReports
                 } // subreports
            } // report
        } // gameType13

        gameType25 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFifaCoopSeason",
        reportCollatorClass = "basic",   
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopGameReportBase",
                                reportValues = {
//                                    challengeClubId = "$GAMEATTRS$[^OSDK_ChlngrClubId]"
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
//                                            member = "member",
//                                            clubgamekey = "clubgamekey",
//                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
									customCoopGameReport = {
										reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsGameReport",
										gameHistory = [
											{
												table = "game",
												columns = {
													mom = "mom"
												}
											}
										]
									} // customCoopGameReport
								} // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
//                            ClubOTPPlayerStats = {
//                                category = "ClubOTPPlayerStats",
//                                entityId = "$INDEX$",
//                                keyscopes = {
//                                    pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
//                                },
//                                stats = {
//                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
//                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
//									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
//                                }
//                            },
//                            ClubMemberStats = {
//                                category = "ClubMemberStats",
//                                entityId = "$INDEX$",
//                                keyscopes = {
//                                    club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
//                                },
//                                stats = {
//                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
//                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
// 									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
//                               }
//                            },
//                            ClubUserCareerStats = {
//                                category = "ClubUserCareerStats",
//                                entityId = "$INDEX$",
//                                stats = {
//                                    wins = { value = "$REPORT$.playerReports[$INDEX$].wins", type = "INCREMENT"},
//                                    losses = { value = "$REPORT$.playerReports[$INDEX$].losses", type = "INCREMENT"},
//									ties = { value = "$REPORT$.playerReports[$INDEX$].ties", type = "INCREMENT"}
//                                 }
//                            }
//                            UserGameCount_StatCategory = {
//                                category = "UserGameCount_StatCategory",
//                                entityId = "$INDEX$",
//                                keyscopes = {
//                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
//                                },
//                                stats = {
//                                    count = { value = "^1", type = "INCREMENT"}
//                                 }
//                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopPlayerReportBase",
                                skipComparison = false,
                                statUpdates = {
//                                    ClubOTPPlayerStats = {
//                                        category = "ClubOTPPlayerStats",
//                                        entityId = "$INDEX$",
//                                        keyscopes = {
//                                            pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
//                                        },
//                                        stats = {
//                                            clubgames = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubGames", type = "INCREMENT"}
//                                        }
//                                    },
//                                    ClubMemberStats = {
//										category = "ClubMemberStats",
//										entityId = "$INDEX$",
//										keyscopes = {
//											club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
//										},
//										stats = {
//                                        minutes = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.minutes", type = "INCREMENT"}
//                                        }
//                                    },
//                                    ClubUserCareerStats = {
//										category = "ClubUserCareerStats",
//										entityId = "$INDEX$",
//										stats = {
//											challenge = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.challenge", type = "INCREMENT"}
//										}	
//	                                }
                                },
                                subreports = {
                                    customCoopPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsPlayerReport",
                                        skipComparison = false,
                                        subreports = {
											CommonPlayerReport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
												skipComparison = false,
												subreports = {
													commondetailreport = {
														reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
														skipComparison = true
													}
												},
												statUpdates = {
//													ClubOTPPlayerStats = {
//														category = "ClubOTPPlayerStats",
//														entityId = "$INDEX$",
//														keyscopes = {
//															pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos"
//														},
//														stats = {
//															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
//															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
//															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
//															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
//															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
//															interceptions = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.interceptions", type = "INCREMENT"},
//															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
//															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},
//
//															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
//															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
//															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
//		                                                    
//															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},
//
//															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
//															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
//															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
//															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
//														}
//													},
//													ClubMemberStats = {
//														category = "ClubMemberStats",
//														entityId = "$INDEX$",
//														keyscopes = {
//															club = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId"
//														},
//														stats = {
//															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
//															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
//															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
//															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
//															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
//															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
//															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},
//		                                                    
//															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
//															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},                                                    
//															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
//		                                                    
//															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},
//
//															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
//															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
//															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
//															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
//
//														}
//													},
//													ClubUserCareerStats = {
//														category = "ClubUserCareerStats",
//														entityId = "$INDEX$",
//														stats = {
//															goals = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goals", type = "INCREMENT"},
//															assists = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.assists", type = "INCREMENT"},
//															shotsFor = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.shots", type = "INCREMENT"},
//															passesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passAttempts", type = "INCREMENT"},
//															passesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.passesMade", type = "INCREMENT"},
//															tacklesAttempted = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tackleAttempts", type = "INCREMENT"},
//															tacklesMade = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.tacklesMade", type = "INCREMENT"},
//
//															goalsConceded = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.goalsConceded", type = "INCREMENT"},
//															saves = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.saves", type = "INCREMENT"},
//															redCards = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.redCard", type = "INCREMENT"},
//		                                                    
//															rating = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.CommonPlayerReport.rating", type = "INCREMENT"},
//
//															cleanSheetsAny = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsAny", type = "INCREMENT"},
//															cleanSheetsDef = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsDef", type = "INCREMENT"},
//															cleanSheetsGK = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.cleanSheetsGoalKeeper", type = "INCREMENT"},
//															manOfTheMatch = { value = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.manOfTheMatch", type = "INCREMENT"}
//														}
//													}
												} //statUpdates
											} //CommonPlayerReport
										},
										gameHistory = [
										{
											table = "player",
											entityType = "usersessions/user",
											primaryKey = [ "player_id" ],
											columns = {                                               
												player_id = "$INDEX$",
												SCORE = "$REPORT$.playerReports[$INDEX$].score",
												wins = "$REPORT$.playerReports[$INDEX$].wins",
												losses = "$REPORT$.playerReports[$INDEX$].losses"
//												clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
//								   
//												goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.goals",
//												assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.assists",
//												shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.shots",
//												passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.passAttempts",
//												passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.passesMade",
//												tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.tackleAttempts",
//												tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.tacklesMade",
//												pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
//												goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.goalsConceded",
//												saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.saves",
//
//                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsAny",
//                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsDef",
//                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsGoalKeeper",
//                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.manOfTheMatch",
//                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.redCard",
//                               
//                                                rating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.rating",
//	                               
//                                                vprohackreason = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^VPROHACKREASON]",
//                                                vproattr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VPROHACKATTR]",
//                                             
//                                                realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]",
//                                                realtimeidle = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEIDLE]",
//												latency_avg = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^LATEAVGGM]",
//												latency_dev = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^LATESDEVGM]"
//
                                                }
                                           }
                                    ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,  						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.customCoopPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopSquadReport",
                        subreports = {
                            squadReports = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopSquadDetailsReportBase",
				                skipComparison = false,
				                statUpdates = {
					                CoopRankStats = {
						                category = "CoopRankStats",
						                entityId = "$INDEX$",
						                stats = {
											result5 = { value = "gameResult",  type = "assign" },
							                wins = { value = "wins", type = "INCREMENT"},
								            ties = { value = "ties", type = "INCREMENT"},
							                losses = { value = "losses", type = "INCREMENT"}
                                        }
                                    }
                                }, // statUpdates
                                subreports = {
                                    customSquadDetailsReport = {
                                        reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsSquadDetailsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                            CoopRankStats = {
                                                category = "CoopRankStats",
                                                entityId = "$INDEX$",
                                                stats = {
                                                    goals = { value = "goals", type = "INCREMENT"},
                                                    goalsAgainst = { value = "goalsAgainst", type = "INCREMENT"},
                                                    shotsAgainst = { value = "shotsAgainst", type = "INCREMENT"},
                                                    shotsAgainstOnGoal = { value = "shotsAgainstOnGoal", type = "INCREMENT"},
                                                    cleanSheets = { value = "cleanSheets", type = "INCREMENT"}
                                                }
                                            }
                                        },                                                                            
                                        subreports = {
											commonClubReport = {
												reportTdf = "Blaze::GameReporting::Fifa::CommonPlayerReport",
												skipComparison = false,
												statUpdates = {
													CoopRankStats = {
														category = "CoopRankStats",
														entityId = "$INDEX$",
														stats = {    
															ownGoals = { value = "ownGoals", type = "INCREMENT"},
															possession = { value = "possession", type = "INCREMENT"},
															shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
															shotsFor = { value = "shots", type = "INCREMENT"},
															tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
															tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
															passAttempts = { value = "passAttempts", type = "INCREMENT"},
															passesMade = { value = "passesMade", type = "INCREMENT"},
															fouls = { value = "fouls", type = "INCREMENT"},
															yellowCards = { value = "yellowCard", type = "INCREMENT"},
															redCards = { value = "redCard", type = "INCREMENT"},
															corners = { value = "corners", type = "INCREMENT"},
															offsides = { value = "offsides", type = "INCREMENT"}
														}
													}
												}
											}	//CommonClubReport
										} // subreports
                                    } // customSquadDetailsReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "coop",
                                        primaryKey = [ "coop_id" ],
                                        columns = {
                                            coop_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.goals",
                                            goalsAgainst = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.goalsAgainst",
                                            team = "$REPORT$.teamReports.squadReports[$INDEX$].team",
                                            season_id = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.SeasonalPlayData.seasonId",
											gameNumber = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.SeasonalPlayData.gameNumber",
											KIT = "$REPORT$.teamReports.squadReports[$INDEX$].kit"
                                        }
                                    }
                                ] // gameHistory
                            } // clubReports
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType25

        gameType26 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFifaCoopCup",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopGameReportBase",
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
//                                            member = "member",
//                                            clubgamekey = "clubgamekey",
//                                            challenge = "challenge"
                                        }
                                    }
                                ],
                                subreports = {
									customCoopGameReport = {
										reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsGameReport",
										gameHistory = [
											{
												table = "game",
												columns = {
													mom = "mom"
												}
											}
										]
									} // customClubGameReport
								} // subreports
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopPlayerReportBase",
                                skipComparison = false,
                                subreports = {
                                    customCoopPlayerReport = {
                                        reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsPlayerReport",
                                        skipComparison = false,
                                        subreports = {
											CommonPlayerReport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
												skipComparison = false,
												subreports = {
													commondetailreport = {
														reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
														skipComparison = true
													}
												},
												statUpdates = {
												} //statUpdates
											} //CommonPlayerReport
										},
										gameHistory = [
										{
											table = "player",
											entityType = "usersessions/user",
											primaryKey = [ "player_id" ],
											columns = {                                               
												player_id = "$INDEX$",
												SCORE = "$REPORT$.playerReports[$INDEX$].score",
												wins = "$REPORT$.playerReports[$INDEX$].wins",
												losses = "$REPORT$.playerReports[$INDEX$].losses"
//												clubId = "$REPORT$.playerReports[$INDEX$].customPlayerReport.clubId",
//								   
//												goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.goals",
//												assists = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.assists",
//												shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.shots",
//												passattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.passAttempts",
//												passesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.passesMade",
//												tackleattempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.tackleAttempts",
//												tacklesmade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.tacklesMade",
//												pos = "$REPORT$.playerReports[$INDEX$].customPlayerReport.pos",
//												goalsconceded = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.customCoopPlayerReport.goalsConceded",
//												saves = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customClubPlayerReport.customCoopPlayerReport.saves",
//
//                                                cleansheetsany = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsAny",
//                                                cleansheetsdef = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsDef",
//                                                cleansheetsgk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.cleanSheetsGoalKeeper",
//                                                mom = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.manOfTheMatch",
//                                                redcards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.redCard",
//                               
//                                                rating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.customCoopPlayerReport.CommonPlayerReport.rating",
//	                               
//                                                vprohackreason = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^VPROHACKREASON]",
//                                                vproattr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateAttributeMap[^VPROHACKATTR]",
//                                                
//                                                realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]",
//                                                realtimeidle = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEIDLE]"                                                
                                                }
                                           }
                                    ]
                                    } // customClubPlayerReport
                                } // subreports
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,  						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.customCoopPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopSquadReport"
                        subreports = {
                            squadReports = {
                                reportTdf = "Blaze::GameReporting::FifaCoopReportBase::FifaCoopSquadDetailsReportBase",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    customSquadDetailsReport = {
                                        reportTdf = "Blaze::GameReporting::FifaCoopSeasonsReport::FifaCoopSeasonsSquadDetailsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
                                    } // customSquadDetailsReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "coop",
                                        primaryKey = [ "coop_id" ],
                                        columns = {
                                            coop_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
                                            goals = "goals",
                                            goalsAgainst = "goalsAgainst",
                                            team = "team",
                                            cup_id = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.SeasonalPlayData.cup_id",
											gameNumber = "$REPORT$.teamReports.squadReports[$INDEX$].customSquadDetailsReport.SeasonalPlayData.gameNumber",
											KIT = "$REPORT$.teamReports.squadReports[$INDEX$].kit"
	                                    }
                                    }
                                ] // gameHistory
                            } // squadReports
                        } // subreports
                    } // squadReports
                 } // subreports
            } // report
        } // gameType26
        
        gameType33= {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameSSFSeason",
        reportCollatorClass = "basic",   
		customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
				skipComparison = false,
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0 
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                              matchType = "$GAMEATTRS$[^ssfMatchType]"
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
                                               result = "ssfEndResult",
                                               isCaptain = "isCaptain",
                                               mmr = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^MMR]"											   
                                          }
                                     }
                                ]
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,  						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
						skipComparison = false,
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     }, // commonTeamReport
									 avatarVector = {
                                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::AvatarEntry",
										skipComparison = false,
										subreports = {
											avatarStatReport = {
												reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
												skipComparison = true
											},
											skillTimeBucketMap = {
												reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::TimeBucket",
												skipComparison = false,
												subreports = {
													skillMap = {
														reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SkillEvent",
														skipComparison = false
													}	
												}
											}
										}
									 }
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType33

        gameType28 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSSFSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",		
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0 
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^28"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
											   result = "ssfEndResult"
                                          }
                                     }
                                ]
                            } // customPlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     } // commonTeamReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType28

        gameType29 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSSFSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",		
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0 
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^29"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
											   result = "ssfEndResult"
                                          }
                                     }
                                ]
                            } // customPlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     } // commonTeamReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType29

        gameType30 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSSFSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",		
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0 
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^30"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
											   result = "ssfEndResult"
                                          }
                                     }
                                ]
                            } // customPlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     } // commonTeamReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType30

        gameType32 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSSFSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",		
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0 
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^32"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
											   result = "ssfEndResult"
                                          }
                                     }
                                ]
                            } // customPlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     } // commonTeamReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType32

        gameType34 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameSSFSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",		
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
						skipComparison = false,
						subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsGameReport",
								skipComparison = false,
								subreports = {
									goalSummary = {
										reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::GoalEvent",
										skipComparison = false,
										gameHistory = [
											{
												table = "goals",
												primaryKey = [ "goalId" ],
												columns = {
													  goalId = "$INDEX$",
													  scoringTeam = "scoringTeam",
													  goalTime = "goalEventTime",
													  goalType = "goalType",
													  goalScorer = "scorer.playerId",
													  assist1 = "primaryAssist.playerId",
													  assistType1 = "primaryAssistType",
													  assist2 = "secondaryAssist.playerId",
													  assistType2 = "secondaryAssistType",
												},
												historyLimit = 0
											}
										]
									} // goalSummary
								} //subreports
                                reportValues = {
                                },
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime",
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^32"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                 }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFSeasonsPlayerReport",
                                skipComparison = false,
                                statUpdates = {
                                },
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {                                               
                                               player_id = "$INDEX$",
                                               SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                               wins = "$REPORT$.playerReports[$INDEX$].wins",
                                               losses = "$REPORT$.playerReports[$INDEX$].losses",
											   result = "ssfEndResult"
                                          }
                                     }
                                ]
                            } // customPlayerReport
						} // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamSummaryReport",
                        subreports = {
                            SSFTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::SSFSeasonsReportBase::SSFTeamReport",
				                skipComparison = false,
				                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::SSF::CommonStatsReport",
                                        skipComparison = false,
                                        statUpdates = {
                                        }
								     } // commonTeamReport
                                }, // subreports // gameHistory
                                gameHistory = [
                                    {
                                        table = "team",
                                        primaryKey = [ "team_entity_id" ],
                                        columns = {
                                            team_entity_id = "$INDEX$",
                                            result = "gameResult",
                                            score = "score",
                                            winnerByDnf = "winnerByDnf",
                                            wins = "wins",
                                            ties = "ties",
                                            losses = "losses",
											skillCount = "skillMoveCount",
                                        },
										historyLimit = 0 
                                    }
                                ] // gameHistory
                            } // SSFTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        } // gameType34
		
        gameType35 = {
            arbitraryUserOfflineReportProcessing = false,
            reportProcessorClass = "gameSSFMini",
            reportCollatorClass = "basic",   
            customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
                        skipComparison = false,
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::SSFMinigamesReportBase::GameReport",
                                skipComparison = false,
                                subreports = {
                                    ParticipantReports = {
                                        reportTdf = "Blaze::GameReporting::SSFMinigamesReportBase::ParticipantReport",
                                        skipComparison = false,
                                        gameHistory = [
                                            {
                                                table = "player",
                                                primaryKey = [ "participant_id" ],
                                                columns = {
                                                    participant_id = "$INDEX$",
                                                    player_id = "PersonaID",
                                                    score = "Score"
                                                },
                                                historylimit = 0
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    gameTime = "gameTime",
                                }
                            }
                        ]
                    },
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = {value = "^1", type = "INCREMENT"}
                                }
                            }
                        },
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::SSFMinigamesReportBase::PlayerReport",
                                skipComparison = false
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,  						
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        }, // subreports
                        psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                    entityId = "$INDEX$",
                                    score = "$REPORT$.playerReports[$INDEX$].score"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        } // gameType35

        gameType31 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameH2HOrganizedTournament",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        skipComparison = false,
                        reportValues = {
                            categoryId = "^-1"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = true
                                            }
                                        },
                                        statUpdates = { 
                                        //Friendlies do not update DNF
                                        } //statUpdates
                                    } //CommonPlayerReport
                                },	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",                                            
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            teamIndex = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.tournamentTeamIndex",
											
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                            pkGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pkGoals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
											
                                            realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false, 						
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType31
		
        gameType20 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameH2HFriendlies",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = false,
                        reportValues = {
                            categoryId = "^-1"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						}
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
	                    skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										},
										statUpdates = { 
										//Friendlies do not update DNF
										} //statUpdates
									} //CommonPlayerReport
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											
											realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false, 						
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        }, // gameType20

        gameType21 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "basic",
        reportCollatorClass = "basic",
            report = {
                reportTdf = "Blaze::GameReporting::Fifa::SkillGameReport",
                statUpdates = {
					PlayerStats = {
						category = "SkillGameStats",
						entityId = "$REPORT$.playerid",
						keyscopes = {
							skillgame		= "$REPORT$.skillgame"
						},
						stats = {
							highscore = { value="score", type="MAX" },
							countryCode = { value="countryCode", type="ASSIGN"}
						}
					}
				}
            } // report
        } // gameType21

// ================================= FUT game types ===============================

//	FUT_ONLINE_FRIENDLY_COMPETITIVE	= 75
        gameType75 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2H",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = true,
                        reportValues = {
                            categoryId = "^-1"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						},
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = false,
						statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^75"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
									   // Do not save stats for FUT
									}, //CommonPlayerReport
									H2HCustomPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
										skipComparison = false
									}, //mH2HCustomPlayerData
									H2HCollationPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
										skipComparison = false
									} //H2HCollationPlayerData
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
											
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        }, // gameType75	



//      FUT_OFFLINE_SQUAD_BATTLE = 78, 
        gameType78 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^78"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = true
                                            }
                                        }
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType78

//      FUT_ONLINE_CHAMPIONS = 79
        gameType79 = {
            arbitraryUserOfflineReportProcessing = false,
            reportProcessorClass = "gameFutH2H",
            reportCollatorClass = "futReportCollator",
            customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    enhancedReport = {
                        reportTdf = "Blaze::GameReporting::FUT::CollatorReport",
                        skipComparison = true
                    }, // enhancedReport
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                           skipComparison = false,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^79"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                            reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                            skipComparison = true,
                                            subreports = {
                                                commondetailreport = {
                                                    reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                    skipComparison = true
                                                }
                                            }// subreports
                                    }, //CommonPlayerReport
                                    H2HCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
                                        skipComparison = true
                                    }, //mH2HCustomPlayerData
                                    H2HCollationPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
                                        skipComparison = true
                                    } //H2HCollationPlayerData
                                }, //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
                                            
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.enhancedReport.playerReportMap[$INDEX$].matchResult",
                                            matchmakingCriteria = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^MMCriteria]",
                                            matchmakingStage = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^MMStage]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        }, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        }, // gameType79

//      FUT_ONLINE_DRAFT                = 80, 
        gameType80 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2H",
        reportCollatorClass = "futReportCollator",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    enhancedReport = {
                        reportTdf = "Blaze::GameReporting::FUT::CollatorReport",
                        skipComparison = true
                    },
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        skipComparison = false,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
                                skipComparison = false,
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                }                                
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^80"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = false
                                            }
                                        }
                                    }, //CommonPlayerReport
                                    H2HCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
                                        skipComparison = false
                                    }, //mH2HCustomPlayerData
                                    H2HCollationPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
                                        skipComparison = false
                                    } //H2HCollationPlayerData
                                }, //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                                                                        
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
                                                                                        
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.enhancedReport.playerReportMap[$INDEX$].matchResult"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        }, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        }, // gameType80

//      FUT_ONLINE_H2H          = 81, 
        gameType81 = {
            arbitraryUserOfflineReportProcessing = false,
            reportProcessorClass = "gameFutH2H",
            reportCollatorClass = "futReportCollator",
            customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    enhancedReport = {
                        reportTdf = "Blaze::GameReporting::FUT::CollatorReport",
                        skipComparison = true
                    }, // enhancedReport
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        skipComparison = false,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
                                skipComparison = false,
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                }
                            }
                        },

                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^81"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = false
                                            }
                                        }
                                    }, //CommonPlayerReport
                                    H2HCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
                                        skipComparison = false
                                    }, //mH2HCustomPlayerData
                                    H2HCollationPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
                                        skipComparison = false
                                    } //H2HCollationPlayerData
                                }, //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
                                            
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
                                            
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.enhancedReport.playerReportMap[$INDEX$].matchResult"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType81

//		FUT_ONLINE_TOUR		= 82,
        gameType82 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2H",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",				
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = true,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						},
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = true,
						statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^82"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = true,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
									}, //CommonPlayerReport
									H2HCustomPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
										skipComparison = true
									}, //mH2HCustomPlayerData
									H2HCollationPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
										skipComparison = true
									} //H2HCollationPlayerData
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
											
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",

                                            // Default match result from the client
											futMatchResult = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^futMatchResult]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						} // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType82


//		FUT_ONLINE_RIVALS	= 76
        gameType76 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutOTP",
        reportCollatorClass = "basic",   
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
                        skipComparison = true,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^76"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                            reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                            skipComparison = true,
                                            subreports = {
                                                commondetailreport = {
                                                    reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                    skipComparison = true
                                                }
                                            },// subreports
                                            statUpdates = {
                                                PlayerStats = {
                                                    category = "FUTGameStats",
                                                    entityId = "$INDEX$",
                                                    stats = {
                                                        goals = { value = "goals", type = "INCREMENT"},
                                                        ownGoals = { value = "ownGoals", type = "INCREMENT"},
                                                        possession = { value = "possession", type = "INCREMENT"},
                                                        shotsForOnGoal = { value = "shotsOnGoal", type = "INCREMENT"},
                                                        shotsFor = { value = "shots", type = "INCREMENT"},
                                                        tacklesAttempted = { value = "tackleAttempts", type = "INCREMENT"},
                                                        tacklesMade = { value = "tacklesMade", type = "INCREMENT"},
                                                        passAttempts = { value = "passAttempts", type = "INCREMENT"},
                                                        passesMade = { value = "passesMade", type = "INCREMENT"},
                                                        fouls = { value = "fouls", type = "INCREMENT"},
                                                        yellowCards = { value = "yellowCard", type = "INCREMENT"},
                                                        redCards = { value = "redCard", type = "INCREMENT"},
                                                        corners = { value = "corners", type = "INCREMENT"},
                                                        offsides = { value = "offsides", type = "INCREMENT"}
                                                    } // stats
                                                } // PlayerStats
                                            } // statUpdates
                                    } //CommonPlayerReport
                                }, //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            
                                            TEAM = "$REPORT$.playerReports[$INDEX$].customPlayerReport.team",
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.opponentId",
                                            isCaptain = "$REPORT$.playerReports[$INDEX$].customPlayerReport.isCaptain",
                                            
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.playerReports[$INDEX$].customPlayerReport.matchResult",
                                            matchmakingCriteria = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^MMCriteria]",
                                            matchmakingStage = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^MMStage]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        }, // subreports
						psnMatchUpdates = {
                            PlayerStats = {
                                matchResults = {
                                    competitiveResult = {
                                        entityId = "$INDEX$",
                                        score = "customPlayerReport.CommonPlayerReport.goals"
                                    }
                                }
                            }
                        } // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamSummaryReport",
                        skipComparison = false,
                        subreports = {
                            FutOTPTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamReport",
                                skipComparison = true,
                                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                        }
                                     } // commonTeamReport
                                } // subreports
                            } // FutOTPTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        }, // gameType76

//      FUT_ONLINE_ORGANIZED_TOURNAMENT          = 70 	
        gameType70 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2HOrganizedTournament",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        skipComparison = false,
                        reportValues = {
                            categoryId = "^-1"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        }
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "$GAMEATTRS$[^OSDK_gameMode]"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = true
                                            }
                                        },
                                        statUpdates = { 
                                        //Friendlies do not update DNF
                                        } //statUpdates
                                    } //CommonPlayerReport
                                },	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",                                            
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
                                            teamIndex = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.tournamentTeamIndex",
											
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                            pkGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pkGoals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
											
                                            realtimegame = "$REPORT$.playerReports[$INDEX$].privatePlayerReport.privateIntAttributeMap[^REALTIMEGAME]"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false, 						
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType70
		
//      FUT_ONLINE_SQUAD_BATTLE          = 71, 
        gameType71 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutOTP",
        reportCollatorClass = "basic",   
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport",
                        skipComparison = true,
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                } //subreports
                                gameHistory = [
                                    {
                                        table = "game",
                                        columns = {
                                              gameTime = "$REPORT$.gameReport.gameTime"
                                        }
                                    }
                                ]
                            } // customGameReport
                        } // subreports
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^71"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                            reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                            skipComparison = true,
                                            subreports = {
                                                commondetailreport = {
                                                    reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                    skipComparison = true
                                                }
                                            },// subreports
                                            statUpdates = {
                                            } // statUpdates
                                    } //CommonPlayerReport
                                }, //subreports
                                gameHistory = [
                                     {
                                          table = "player",
                                          entityType = "usersessions/user",
                                          primaryKey = [ "player_id" ],
                                          columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",
                                            
                                            TEAM = "$REPORT$.playerReports[$INDEX$].customPlayerReport.team",
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.opponentId",
                                            isCaptain = "$REPORT$.playerReports[$INDEX$].customPlayerReport.isCaptain",
                                            
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.playerReports[$INDEX$].customPlayerReport.matchResult"                                          }
                                     }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
                        } // subreports
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamSummaryReport",
                        skipComparison = false,
                        subreports = {
                            FutOTPTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamReport",
                                skipComparison = true,
                                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                        }
                                     } // commonTeamReport
                                } // subreports
                            } // FutOTPTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        }, // gameType71
		
//      FUT_ONLINE_FRIENDLY_HOUSERULES          = 72, 
        gameType72 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2H",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = true,
                        reportValues = {
                            categoryId = "^-1"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						},
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds",
                                    houseRuleType = "$GAMEATTRS$[^FUTFriendlyType]"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = false,
						statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^72"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
									   // Do not save stats for FUT
									}, //CommonPlayerReport
									H2HCustomPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
										skipComparison = false
									}, //mH2HCustomPlayerData
									H2HCollationPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
										skipComparison = false
									} //H2HCollationPlayerData
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
											
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
										},
										historyLimit = 20
									}
								]
							}, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
							PlayerStats = {
								matchResults = {
									competitiveResult = {
										entityId = "$INDEX$",
										score = "customPlayerReport.CommonPlayerReport.goals"
									}
								}
							}
						} // psnMatchUpdates
                    } // playerReports
                } // subreports
            } // report
        }, // gameType72

//      FUT_ONLINE_HOUSERULES          = 73, 
        gameType73 = {
            arbitraryUserOfflineReportProcessing = false,
            reportProcessorClass = "gameFutOTP",
            reportCollatorClass = "basic",
            customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                skipComparison = false,
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        skipComparison = true,
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPGameReport",
                                skipComparison = false,
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                },
                                subreports = {
                                    CommonGameReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonGameReport",
                                        skipComparison = false
                                    }
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.customGameReport.gameTime",
                                    houseRuleType = "$GAMEATTRS$[^futHouseRulePref]"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^73"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
                                        subreports = {
                                            commondetailreport = {
                                                reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
                                                skipComparison = true
                                            }
                                        }
                                    } //CommonPlayerReport
                                }, //subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
                                            player_id = "$INDEX$",
                                            wins = "$REPORT$.playerReports[$INDEX$].wins",
                                            losses = "$REPORT$.playerReports[$INDEX$].losses",
                                            ties = "$REPORT$.playerReports[$INDEX$].ties",
                                            accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
                                            result = "$REPORT$.playerReports[$INDEX$].gameResult",
                                            winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
                                            SCORE = "$REPORT$.playerReports[$INDEX$].score",

                                            TEAM = "$REPORT$.playerReports[$INDEX$].customPlayerReport.team",
                                            teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.teamrating",
                                            wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.wentToPk",
                                            shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainst", 
                                            shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.shotsAgainstOnGoal", 
                                            goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.goalAgainst", 
                                            controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.controls",
                                            opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.opponentId",
                                            isCaptain = "$REPORT$.playerReports[$INDEX$].customPlayerReport.isCaptain",
                                            
                                            unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                            goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                            ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//                                          pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
                                            possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                            shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                            shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                            tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                            tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                            passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                            passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                            fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                            yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                            redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                            corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                            offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides",
                                            futMatchResult = "$REPORT$.playerReports[$INDEX$].customPlayerReport.matchResult"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport
                            privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = true,
                                metricUpdates = {
                                    VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
                                    VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
                                    VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
                                    VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
                                    USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
                                    USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
                                    USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
                                    USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
                                    LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
                                    LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
                                    LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
                                    LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
                                    LATEHINET = "privateIntAttributeMap[^LATEHINET]",
                                    LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
                                    LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
                                    LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
                                    GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
                                    GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
                                    GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
                                    GRESULT = "privateIntAttributeMap[^GRESULT]",
                                    GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
                                    GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
                                    GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
                                    FPSLOW = "privateIntAttributeMap[^FPSLOW]",
                                    FPSHI = "privateIntAttributeMap[^FPSHI]",
                                    FPSDEV = "privateIntAttributeMap[^FPSDEV]",
                                    FPSAVG = "privateIntAttributeMap[^FPSAVG]",
                                    DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
                                    BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
                                    BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
                                    BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
                                    BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
                                    BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
                                    BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
                                    BANDHINET = "privateIntAttributeMap[^BANDHINET]",
                                    BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
                                    BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
                                    BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
                                    GRPTVER = "privateIntAttributeMap[^GRPTVER]",
                                    PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
                                } // metricUpdates
                            } // privatePlayerReport
						}, // subreports
						psnMatchUpdates = {
							PlayerStats = {
								matchResults = {
									competitiveResult = {
										entityId = "$INDEX$",
										score = "customPlayerReport.CommonPlayerReport.goals"
									}
								}
							}
						} // psnMatchUpdates
                    }, // playerReports
                    teamReports = {
                        reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamSummaryReport",
                        skipComparison = false,
                        subreports = {
                            FutOTPTeamReportMap = {
                                reportTdf = "Blaze::GameReporting::FutOTPReportBase::FutOTPTeamReport",
                                skipComparison = true,
                                statUpdates = {
                                }, // statUpdates
                                subreports = {
                                    commonTeamReport = {
                                        reportTdf = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
                                        statUpdates = {
                                        }
                                     } // commonTeamReport
                                } // subreports
                            } // FutOTPTeamReportMap
                        } // subreports
                    } // teamReports
                } // subreports
            } // report
        }, // gameType73
 
//      FUT_OFFLINE_HOUSERULES         = 74, 
        gameType74 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime",
                                    matchSubType = "$REPORT$.gameReport.customGameReport.matchSubType"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^74"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType74

//		FUT_OFFLINE_PAF		= 83, 
        gameType83 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^83"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType83

//		FUT_OFFLINE_DRAFT	= 84
        gameType84 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^84"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType84

//		FUT_OFFLINE_TOUR	= 85
        gameType85 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^85"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType85

//		FUT_OFFLINE_SEASON	= 87
        gameType87 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = true,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^87"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = true,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = true,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = true
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType87
		
//		FUT_ONLINE_FRIENDLY_SEASON	= 88
        gameType88 = {
        arbitraryUserOfflineReportProcessing = false,
        reportProcessorClass = "gameFutH2H",
        reportCollatorClass = "basic",
        customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
						skipComparison = true,
                        reportValues = {
                            categoryId = "^-1"
                        },
						subreports = {
							customGameReport = {
								reportTdf = "Blaze::GameReporting::Fifa::H2HGameReport",
								reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
								}
							}
						},
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    gameTime = "$REPORT$.gameReport.customGameReport.matchInSeconds"
                                }
                            }
                        ]
                    }, // gameReport
                    playerReports = {
						reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
						skipComparison = false,
						statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^88"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
						subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::H2HPlayerReport",
                                skipComparison = false,
                                subreports = {
									CommonPlayerReport = {
										reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
										skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
									   // Do not save stats for FUT
									}, //CommonPlayerReport
									H2HCustomPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCustomPlayerData",
										skipComparison = false
									}, //mH2HCustomPlayerData
									H2HCollationPlayerData = {
										reportTDF = "Blaze::GameReporting::Fifa::H2HCollationPlayerData",
										skipComparison = false
									} //H2HCollationPlayerData
								},	//subreports
                                gameHistory = [
                                    {
                                        table = "player",
                                        entityType = "usersessions/user",
                                        primaryKey = [ "player_id" ],
                                        columns = {
											player_id = "$INDEX$",                                            
											wins = "$REPORT$.playerReports[$INDEX$].wins",
											losses = "$REPORT$.playerReports[$INDEX$].losses",
											ties = "$REPORT$.playerReports[$INDEX$].ties",
											accountcountry = "$REPORT$.playerReports[$INDEX$].accountcountry", 
											result = "$REPORT$.playerReports[$INDEX$].gameResult",
											winnerByDnf = "$REPORT$.playerReports[$INDEX$].winnerByDnf", 
											SCORE = "$REPORT$.playerReports[$INDEX$].score",
											TEAM = "$REPORT$.playerReports[$INDEX$].team",
											
											teamrating = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.teamrating",
											wentToPk = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.wentToPk",
											shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainst", 
											shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.shotsAgainstOnGoal", 
											goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.goalAgainst", 
											controls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.controls",
											opponent_id = "$REPORT$.playerReports[$INDEX$].customPlayerReport.H2HCustomPlayerData.opponentId",
											
											unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
											goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
											ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
//											pk_goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.pk_goals",
											possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
											shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
											shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
											tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
											tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
											passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
											passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
											fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
											yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
											redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
											corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
											offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                        },
                                        historyLimit = 20
                                    }
                                ]
                            }, // customPlayerReport						
							privatePlayerReport = {
                                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPrivatePlayerReport",
                                skipComparison = false,
								metricUpdates = {
									VOIPSTRT1 = "privateIntAttributeMap[^VOIPSTRT1]",
									VOIPSTRT0 = "privateIntAttributeMap[^VOIPSTRT0]",
									VOIPEND1 = "privateIntAttributeMap[^VOIPEND1]",
									VOIPEND0 = "privateIntAttributeMap[^VOIPEND0]",
									USERSSTRT1 = "privateIntAttributeMap[^USERSSTRT1]",
									USERSSTRT0 = "privateIntAttributeMap[^USERSSTRT0]",
									USERSEND1 = "privateIntAttributeMap[^USERSEND1]",
									USERSEND0 = "privateIntAttributeMap[^USERSEND0]",
									LATESDEVNET = "privateIntAttributeMap[^LATESDEVNET]",
									LATESDEVGM = "privateIntAttributeMap[^LATESDEVGM]",
									LATELOWNET = "privateIntAttributeMap[^LATELOWNET]",
									LATELOWGM = "privateIntAttributeMap[^LATELOWGM]",
									LATEHINET = "privateIntAttributeMap[^LATEHINET]",
									LATEHIGM = "privateIntAttributeMap[^LATEHIGM]",
									LATEAVGNET = "privateIntAttributeMap[^LATEAVGNET]",
									LATEAVGGM = "privateIntAttributeMap[^LATEAVGGM]",
									GUESTS1 = "privateIntAttributeMap[^GUESTS1]",
									GUESTS0 = "privateIntAttributeMap[^GUESTS0]",
									GRPTTYPE = "privateIntAttributeMap[^GRPTTYPE]",
									GRESULT = "privateIntAttributeMap[^GRESULT]",
									GENDPHASE = "privateIntAttributeMap[^GENDPHASE]",
									GDESYNCRSN = "privateIntAttributeMap[^GDESYNCRSN]",
									GDESYNCEND = "privateIntAttributeMap[^GDESYNCEND]",
									FPSLOW = "privateIntAttributeMap[^FPSLOW]",
									FPSHI = "privateIntAttributeMap[^FPSHI]",
									FPSDEV = "privateIntAttributeMap[^FPSDEV]",
									FPSAVG = "privateIntAttributeMap[^FPSAVG]",
									DROPPKTS = "privateIntAttributeMap[^DROPPKTS]",
									BYTESSENTNET = "privateIntAttributeMap[^BYTESSENTNET]",
									BYTESSENTGM = "privateIntAttributeMap[^BYTESSENTGM]",
									BYTESRCVDNET = "privateIntAttributeMap[^BYTESRCVDNET]",
									BYTESRCVDGM = "privateIntAttributeMap[^BYTESRCVDGM]",
									BANDLOWNET = "privateIntAttributeMap[^BANDLOWNET]",
									BANDLOWGM = "privateIntAttributeMap[^BANDLOWGM]",
									BANDHINET = "privateIntAttributeMap[^BANDHINET]",
									BANDHIGM = "privateIntAttributeMap[^BANDHIGM]",
									BANDAVGNET = "privateIntAttributeMap[^BANDAVGNET]",
									BANDAVGGM = "privateIntAttributeMap[^BANDAVGGM]",
									GRPTVER = "privateIntAttributeMap[^GRPTVER]",                           
									PKTLOSS = "privateIntAttributeMap[^PKTLOSS]"
								} // metricUpdates
							} // privatePlayerReport
						} // subreports
                    } // playerReports
                } // subreports
            } // report
        }, // gameType88	
	
	//FUT_OFFLINE_TOTW	= 89
	gameType89 = {
        arbitraryUserOfflineReportProcessing = true,
        reportProcessorClass = "gameFutSolo",
        reportCollatorClass = "basic",
	customDataTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKNotifyReport",
            report = {
                reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKReport",
                subreports = {
                    gameReport = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKGameReport"
                        reportValues = {
                            categoryId = "^-1",
                            arenaChallengeId = "$GAMEATTRS$[^OSDK_arenaChallengeId]"
                        },
                        subreports = {
                            customGameReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloGameReport",
                                reportValues = {
                                    wentToPk = "$GAMEATTRS$[^wentToPk]"
                                }
                            }
                        },
                        gameHistory = [
                            {
                                table = "game",
                                columns = {
                                    OSDK_arenaChallengeId = "arenaChallengeId",
                                    gameTime = "$REPORT$.gameReport.gameTime"
                                }
                            }
                        ]
                    }, // gameReport
					
                    playerReports = {
                        reportTdf = "Blaze::GameReporting::OSDKGameReportBase::OSDKPlayerReport",
                        skipComparison = false,
                        statUpdates = {
                            UserGameCount_StatCategory = {
                                category = "UserGameCount_StatCategory",
                                entityId = "$INDEX$",
                                keyscopes = {
                                    gameType = "^89"
                                },
                                stats = {
                                    count = { value = "^1", type = "INCREMENT"}
                                }
                            }
                        }, // statUpdates
                        subreports = {
                            customPlayerReport = {
                                reportTdf = "Blaze::GameReporting::Fifa::SoloPlayerReport",
                                skipComparison = false,
                                subreports = {
                                    CommonPlayerReport = {
                                        reportTDF = "Blaze::GameReporting::Fifa::CommonPlayerReport",
                                        skipComparison = false,
										subreports = {
											commondetailreport = {
												reportTDF = "Blaze::GameReporting::Fifa::CommonDetailReport",
												skipComparison = true
											}
										}
                                    }, //CommonPlayerReport
                                    SoloCustomPlayerData = {
                                        reportTDF = "Blaze::GameReporting::Fifa::SoloCustomPlayerData",
                                        skipComparison = false
                                    } //SoloCustomPlayerData
                                },//subreports
                                gameHistory = [
                                {
                                    table = "player",
                                    entityType = "usersessions/user",
                                    primaryKey = [ "player_id" ],
                                    columns = {
                                        player_id = "$INDEX$",                                            
                                        team = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.team",											
                                        wins = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.wins",
                                        losses = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.losses",
                                        ties = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.ties",
                                        result = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.result",
                                        shotsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainst", 
                                        shotsAgainstOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.shotsAgainstOnGoal", 
                                        goalsAgainst = "$REPORT$.playerReports[$INDEX$].customPlayerReport.SoloCustomPlayerData.goalAgainst", 
										
                                        unadjustedScore = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.unadjustedScore",
                                        goals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.goals",
                                        ownGoals = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.ownGoals",
                                        possession = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.possession",
                                        shotsOnGoal = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shotsOnGoal",
                                        shots = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.shots",
                                        tackleAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tackleAttempts",
                                        tacklesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.tacklesMade",
                                        passAttempts = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passAttempts",
                                        passesMade = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.passesMade",
                                        fouls = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.fouls",
                                        yellowCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.yellowCard",
                                        redCards = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.redCard",
                                        corners = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.corners",
                                        offsides = "$REPORT$.playerReports[$INDEX$].customPlayerReport.CommonPlayerReport.offsides"
                                    },
                                    historyLimit = 20
                                }
                                ]
                            } // customPlayerReport						
                        } // subreports
                    } // playerReports
                } // subreports
            } // report
        } // gameType89

// =============================== End FUT game types =============================
    }, //gameTypes
    
    // GameHistory MetaData
    //
    // First  Param: Style
    // Second Param: No data string
    // Third  Param: User column index
    // Fourth Param: Number of rows in the spreadsheet
    // Fifth  Param: Vertical offset of the spreadsheet (to move it down on the screen)
    // Sixth  Param: Number of static columns in the spreadsheet

    // GameHistory Column MetaData
    //
    // First  Param: Column Width
    // Second Param: Column Alignment (0 = left, 1 = center, 2 = right)
    // Third  Param: Game Specific Param
    // Fourth Param: Extension specific data (e.g. For Club, "M" = Members, "FA" = Free Agent)
    gameHistory = {

        // the max number of games will be purged in each interval
        maxGamesToPurgePerInterval = 10000,

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 1 min
        lowFrequentPurgeInterval = "1m",

        // format 0d:0h:0m:0s; governs how often expired game reports are purged from database; default is 30 secs
        highFrequentPurgeInterval = "30s",

        // format 0d:0h:0m:0s; governs the delay before a game report becomes eligible for purge; 0d to disable expiry
        historyExpiry = "180d"
    },
    
    gameHistoryReporting = {

        queries = [
            {   name = "gameType0_skill_damping_query",
                typeName = "gameType0",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "gameType1_skill_damping_query",
                typeName = "gameType1",
                maxGamesToReturn = 10,
                filters = [
                    { table = "player", name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id" }
                    { table = "player", name = "wins" }
                    { table = "player", name = "losses" }
                    { table = "player", name = "winnerByDnf" }
                ]
            },
            {   name = "club_skill_damping_query",
                typeName = "gameType9",
                maxGamesToReturn = 10,
                filters = [
				    { table = "club",   name = "club_id",  expression = "? = $s" },
				    { table = "club",   name = "result",   expression = "? IN (1,16385)" }
                ]
                columns = [
                    { table = "club", name = "club_id" }
                    { table = "club", name = "losses" }
                    { table = "club", name = "winnerByDnf" }
                ]
            },
            {   name = "club_games_in_last_hour_query",
                typeName = "gameType9",
                maxGamesToReturn = 1,
                filters = [ 
                    { table = "club",   name = "club_id",   expression = "? = $s" },
                    { table = "game",   name = "timestamp", expression = "(? BETWEEN DATE_SUB(NOW(), INTERVAL 1 HOUR) AND NOW())" }
                ]
            },
            {   name = "coop_skill_damping_query",
                typeName = "gameType25",
                maxGamesToReturn = 10,
                filters = [
				    { table = "coop",   name = "coop_id",  expression = "? = $s" },
				    { table = "coop",   name = "result",   expression = "? IN (1,16385)" }
                ]
                columns = [
                    { table = "coop", name = "coop_id" }
                    { table = "coop", name = "losses" }
                    { table = "coop", name = "winnerByDnf" }
                ]
            },
            {   name = "osdkticker_gamestats_query",
                typeName = "gameType0",
                // there is no value to disable maxGamesToReturn, just pass in a very big number.
                maxGamesToReturn = 10000,
                filters = [ 
                    { table = "game",   name = "timestamp", expression = "(? BETWEEN DATE_SUB(NOW(), INTERVAL $s SECOND) AND NOW())" }
                ]
               columns = [
                    { table = "game",   name = "timestamp" },
                    { table = "player", name = "player_id" },
                    { table = "player", name = "result" },
                    { table = "player", name = "SCORE" }
               ]
             },

			 // FUT Queries by timestamp
             {   name = "gameType71_find_by_timestamp_query",
                 typeName = "gameType71",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType73_find_by_timestamp_query",
                 typeName = "gameType73",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType74_find_by_timestamp_query",
                 typeName = "gameType74",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType75_find_by_timestamp_query",
                  typeName = "gameType75",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "opponent_id", expression = "? = $s" },
					 { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },
             {   name = "gameType76_find_by_timestamp_query",
                 typeName = "gameType76",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType78_find_by_timestamp_query",
                 typeName = "gameType78",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType79_find_by_timestamp_query",
                 typeName = "gameType79",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType80_find_by_timestamp_query",
                 typeName = "gameType80",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType81_find_by_timestamp_query",
                 typeName = "gameType81",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType82_find_by_timestamp_query",
                 typeName = "gameType82",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "opponent_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType83_find_by_timestamp_query",
                 typeName = "gameType83",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "player",  name = "player_id", expression = "? = $s" },
                    { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                    { table = "player",  name = "timestamp", expression = "? <= '$s'" }
               ]
             },
             {   name = "gameType84_find_by_timestamp_query",
                  typeName = "gameType84",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
             },
             {   name = "gameType85_find_by_timestamp_query",
                  typeName = "gameType85",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
             },
	     {   name = "gameType87_find_by_timestamp_query",
                  typeName = "gameType87",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },
	      {   name = "gameType88_find_by_timestamp_query",
                  typeName = "gameType88",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "opponent_id", expression = "? = $s" },
					 { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },
	      {   name = "gameType89_find_by_timestamp_query",
                  typeName = "gameType89",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	

             // SSF Queries by game report id
	     {   name = "gameType33_find_by_reportid_query",
                  typeName = "gameType33",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
             // SSF Queries by game report id
	     {   name = "gameType34_find_by_reportid_query",
                  typeName = "gameType34",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	      {   name = "gameType34_find_by_timestamp_query",
                  typeName = "gameType34",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	

            {
                name = "gameType35_find_by_reportid_query",
                typeName = "gameType35",
                maxGamesToReturn = 5,
                filters = [ 
                    { table = "game", name = "game_id", expression = "? = $s" }
                    { table = "player", name = "game_id", expression = "? = $s" }
                ]
            },

	     {   name = "gameType28_find_by_reportid_query",
                  typeName = "gameType28",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	      {   name = "gameType28_find_by_timestamp_query",
                  typeName = "gameType28",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	
	     {   name = "gameType29_find_by_reportid_query",
                  typeName = "gameType29",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	      {   name = "gameType29_find_by_timestamp_query",
                  typeName = "gameType29",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	
	     {   name = "gameType30_find_by_reportid_query",
                  typeName = "gameType30",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	      {   name = "gameType30_find_by_timestamp_query",
                  typeName = "gameType30",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	
	     {   name = "gameType32_find_by_reportid_query",
                  typeName = "gameType32",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	      {   name = "gameType32_find_by_timestamp_query",
                  typeName = "gameType32",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "player",  name = "player_id", expression = "? = $s" },
                     { table = "player",  name = "timestamp", expression = "? >= '$s'" },
                     { table = "player",  name = "timestamp", expression = "? <= '$s'" }
                ]
              },	
             // FUT OTP Queries by game report id
	     {   name = "gameType71_find_by_reportid_query",
                  typeName = "gameType71",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
             // FUT Queries by game report id
	     {   name = "gameType73_find_by_reportid_query",
                  typeName = "gameType73",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	     {   name = "gameType74_find_by_reportid_query",
                  typeName = "gameType74",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
		{   name = "gameType75_find_by_reportid_query",
                 typeName = "gameType75",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType76_find_by_reportid_query",
                 typeName = "gameType76",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType78_find_by_reportid_query",
                 typeName = "gameType78",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType79_find_by_reportid_query",
                 typeName = "gameType79",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType80_find_by_reportid_query",
                 typeName = "gameType80",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType81_find_by_reportid_query",
                  typeName = "gameType81",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	     {   name = "gameType82_find_by_reportid_query",
                 typeName = "gameType82",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType83_find_by_reportid_query",
                  typeName = "gameType83",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	     {   name = "gameType84_find_by_reportid_query",
                 typeName = "gameType84",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType85_find_by_reportid_query",
                  typeName = "gameType85",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	     {   name = "gameType87_find_by_reportid_query",
                  typeName = "gameType87",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             },
	     {   name = "gameType88_find_by_reportid_query",
                 typeName = "gameType88",
                 // there is no value to disable maxGamesToReturn, just pass in a very big number.
                 maxGamesToReturn = 5,
                 filters = [ 
                    { table = "game",    name = "game_id",   expression = "? = $s" },
                    { table = "player",  name = "player_id", expression = "? = $s" }
               ]
             },
	     {   name = "gameType89_find_by_reportid_query",
                  typeName = "gameType89",
                  // there is no value to disable maxGamesToReturn, just pass in a very big number.
                  maxGamesToReturn = 5,
                  filters = [ 
                     { table = "game",    name = "game_id",   expression = "? = $s" },
                     { table = "player",  name = "player_id", expression = "? = $s" }
                ]
             }
	     
        ] // queries

        views = [
            // Missing skill level, result, status and game mode
            {   name = "NormalRecentGames",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType0",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
					{ table = "player", index = 0, name = "spevent_id", expression = "? = 0" }
					{ table = "player", index = 0, name = "season_id", expression = "? > 0" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	entityType = "usersessions.user", 	shortDesc = "SDB_OPPONENT_S", 	longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0|1000" },
                    { table = "player", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",    		longDesc = "SDB_RESULT",    	type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "goals",  	shortDesc = "SDB_SCORES",      		longDesc = "SDB_SCOREL",    	type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "player", index = 1, name = "goals",  	shortDesc = "SDB_OS_S",        		longDesc = "SDB_OS",        	type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    { table = "player", index = 0, name = "TEAM",   	shortDesc = "SDB_TEAM_USED_S", 		longDesc = "SDB_TEAM_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "player", index = 1, name = "TEAM",   	shortDesc = "SDB_TEAM_FACED_S",		longDesc = "SDB_TEAM_FACED",	type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
                    { table = "player", index = 0, name = "season_id", 	shortDesc = "SDB_SEASON_S",	   		longDesc = "SDB_SEASON",	   	type = "int", format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "player", index = 1, name = "player_id",  shortDesc = "SDB_OPPONENT_S_ID",	longDesc = "SDB_OPPONENT_ID",   type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "player", index = 0, name = "wins", 		shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "ties", 		shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", 		longDesc = "SDB_SEASON_GN",	type = "int", format = "%d", kind = "~num", metadata = "320|0|1008" },
                    { table = "player", index = 0, name = "KIT",   	shortDesc = "SDB_KIT_USED_S", 		longDesc = "SDB_KIT_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1009" }
                ]
            },
            {   name = "ClubsSeasonRecentGames",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "club", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",    longDesc = "SDB_RESULT",    		type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "club", index = 0, name = "goals",  	shortDesc = "SDB_SCORES",      longDesc = "SDB_SCOREL",    		type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "club", index = 1, name = "goals",  	shortDesc = "SDB_OS_S",        longDesc = "SDB_OS",        		type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    { table = "club", index = 0, name = "TEAM",   	shortDesc = "SDB_TEAM_USED_S", longDesc = "SDB_TEAM_USED", 		type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "club", index = 1, name = "TEAM",   	shortDesc = "SDB_TEAM_FACED_S",longDesc = "SDB_TEAM_FACED",		type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
					{ table = "club", index = 0, name = "season_id", 	shortDesc = "SDB_SEASON_S",	   longDesc = "SDB_SEASON",	   	type = "int", format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "club", index = 1, name = "club_id",  shortDesc = "SDB_OPPONENT_S_ID", longDesc = "SDB_OPPONENT_ID", 	type = "string", format = "%s", kind = "~str", metadata = "320|0" },
					{ table = "club", index = 0, name = "wins", 	shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 	type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "ties", 	shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", longDesc = "SDB_SEASON_GN", type = "int", format = "%d", kind = "~num", metadata = "320|0|1008" }       
             ]
            },
            // Missing skill level, result, status and game mode
            {   name = "CupSeasonRecentGames",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType1",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
					{ table = "player", index = 0, name = "cup_id", expression = "? > 0" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	entityType = "usersessions.user", shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0|1000" },
                    { table = "player", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",    	longDesc = "SDB_RESULT",    	type = "int", 	format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "SCORE",  	shortDesc = "SDB_SCORES",     	longDesc = "SDB_SCOREL",    	type = "int", 	format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "player", index = 1, name = "SCORE",  	shortDesc = "SDB_OS_S",        	longDesc = "SDB_OS",        	type = "int", 	format = "%d", kind = "~num", metadata = "120|0|1004" },
                    { table = "player", index = 0, name = "TEAM",   	shortDesc = "SDB_TEAM_USED_S", 	longDesc = "SDB_TEAM_USED", 	type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "player", index = 1, name = "TEAM",   	shortDesc = "SDB_TEAM_FACED_S",	longDesc = "SDB_TEAM_FACED",	type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1006" },
					{ table = "player", index = 0, name = "cup_id", 	shortDesc = "SDB_CUP_S",	   	longDesc = "SDB_CUP",	   		type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "player", index = 1, name = "player_id",  shortDesc = "SDB_OPPONENT_S_ID",longDesc = "SDB_OPPONENT_ID",   type = "string",format = "%s", kind = "~str", metadata = "320|0" },
					{ table = "player", index = 0, name = "wins", 		shortDesc = "SDB_T_WINS", 		longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "player", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 		longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "player", index = 0, name = "ties", 		shortDesc = "SDB_SF_T", 		longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "player", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", 	longDesc = "SDB_SEASON_GN", 	type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1008" },
					{ table = "player", index = 0, name = "KIT",   	shortDesc = "SDB_KIT_USED_S", 		longDesc = "SDB_KIT_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1009" }
                ]
            },
	                // Missing skill level, result, status and game mode
            {   name = "VProDropInRecentGameRatings",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType5",
                maxRowsToReturn = 10,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                 	{ table = "player", index = 0, name = "pos",       expression = "? = $s" }
                ]  
                columns = [
                    { table = "player", index = 0, name = "pos", 		shortDesc = "SDB_POS_S",	   longDesc = "SDB_POSITION",  type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "rating",     shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "game",   index = 0, name = "timestamp",  shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" }
                ]
            },

            {   name = "VProRegularRecentGameRatings",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType9",
                maxRowsToReturn = 10,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                 	{ table = "player", index = 0, name = "pos",       expression = "? = $s" }
                ]  
                columns = [
                    { table = "player", index = 0, name = "pos", 		shortDesc = "SDB_POS_S",	   longDesc = "SDB_POSITION",  type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "rating",     shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "game",   index = 0, name = "timestamp",  shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" }
                ]
            },

            {   name = "VProCupRecentGameRatings",
                desc = "SDB_NORMAL",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType13",
                maxRowsToReturn = 10,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                 	{ table = "player", index = 0, name = "pos",       expression = "? = $s" }
                ]  
                columns = [
                    { table = "player", index = 0, name = "pos", 		shortDesc = "SDB_POS_S",	   longDesc = "SDB_POSITION",  type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "rating",     shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "game",   index = 0, name = "timestamp",  shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" }
                ]
            },
			{   name = "SponsoredEventRecentGames",
                desc = "SDB_FIFA_RANK_LOBBY",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType0",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "player", index = 0, name = "player_id", expression = "? = $s" }
					{ table = "player", index = 0, name = "spevent_id", expression = "? = $s" }
					{ table = "player", index = 0, name = "season_id", expression = "? > 0" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	entityType = "usersessions.user", 	shortDesc = "SDB_OPPONENT_S", 	longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0|1000" },
                    { table = "player", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",    		longDesc = "SDB_RESULT",    	type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "player", index = 0, name = "goals",  	shortDesc = "SDB_SCORES",      		longDesc = "SDB_SCOREL",    	type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "player", index = 1, name = "goals",  	shortDesc = "SDB_OS_S",        		longDesc = "SDB_OS",        	type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    { table = "player", index = 0, name = "TEAM",   	shortDesc = "SDB_TEAM_USED_S", 		longDesc = "SDB_TEAM_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "player", index = 1, name = "TEAM",   	shortDesc = "SDB_TEAM_FACED_S",		longDesc = "SDB_TEAM_FACED",	type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
                    { table = "player", index = 0, name = "season_id", 	shortDesc = "SDB_SEASON_S",	   		longDesc = "SDB_SEASON",	   	type = "int", format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "player", index = 1, name = "player_id",  shortDesc = "SDB_OPPONENT_S_ID",	longDesc = "SDB_OPPONENT_ID",   type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "player", index = 0, name = "wins", 		shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "ties", 		shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "player", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", 		longDesc = "SDB_SEASON_GN",	type = "int", format = "%d", kind = "~num", metadata = "320|0|1008" },
                    { table = "player", index = 0, name = "KIT",   	shortDesc = "SDB_KIT_USED_S", 		longDesc = "SDB_KIT_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1009" }
                ]
			},
            {   name = "ClubRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC",  type = "int", format = "%d", kind = "~num", metadata = "130|0" }
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",              type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",              type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                  type = "int", format = "%d", kind = "~num", metadata = "100|0" }
                ]
            },
            {   name = "ClubPlayoffRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType13",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC",  type = "int", format = "%d", kind = "~num", metadata = "130|0" },
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",              type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",              type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                  type = "int", format = "%d", kind = "~num", metadata = "100|0" }
                ]
            },			
            {   name = "ClubQMChallengeRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id",   expression = "? = $s" },
                    { table = "game", index = 0, name = "challenge", expression = "? = $s" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",             type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",             type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                 type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC", type = "int", format = "%d", kind = "~num", metadata = "130|0" },
                    { table = "game", index = 0, name = "mom",	  shortDesc = "SDB_MOM",          longDesc = "SDB_MOML",               type = "string", format = "%s", kind = "~str", metadata = "270|0" }
                ]
            },
//	**  REMOVED AS THIS IS SUSPECTED OF BEING A DUPLICATE OF THE VIEW BELOW, I HAVE CONFIRMED THAT THIS VIEW
// 		IS NOT USED ON THE CLIENT.		
//            {   name = "ClubCupRecentGames",
//                desc = "SDB_L_CLUB",
//                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
//                typeName = "gameType13",
//                maxRowsToReturn = 20,
//                rowAttributeType = "game",
//                filters = [
//                    { table = "club", index = 0, name = "club_id",   expression = "? = $s" }
//                    { table = "game", index = 0, name = "challenge", expression = "? = $s" }
//                ]
//                columns = [
//                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
//                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
//                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",             type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
//                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",             type = "int", format = "%d", kind = "~num", metadata = "100|0" },
//                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                 type = "int", format = "%d", kind = "~num", metadata = "100|0" },
//                    { table = "game", index = 0, name = "member", shortDesc = "SDB_CLUB_PLAYERS", longDesc = "SDB_CLUBS_PLAYERS_DESC", type = "int", format = "%d", kind = "~num", metadata = "130|0" },
//					{ table = "club", index = 0, name = "wins", 		shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
//					{ table = "club", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
//					{ table = "club", index = 0, name = "ties", 		shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
//                    { table = "game", index = 0, name = "mom",	  shortDesc = "SDB_MOM",          longDesc = "SDB_MOML",               type = "string", format = "%s", kind = "~str", metadata = "270|0" }
//                ]
//            },
            {   name = "ClubsCupRecentGames",
                desc = "SDB_L_CLUB",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType13",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id",   expression = "? = $s" }
                ]
                columns = [
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "club", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",    longDesc = "SDB_RESULT",    type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" },
                    { table = "club", index = 0, name = "goals",  	shortDesc = "SDB_SCORES",      longDesc = "SDB_SCOREL",    type = "int", format = "%d", kind = "~num", metadata = "120|0|1003" },
                    { table = "club", index = 1, name = "goals",  	shortDesc = "SDB_OS_S",        longDesc = "SDB_OS",        type = "int", format = "%d", kind = "~num", metadata = "120|0|1004" },
                    { table = "club", index = 0, name = "TEAM",   	shortDesc = "SDB_TEAM_USED_S", longDesc = "SDB_TEAM_USED", type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "club", index = 1, name = "TEAM",   	shortDesc = "SDB_TEAM_FACED_S",longDesc = "SDB_TEAM_FACED",type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },
					{ table = "club", index = 0, name = "cup_id", 	shortDesc = "SDB_CUP_S",	   longDesc = "SDB_CUP",	   type = "int", format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "club", index = 1, name = "club_id", 	shortDesc = "SDB_OPPONENT_S_ID", longDesc = "SDB_OPPONENT_ID", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
					{ table = "club", index = 0, name = "wins", 	shortDesc = "SDB_T_WINS", 		longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 		longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "ties", 	shortDesc = "SDB_SF_T", 		longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "club", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", longDesc = "SDB_SEASON_GN", type = "int", format = "%d", kind = "~num", metadata = "320|0|1008" }
                ]
            },
            //  EASW Only Game History View
            {   name = "ClubQMChallengeRecentGamesWithinPeriod",
                desc = "SDB_RECENT",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                filters = [
                    { table = "club", index = 0, name = "club_id",   expression = "?  = $s" },
                    { table = "game", index = 0, name = "challenge", expression = "?  = $s" },
                    { table = "game", index = 0, name = "timestamp", expression = "? >= '$s'" },
                    { table = "game", index = 0, name = "timestamp", expression = "? <= '$s'" }
                ]
                columns = [
                    { table = "game", index = 0, name = "timestamp", shortDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP", longDesc = "SDB_CLUBS_COL_GAME_TIMESTAMP_DESC", type = "int", format = "%d", kind = "~tim", metadata = "320|0" },
                    { table = "club", index = 0, name = "club_id",   shortDesc = "SDB_OPPONENT_S", longDesc = "OPPONENT_ID", type = "int", format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "club", index = 0, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id",   shortDesc = "SDB_OPPONENT_S", longDesc = "OPPONENT_ID", type = "int", format = "%d", kind = "~num", metadata = "320|0" },
                    { table = "club", index = 1, name = "club_id", entityType = "clubs.club",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
                    { table = "club", index = 0, name = "result", shortDesc = "SDB_RESULT_S", longDesc = "SDB_RESULT",  type = "int",    format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "club", index = 0, name = "score",  shortDesc = "SDB_SCORES",   longDesc = "SDB_SCOREL",  type = "int",    format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "club", index = 1, name = "score",  shortDesc = "SDB_OS_S",     longDesc = "SDB_OS",      type = "int",    format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "game", index = 0, name = "clubgamekey", shortDesc = "KEY",     longDesc = "KEY",         type = "string", format = "%s", kind = "~str", metadata = "320|0" }
                ]
            },
            {   name = "ClubMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "? = $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "230|0" },
                    { table = "player", name = "rating",  shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "player", name = "goals",  	shortDesc = "SDB_ST_GOALS",     longDesc = "SDB_GOALSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" },
                    { table = "player", name = "assists",  	shortDesc = "SDB_ST_ASSISTS",     longDesc = "SDB_ASSISTSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" }
                ]
            },
            {   name = "ClubPlayoffMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType13",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "? = $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "? = $s" }
                ]
                columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "300|0" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_MEMS",                  longDesc = "SDB_MEML",                   type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|M" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_CLUBS_COL_FREE_AGENT_S",longDesc = "SDB_CLUBS_COL_FREE_AGENT",   type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|FA" },
                    { table = "player", name = "SCORE",  shortDesc = "SDB_SCORES",                longDesc = "SDB_SCOREL",                 type = "int", format = "%d", kind = "~num", metadata = "60|0" }
                ]
            },			
            {   name = "ClubOppMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType9",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "?  =  $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "?  <> $s" }
                ]
                columns = [             
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "230|0" },
                    { table = "player", name = "rating",  shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "player", name = "goals",  	shortDesc = "SDB_ST_GOALS",     longDesc = "SDB_GOALSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" },
                    { table = "player", name = "assists",  	shortDesc = "SDB_ST_ASSISTS",     longDesc = "SDB_ASSISTSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" }
                ]
            },
            {   name = "ClubPlayoffOppMemberRecentGames",
                desc = "SDB_CLUB_MEMBER",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
                typeName = "gameType13",
                maxRowsToReturn = 20,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "?  =  $s" },
                    { table = "player", index = 0, name = "clubId",  expression = "?  <> $s" }
                ]
                columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "300|0" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_MEMS",                  longDesc = "SDB_MEML",                 type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|M" },
                    //Dummy Column to display Club specific Data
                    { table = "player", name = "SCORE",  shortDesc = "SDB_CLUBS_COL_FREE_AGENT_S",longDesc = "SDB_CLUBS_COL_FREE_AGENT", type = "string", format = "%s", kind = "~str", metadata = "60|0|1009|FA" },
                    { table = "player", name = "SCORE",  shortDesc = "SDB_SCORES",                longDesc = "SDB_SCOREL",               type = "int", format = "%d", kind = "~num", metadata = "60|0" }
                ]
            },


            
			{   name = "ClubMemberRecentCupGames",
				desc = "SDB_CLUB_MEMBER",
				metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
				typeName = "gameType13",
				maxRowsToReturn = 20,
				rowAttributeType = "player",
				filters = [
					{ table = "player", index = 0, name = "game_id", expression = "? = $s" },
					{ table = "player", index = 0, name = "clubId",  expression = "? = $s" }
				]
				columns = [
                    { table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "230|0" },
                    { table = "player", name = "rating",  shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
                    { table = "player", name = "goals",  	shortDesc = "SDB_ST_GOALS",     longDesc = "SDB_GOALSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" },
                    { table = "player", name = "assists",  	shortDesc = "SDB_ST_ASSISTS",     longDesc = "SDB_ASSISTSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" }
				]
			},
			{   name = "ClubOppMemberRecentCupGames",
				desc = "SDB_CLUB_MEMBER",
				metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|0",
				typeName = "gameType13",
				maxRowsToReturn = 20,
				rowAttributeType = "player",
				filters = [
					{ table = "player", index = 0, name = "game_id", expression = "?  =  $s" },
					{ table = "player", index = 0, name = "clubId",  expression = "?  <> $s" }
				]
				columns = [
					{ table = "player", name = "player_id", entityType = "usersessions.user", shortDesc = "#LOC_PLAYER#", longDesc = "#LOC_PLAYER#", type = "string", format = "%s", kind = "~str", metadata = "230|0" },
					{ table = "player", name = "rating",  shortDesc = "SDB_ST_PLAYERRATING",  longDesc = "SDB_RATINGL",  type = "float", format = "%.1f", kind = "~num", metadata = "70|0|0" },
					{ table = "player", name = "goals",  	shortDesc = "SDB_ST_GOALS",     longDesc = "SDB_GOALSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" },
					{ table = "player", name = "assists",  	shortDesc = "SDB_ST_ASSISTS",     longDesc = "SDB_ASSISTSL",      type = "int",    format = "%d", kind = "~num", metadata = "70|0" }
				]
			},
			{   name = "CoopSeasonRecentGames",
                desc = "SDB_L_COOP",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType25",
                maxRowsToReturn = 10,
                rowAttributeType = "game",
                filters = [
                    { table = "coop", index = 0, name = "coop_id",   expression = "? = $s" }
                ]
                columns = [
                    { table = "coop", index = 1, name = "coop_id", 	entityType = "coopseason.coop",   	shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "coop", index = 0, name = "result", 	shortDesc = "SDB_RESULT_S",     	longDesc = "SDB_RESULT",            type = "int", 	format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "coop", index = 0, name = "score",  	shortDesc = "SDB_SCORES",       	longDesc = "SDB_SCOREL",            type = "int", 	format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "coop", index = 1, name = "score",  	shortDesc = "SDB_OS_S",         	longDesc = "SDB_OS",                type = "int", 	format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "coop", index = 0, name = "team",   	shortDesc = "SDB_TEAM_USED_S", 		longDesc = "SDB_TEAM_USED", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "coop", index = 1, name = "team",   	shortDesc = "SDB_TEAM_FACED_S",		longDesc = "SDB_TEAM_FACED",		type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1006" },                    
                    { table = "coop", index = 0, name = "season_id",shortDesc = "SDB_SEASON_S",	  		longDesc = "SDB_SEASON",	   		type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "coop", index = 1, name = "coop_id", 	shortDesc = "SDB_OPPONENT_S_ID", 	longDesc = "SDB_OPPONENT_ID", 		type = "string",format = "%s", kind = "~str", metadata = "320|0" },
					{ table = "coop", index = 0, name = "wins", 	shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 				type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "ties", 	shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 				type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", 	longDesc = "SDB_SEASON_GN", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0|1008" },
					{ table = "coop", index = 0, name = "KIT",   	shortDesc = "SDB_KIT_USED_S", 		longDesc = "SDB_KIT_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1009" }
               ]
            },
            {   name = "CoopCupRecentGames",
                desc = "SDB_L_COOP",
                metadata = "~ONLINE_RECENT_GAME|OSDK_D_C1|1|8|35|0",
                typeName = "gameType26",
                maxRowsToReturn = 10,
                rowAttributeType = "game",
                filters = [
                    { table = "coop", index = 0, name = "coop_id",   expression = "? = $s" }
                ]
                columns = [
                    { table = "coop", index = 1, name = "coop_id", entityType = "coopseason.coop",   shortDesc = "SDB_OPPONENT_S", longDesc = "SDB_OPPONENT", type = "string", format = "%s", kind = "~str", unknownValue = "-", metadata = "320|0" },
                    { table = "coop", index = 0, name = "result", shortDesc = "SDB_RESULT_S",     longDesc = "SDB_RESULT",             type = "int", format = "%d", kind = "~num", metadata = "100|0|1002" },
                    { table = "coop", index = 0, name = "score",  shortDesc = "SDB_SCORES",       longDesc = "SDB_SCOREL",             type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "coop", index = 1, name = "score",  shortDesc = "SDB_OS_S",         longDesc = "SDB_OS",                 type = "int", format = "%d", kind = "~num", metadata = "100|0" },
                    { table = "coop", index = 0, name = "team",   	shortDesc = "SDB_TEAM_USED_S", longDesc = "SDB_TEAM_USED", type = "int", format = "%d", kind = "~num", metadata = "320|0|1005" },
                    { table = "coop", index = 1, name = "team",   	shortDesc = "SDB_TEAM_FACED_S",longDesc = "SDB_TEAM_FACED",type = "int", format = "%d", kind = "~num", metadata = "320|0|1006" },                    
                    { table = "coop", index = 0, name = "cup_id", 	shortDesc = "SDB_CUP_S",	   longDesc = "SDB_CUP",	   type = "int", format = "%d", kind = "~num", metadata = "320|0|1007" },
                    { table = "coop", index = 1, name = "coop_id", shortDesc = "SDB_OPPONENT_S_ID", longDesc = "SDB_OPPONENT_ID", type = "string", format = "%s", kind = "~str", metadata = "320|0" },
					{ table = "coop", index = 0, name = "wins", 		shortDesc = "SDB_T_WINS", 			longDesc = "SDB_T_WINS", 		type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "losses", 	shortDesc = "SDB_SF_L", 			longDesc = "SDB_SF_L", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "ties", 		shortDesc = "SDB_SF_T", 			longDesc = "SDB_SF_T", 			type = "int", 	format = "%d", kind = "~num", metadata = "320|0" },
					{ table = "coop", index = 0, name = "gameNumber", shortDesc = "SDB_SEASON_GN_S", longDesc = "SDB_SEASON_GN", type = "int", format = "%d", kind = "~num", metadata = "320|0|1008" },
					{ table = "coop", index = 0, name = "KIT",   	shortDesc = "SDB_KIT_USED_S", 		longDesc = "SDB_KIT_USED", 	type = "int", format = "%d", kind = "~num", metadata = "320|0|1009" }
                ]
            },       
            // Report View used for 1st Party Tournament, It is not used in the client, but for TO to fetch game results after a tournament game
            {   name = "OrganizedTournamentRecentGames",
                desc = "SDB_ORGANIZED_TOUR_DESC",
                typeName = "gameType31",
                maxRowsToReturn = 2,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "?  =  $s" }
                ]
                columns = [
                    { table = "player", name = "game_id",            shortDesc = "SDB_GAME_ID",       longDesc = "SDB_GAME_ID",      type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "teamIndex",          shortDesc = "SDB_TEAM_INDEX",    longDesc = "SDB_TEAM_INDEX",   type = "int",   format = "%d",   kind = "~num"},					
                    { table = "player", name = "wins",               shortDesc = "SDB_WINS",          longDesc = "SDB_WINS",         type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "losses",             shortDesc = "SDB_LOSSES",        longDesc = "SDB_LOSSES",       type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "winnerByDnf",        shortDesc = "SDB_WINNER_BY_DNF", longDesc = "SDB_WINNER_BY_DNF",type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "goals",              shortDesc = "SDB_GOALS",         longDesc = "SDB_GOALS",        type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "goalsAgainst",       shortDesc = "SDB_GOALS_AGAINST", longDesc = "SDB_GOALS_AGAINST",type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "yellowCards",        shortDesc = "SDB_YELLOW_CARDS",  longDesc = "SDB_YELLOW_CARDS", type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "redCards",           shortDesc = "SDB_RED_CARDS",     longDesc = "SDB_RED_CARDS",    type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "passesMade",         shortDesc = "SDB_PASSES_MADE",   longDesc = "SDB_PASSES_MADE",  type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "shotsOnGoal",        shortDesc = "SDB_SHOTS_ON_GOAL", longDesc = "SDB_SHOTS_ON_GOAL",type = "int",   format = "%d",   kind = "~num"},					
                    { table = "player", name = "pkGoals",            shortDesc = "SDB_TEAM_INDEX",    longDesc = "SDB_TEAM_INDEX",   type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "shotsAgainstOnGoal", shortDesc = "SDB_SHOTS_AGAINST_ON_GOAL",	longDesc = "SDB_SHOTS_AGAINST_ON_GOALS",	type = "int",	format = "%d",	kind = "~num"}
                ]
            },
			// Report View used for Fut 1st Party Tournament, It is not used in the client, but for TO to fetch game results after a tournament game
            {   name = "FutOrganizedTournamentRecentGames",
                desc = "SDB_ORGANIZED_TOUR_DESC",
                typeName = "gameType70",
                maxRowsToReturn = 2,
                rowAttributeType = "player",
                filters = [
                    { table = "player", index = 0, name = "game_id", expression = "?  =  $s" }
                ]
                columns = [
                    { table = "player", name = "game_id",            shortDesc = "SDB_GAME_ID",       longDesc = "SDB_GAME_ID",      type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "teamIndex",          shortDesc = "SDB_TEAM_INDEX",    longDesc = "SDB_TEAM_INDEX",   type = "int",   format = "%d",   kind = "~num"},					
                    { table = "player", name = "wins",               shortDesc = "SDB_WINS",          longDesc = "SDB_WINS",         type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "losses",             shortDesc = "SDB_LOSSES",        longDesc = "SDB_LOSSES",       type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "winnerByDnf",        shortDesc = "SDB_WINNER_BY_DNF", longDesc = "SDB_WINNER_BY_DNF",type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "goals",              shortDesc = "SDB_GOALS",         longDesc = "SDB_GOALS",        type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "goalsAgainst",       shortDesc = "SDB_GOALS_AGAINST", longDesc = "SDB_GOALS_AGAINST",type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "yellowCards",        shortDesc = "SDB_YELLOW_CARDS",  longDesc = "SDB_YELLOW_CARDS", type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "redCards",           shortDesc = "SDB_RED_CARDS",     longDesc = "SDB_RED_CARDS",    type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "passesMade",         shortDesc = "SDB_PASSES_MADE",   longDesc = "SDB_PASSES_MADE",  type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "shotsOnGoal",        shortDesc = "SDB_SHOTS_ON_GOAL", longDesc = "SDB_SHOTS_ON_GOAL",type = "int",   format = "%d",   kind = "~num"},					
                    { table = "player", name = "pkGoals",            shortDesc = "SDB_TEAM_INDEX",    longDesc = "SDB_TEAM_INDEX",   type = "int",   format = "%d",   kind = "~num"},
                    { table = "player", name = "shotsAgainstOnGoal", shortDesc = "SDB_SHOTS_AGAINST_ON_GOAL",	longDesc = "SDB_SHOTS_AGAINST_ON_GOALS",	type = "int",	format = "%d",	kind = "~num"}
                ]
            },
            // Report View used for Volta online matches
            {   name = "VoltaRecentGameParticipants",
                desc = "SDB_VOLTA_RECENT_PARTICIPANT",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType33",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                skipGrouping = true,
                filters = [
                  { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	shortDesc = "SDB_PLAYER", 			longDesc = "SDB_PLAYER",		type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" }
                ]
            },
			// Report View used for Volta Arcade matches
            {   name = "VoltaArcadeRecentGameParticipants",
                desc = "SDB_VOLTA_ARCADE_RECENT_PARTICIPANT",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType35",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                skipGrouping = true,
                filters = [
                  { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	shortDesc = "SDB_PLAYER", 			longDesc = "SDB_PLAYER",		type = "int", format = "%d", kind = "~num", metadata = "200|0|1002" }
                ]
            },
            // Report View used for Clubs Drop In online matches
            {   name = "DropInRecentGameParticipants",
                desc = "SDB_DROPIN_RECENT_PARTICIPANT",
                metadata = "ONLINE_RECENT_GAME|OSDK_D_C1|0|8|35|1",
                typeName = "gameType5",
                maxRowsToReturn = 20,
                rowAttributeType = "game",
                skipGrouping = true,
                filters = [
                  { table = "player", index = 0, name = "player_id", expression = "? = $s" }
                ]
                columns = [
                    { table = "player", index = 1, name = "player_id", 	shortDesc = "SDB_PLAYER", 		longDesc = "SDB_PLAYER",		type = "int", 	format = "%d", 	 kind = "~num", metadata = "200|0|1002"},
                    { table = "player", index = 1, name = "wins",       shortDesc = "SDB_WINS",         	longDesc = "SDB_WINS",			type = "int",   format = "%d",   kind = "~num", metadata = "200|0|1002"},
                    { table = "player", index = 1, name = "losses",     shortDesc = "SDB_LOSSES",        	longDesc = "SDB_LOSSES",		type = "int",   format = "%d",   kind = "~num", metadata = "200|0|1002"},
                    { table = "player", index = 1, name = "ties",       shortDesc = "SDB_TIES",        		longDesc = "SDB_TIES",			type = "int",   format = "%d",   kind = "~num", metadata = "200|0|1002"}
                    { table = "player", index = 0, name = "team",       shortDesc = "SDB_TEAM",        		longDesc = "SDB_TEAM",			type = "int",   format = "%d",   kind = "~num", metadata = "200|0|1002"}
                    { table = "player", index = 1, name = "team",       shortDesc = "SDB_TEAM",        		longDesc = "SDB_TEAM",			type = "int",   format = "%d",   kind = "~num", metadata = "200|0|1002"}
                ]
            }						
        ] // views
    },

    metricsInfo = {
        reportsToStore = 5   // calculate the averate over the last N reports
        // these attributes will be added to health check status page
        // keep track the average of these attribute values
        storeAverage = [
            { name = "GENDPHASE" },
            { name = "GDESYNCEND" },
            { name = "GDESYNCRSN" },
            { name = "USERSSTRT0" },
            { name = "USERSSTRT1" },
            { name = "USERSEND0" },
            { name = "USERSEND1" },
            { name = "GUESTS0" },
            { name = "GUESTS1" },
            { name = "VOIPSTRT0" },
            { name = "VOIPSTRT1" },
            { name = "VOIPEND0" },
            { name = "VOIPEND1" },
            { name = "LATELOWGM" },
            { name = "LATEHIGM" },
            { name = "LATEAVGGM" },
            { name = "LATESDEVGM" },
            { name = "LATELOWNET" },
            { name = "LATEHINET" },
            { name = "LATEAVGNET" },
            { name = "LATESDEVNET" },
            { name = "BANDLOWGM" },
            { name = "BANDHIGM" },
            { name = "BANDAVGGM" },
            { name = "BYTESSENTGM" },
            { name = "BYTESRCVDGM" },
            { name = "BANDLOWNET" },
            { name = "BANDHINET" },
            { name = "BANDAVGNET" },
            { name = "BYTESSENTNET" },
            { name = "BYTESRCVDNET" },
            { name = "DROPPKTS" },
            { name = "PKTLOSS" },
            { name = "FPSLOW" },
            { name = "FPSHI" },
            { name = "FPSAVG" },
            { name = "FPSDEV" }
        ]
        // keep track the total number of each value
    	storeByValue = [
            { name = "GRPTVER" },
            { name = "GRPTTYPE" },
            { name = "GRESULT" },
            // Updated from game reporting code
            { name = "FUT_mismatch" }
	    ]
     },

    //Configuration section for skill-related functionality.
    skillInfo = {
        //Each entry in "dampingTables" creates a lookup table (from 0-x) for percentages to reduce skill gain by.
        //Any request for an index past what is defined in the configuration uses the last defined value.
        //Application of this configuration is in custom/reportprocessor.cpp, so a game team can choose to multiply the results from various lookups
        //or just go with the minimum damping returned after lookup.
        //Name field is used to identify the tables when passed into SkillDampingUtil::lookupDampingPercent()
        dampingTables = [
            { name = "rematchDamping"
              table = [ 100, 100, 80, 60, 40, 20, 0 ]
            },
            { name = "dnfDamping"
              table = [ 100, 90, 80, 50, 30, 0 ]
            }
        ]

        // max skill value (cap)
        // if not specified, then no capping
        //maxValue = 10000
    }, // skillInfo
    
    //Configuration for the "basic" report processor
    basicConfig = {
        // if true, then the basic report processor will not publish stats if the stats request contains *any* invalid stat entries
        //    for example, is stat A and B are in a request, A points to a valid stat update but B points to invalid update, then the
        //    stat update request will fail - meaning no stats are published.
        // if false, then the request will publish stat A but not B.  No errors are returned from game reporting.
        strictStatsUpdates = true
        mergeReports = true
    },
    
    //  Custom configuration data global to all game types. - accessible via GameReportingSlaveImpl::getConfig().getCustomGlobalConfig()
    /*customGlobalConfig = {
        tdf = "Blaze::GameReporting::BasicConfig",
        value = {
            strictStatsUpdates = true
        }
    */
    hmacConfig = {
        hmacNumKeys = 5000
#if PLATFORM == "xone"
        hmacKeyFile = " "
#elif PLATFORM == "xbsx"
        hmacKeyFile = " "
#elif PLATFORM == "ps4"		
        hmacKeyFile = " "
#elif PLATFORM == "ps5"		
        hmacKeyFile = " "
#elif PLATFORM == "pc"
        hmacKeyFile = " "
#endif		
        hmacKeyLineWidth = 147 
        hmacKeyIndexOverride = -1
    }
	// FIFA SPECIFIC CODE START

    externalSessions = {
        psnMatchesServiceLabel = #PS5_MATCHES_SERVICE_LABEL#
    }
    // FIFA SPECIFIC CODE END
}
