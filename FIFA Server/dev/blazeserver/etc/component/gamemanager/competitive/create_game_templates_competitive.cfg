// TODO - My best guess at legit values based on "ps4FutTournament"

"oneVsOneCompetitive" = {
    createRequestType = "RESET_GAME"
    baseRequest = {
        gameCreationData = { 
            networkTopology = "CLIENT_SERVER_DEDICATED"
            voipNetwork = "VOIP_DISABLED"

            gameSettings = ["openToBrowsing",
                            "allowAnyReputation"]

            // A restricted permission system is used, so that players cannot perform actions that would invalidate the game:
            permissionSystemName = "tournamentGame"

            // FUT_ONLINE_PRO_LEAGUE
            gameReportName = "gameType69"
        }
    }
    attributes = {
        "CreateGameRequest.adminPlayerList"                = { attrName = "ADMIN_PLAYER_LIST", isOptional = true }
        "CreateGameRequest.gamePingSiteAlias"              = { attrName = "PING_SITE_ALIAS", default = "bio-sjc" }    // separate templates per region recommended

        // The tournament provider may provide a URL for events, so that it can be informed when the game starts and ends:
        "CreateGameRequest.gameEventAddress"               = { attrName = "GAME_EVENT_ADDRESS", isOptional = true }
        "CreateGameRequest.gameStartEventUri"              = { attrName = "GAME_START_EVENT_URI", isOptional = true }
        "CreateGameRequest.gameEndEventUri"                = { attrName = "GAME_END_EVENT_URI", isOptional = true }

        // Tournament Id is a arbitrary value provided by the organizer.  The Organizer should refer to ESL, FaceIt, or other external tournament provider.
        "CreateGameRequest.tournamentIdentification.tournamentId"            = { attrName = "TOURNAMENT_ID", isOptional = true }
        "CreateGameRequest.tournamentIdentification.tournamentOrganizer"     = { attrName = "TOURNAMENT_ORGANIZER", isOptional = true }

        "CreateGameRequest.commonGameData.gameProtocolVersionString"         = { default = "match_any_protocol" }           // (Can only be set via Attribute, baseRequest value is overridden with client provided value )

        "CreateGameRequest.gameCreationData.gameName"                        = { attrName = "GAME_NAME", isOptional = true }
        "CreateGameRequest.gameCreationData.teamIds"                         = { default = [1,2] }
        "CreateGameRequest.gameCreationData.minPlayerCapacity"               = { default = 2 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"               = { default = 22 }
        "CreateGameRequest.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"       = { default = 2 }
        "CreateGameRequest.slotCapacitiesMap[SLOT_PUBLIC_SPECTATOR]"         = { attrName = "SPECTATOR_CAPACITY", default = 20 }

        "CreateGameRequest.gameCreationData.gameSettings[ranked]"            = { default = 1 }
			
        "CreateGameRequest.gameCreationData.gameAttribs[Gamemode_Name]"      = { default = "fut_organized_tournament_match" }
        "CreateGameRequest.gameCreationData.gameAttribs[OSDK_categoryId]"    = { default = "gameType69" }
        "CreateGameRequest.gameCreationData.gameAttribs[OSDK_gameMode]"      = { default = "69" }
			
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourHalfLength]"         = { attrName = "GAME_LENGTH",          default = "6" }             //Support Values: 2-10,15,20
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourCustomController]"   = { attrName = "CONTROL",              default = "ANY" }           //Support Values: "ANY","MANUAL","SEMI"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourDrawMode]"           = { attrName = "DRAW_MODE",            default = "EXTRATIME" }     //Support Values: "EXTRATIME","SHOOTOUT","GOLDGOAL"
			
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourStadium]"            = { attrName = "STADIUM",              default = "ANY" }           //Support Values: "ANY","FIXED"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourToD]"            	 = { attrName = "TIME",                 default = "ANY" }           //Support Values: "ANY","DAY","NIGHT"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourWeather]"            = { attrName = "WEATHER",              default = "ANY" }           //Note: Not all stadium supports all these weathers, if weather is not available, it will go back to the one that it supports
																																						//Support Values: "ANY","DRYSUNNY","DRYHAZY","DRYCLOUDY","RAINNORMAL","RAINSHOWERS","SNOWNORMAL","SNOWFLURRIES","OVERCASTNORMAL","OVERCASTFOGGY"			
        // Disconnect and reservation timeouts should be long enough to allow matches to persist with only reservations, until they can be removed.
#if (ENV == "prod")		  
        "CreateGameRequest.gameCreationData.playerReservationTimeout"        = { default = "20d" }
        "CreateGameRequest.gameCreationData.disconnectReservationTimeout"    = { attrName = "DISCONNECT_RESERVATION_TIMEOUT", default = "7d" } // To help ensure cleanup, set to max active game duration.
#else
        "CreateGameRequest.gameCreationData.playerReservationTimeout"        = { default = "30m" }
        "CreateGameRequest.gameCreationData.disconnectReservationTimeout"    = { attrName = "DISCONNECT_RESERVATION_TIMEOUT", default = "30m" } // To help ensure cleanup, set to max active game duration.
#endif
    }
}

"twoVsTwoCompetitive" = {
    createRequestType = "RESET_GAME"
    baseRequest = {
        gameCreationData = { 
            networkTopology = "CLIENT_SERVER_DEDICATED"
            voipNetwork = "VOIP_DISABLED"

            gameSettings = ["openToBrowsing",
                            "allowAnyReputation"]

            // A restricted permission system is used, so that players cannot perform actions that would invalidate the game:
            permissionSystemName = "tournamentGame"

            // FUT_ONLINE_PRO_LEAGUE
            gameReportName = "gameType69"
        }
    }
    attributes = {
        "CreateGameRequest.adminPlayerList"                = { attrName = "ADMIN_PLAYER_LIST", isOptional = true }
        "CreateGameRequest.gamePingSiteAlias"              = { attrName = "PING_SITE_ALIAS", default = "bio-sjc" }    // separate templates per region recommended

        // The tournament provider may provide a URL for events, so that it can be informed when the game starts and ends:
        "CreateGameRequest.gameEventAddress"               = { attrName = "GAME_EVENT_ADDRESS", isOptional = true }
        "CreateGameRequest.gameStartEventUri"              = { attrName = "GAME_START_EVENT_URI", isOptional = true }
        "CreateGameRequest.gameEndEventUri"                = { attrName = "GAME_END_EVENT_URI", isOptional = true }

        // Tournament Id is a arbitrary value provided by the organizer.  The Organizer should refer to ESL, FaceIt, or other external tournament provider.
        "CreateGameRequest.tournamentIdentification.tournamentId"            = { attrName = "TOURNAMENT_ID", isOptional = true }
        "CreateGameRequest.tournamentIdentification.tournamentOrganizer"     = { attrName = "TOURNAMENT_ORGANIZER", isOptional = true }

        "CreateGameRequest.commonGameData.gameProtocolVersionString"         = { default = "match_any_protocol" }           // (Can only be set via Attribute, baseRequest value is overridden with client provided value )

        "CreateGameRequest.gameCreationData.gameName"                        = { attrName = "GAME_NAME", isOptional = true }
        "CreateGameRequest.gameCreationData.teamIds"                         = { default = [1,2] }
        "CreateGameRequest.gameCreationData.minPlayerCapacity"               = { default = 2 }
        "CreateGameRequest.gameCreationData.maxPlayerCapacity"               = { default = 22 }
        "CreateGameRequest.slotCapacitiesMap[SLOT_PUBLIC_PARTICIPANT]"       = { default = 4 }
        "CreateGameRequest.slotCapacitiesMap[SLOT_PUBLIC_SPECTATOR]"         = { attrName = "SPECTATOR_CAPACITY",           default = 18 }

        "CreateGameRequest.gameCreationData.gameSettings[ranked]"            = { default = 1 }
			
        "CreateGameRequest.gameCreationData.gameAttribs[Gamemode_Name]"      = { default = "fut_organized_tournament_match" }
        "CreateGameRequest.gameCreationData.gameAttribs[OSDK_categoryId]"    = { default = "gameType69" }
        "CreateGameRequest.gameCreationData.gameAttribs[OSDK_gameMode]"      = { default = "69" }
			
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourHalfLength]"         = { attrName = "GAME_LENGTH",          default = "6" }             //Support Values: 2-10,15,20
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourCustomController]"   = { attrName = "CONTROL",              default = "ANY" }           //Support Values: "ANY","MANUAL","SEMI"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourDrawMode]"           = { attrName = "DRAW_MODE",            default = "EXTRATIME" }     //Support Values: "EXTRATIME","SHOOTOUT","GOLDGOAL"
			
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourStadium]"            = { attrName = "STADIUM",              default = "ANY" }           //Support Values: "ANY","FIXED"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourToD]"            	 = { attrName = "TIME",                 default = "ANY" }           //Support Values: "ANY","DAY","NIGHT"
        "CreateGameRequest.gameCreationData.gameAttribs[fifaTourWeather]"            = { attrName = "WEATHER",              default = "ANY" }           //Note: Not all stadium supports all these weathers, if weather is not available, it will go back to the one that it supports
																																						//Support Values: "ANY","DRYSUNNY","DRYHAZY","DRYCLOUDY","RAINNORMAL","RAINSHOWERS","SNOWNORMAL","SNOWFLURRIES","OVERCASTNORMAL","OVERCASTFOGGY"			
        // Disconnect and reservation timeouts should be long enough to allow matches to persist with only reservations, until they can be removed.
#if (ENV == "prod")		  
        "CreateGameRequest.gameCreationData.playerReservationTimeout"        = { default = "20d" }
        "CreateGameRequest.gameCreationData.disconnectReservationTimeout"    = { attrName = "DISCONNECT_RESERVATION_TIMEOUT", default = "7d" } // To help ensure cleanup, set to max active game duration.
#else
        "CreateGameRequest.gameCreationData.playerReservationTimeout"        = { default = "30m" }
        "CreateGameRequest.gameCreationData.disconnectReservationTimeout"    = { attrName = "DISCONNECT_RESERVATION_TIMEOUT", default = "30m" } // To help ensure cleanup, set to max active game duration.
#endif
    }
}