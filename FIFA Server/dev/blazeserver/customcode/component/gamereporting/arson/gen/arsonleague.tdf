[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

///////////////////////////////////////////////////////////////////////////////
//  ArsonLeague style reports
//
//      Submitted report TDFs. 
namespace ArsonLeague
{

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "League PlayerReport TDF that takes a variable TDF representing player data.",
    details = "This contains player and any other relevent data submitted by clients to game reporting."
]
class PlayerReport
{    
    [tag="scor", description="Player score"]
        int32_t score;
    [tag="hits", description="Number of hits"]
        int32_t hits;
    [tag="serv", description="Number of serves"]
        int32_t serves;
    [tag="miss", description="Number of misses"]
        int32_t misses;
    [tag="blks", description="Number of blocks"]
        int32_t blocks;
    [tag="rebs", description="Number of rebs"]
        int32_t rebs;
};

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Generic game attributes.",
    details = "This contains game data submitted by clients to game reporting."
]
class GameAttributes
{
    [tag="lgid", description="League id"]
        EntityId leagueId;
    [tag="isim", description="Indicates if the game is simulated or not"]
        int32_t isSim;
};

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Offensive Stats of Athlete for League.",
    details = "This contains offensive player stats."
]
class OffensiveStats
{
    [tag="game", description="Number of games played"]
        uint32_t games;
    [tag="time", description="Time played"]
        uint32_t time;
    [tag="hits", description="Number of hits"]
        uint32_t hits;
    [tag="pf", description="Points for"]
        uint32_t pf;
    [tag="serv", description="Number of serves"]
        uint32_t serves;
};

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Defensive Stats of Athlete for League.",
    details = "This contains defensive player stats."
]
class DefensiveStats
{
    [tag="game", description="Number of games played"]
        uint32_t games;
    [tag="time", description="Time played"]
        uint32_t time;
    [tag="miss", description="Number of hits"]
        uint32_t misses;
    [tag="bloc", description="Number of blocks"]
        uint32_t blocks;
    [tag="rebs", description="Number of rebounds"]
        uint32_t rebs;
};

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "Athlete game report for League.",
    details = "This contains the athlete offensive and defensive player stats.)"
]
class AthleteReport
{
    [tag="offs", description="Offensive stats of athlete."]
        OffensiveStats offensivePlayerStats;

    [tag="defs", description="Defensive stats of athlete."]
        DefensiveStats defensivePlayerStats;    
};

[
    tdfid = "hash",
    tdfregistration = "explicit",
    description = "The basis for a 2.x style game report.",
    details = "This contains the full game report, including client player and club reports.)"
]
class Report
{
    [tag="game", description="Game Attributes"]
    GameAttributes gameAttrs;

    [tag="plyr", description="Player Reports"]
    map<GameManager::PlayerId, PlayerReport> playerReports;     

    [tag="offs", description="Athlete Reports"]
    map<EntityId, AthleteReport> athleteReports;
};

} // namespace ArsonLeague


} // namespace GameReporting
} // namespace Blaze