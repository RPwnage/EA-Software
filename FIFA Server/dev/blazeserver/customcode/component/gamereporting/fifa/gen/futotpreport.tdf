[headername="gamereporting/tdf/gamereporting.h"]
#include "gamereporting/gen/gamereporting.tdf"

[headername="gamereporting/fifa/tdf/fifacommonplayerreport.h"]
#include "gamereporting/fifa/gen/fifacommonplayerreport.tdf"

[headername="gamereporting/fifa/tdf/fifaseasonalplayreport.h"]
#include "gamereporting/fifa/gen/fifaseasonalplayreport.tdf"

[headername="gamereporting/fifa/tdf/fifacommongamereport.h"]
#include "gamereporting/fifa/gen/fifacommongamereport.tdf"

namespace Blaze
{
[usePtrOption=true]
namespace GameReporting
{

///////////////////////////////////////////////////////////////////////////////
//  FUT OTP game report
//
//  Submitted report TDFs. 
namespace FutOTPReportBase
{

///////////////////////////////////////////////////////////////////////////////
//  FUT OTP Notification Report
//
//  Notification report TDFs. 
[
    tdfid = "hash",
    description = "FUT OTP custom data report notification TDF",
    details = "FUT OTP custom data report notification TDF"
]
class FUTOTPNotificationCustomGameData
{
    [tag="grid", description="The unique value assigned at the beginning of the game."]
    GameManager::GameReportingId gameReportingId;
};

///////////////////////////////////////////////////////////////////////////////
//  FUT OTP Game Report
///////////////////////////////////////////////////////////////////////////////

const uint32_t FIFA_MOM_MAX_LENGTH = 32;

const uint32_t TEAM_MAX_NAME_LENGTH = 64;

[
    tdfid = "hash",
    description = "Generic Game Report TDF that takes a variable TDF representing game data.",
    details = "FUT Online OTP game report report TDF"
]

class FutOTPGameReport
{   
   [tag="cmgr", description="Common Game report"]
    Blaze::GameReporting::Fifa::CommonGameReport mCommonGameReport;

    [tag="ccmm", description="mom game report"]
    string(FIFA_MOM_MAX_LENGTH) mom;
};

// Port from \blazeserver\customcode\component\gamereporting\fifa\gen\futreport_server.tdf
enum MatchResult
{
    IN_PROGRESS = 0,
    WIN = 1,
    LOSS = 2,
    DRAW = 3,
    DNF = 4,
    QUIT = 5,
    NO_CONTEST = 6,
    DNF_WIN = 7,
    DNF_DRAW = 8,
    DNF_LOSS = 9,
    DNF_OG = 10,
    DNF_AFK = 11,
    DNF_CONSTRAINED = 12,
    DNF_TEAMMATE_LEFT = 13
};


///////////////////////////////////////////////////////////////////////////////
//  FUT OTP Player Report
///////////////////////////////////////////////////////////////////////////////
[
    tdfid = "hash",
    description = "FUT OTP player game report takes a variable TDF representing player data.",
    details = "FUT OTP player report TDF"
]

class FutOTPPlayerReport
{  
    [tag="cmpr", description="Common player report"]
    Blaze::GameReporting::Fifa::CommonPlayerReport mCommonPlayerReport;

    [tag="spdt", description="Seasonal Play Data"]
    Blaze::GameReporting::Fifa::SeasonalPlayData mSeasonalPlayData;
  
    [tag="copo", description="Player position"]
    uint32_t pos;

    [tag="mtid", description="team entity id"]
    int64_t mTeamEntityId;   
      
    [tag="csha", description="Player any clean sheets count"]
    uint16_t cleanSheetsAny;
    
    [tag="cshd", description="Player defender clean sheets count"]
    uint16_t cleanSheetsDef;
    
    [tag="cshg", description="Player goal keeper clean sheets count"]
    uint16_t cleanSheetsGoalKeeper;
    
    [tag="cmom", description="Player man of match count"]
    uint16_t manOfTheMatch;
    
    [tag="iscp", description="Is Captain"]
    uint16_t mIsCaptain;

    // Port from H2HCustomPlayerData start
    [tag="tmrt", description="teamrating"]
    uint16_t teamrating;

    [tag="team", description="team"]
    uint32_t team;

    [tag="toti", description="tournamentTeamIndex"]
    uint16_t tournamentTeamIndex;

    [tag="kit", description="kit"]
    uint32_t kit;

    [tag="opid", description="opponent id"]
    int64_t opponentId;

    [tag="tnam", description="Player team name"]
    string(TEAM_MAX_NAME_LENGTH) teamName;

    [tag="shag", description="Player shot against count"]
    uint16_t shotsAgainst;

    [tag="shgl", description="Player shot against on goal count"]
    uint16_t shotsAgainstOnGoal;

    [tag="glag", description="Player goal against count"]
    uint16_t goalAgainst;

    [tag="ctrl", description="Player controls"]
    uint16_t controls;

    [tag="wnpk", description="game went to penalty"]
    uint16_t wentToPk;  
    // Port from H2HCustomPlayerData end


    [tag="uend", description="User's end match result - server calculated"]
    MatchResult mMatchResult;
};

///////////////////////////////////////////////////////////////////////////////
//  FUT OTP Team Report
///////////////////////////////////////////////////////////////////////////////
class FutOTPTeamReport
{  
    [tag="cmst", description="Common team report"]
    Blaze::GameReporting::Fifa::CommonPlayerReport mCommonTeamReport;
	
	[tag="sdic", description="squad disconnect"]
    uint32_t squadDisc;

    [tag="shom", description="squad home or away"]
    bool     home;

	[tag="srlt", description="squad game result"]
    uint32_t gameResult;

    [tag="sscr", description="squad score or points for count"]
    uint32_t score;

    [tag="swdf", description="squad winner by dnf"]
    uint8_t winnerByDnf;
        
    [tag="swin", description="squad wins"]
    uint8_t wins;

    [tag="slos", description="squad losses"]
    uint8_t losses;
    
    [tag="stie", description="squad ties"]
    uint8_t ties;
};
typedef map<int64_t, FutOTPTeamReport> FutOTPTeamReportMap;

class FutOTPTeamSummaryReport
{  
    [tag="strm", description="FUT OTP team reports"]
    FutOTPTeamReportMap mFutOTPTeamReportMap; 
};

} // namespace FutOTPReportBase
} // namespace GameReporting
} // namespace Blaze
